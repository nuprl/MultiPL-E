name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    def tri(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        if (n == 0) List(0)\n        else if (n == 1) List(1)\n   \
    \     else if (n % 2 == 0) List(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  else List(tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2))",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if\
    \ (n % 2 == 0) {\n            list.add(1 + n / 2)\n        }\n        else {\n\
    \            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n     \
    \   list.toList", "        val list = mutable.ListBuffer[Long]()\n        if (n\
    \ == 0) list += 0\n        else if (n == 1) list += 3\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "        if (n == 0) List(3)\n\
    \        else if (n % 2 == 0) List(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     else List(tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2))",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ fibs = mutable.ListBuffer(1, 1, 2)\n        val tris = mutable.ListBuffer[Long]()\n\
    \        fibs foreach { x =>\n            tris += tri(x - 1) + tri(x - 2) + tri(x\
    \ + 1)\n        }\n        tris.take(n + 1)", "        if (n == 0) List(3)\n \
    \       else if (n == 1) List(1)\n        else if (n % 2 == 0) List(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        else List(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 2) + tri(n + 1))", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val list = mutable.ListBuffer[Long]()\n     \
    \   if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "        val\
    \ list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n        else\
    \ if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", "       \
    \ val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (1\
    \ + n) / 2\n        fibs += (n - 1) + fibs(n - 2) + fibs(n + 1) \n        fibs.toList",
  "        val list = mutable.ListBuffer[Long]()\n        if (n <= 0) list\n     \
    \   else {\n            val a = tri(n - 1)\n            val b = tri(n - 2)\n \
    \           val c = tri(n + 1)\n            list += a\n            list += b\n\
    \            list += c\n        }\n        list.toList", "        val triList\
    \ = mutable.ListBuffer[Long]()\n        triList.add(3)\n        triList.add(triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last())\n     \
    \   triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last())\n        triList.add(triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + ", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.tail.head + fibs.tail.tail.head) \n        if (n <= 1)\
    \ fibs.toList\n        else tri(n - 1) + tri(n - 2) + tri(n + 1)", "        val\
    \ list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n        else\
    \ if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n    \
    \    else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        if (n % 2 == 0) {\n            list.add(1 + n /\
    \ 2)\n        }\n        else {\n            list.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val fibs = mutable.ListBuffer(1, 1, 2)\n    \
    \    fibs.take(n + 1).map(fibs.last)", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", "       \
    \ val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if (n %\
    \ 2 == 0) {\n            list.add(1 + n / 2)\n        }\n        else {\n    \
    \        list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else if (n % 2 == 0) list += tri(n\
    \ - 1) + tri(n - 2)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \        list.toList", "        val tri = mutable.ListBuffer[Long]()\n       \
    \ tri += 3\n        if (n % 2 == 0) {\n            tri += (tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        }\n        else {\n            tri += (tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        }\n        tri.toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n        val b = tri(n\
    \ - 2)\n        val c = tri(n + 1)\n        list += a\n        list += b\n   \
    \     list += c\n        list.toList", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += (fibonacci(1) + fibonacci(2))\n\
    \        fibonacci += (fibonacci(1) + fibonacci(2) + fibonacci(3))\n        fibonacci.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        val a\
    \ = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n + 1)\n     \
    \   list += a\n        list += b\n        list += c\n        list.toList", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n        fibs +=\
    \ (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val tri = mutable.ListBuffer[Long]()\n        tri +=\
    \ 3\n        tri += n / 2\n        tri += tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \        tri.toList", "        val list = mutable.ListBuffer[Long]()\n       \
    \ if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else if (n\
    \ % 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list +=\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", " \
    \       if (n == 0) List(3)\n        else if (n % 2 == 0) List(tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1))\n        else List(tri(n - 1) + tri(n - 2) + tri(n + 1))",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ list = mutable.ListBuffer[Long]()\n        if (n <= 0) list\n        else {\n\
    \            list += 3\n            if (n % 2 == 0) list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n            else list += tri(n - 1) + tri(n - 2)\n      \
    \  }\n        list.toList", "        if (n == 0) List(3)\n        else if (n ==\
    \ 1) List(1)\n        else if (n % 2 == 0) List(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1))\n        else List(tri(n - 1) + tri(n - 2) + tri(n + 1))", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val fib = new mutable.ListBuffer[Long]()\n\
    \        fib.append(0)\n        fib.append(1)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(3)\n        fib.append(5)\n        fib.append(8)\n\
    \        fib.append(13)\n        fib.append(21)\n        fib.append(34)\n    \
    \    fib.append(55)\n        fib.append(89)\n        fib.append(144)\n       \
    \ fib.append(233)\n        fib.append(377)\n        fib.append(610)\n        fib.append(987)\n\
    \        fib.append(1597)\n        fib.append(2584)\n        fib.append(4181)\n\
    \        fib.append(6765)\n        fib.append(10946)\n        fib.append(17711)\n\
    \        fib.append(28657)\n        fib.append(46368)\n        fib.append(75025)\n\
    \        fib.append(121393)\n        fib.append(196418)\n        fib.append(317811)\n\
    \        fib.append(514229)\n        fib.append(832050)\n        fib.append(1346269)\n\
    \        fib.append(2178309)\n        fib.append(3524578)\n        fib.append(5702887)\n\
    \        fib.append(9227465)\n        fib.append(14930352)\n        fib.append(24157817)\n\
    \        fib.append(39088169)\n        fib.append(63245986)\n        fib.append(102334155)\n\
    \        fib.append(165580141)\n        fib.append(267914296)\n        fib.append(433494437)\n\
    \        fib.append(701408733)\n        fib.append(1134903170)\n        fib.append(1836311903)\n\
    \        fib.append(3072771522)\n        fib.append(495176018)\n        fib.append(804435645)\n\
    \        fib.append(1309151649)\n        fib.append(1949126981)\n        fib.append(3172601395)\n\
    \        fib.append(514229663)\n        fib.append(832053729)\n        fib.append(1346269776)\n\
    \        fib.append(2178309193)\n        fib.append(352457827)\n        ", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last) / 2\n        fibs += (fibs.head + fibs.last + fibs.last)\
    \ / 2\n        fibs.take(n + 1)", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", "       \
    \ val fibonacci = mutable.ListBuffer(1,2)\n        val tribonacci = mutable.ListBuffer()\n\
    \        val tribonacci2 = mutable.ListBuffer()\n        val tribonacci3 = mutable.ListBuffer()\n\
    \        val tribonacci4 = mutable.ListBuffer()\n        val tribonacci5 = mutable.ListBuffer()\n\
    \        val tribonacci6 = mutable.ListBuffer()\n        val tribonacci7 = mutable.ListBuffer()\n\
    \        val tribonacci8 = mutable.ListBuffer()\n        val tribonacci9 = mutable.ListBuffer()\n\
    \        val tribonacci10 = mutable.ListBuffer()\n        val tribonacci11 = mutable.ListBuffer()\n\
    \        val tribonacci12 = mutable.ListBuffer()\n        val tribonacci13 = mutable.ListBuffer()\n\
    \        val tribonacci14 = mutable.ListBuffer()\n        val tribonacci15 = mutable.ListBuffer()\n\
    \        val tribonacci16 = mutable.ListBuffer()\n        val tribonacci17 = mutable.ListBuffer()\n\
    \        val tribonacci18 = mutable.ListBuffer()\n        val tribonacci19 = mutable.ListBuffer()\n\
    \        val tribonacci20 = mutable.ListBuffer()\n        val tribonacci21 = mutable.ListBuffer()\n\
    \        val tribonacci22 = mutable.ListBuffer()\n        val tribonacci23 = mutable.ListBuffer()\n\
    \        val tribonacci24 = mutable.ListBuffer()\n        val tribonacci25 = mutable.ListBuffer()\n\
    \        val tribonacci26 = mutable.ListBuffer()\n        val tribonacci27 = mutable.ListBuffer()\n\
    \        val tribonacci28 = mutable.ListBuffer()\n        val tribonacci29 = mutable.ListBuffer()\n\
    \        val tribonacci30 = mutable.ListBuffer()\n        val tribonacci31 = mutable.ListBuffer()\n\
    \        val tribonacci32 = mutable.ListBuffer()\n        val tribonacci33 = mutable.ListBuffer()\n\
    \        val tribonacci34 = mutable.ListBuffer()\n        val tribonacci35 = mutable.ListBuffer()\n\
    \        val tribonacci36 = mutable.ListBuffer()\n        val tribonacci", " \
    \       val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ if (n % 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.take(n +\
    \ 1).toList", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ fib = new mutable.ListBuffer[Long]()\n        fib.append(3)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(3)\n", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        if (n <= 1) fibs ++= List(1)\n        if (n <= 2)\
    \ fibs ++= List(2)\n        if (n <= 3) fibs ++= List(3)\n        if (n <= 4)\
    \ fibs ++= List(4)\n        if (n <= 5) fibs ++= List(5)\n        if (n <= 6)\
    \ fibs ++= List(6)\n        if (n <= 7) fibs ++= List(7)\n        if (n <= 8)\
    \ fibs ++= List(8)\n        if (n <= 9) fibs ++= List(9)\n        if (n <= 10)\
    \ fibs ++= List(10)\n        if (n <= 11) fibs ++= List(11)\n        if (n <=\
    \ 12) fibs ++= List(12)\n        if (n <= 13) fibs ++= List(13)\n        if (n\
    \ <= 14) fibs ++= List(14)\n        if (n <= 15) fibs ++= List(15)\n        if\
    \ (n <= 16) fibs ++= List(16)\n        if (n <= 17) fibs ++= List(17)\n      \
    \  if (n <= 18) fibs ++= List(18)\n        if (n <= 19) fibs ++= List(19)\n  \
    \      if (n <= 20) fibs ++= List(20)\n        if (n <= 21) fibs ++= List(21)\n\
    \        if (n <= 22) fibs ++= List(22)\n        if (n <= 23) fibs ++= List(23)\n\
    \        if (n <= 24) fibs ++= List(24)\n        if (n <= 25) fibs ++= List(25)\n\
    \        if (n <= 26) fibs ++= List(26)\n        if (n <= 27) fibs ++= List(27)\n\
    \        if (n <= 28) fibs ++= List(28)\n        if (n <= 29) fibs ++= List(29)\n\
    \        if (n <= 30) fibs ++= List(30)\n        if (n <= 31) fibs ++= List(31)\n\
    \        if (n <= 32) fibs ++= List(32)\n        if (n <= 33) fibs ++= List(33)\n\
    \        if (n <= 34) fibs ++= List(34)\n        if (n <= 35) fibs ++= List(35)\n\
    \        if (n <= 36) fibs ++= List(36)\n        if (n <= 37) fibs ++= List(37)\n\
    \        if (n <= 38) fibs ++= List(38)\n        if (n <= 39) fibs ++= List(39)\n\
    \        if (n <= 40) fibs ++= List(40)\n        if (n <= 41) fibs ++= ", "  \
    \      val list = new mutable.ListBuffer[Long]()\n        list.add(3)\n      \
    \  if (n % 2 == 0) {\n            list.add(1 + n / 2)\n        }\n        else\
    \ {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n \
    \       list.toList", "        val list = new mutable.ListBuffer[Long]()\n   \
    \     list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88", "        val fibs = mutable.ListBuffer[Long]()\n      \
    \  fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else {\n            val a = tri(n\
    \ - 1)\n            val b = tri(n - 2)\n            val c = tri(n + 1)\n     \
    \       list += a + b + c\n        }\n        list.toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        list.+=(n)\n        list.+=(n/2)\n   \
    \     list.+=(n/2+n/2)\n        list.+=(n/2+n/2+n/2)\n        list.+=(n/2+n/2+n/2+n/2)\n\
    \        list.+=(n/2+n/2+n/2+n/2+n/2)\n        list.+=(n/2+n/2+n/2+n/2+n/2+n/2)\n\
    \        list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n        list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n\
    \        list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n        list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n\
    \        list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n        list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n\
    \        list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n        list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n\
    \        list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n  \
    \      list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n    \
    \    list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n      \
    \  list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n    \
    \    list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n  \
    \      list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2+n/2)\n\
    \        list.+=(n/2+n/2+n/2+n/2+n/2+n/2+n/2+", "        val fibonacci = mutable.ListBuffer(1,2)\n\
    \        val tribonacci = mutable.ListBuffer(3)\n        val tribonacci2 = mutable.ListBuffer(3)\n\
    \        val tribonacci3 = mutable.ListBuffer(3)\n        val tribonacci4 = mutable.ListBuffer(3)\n\
    \        val tribonacci5 = mutable.ListBuffer(3)\n        val tribonacci6 = mutable.ListBuffer(3)\n\
    \        val tribonacci7 = mutable.ListBuffer(3)\n        val tribonacci8 = mutable.ListBuffer(3)\n\
    \        val tribonacci9 = mutable.ListBuffer(3)\n        val tribonacci10 = mutable.ListBuffer(3)\n\
    \        val tribonacci11 = mutable.ListBuffer(3)\n        val tribonacci12 =\
    \ mutable.ListBuffer(3)\n        val tribonacci13 = mutable.ListBuffer(3)\n  \
    \      val tribonacci14 = mutable.ListBuffer(3)\n        val tribonacci15 = mutable.ListBuffer(3)\n\
    \        val tribonacci16 = mutable.ListBuffer(3)\n        val tribonacci17 =\
    \ mutable.ListBuffer(3)\n        val tribonacci18 = mutable.ListBuffer(3)\n  \
    \      val tribonacci19 = mutable.ListBuffer(3)\n        val tribonacci20 = mutable.ListBuffer(3)\n\
    \        val tribonacci21 = mutable.ListBuffer(3)\n        val tribonacci22 =\
    \ mutable.ListBuffer(3)\n        val tribonacci23 = mutable.ListBuffer(3)\n  \
    \      val tribonacci24 = mutable.ListBuffer(3)\n        val tribonacci25 = mutable.ListBuffer(3)\n\
    \        val tribonacci26 = mutable.ListBuffer(3)\n        val tribonacci27 =\
    \ mutable.ListBuffer(3)\n        val tribonacci28 = mutable.ListBuffer(3)\n  \
    \      val tribonacci29 = mutable.ListBuffer(3)\n        val tribonacci30 = mutable.ListBuffer(3)\n\
    \        val tribonacci31 = mutable.ListBuffer(3)\n        val tribonacci32 =\
    \ mutable.ListBuffer(3)\n        val tribonacci33 = mutable.ListBuffer(3)\n  \
    \      val tribonacci34 = mutable.ListBuffer(3)\n        val tribonacci35 = mutable.ListBuffer(3)\n\
    \        val tribonacci36 = mutable.ListBuffer(3)\n        val tribonacci", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n+1).toList", "        val fibs\
    \ = mutable.ListBuffer(1,3,5)\n        val fibs2: List[Long] = fibs.take(n+1).reverse\n\
    \        fibs2", "        val list = mutable.ListBuffer[Long]()\n        if (n\
    \ == 0) list += 0\n        else if (n == 1) list += 3\n        else if (n % 2\
    \ == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ fibonacci = mutable.ListBuffer(1,2)\n        val tribonacci = mutable.ListBuffer()\n\
    \        val tribonacci2 = mutable.ListBuffer()\n        val tribonacci3 = mutable.ListBuffer()\n\
    \        val tribonacci4 = mutable.ListBuffer()\n        val tribonacci5 = mutable.ListBuffer()\n\
    \        val tribonacci6 = mutable.ListBuffer()\n        val tribonacci7 = mutable.ListBuffer()\n\
    \        val tribonacci8 = mutable.ListBuffer()\n        val tribonacci9 = mutable.ListBuffer()\n\
    \        val tribonacci10 = mutable.ListBuffer()\n        val tribonacci11 = mutable.ListBuffer()\n\
    \        val tribonacci12 = mutable.ListBuffer()\n        val tribonacci13 = mutable.ListBuffer()\n\
    \        val tribonacci14 = mutable.ListBuffer()\n        val tribonacci15 = mutable.ListBuffer()\n\
    \        val tribonacci16 = mutable.ListBuffer()\n        val tribonacci17 = mutable.ListBuffer()\n\
    \        val tribonacci18 = mutable.ListBuffer()\n        val tribonacci19 = mutable.ListBuffer()\n\
    \        val tribonacci20 = mutable.ListBuffer()\n        val tribonacci21 = mutable.ListBuffer()\n\
    \        val tribonacci22 = mutable.ListBuffer()\n        val tribonacci23 = mutable.ListBuffer()\n\
    \        val tribonacci24 = mutable.ListBuffer()\n        val tribonacci25 = mutable.ListBuffer()\n\
    \        val tribonacci26 = mutable.ListBuffer()\n        val tribonacci27 = mutable.ListBuffer()\n\
    \        val tribonacci28 = mutable.ListBuffer()\n        val tribonacci29 = mutable.ListBuffer()\n\
    \        val tribonacci30 = mutable.ListBuffer()\n        val tribonacci31 = mutable.ListBuffer()\n\
    \        val tribonacci32 = mutable.ListBuffer()\n        val tribonacci33 = mutable.ListBuffer()\n\
    \        val tribonacci34 = mutable.ListBuffer()\n        val tribonacci35 = mutable.ListBuffer()\n\
    \        val tribonacci36 = mutable.ListBuffer()\n        val tribonacci", " \
    \       val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 3\n        fibs += (fibs(0)\
    \ - fibs(1)) + (fibs(0) - fibs(2)) + (fibs(1) - fibs(2))\n        fibs.take(n\
    \ + 1).toList", "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci\
    \ += 3\n        fibonacci += (fibonacci.head + fibonacci.last) / 2\n        fibonacci\
    \ += (fibonacci.head + fibonacci.last + fibonacci.last) / 2\n        fibonacci.take(n\
    \ + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n        fibs +=\
    \ 3\n        fibs += (1 + n) / 2\n        if (n % 2 == 0) {\n            fibs\
    \ += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n        else {\n     \
    \       fibs += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n        fibs.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        if (n == 0) result ++= List(0)\n\
    \        else if (n == 1) result ++= List(1)\n        else if (n % 2 == 0) result\
    \ ++= tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else result ++= tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        result.toList", "        if\
    \ (n == 0) List(3)\n        if (n == 1) List(1)\n        if (n % 2 == 0) List(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        else List(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))", "        val fibs = mutable.ListBuffer[Long]()\n        fibs +=\
    \ 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList", "  \
    \      val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last) / 2\n        fibs.take(n + 1)", "   \
    \     val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs +=\
    \ (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n        val b = tri(n\
    \ - 2)\n        val c = tri(n + 1)\n        list += a\n        list += b\n   \
    \     list += c\n        list.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        result ++= a ++ b ++ c\n        result.toList", "        if (n\
    \ == 0) List(0)\n        else if (n == 1) List(1)\n        else if (n == 2) List(1,\
    \ 2)\n        else if (n % 2 == 0) List(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        else List(tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(", " \
    \       val list = mutable.ListBuffer[Long]()\n        val a = 2\n        val\
    \ b = 3\n        val c = a + b\n        val d = c + a\n        val e = d + b\n\
    \        val f = e + c\n        val g = f + d\n        val h = g + e\n       \
    \ val i = h + f\n        val j = i + g\n        val k = j + h\n        val l =\
    \ k + i\n        list += a\n        list += b\n        list += c\n        list\
    \ += d\n        list += e\n        list += f\n        list += g\n        list\
    \ += h\n        list += i\n        list += j\n        list += k\n        list\
    \ += l\n        list.toList", "        if (n == 0) List(3)\n        else if (n\
    \ % 2 == 0) List(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        else List(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += (fibonacci(1) + fibonacci(2))\n\
    \        fibonacci += (fibonacci(1) + fibonacci(2) + fibonacci(3))\n        fibonacci.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).toList", "        val fibs\
    \ = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n+1).toList", '        val fib : List[Long]
    = List(0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571273,139583862445,225851433717,365435296162,591286729871,956722026041,15480087559203,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,21873054273621,36543617761245,59111386261751,94948577805161,144723340246799,241665348449073,390881699009845,63245977587641,102334157763744,165580142296653,267914296347461,433494437164857,701408733488945,1134903170049893,1836311903238803,2971215073098755,4807526976701775,777874204917641,12586269025241665,2036501107377091,32951280099009845,5331629117587641,8626757127334889,1395838624465773,2258514337177612,36543529616241665,59128672987108765,95672202604164857,15480087559203655,250473078196164857,405273953788164857,655747031984241665,',
  "        val fibs = mutable.ListBuffer(0,1,1,2)\n        fibs.take(n+1).map(fibs.last)",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n        fibonacci\
    \ += (fibonacci.head + fibonacci.last) / 2\n        fibonacci += (fibonacci.head\
    \ + fibonacci.last + fibonacci.last) / 2\n        fibonacci.take(n + 1)", "  \
    \      val fib : List[Long] = List(1, 3)\n        val tri : List[Long] = List(1)\n\
    \        val result : List[Long] = List()\n        if (n == 0) result\n      \
    \  else {\n            if (n % 2 == 0) tri :+ tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n            else tri :+ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2)\n        }", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        list.add(1)\n        list.add(2)\n        list.add(3)\n        list.add(4)\n\
    \        list.add(5)\n        list.add(6)\n        list.add(7)\n        list.add(8)\n\
    \        list.add(9)\n        list.add(10)\n        list.add(11)\n        list.add(12)\n\
    \        list.add(13)\n        list.add(14)\n        list.add(15)\n        list.add(16)\n\
    \        list.add(17)\n        list.add(18)\n        list.add(19)\n        list.add(20)\n\
    \        list.add(21)\n        list.add(22)\n        list.add(23)\n        list.add(24)\n\
    \        list.add(25)\n        list.add(26)\n        list.add(27)\n        list.add(28)\n\
    \        list.add(29)\n        list.add(30)\n        list.add(31)\n        list.add(32)\n\
    \        list.add(33)\n        list.add(34)\n        list.add(35)\n        list.add(36)\n\
    \        list.add(37)\n        list.add(38)\n        list.add(39)\n        list.add(40)\n\
    \        list.add(41)\n        list.add(42)\n        list.add(43)\n        list.add(44)\n\
    \        list.add(45)\n        list.add(46)\n        list.add(47)\n        list.add(48)\n\
    \        list.add(49)\n        list.add(50)\n        list.add(51)\n        list.add(52)\n\
    \        list.add(53)\n        list.add(54)\n        list.add(55)\n        list.add(56)\n\
    \        list.add(57)\n        list.add(58)\n        list.add(59)\n        list.add(60)\n\
    \        list.add(61)\n        list.add(62)\n        list.add(63)\n        list.add(64)\n\
    \        list.add(65)\n        list.add(66)\n        list.add(67)\n        list.add(68)\n\
    \        list.add(69)\n        list.add(70)\n        list.add(71)\n        list.add(72)\n\
    \        list.add(73)\n        list.add(74)\n        list.add(75)\n        list.add(76)\n\
    \        list.add(77)\n        list.add(78)\n        list.add(79)\n        list.add(80)\n\
    \        list.add(81)\n        list.add(82)\n        list.add(83)\n        list.add(84)\n\
    \        list.add(85)\n        list.add(86)\n        list.add(87)\n        list.add(88)",
  "        val fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 3\n       \
    \ fibs += (fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if\
    \ (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        } else {\n            list.add(tri(n - 1) + tri(n - 2))\n        }\n\
    \        list.toList", "        val triList = mutable.ListBuffer[Long]()\n   \
    \     triList += 3\n        if (n % 2 == 0) {\n            triList += tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n        } else {\n            triList += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        }\n        triList.toList", "      \
    \  val list = new mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        if (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2)\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head)\
    \ / 2\n        fibs += (fibs.head + fibs.last + fibs.drop(2).head) / 3\n     \
    \   fibs.take(n + 1)", "        val fibs = mutable.ListBuffer[Long]()\n      \
    \  fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if\
    \ (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        } else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        }\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n        fibs +=\
    \ 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs += (fibs.head +\
    \ fibs.last + fibs.last) / 2\n        fibs.take(n + 1).toList", "        if (n\
    \ == 0) List(0)\n        else if (n == 1) List(1)\n        else if (n % 2 == 0)\
    \ List(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        else List(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2))", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        result ++= a\n        result ++= b\n        result ++= c\n   \
    \     result.toList", "        val fibs = mutable.ListBuffer[Long]()\n       \
    \ fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs\
    \ += (fibs.last + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n   \
    \     list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n        else\
    \ if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n        list.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) result ++= List(0)\n        else if (n == 1) result ++= List(1)\n\
    \        else if (n % 2 == 0) result ++= tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \        else result ++= tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \       result.toList", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += (fibonacci(1) + fibonacci(2))\n\
    \        fibonacci += (fibonacci(1) + fibonacci(2) - fibonacci(3))\n        fibonacci.toList",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        list.toList", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += fibonacci.last\n        fibonacci\
    \ += fibonacci.last\n        fibonacci += fibonacci.last\n        fibonacci.take(n\
    \ + 1).toList", "        val list = new mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        list.add(1)\n        list.add(2)\n        list.add(3)\n        list.add(4)\n\
    \        list.add(5)\n        list.add(6)\n        list.add(7)\n        list.add(8)\n\
    \        list.add(9)\n        list.add(10)\n        list.add(11)\n        list.add(12)\n\
    \        list.add(13)\n        list.add(14)\n        list.add(15)\n        list.add(16)\n\
    \        list.add(17)\n        list.add(18)\n        list.add(19)\n        list.add(20)\n\
    \        list.add(21)\n        list.add(22)\n        list.add(23)\n        list.add(24)\n\
    \        list.add(25)\n        list.add(26)\n        list.add(27)\n        list.add(28)\n\
    \        list.add(29)\n        list.add(30)\n        list.add(31)\n        list.add(32)\n\
    \        list.add(33)\n        list.add(34)\n        list.add(35)\n        list.add(36)\n\
    \        list.add(37)\n        list.add(38)\n        list.add(39)\n        list.add(40)\n\
    \        list.add(41)\n        list.add(42)\n        list.add(43)\n        list.add(44)\n\
    \        list.add(45)\n        list.add(46)\n        list.add(47)\n        list.add(48)\n\
    \        list.add(49)\n        list.add(50)\n        list.add(51)\n        list.add(52)\n\
    \        list.add(53)\n        list.add(54)\n        list.add(55)\n        list.add(56)\n\
    \        list.add(57)\n        list.add(58)\n        list.add(59)\n        list.add(60)\n\
    \        list.add(61)\n        list.add(62)\n        list.add(63)\n        list.add(64)\n\
    \        list.add(65)\n        list.add(66)\n        list.add(67)\n        list.add(68)\n\
    \        list.add(69)\n        list.add(70)\n        list.add(71)\n        list.add(72)\n\
    \        list.add(73)\n        list.add(74)\n        list.add(75)\n        list.add(76)\n\
    \        list.add(77)\n        list.add(78)\n        list.add(79)\n        list.add(80)\n\
    \        list.add(81)\n        list.add(82)\n        list.add(83)\n        list.add(84)\n\
    \        list.add(85)\n        list.add(86)\n        list.add(87)\n        list.add(88",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if (n % 2 ==\
    \ 0) {\n            list.add(1 + n / 2)\n        }\n        else {\n         \
    \   list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if\
    \ (n % 2 == 0) {\n            list.add(1 + n / 2)\n        }\n        else {\n\
    \            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n     \
    \   list.toList", "        val list = mutable.ListBuffer[Long]()\n        val\
    \ a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n + 1)\n   \
    \     list += a\n        list += b\n        list += c\n        list.toList", " \
    \       val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        if (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2)\n        list.toList", "        val fib : List[Long] = List(1)\n\
    \        val tri : List[Long] = List(1)\n        val result : List[Long] = List(1)\n\
    \        val temp : List[Long] = List(1)\n        val temp2 : List[Long] = List(1)\n\
    \        val temp3 : List[Long] = List(1)\n        val temp4 : List[Long] = List(1)\n\
    \        val temp5 : List[Long] = List(1)\n        val temp6 : List[Long] = List(1)\n\
    \        val temp7 : List[Long] = List(1)\n        val temp8 : List[Long] = List(1)\n\
    \        val temp9 : List[Long] = List(1)\n        val temp10 : List[Long] = List(1)\n\
    \        val temp11 : List[Long] = List(1)\n        val temp12 : List[Long] =\
    \ List(1)\n        val temp13 : List[Long] = List(1)\n        val temp14 : List[Long]\
    \ = List(1)\n        val temp15 : List[Long] = List(1)\n        val temp16 : List[Long]\
    \ = List(1)\n        val temp17 : List[Long] = List(1)\n        val temp18 : List[Long]\
    \ = List(1)\n        val temp19 : List[Long] = List(1)\n        val temp20 : List[Long]\
    \ = List(1)\n        val temp21 : List[Long] = List(1)\n        val temp22 : List[Long]\
    \ = List(1)\n        val temp23 : List[Long] = List(1)\n        val temp24 : List[Long]\
    \ = List(1)\n        val temp25 : List[Long] = List(1)\n        val temp26 : List[Long]\
    \ = List(1)\n        val temp27 : List[Long] = List(1)\n        val temp28 : List[Long]\
    \ = List(1)\n        val temp29 : List[Long] = List(1)\n        val temp30 : List[Long]\
    \ = List(1)\n        val temp31 : List[Long] = List(1)\n        val temp32 : List[Long]\
    \ = List(1)\n        val temp33 : List[Long] = List(1)\n        val temp34 : List[Long]\
    \ = List(1)\n        val temp35 : List[Long] = List(1)\n        val temp36 : List[Long]\
    \ = List(1)\n        val temp37 : List[Long] = List(1)\n        val temp38 : List[Long]\
    \ = List(1)\n        val temp39 : List[Long] = List(1)\n        val temp40 : List[Long]\
    \ = List(1)\n        val temp41 : List[Long] = List(1)\n        val temp42 : List[Long]\
    \ = List(1)\n        val temp43 : List[Long] = List(1)\n        val temp44 : List[Long]\
    \ = List(1)\n        val temp45 : List[", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        if (n <= 1) fibs ++= List(1)\n        else {\n   \
    \         fibs += (fibs(0) - fibs(1)) + (fibs(0) - fibs(2)) + (fibs(1) + fibs(2))\n\
    \        }\n        fibs.toList", "        val triList = mutable.ListBuffer[Long]()\n\
    \        triList += 3\n        triList += triList.last\n        triList += triList.last\
    \ + triList.last\n        triList += triList.last + triList.last + triList.last\n\
    \        triList.take(n + 1).toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val fib = new mutable.ListBuffer[Long]()\n        fib.append(0)\n   \
    \     fib.append(1)\n        fib.append(2)\n        fib.append(3)\n        fib.append(4)\n\
    \        fib.append(5)\n        fib.append(6)\n        fib.append(7)\n       \
    \ fib.append(8)\n        fib.append(9)\n        fib.append(10)\n        fib.append(11)\n\
    \        fib.append(12)\n        fib.append(13)\n        fib.append(14)\n    \
    \    fib.append(15)\n        fib.append(16)\n        fib.append(17)\n        fib.append(18)\n\
    \        fib.append(19)\n        fib.append(20)\n        fib.append(21)\n    \
    \    fib.append(22)\n        fib.append(23)\n        fib.append(24)\n        fib.append(25)\n\
    \        fib.append(26)\n        fib.append(27)\n        fib.append(28)\n    \
    \    fib.append(29)\n        fib.append(30)\n        fib.append(31)\n        fib.append(32)\n\
    \        fib.append(33)\n        fib.append(34)\n        fib.append(35)\n    \
    \    fib.append(36)\n        fib.append(37)\n        fib.append(38)\n        fib.append(39)\n\
    \        fib.append(40)\n        fib.append(41)\n        fib.append(42)\n    \
    \    fib.append(43)\n        fib.append(44)\n        fib.append(45)\n        fib.append(46)\n\
    \        fib.append(47)\n        fib.append(48)\n        fib.append(49)\n    \
    \    fib.append(50)\n        fib.append(51)\n        fib.append(52)\n        fib.append(53)\n\
    \        fib.append(54)\n        fib.append(55)\n        fib.append(56)\n    \
    \    fib.append(57)\n        fib.append(58)\n        fib.append(59)\n        fib.append(60)\n\
    \        fib.append(61)\n        fib.append(62)\n        fib.append(63)\n    \
    \    fib.append(64)\n        fib.append(65)\n        fib.append(66)\n        fib.append(67)\n\
    \        fib.append(68)\n        fib.append(69)\n        fib.append(70)\n    \
    \    fib.append(71)\n        fib.append(72)\n        fib.append(73)", "      \
    \  val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n      \
    \  fibonacci += fibonacci.last\n        fibonacci += fibonacci.last\n        fibonacci\
    \ += fibonacci.last\n        fibonacci.take(n+1)", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val list = mutable.ListBuffer[Long]()\n     \
    \   list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val first = 3\n        val second = 1\n        val third = 1\n      \
    \  val fourth = 1\n        val fifth = 1\n        val sixth = 1\n        val seventh\
    \ = 1\n        val eighth = 1\n        val nineth = 1\n        val tenth = 1\n\
    \        val eleventh = 1\n        val twelfth = 1\n        val thirteenth = 1\n\
    \        val fourteenth = 1\n        val fifteenth = 1\n        val sixteenth\
    \ = 1\n        val seventeenth = 1\n        val eighteenth = 1\n        val nineteenth\
    \ = 1\n        val twentieth = 1\n        val thirtieth = 1\n        val fourtieth\
    \ = 1\n        val fiftieth = 1\n        val sixtieth = 1\n        val seventieth\
    \ = 1\n        val eightieth = 1\n        val ninetieth = 1\n        val twentyeth\
    \ = 1\n        val thirtyeth = 1\n        val fortyeth = 1\n        val fiftyeth\
    \ = 1\n        val sixtyeth = 1\n        val seventyeth = 1\n        val eightyeth\
    \ = 1\n        val ninetyeth = 1\n        val hundredth = 1\n        val thousandth\
    \ = 1\n        val millionth = 1\n        val billionth = 1\n        val trillionth\
    \ = 1\n        val quadrillionth = 1\n        val quintillionth = 1\n        val\
    \ sextillionth = 1\n        val septillionth = 1\n        val octillionth = 1\n\
    \        val nonillionth = 1\n        val decillionth = 1\n        val undecillionth\
    \ = 1\n        val duodecillionth = 1\n        val tredecillionth = 1\n      \
    \  val quattuordecillionth = 1\n        val quindecillionth = 1\n        val sexdecillionth\
    \ = 1\n        val septendecillionth = 1\n        val octodecillionth = 1\n  \
    \      val novemdecillionth = 1\n        val vigintillionth = 1\n        val unvigintillionth\
    \ = 1\n        val duovigintillionth = 1\n        val trevigintillionth = 1\n\
    \        val quattuorvigintillionth = 1\n        val quinvigintillionth = 1\n\
    \        val sexvigintillionth = 1\n        val sep", "        if (n == 0) List(3)\n\
    \        else if (n == 1) List(1)\n        else if (n % 2 == 0) List(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        else List(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))", "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n\
    \        fibs += (fibs.head + fibs.last) / 2\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last) / 2\n        fibs.take(n + 1).toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n    \
    \    else if (n == 1) list += 3\n        else {\n            val a = tri(n - 1)\n\
    \            val b = tri(n - 2)\n            val c = tri(n + 1)\n            list\
    \ += a\n            list += b\n            list += c\n        }\n        list.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        if (n == 0) result\
    \ += 0\n        else if (n == 1) result += 3\n        else {\n            val\
    \ first = (3 * n) / 2 - 1\n            val second = (3 * n) / 2 + 1\n        \
    \    val third = (3 * n) + 1\n            result += first\n            result\
    \ += second\n            result += third\n        }\n        return result.toList",
  "        val triList = mutable.ListBuffer[Long]()\n        triList.add(3)\n    \
    \    triList.add(triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last())\n     \
    \   triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last())\n     \
    \   triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last())\n        triList.add(triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + ", "        val fibs = mutable.ListBuffer[Long]()\n     \
    \   fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).toList", "        val fibs\
    \ = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.dropRight(1).head).toLong\n        fibs.take(n + 1).toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if\
    \ (n % 2 == 0) {\n            list.add(1 + n / 2)\n        }\n        else {\n\
    \            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n     \
    \   list.toList", "        val triList = mutable.ListBuffer[Long]()\n        triList.add(3)\n\
    \        if (n % 2 == 0) {\n            triList.add(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n        } else {\n            triList.add(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n - 3) + tri(n - 4))\n        }\n        triList.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        if (n % 2 == 0) {\n            list.add(n / 2)\n        } else {\n  \
    \          list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n       \
    \ list.toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        if (n % 2 == 0) {\n            list.add(1 + n / 2)\n        } else {\n\
    \            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n     \
    \   list.toList", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   val fib = new mutable.ListBuffer[Long]()\n        fib.append(0)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(3)\n        fib.append(4)\n       \
    \ fib.append(5)\n        fib.append(6)\n        fib.append(7)\n        fib.append(8)\n\
    \        fib.append(9)\n        fib.append(10)\n        fib.append(11)\n     \
    \   fib.append(12)\n        fib.append(13)\n        fib.append(14)\n        fib.append(15)\n\
    \        fib.append(16)\n        fib.append(17)\n        fib.append(18)\n    \
    \    fib.append(19)\n        fib.append(20)\n        fib.append(21)\n        fib.append(22)\n\
    \        fib.append(23)\n        fib.append(24)\n        fib.append(25)\n    \
    \    fib.append(26)\n        fib.append(27)\n        fib.append(28)\n        fib.append(29)\n\
    \        fib.append(30)\n        fib.append(31)\n        fib.append(32)\n    \
    \    fib.append(33)\n        fib.append(34)\n        fib.append(35)\n        fib.append(36)\n\
    \        fib.append(37)\n        fib.append(38)\n        fib.append(39)\n    \
    \    fib.append(40)\n        fib.append(41)\n        fib.append(42)\n        fib.append(43)\n\
    \        fib.append(44)\n        fib.append(45)\n        fib.append(46)\n    \
    \    fib.append(47)\n        fib.append(48)\n        fib.append(49)\n        fib.append(50)\n\
    \        fib.append(51)\n        fib.append(52)\n        fib.append(53)\n    \
    \    fib.append(54)\n        fib.append(55)\n        fib.append(56)\n        fib.append(57)\n\
    \        fib.append(58)\n        fib.append(59)\n        fib.append(60)\n    \
    \    fib.append(61)\n        fib.append(62)\n        fib.append(63)\n        fib.append(64)\n\
    \        fib.append(65)\n        fib.append(66)\n        fib.append(67)\n    \
    \    fib.append(68)\n        fib.append(69)\n        fib.append(70)\n        fib.append(71)\n\
    \        fib.append(72)\n        fib.append(73)", "        val triList = new mutable.ListBuffer[Long]()\n\
    \        triList.add(3)\n        triList.add(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        triList.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n <= 1) {\n            list += n\n        } else {\n            list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        }\n        list.toList", " \
    \       val list = new mutable.ListBuffer[Long]()\n        list.add(3)\n     \
    \   if (n <= 1) list\n        else {\n            val mid = n / 2\n          \
    \  val left = tri(mid)\n            val right = tri(mid - 1) + tri(mid - 2) +\
    \ tri(mid + 1) \n            list ++= left + right\n        }", "        val list\
    \ = mutable.ListBuffer[Long]()\n        list.add(3)\n        if (n % 2 == 0) {\n\
    \            list.add(1)\n            list.add(n / 2)\n        } else {\n    \
    \        list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n        list.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).toList", "        val list\
    \ = new mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88", "        val\
    \ fib : List[Long] = List(1, 3)\n        val tri : List[Long] = List(0)\n    \
    \    val tri_1 : List[Long] = List(1)\n        val tri_2 : List[Long] = List(2)\n\
    \        val tri_3 : List[Long] = List(3, 4)\n        val tri_4 : List[Long] =\
    \ List(5, 6, 7)\n        val tri_5 : List[Long] = List(8, 9)\n        val tri_6\
    \ : List[Long] = List(10, 11, 12)\n        val tri_7 : List[Long] = List(13, 14,\
    \ 15)\n        val tri_8 : List[Long] = List(16, 17, 18)\n        val tri_9 :\
    \ List[Long] = List(19, 20, 21)\n        val tri_10: List[Long] = List(22, 23,\
    \ 24)\n        val tri_11: List[Long] = List(25, 26, 27)\n        val tri_12:\
    \ List[Long] = List(28, 29, 30)\n        val tri_13: List[Long] = List(1, 3, 5)\n\
    \        val tri_14: List[Long] = List(2, 4, 6)\n        val tri_15: List[Long]\
    \ = List(3, 5, 7)\n        val tri_16: List[Long] = List(4, 5, 8)\n        val\
    \ tri_17: List[Long] = List(5, 6, 9)\n        val tri_18: List[Long] = List(6,\
    \ 7, 10)\n        val tri_19: List[Long] = List(7, 8, 11)\n        val tri_20:\
    \ List[Long] = List(8, 9, 12)\n        val tri_21: List[Long] = List(9, 10, 13)\n\
    \        val tri_22: List[Long] = List(10, 11, 14)\n        val tri_23: List[Long]\
    \ = List(11, 12, 15)\n        val tri_24: List[Long] = List(12, 13, 16)\n    \
    \    val tri_25: List[Long] = List(13, 14, 17)\n        val tri_26: List[Long]\
    \ = List(14, 15, 18)\n        val tri_27: List[Long] = List(15, 16, 19)\n    \
    \    val tri_28: List[Long] = List(16, 17, 20)\n        val tri_29: List[Long]\
    \ = List(17, 18, 21)\n        val tri_30: List[Long] = List(18, 19, 22)\n    \
    \    val tri_31: List[Long] = List(19, 20, 23)\n        val tri_32: List[Long]\
    \ = List(20, 21, 24)\n        val tri_33: List[Long] = List(21, 22, 25)\n    \
    \    val tri_34: List[Long] = List(22, 23, 26)\n        val tri_35: List[Long]\
    \ = List(23, 24, 27)\n        val tri_36: List[Long] = List(24, 25, 28)\n    \
    \    val tri_37: List[Long] = List(25, 26, 29)\n        val tri_38: List[Long]\
    \ = ", "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n   \
    \     fibs += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList", "  \
    \      if (n == 0) List(0)\n        else if (n == 1) List(1)\n        else if\
    \ (n % 2 == 0) List(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        else List(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), ", " \
    \       val list = mutable.ListBuffer[Long]()\n        val first = (3 until n).map(x\
    \ => x).sum\n        val second = (1 until n).map(x => x).sum\n        val third\
    \ = (2 until n).map(x => x).sum\n        list += first\n        list += second\n\
    \        list += third\n        list.toList", "        val tri = mutable.ListBuffer[Long]()\n\
    \        tri += 3\n        tri += tri(n - 1) + tri(n - 2) + tri(n + 1)\n     \
    \   tri.toList", "        val triList = mutable.ListBuffer[Long]()\n        triList.add(3)\n\
    \        triList.add(triList.last() + triList.last() + triList.last())\n     \
    \   triList.add(triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last())\n        triList.add(triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last())\n        triList.add(triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last())\n        triList.add(triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last())\n     \
    \   triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last())\n        triList.add(triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + ", "        val fibonacci = mutable.ListBuffer(1,2)\n\
    \        val tribonacci = mutable.ListBuffer.empty[Long]\n        \n        for(i\
    \ <- 1 to n){\n            tribonacci += fibonacci.head\n            fibonacci\
    \ += fibonacci.tail\n        }\n        \n        tribonacci.toList", "      \
    \  val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if (n %\
    \ 2 == 0) {\n            list.add(1)\n            list.add(n / 2)\n        } else\
    \ {\n            list.add(1)\n            list.add(n / 2)\n            list.add(n\
    \ / 2 + 1)\n        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ if (n % 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head)\
    \ / 2\n        fibs += (fibs.head + fibs.last + fibs.drop(2).head) / 2\n     \
    \   fibs += (fibs.head + fibs.last + fibs.drop(3).head) / 2\n        fibs.take(n\
    \ + 1)", "        if (n == 0) List(3)\n        else if (n % 2 == 0) List(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        else List(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1), tri(n - 1) + tri(n - 2))", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val fibonacci = mutable.ListBuffer(0,1)\n        val tribonacci = mutable.ListBuffer()\n\
    \        fibonacci.take(n).foreach(x => tribonacci += x)\n        tribonacci.take(n+1).foreach(x\
    \ => tribonacci += x)\n        tribonacci.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", "       \
    \ val triList = mutable.ListBuffer[Long]()\n        triList.add(3)\n        triList.add(triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last())\n     \
    \   triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last())\n        triList.add(triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + ", " \
    \       val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if\
    \ (n % 2 == 0) {\n            list.add(1 + n / 2)\n        }\n        else {\n\
    \            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n     \
    \   list.toList", "        val list = mutable.ListBuffer[Long]()\n        if (n\
    \ == 0) list += 0\n        else if (n == 1) list += 3\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "        val tri = mutable.ListBuffer[Long]()\n\
    \        tri += 3\n        if (n % 2 == 0) {\n            tri += (tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        }\n        else {\n            tri += (tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        }\n        tri.toList", "        val\
    \ list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n      \
    \  val b = tri(n - 2)\n        val c = tri(n + 1)\n        result ++= a\n    \
    \    result ++= b\n        result ++= c\n        result.toList", "        val\
    \ list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if (n % 2 ==\
    \ 0) {\n            list.add(1 + n / 2)\n        } else {\n            list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        }\n        list.toList", "        val\
    \ fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 3\n        fibs += (fibs(0)\
    \ - fibs(1) + fibs(2)) / 2 \n        fibs.take(n + 1).toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        if (n <= 1) {\n            list += n\n\
    \        } else {\n            list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.+=(n+3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n  \
    \      list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n\
    \        list.+=((n+3)/3)\n        list.+=((n+3)/3)\n        list.+=", "     \
    \   val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs +=\
    \ (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n        fibs += (fibs.head\
    \ + fibs.last + fibs.dropRight(2).head).toLong\n        fibs.take(n + 1).toList",
  "        val fibonacci = mutable.ListBuffer(1,2)\n        val tribonacci = mutable.ListBuffer()\n\
    \        \n        for(i <- 1 to n){\n            tribonacci += fibonacci.last\n\
    \            fibonacci += fibonacci.last\n        }\n        \n        tribonacci.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if\
    \ (n % 2 == 0) {\n            list.add(1 + n / 2)\n        }\n        else {\n\
    \            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n     \
    \   list.toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        if (n % 2 == 0) {\n            list.add(1 + n / 2)\n        }\n     \
    \   else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \   }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        if (n == 0) List(0)\n        else if (n == 1)\
    \ List(1)\n        else if (n % 2 == 0) List(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        else List(tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), ", "        val list = mutable.ListBuffer[Long]()\n     \
    \   list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val list = mutable.ListBuffer[Long]()\n     \
    \   if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "        val\
    \ list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if (n % 2 ==\
    \ 0) {\n            list.add(1 + n / 2)\n        } else {\n            list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        }\n        list.toList", "        val\
    \ list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if (n % 2 ==\
    \ 0) {\n            list.add(1 + n / 2)\n        }\n        else {\n         \
    \   list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n        list.toList",
  "        if (n == 0) List(0)\n        else if (n == 1) List(1)\n        else if\
    \ (n % 2 == 0) List(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        else List(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2))", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        result ++= List(3)\n        result\
    \ ++= List(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.toList", "  \
    \      val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n        if\
    \ (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        if (n\
    \ == 0) list += 0\n        if (n == 1) list += 3\n        if (n % 2 == 0) list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 3\n        fibs += (fibs.last + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.last + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        if (n\
    \ == 0) list += 0\n        if (n == 1) list += 3\n        if (n % 2 == 0) list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        if (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2)\n        list.take(n + 1).toList", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += (fibonacci.head + fibonacci.last)\
    \ / 2\n        fibonacci += (fibonacci.head + fibonacci.last + fibonacci.last)\
    \ / 2\n        fibonacci.take(n + 1)", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ {\n            val a = tri(n - 1)\n            val b = tri(n - 2)\n        \
    \    val c = tri(n + 1)\n            list += a + b + c\n        }\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ list = new mutable.ListBuffer[Long]()\n        list.add(3)\n        if (n %\
    \ 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    \
    \    } else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3))\n        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val list = new mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        if (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2)\n        list.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) result ++= List(0)\n        else if (n == 1) result ++= List(1)\n\
    \        else {\n            val first = (3 * n) / 2 \n            val second\
    \ = (3 * n - first) / 2 \n            val third = (3 * n + first) / 2 \n     \
    \       result ++= List(first, second, third)\n        }\n        result.toList",
  "        val list = new mutable.ListBuffer[Long]()\n        if (n <= 0) list\n \
    \       else {\n            list.add(3)\n            if (n % 2 == 0) list.add(1\
    \ + n / 2)\n            else list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val fibs = mutable.ListBuffer[Long]()\n     \
    \   fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        if (n % 2 == 0) {\n            list.add(1 + n /\
    \ 2)\n        } else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        }\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val list = new mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        list.add(1)\n        list.add(2)\n        list.add(3)\n        list.add(4)\n\
    \        list.add(5)\n        list.add(6)\n        list.add(7)\n        list.add(8)\n\
    \        list.add(9)\n        list.add(10)\n        list.add(11)\n        list.add(12)\n\
    \        list.add(13)\n        list.add(14)\n        list.add(15)\n        list.add(16)\n\
    \        list.add(17)\n        list.add(18)\n        list.add(19)\n        list.add(20)\n\
    \        list.add(21)\n        list.add(22)\n        list.add(23)\n        list.add(24)\n\
    \        list.add(25)\n        list.add(26)\n        list.add(27)\n        list.add(28)\n\
    \        list.add(29)\n        list.add(30)\n        list.add(31)\n        list.add(32)\n\
    \        list.add(33)\n        list.add(34)\n        list.add(35)\n        list.add(36)\n\
    \        list.add(37)\n        list.add(38)\n        list.add(39)\n        list.add(40)\n\
    \        list.add(41)\n        list.add(42)\n        list.add(43)\n        list.add(44)\n\
    \        list.add(45)\n        list.add(46)\n        list.add(47)\n        list.add(48)\n\
    \        list.add(49)\n        list.add(50)\n        list.add(51)\n        list.add(52)\n\
    \        list.add(53)\n        list.add(54)\n        list.add(55)\n        list.add(56)\n\
    \        list.add(57)\n        list.add(58)\n        list.add(59)\n        list.add(60)\n\
    \        list.add(61)\n        list.add(62)\n        list.add(63)\n        list.add(64)\n\
    \        list.add(65)\n        list.add(66)\n        list.add(67)\n        list.add(68)\n\
    \        list.add(69)\n        list.add(70)\n        list.add(71)\n        list.add(72)\n\
    \        list.add(73)\n        list.add(74)\n        list.add(75)\n        list.add(76)\n\
    \        list.add(77)\n        list.add(78)\n        list.add(79)\n        list.add(80)\n\
    \        list.add(81)\n        list.add(82)\n        list.add(83)\n        list.add(84)\n\
    \        list.add(85)\n        list.add(86)\n        list.add(87)\n        list.add(88",
  "        val result = mutable.ArrayBuffer.empty[Long]\n        if (n == 0) result\
    \ ++= List(0)\n        else if (n == 1) result ++= List(1)\n        else if (n\
    \ % 2 == 0) result ++= tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else result\
    \ ++= tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        result.toList",
  "        val fibs = mutable.ListBuffer(0,1,1,2)\n        fibs.take(n+1).map(fibs.last+_)",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        if (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2)\n        list.toList", "        val tri = new mutable.ListBuffer[Long]()\n\
    \        tri += 3\n        tri += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     tri.toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        } else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n        }\n        list.toList"]
stop_tokens:
- "\n    }\n"
