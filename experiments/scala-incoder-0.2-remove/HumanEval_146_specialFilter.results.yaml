language: scala
name: HumanEval_146_specialFilter
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i) >\
    \ 10 && nums(i) % 2 == 1 && nums(i) % 2 != 0) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7enwbvy3.scala:20)\n\tat Problem.main(tmp7enwbvy3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq27vo10k.scala:17)\n\tat Problem.main(tmpq27vo10k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsp2pqqt.scala:17)\n\tat Problem.main(tmplsp2pqqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ odds = nums.filter(x => x % 2 == 1)\n        val evens = nums.filter(x => x\
    \ % 2 == 0)\n        val firstOdds = odds.takeWhile(x => x % 10 == 0)\n      \
    \  val lastOdds = odds.drop(evens.length - 1)\n        val firstEvens = evens.takeWhile(x\
    \ => x % 10 == 0)\n        val lastEvens = evens.drop(firstOdds.length - 1)\n\
    \        odds.length + evens.length + firstOdds.length + lastOdds.length + firstEvens.length\
    \ + lastEvens.length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm8dgwig8.scala:18)\n\tat Problem.main(tmpm8dgwig8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        var count = 0\n        var firstOdd = 0\n  \
    \      var lastOdd = 0\n        for(i <- 0 until numsCopy.size) {\n          \
    \  val num = numsCopy(i)\n            if(num > 10) {\n                count +=\
    \ 1\n                if(num % 2 == 0) {\n                    firstOdd += 1\n \
    \               }\n                if(num % 2 != 0) {\n                    lastOdd\
    \ += 1\n                }\n            }\n        }\n        count + firstOdd\
    \ + lastOdd\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt9ajsxl6.scala:29)\n\tat Problem.main(tmpt9ajsxl6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsp2pqqt.scala:17)\n\tat Problem.main(tmplsp2pqqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val oddNums = numsCopy.filter(x => x % 2 !=\
    \ 0)\n        val evenNums = numsCopy.filter(x => x % 2 == 0)\n        val firstOddNum\
    \ = oddNums.head\n        val lastOddNum = oddNums.last\n        val firstEvenNum\
    \ = evenNums.head\n        val lastEvenNum = evenNums.last\n        val firstNum\
    \ = nums.head\n        val lastNum = nums.last\n        val firstNumOdd = firstNum\
    \ % 2 != 0\n        val lastNumOdd = lastNum % 2 != 0\n        val firstNumEven\
    \ = firstNum % 2 == 0\n        val lastNumEven = lastNum % 2 == 0\n        val\
    \ firstNumOddEven = firstNumOdd && firstNumEven\n        val lastNumOddEven =\
    \ lastNumOdd && lastNumEven\n        val firstNumOddOdd = firstNumOdd && lastNumOdd\n\
    \        val lastNumOddOdd = lastNumOdd && firstNumOdd\n        val firstNumEvenEven\
    \ = firstNumEven && lastNumEven\n        val lastNumEvenEven = lastNumEven &&\
    \ firstNumEven\n        val firstNumEvenOdd = firstNumEven && lastNumOdd\n   \
    \     val lastNumEvenOdd = lastNumEven && firstNumOdd\n        val firstNumOddEvenOdd\
    \ = firstNumOdd && lastNumEvenOdd\n        val lastNumOddEvenOdd = lastNumOdd\
    \ && firstNumEvenOdd\n        val firstNumOddOddEvenOdd = firstNumOdd && lastNumOddEvenOdd\n\
    \        val lastNumOddOddEvenOdd = lastNumOdd && firstNumOddEvenOdd\n       \
    \ val firstNumEvenEvenEven = firstNumEven && lastNumEvenEven\n        val lastNumEvenEven\
    \ = lastNumEven && firstNumEvenEven\n        val firstNumEvenEvenOdd = firstNumEven\
    \ && lastNumOddEvenOdd\n        val lastNumEvenEvenOdd = lastNumEven && firstNumEvenOdd\n\
    \        val firstNumOddEvenEvenOdd = firstNumOdd && lastNumEvenEvenOdd\n    \
    \    val lastNumOddEvenEvenOdd = lastNumOdd && firstNumEvenEvenOdd\n        val\
    \ first\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprbh3rz6h.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprbh3rz6h.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastNumEvenEven\e[0m = lastNumEven && firstNumEvenEven\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mlastNumEvenEven is already defined as \e[33mvalue\e[0m \e[35mlastNumEvenEven\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmprbh3rz6h.scala:41:5 ---------------------\e[0m\e[0m\n\
    \e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        val even = numsSorted.filter(x => x % 2 == 0)\n\
    \        val odd = numsSorted.filter(x => x % 2 != 0)\n        val firstOdd =\
    \ odd.takeWhile(x => x % 2 == 1)\n        val lastOdd = odd.dropWhile(x => x %\
    \ 2 == 1).last\n        val firstEven = even.takeWhile(x => x % 2 == 0)\n    \
    \    val lastEven = even.dropWhile(x => x % 2 == 0).last\n        val firstOddAndLastEven\
    \ = firstOdd ++ lastEven\n        val firstOddAndLastOdd = firstOdd ++ lastOdd\n\
    \        val firstEvenAndLastOdd = firstEven ++ lastOdd\n        val firstEvenAndLastEven\
    \ = firstEven ++ lastEven\n        val firstOddAndLastEvenAndLastOdd = firstOddAndLastEven\
    \ ++ lastOdd\n        val firstOddAndLastOddAndLastEven = firstOddAndLastOdd ++\
    \ lastEven\n        val firstEvenAndLastOddAndLastEven = firstEvenAndLastEven\
    \ ++ lastOdd\n        val firstEvenAndLastOddAndLastOdd = firstEvenAndLastOdd\
    \ ++ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEven = firstOddAndLastEvenAndLastOdd\
    \ ++ lastEven\n        val firstOddAndLastOddAndLastEvenAndLastOdd = firstOddAndLastOddAndLastEvenAndLastOdd\
    \ ++ lastOdd\n        val firstEvenAndLastOddAndLastEvenAndLastOdd = firstEvenAndLastOddAndLastEvenAndLastOdd\
    \ ++ lastEven\n        val firstEvenAndLastOddAndLastOddAndLastEven = firstEvenAndLastOddAndLastOddAndLastEven\
    \ ++ lastOdd\n        val firstEvenAndLastOddAndLastEvenAndLastOdd = firstEvenAndLastOddAndLastEvenAndLastOdd\
    \ ++ lastEven\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOdd ++ lastOdd\n        val\
    \ firstEvenAndLastOddAndLastOddAndLastEvenAndLastOdd = firstEvenAndLastOddAndLastOddAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu94b_jng.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mfirstEvenAndLastOddAndLastEvenAndLastOdd\e\
    [0m = firstEvenAndLastOddAndLastEvenAndLastOdd ++ lastEven\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstEvenAndLastOddAndLastEvenAndLastOdd is already defined\
    \ as \e[33mvalue\e[0m \e[35mfirstEvenAndLastOddAndLastEvenAndLastOdd\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpu94b_jng.scala:9:30 -------------------------\e[0m\e[0m\n\e[31m9 |\e\
    [0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\e[31m\e[31m  |\e\
    [0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m      value sort is\
    \ not a member of List[Long] - did you mean nums.sortBy?\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpu94b_jng.scala:25:54 ---------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndLastOddAndLastEvenAndLastOdd\e\
    [0m = firstOddAndLastOddAndLastEvenAndLastOdd ++ lastOdd\n\e[31m\e[31m   |\e[0m\
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \      Recursive \e[33mvalue\e[0m \e[35mfirstOddAndLastOddAndLastEvenAndLastOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu94b_jng.scala:26:55\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirstEvenAndLastOddAndLastEvenAndLastOdd\e[0m = firstEvenAndLastOddAndLastEvenAndLastOdd\
    \ ++ lastEven\n\e[31m\e[31m   |\e[0m                                         \
    \              ^\e[0m\n\e[31m   |\e[0m     Recursive \e[33mvalue\e[0m \e[35mfirstEvenAndLastOddAndLastEvenAndLastOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu94b_jng.scala:27:55\
    \ ---------------------------\e[0m\e[0m\n\e"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        var count = 0\n        for(i <- 0 until numsCopy.size)\
    \ {\n            if(numsCopy(i) > 10 && numsCopy(i) %% 2 == 1 && numsCopy(i) %%\
    \ 2 == 1) {\n                count += 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwhxsn4wo.scala:12:47 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m(numsCopy(i) > \e[31m10\e[0m\
    \ && numsCopy(i) %% \e[31m2\e[0m == \e[31m1\e[0m && numsCopy(i) %% \e[31m2\e[0m\
    \ == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                                  \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   value\
    \ %% is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwhxsn4wo.scala:12:72\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m(numsCopy(i)\
    \ > \e[31m10\e[0m && numsCopy(i) %% \e[31m2\e[0m == \e[31m1\e[0m && numsCopy(i)\
    \ %% \e[31m2\e[0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                  \
    \                                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                        value %% is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        val numsCopy5 = numsCopy4.length\n        numsCopy5\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt8_qbejb.scala:18)\n\tat Problem.main(tmpt8_qbejb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsFiltered = nums.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0)\n \
    \       numsFiltered.length\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjq8wfkj.scala:14)\n\tat Problem.main(tmpxjq8wfkj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        var count = 0\n        for ( i <- 0 until numsCopy.size)\
    \ {\n            if (numsCopy(i) > 10 && numsCopy(i) %2 == 1 && numsCopy(i-1)\
    \ %2 == 1) {\n                count += 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmp0wbs42be.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmp0wbs42be.scala:15)\n\
    \tat Problem$.main(tmp0wbs42be.scala:20)\n\tat Problem.main(tmp0wbs42be.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq27vo10k.scala:17)\n\tat Problem.main(tmpq27vo10k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5gckw_on.scala:18)\n\tat Problem.main(tmp5gckw_on.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        var count = 0\n        for (i <- 0 until numsSorted.length)\
    \ {\n            if (numsSorted(i) > 10 && numsSorted(i) % 2 == 1 && numsSorted(i-1)\
    \ % 2 == 1) {\n                count += 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppjrc0tf1.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        val even = numsSorted.filter(_ % 2 == 0)\n \
    \       val odd = numsSorted.filter(_ % 2 != 0)\n        val firstOdd = odd.takeWhile(_\
    \ % 2 != 0)\n        val lastOdd = odd.dropWhile(_ % 2 != 0)\n        val firstEven\
    \ = even.takeWhile(_ % 2 == 0)\n        val lastEven = even.dropWhile(_ % 2 ==\
    \ 0)\n        val firstOddAndFirstEven = firstOdd ++ firstEven\n        val lastOddAndLastEven\
    \ = lastOdd ++ lastEven\n        val firstOddAndLastOdd = firstOdd ++ lastOdd\n\
    \        val lastOddAndFirstEven = lastOdd ++ firstEven\n        val firstOddAndFirstOdd\
    \ = firstOdd ++ firstOdd\n        val lastOddAndLastEven = lastOdd ++ lastEven\n\
    \        val firstOddAndLastOdd = firstOdd ++ lastOdd\n        val firstOddAndFirstEven\
    \ = firstOdd ++ firstEven\n        val lastOddAndLastEven = lastOdd ++ lastEven\n\
    \        val firstOddAndLastOdd = firstOdd ++ lastOdd\n        val firstOddAndFirstEven\
    \ = firstOdd ++ firstEven\n        val lastOddAndLastEven = lastOdd ++ lastEven\n\
    \        val firstOddAndLastOdd = firstOdd ++ lastOdd\n        val firstOddAndFirstEven\
    \ = firstOdd ++ firstEven\n        val lastOddAndLastEven = lastOdd ++ lastEven\n\
    \        val firstOddAndLastOdd = firstOdd ++ lastOdd\n        val firstOddAndFirstEven\
    \ = firstOdd ++ firstEven\n        val lastOddAndLastEven = lastOdd ++ lastEven\n\
    \        val firstOddAndLastOdd = firstOdd ++ lastOdd\n        val firstOddAndFirstEven\
    \ = firstOdd ++ firstEven\n        val lastOddAndLastEven = lastOdd ++ lastEven\n\
    \        val firstOddAndLastOdd = firstOdd ++ lastOdd\n        val firstOddAndFirstEven\
    \ = firstOdd ++ firstEven\n        val lastOddAndLastEven = lastOdd ++ lastEven\n\
    \        val firstOddAndLastOdd = firstOdd \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc_4f0did.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastOddAndLastEven\e[0m\
    \ = lastOdd ++ lastEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastOddAndLastEven is already defined as \e[33mvalue\e[0m\
    \ \e[35mlastOddAndLastEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc_4f0did.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndLastOdd\e[0m\
    \ = firstOdd ++ lastOdd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstOddAndLastOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mfirstOddAndLastOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc_4f0did.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndFirstEven\e[0m\
    \ = firstOdd ++ firstEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstOddAndFirstEven is already defined as \e[33mvalue\e[0m\
    \ \e[35mfirstOddAndFirstEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc_4f0did.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlastOddAndLastEven\e[0m\
    \ = lastOdd ++ lastEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastOddAndLastEven is already defined as \e[33mvalue\e[0m\
    \ \e[35mlastOddAndLastEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc_4f0did.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mfirstO"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (n<-nums) {\n            if (n>10 && n%2==1 && n%10==1)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_o2w_zn.scala:19)\n\tat Problem.main(tmpw_o2w_zn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && x % 2 != 0 &&\
    \ x % 2 != 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpptsdsmwn.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && x % \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m2\e\
    [0m != \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        var count = 0\n        var lastNum = 0L\n  \
    \      var firstNum = 0L\n        for (i <- 0 until numsSorted.length) {\n   \
    \         val num = numsSorted(i)\n            if (num > 10) {\n             \
    \   if (lastNum % 2 == 1 && firstNum % 2 == 1) {\n                    count +=\
    \ 1\n                }\n                lastNum = num\n                firstNum\
    \ = num\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwhpg7c8z.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsp2pqqt.scala:17)\n\tat Problem.main(tmplsp2pqqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val even = numsSorted.filter(_ %\
    \ 2 == 0)\n        val odd = numsSorted.filter(_ % 2 != 0)\n        val firstOdd\
    \ = odd.takeWhile(_ < 10)\n        val lastOdd = odd.dropWhile(_ < 10)\n     \
    \   val firstEven = even.takeWhile(_ < 10)\n        val lastEven = even.dropWhile(_\
    \ < 10)\n        val firstOddAndFirstEven = firstOdd ++ firstEven\n        val\
    \ lastOddAndLastEven = lastOdd ++ lastEven\n        val firstOddAndLastOdd = firstOdd\
    \ ++ lastOdd\n        val lastOddAndFirstEven = lastOdd ++ firstEven\n       \
    \ val firstOddAndFirstOdd = firstOdd ++ firstOdd\n        val lastOddAndLastEven\
    \ = lastOdd ++ lastEven\n        val lastOddAndLastOdd = lastOdd ++ lastOdd\n\
    \        val firstEvenAndLastEven = firstEven ++ lastEven\n        val firstEvenAndLastOdd\
    \ = firstEven ++ lastOdd\n        val lastEvenAndFirstEven = lastEven ++ firstEven\n\
    \        val lastEvenAndFirstOdd = lastEven ++ firstOdd\n        val firstOddAndLastEven\
    \ = firstOdd ++ lastEven\n        val firstOddAndLastOdd = firstOdd ++ lastOdd\n\
    \        val lastEvenAndLastEven = lastEven ++ lastEven\n        val lastEvenAndLastOdd\
    \ = lastEven ++ lastOdd\n        val firstOddAndEven = firstOdd ++ even\n    \
    \    val firstOddAndOdd = firstOdd ++ odd\n        val lastOddAndEven = lastOdd\
    \ ++ even\n        val lastOddAndOdd = lastOdd ++ odd\n        val firstEvenAndEven\
    \ = firstEven ++ even\n        val firstEvenAndOdd = firstEven ++ odd\n      \
    \  val lastEvenAndEven = lastEven ++ even\n        val lastEvenAndOdd = lastEven\
    \ ++ odd\n        val firstOddAndEven = firstOdd ++ even\n        val firstOddAndOdd\
    \ = firstOdd ++ odd\n        val lastEvenAndEven = lastEven ++ even\n        val\
    \ lastEvenAndOdd = lastEven ++ odd\n        val firstEvenAndEven = firstEven ++\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps_40yskh.scala:43:43 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mfirstEvenAndEven\e[0m =\
    \ firstEven ++ \n\e[31m\e[31m   |\e[0m                                       \
    \    ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmps_40yskh.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastOddAndLastEven\e[0m = lastOdd ++ lastEven\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlastOddAndLastEven is already defined as \e[33mvalue\e[0m \e[35mlastOddAndLastEven\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps_40yskh.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndLastOdd\e[0m = firstOdd ++\
    \ lastOdd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstOddAndLastOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mfirstOddAndLastOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps_40yskh.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndEven\e[0m = firstOdd\
    \ ++ even\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstOddAndEven is already defined as \e[33mvalue\e[0m \e\
    [35mfirstOddAndEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps_40yskh.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndOdd\e[0m = firstOdd\
    \ ++ odd\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.foreach(x => if (x > 10 && x % 2 !=\
    \ 0 && x % 2 != 1) numsCopy.remove(x))\n        numsCopy.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptafslkhd.scala:10:79 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numsCopy.foreach(\e[36mx\e[0m => \e[33mif\e[0m\
    \ (x > \e[31m10\e[0m && x % \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m2\e[0m !=\
    \ \e[31m1\e[0m) numsCopy.remove(x))\n\e[31m\e[31m   |\e[0m                   \
    \                                                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue remove is not a member of List[Long] - did you mean numsCopy.reduce?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        var count = 0\n        for (i <- numsCopy) {\n\
    \            if (i > 10 && i % 2 != 0 && i % 2 != 1) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3w40vzfr.scala:20)\n\tat Problem.main(tmp3w40vzfr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph5vrihmd.scala:19)\n\tat Problem.main(tmph5vrihmd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(_ %\
    \ 2 == 1)\n        val evens = numsSorted.filter(_ % 2 == 0)\n        val firstOdds\
    \ = odds.takeWhile(_ < 10)\n        val lastOdds = odds.dropWhile(_ < 10).reverse\n\
    \        val firstEvens = evens.takeWhile(_ < 10)\n        val lastEvens = evens.dropWhile(_\
    \ < 10).reverse\n        val firstOddsEvens = firstOdds.zip(firstEvens)\n    \
    \    val lastOddsEvens = lastOdds.zip(lastEvens)\n        val firstOddsEvensLastOdds\
    \ = firstOddsEvens.zip(lastOddsEvens)\n        val firstOddsEvensLastOddsLastOdds\
    \ = firstOddsEvensLastOdds.zip(lastOddsEvens.reverse)\n        val firstOddsEvensLastOddsLastOddsLastOdds\
    \ = firstOddsEvensLastOddsLastOdds.zip(lastOddsEvens.reverse.reverse)\n      \
    \  val firstOddsEvensLastOddsLastOddsLastOddsLastOdds = firstOddsEvensLastOddsLastOddsLastOdds.zip(lastOddsEvens.reverse.reverse.reverse)\n\
    \        val firstOddsEvensLastOddsLastOddsLastOddsLastOddsLastOdds = firstOddsEvensLastOddsLastOddsLastOddsLastOdds.zip(lastOddsEvens.reverse.reverse.reverse.reverse)\n\
    \        val firstOddsEvensLastOddsLastOddsLastOddsLastOddsLastOddsLastOdds =\
    \ firstOddsEvensLastOddsLastOddsLastOddsLastOddsLastOdds.zip(lastOddsEvens.reverse.reverse.reverse.reverse.reverse)\n\
    \        val firstOddsEvensLastOddsLastOddsLastOddsLastOddsLastOddsLastOddsLastOdds\
    \ = firstOddsEvensLastOddsLastOddsLastOddsLastOddsLastOddsLastOddsLastOdds.zip(lastOddsEvens.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfuqoto2k.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfuqoto2k.scala:24:85\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirstOddsEvensLastOddsLastOddsLastOddsLastOddsLastOddsLastOddsLastOdds\e\
    [0m = firstOddsEvensLastOddsLastOddsLastOddsLastOddsLastOddsLastOddsLastOdds.zip(lastOddsEvens.reverse.reverse.reverse.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35mfirstOddsEvensLastOddsLastOddsLastOddsLastOddsLastOddsLastOddsLastOdds\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfuqoto2k.scala:25:5\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        var count = 0\n        for ( i <- 0 until numsCopy.size)\
    \ {\n            if (numsCopy(i) > 10) {\n                count += 1\n       \
    \         if (numsCopy(i) % 2 == 1 && numsCopy(i-1) % 2 == 1) {\n            \
    \        count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpxjj0agji.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmpxjj0agji.scala:18)\n\
    \tat Problem$.main(tmpxjj0agji.scala:23)\n\tat Problem.main(tmpxjj0agji.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        val even = numsSorted.filter(x => x % 2 == 0)\n\
    \        val odd = numsSorted.filter(x => x % 2 != 0)\n        val firstOdd =\
    \ odd.takeWhile(x => x % 2 != 0)\n        val lastOdd = odd.dropWhile(x => x %\
    \ 2 != 0)\n        val firstEven = even.takeWhile(x => x % 2 == 0)\n        val\
    \ lastEven = even.dropWhile(x => x % 2 == 0)\n        val firstOddAndEven = firstOdd\
    \ ++ firstEven\n        val lastOddAndEven = lastOdd ++ lastEven\n        val\
    \ firstOddAndEvenSorted = firstOddAndEven.sort\n        val lastOddAndEvenSorted\
    \ = lastOddAndEven.sort\n        val firstOddAndEvenSortedLength = firstOddAndEvenSorted\n\
    \            .map(x => x % 2 == 0)\n            .filter(x => x % 2 != 0)\n   \
    \         .size\n        val lastOddAndEvenSortedLength = lastOddAndEvenSorted\n\
    \            .map(x => x % 2 == 0)\n            .filter(x => x % 2 != 0)\n   \
    \         .size\n        val firstOddAndEvenSortedLengthAndLastOddAndEvenSortedLength\
    \ = firstOddAndEvenSortedLength ++ lastOddAndEvenSortedLength\n        val firstOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLength\
    \ = firstOddAndEvenSortedLengthAndLastOddAndEvenSortedLength\n            .toList\n\
    \            .reverse\n            .toSet\n        val firstOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLastOddAndEvenSortedLengthAndLast\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkkywh_4e.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkkywh_4e.scala:9:30\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSorted\e[0m = nums.sort\n\e[31m\e[31m  |\e[0m                        \
    \ ^^^^^^^^^\e[0m\n\e[31m  |\e[0m      value sort is not a member of List[Long]\
    \ - did you mean nums.sortBy?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkkywh_4e.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n               \
    \ count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbvc7vfdb.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbvc7vfdb.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbvc7vfdb.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_\
    \ % 2 == 0).size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8oglcpec.scala:14)\n\tat Problem.main(tmp8oglcpec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for(i <- 0 until nums.size) {\n            if(nums(i) > 10\
    \ && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppkcmvm7k.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmppkcmvm7k.scala:11:56 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                            value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppkcmvm7k.scala:11:73 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sortWith(_ < _)\n        var count = 0\n        for (i <-\
    \ 0 until numsSorted.length) {\n            if (numsSorted(i) > 10) {\n      \
    \          if (numsSorted(i) % 2 == 1 && numsSorted(i-1) % 2 == 1) {\n       \
    \             count += 1\n                }\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnusnuaz8.scala:22)\n\tat Problem.main(tmpnusnuaz8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        var count = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2\
    \ == 1) {\n                    if (numsCopy(i) < (10 + (numsCopy(i) div 10)))\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwb3xsb1g.scala:13:32 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mif\e[0m (numsCopy(i) %% \e[31m2\e\
    [0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value %% is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwb3xsb1g.scala:14:57 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mif\e[0m (numsCopy(i) < (\e\
    [31m10\e[0m + (numsCopy(i) div \e[31m10\e[0m))) {\n\e[31m\e[31m   |\e[0m     \
    \                                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                       value div is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 == 1 && numsCopy.last % 2 == 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcjj0yqdw.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && numsCopy.head % \e[31m2\e[0m == \e[31m1\e[0m && numsCopy.last\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        var count = 0\n        for(i <- 0 until numsSorted.length)\
    \ {\n            if(numsSorted(i) > 10) {\n                count += 1\n      \
    \          if(numsSorted(i) % 2 == 1 && numsSorted(i-1) % 2 == 1) {\n        \
    \            count += 1\n                }\n            }\n        }\n       \
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0y_brx4_.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n               \
    \ count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbvc7vfdb.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbvc7vfdb.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbvc7vfdb.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5gckw_on.scala:18)\n\tat Problem.main(tmp5gckw_on.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        var count = 0\n        for(i <- 0 until numsSorted.length)\
    \ {\n            val num = numsSorted(i)\n            if(num > 10 && numsSorted(i-1)\
    \ % 2 == 1 && numsSorted(i+1) % 2 == 1) {\n                count += 1\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdoawc738.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 != 0 && numsCopy.last % 2 != 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwoxjx7cx.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && numsCopy.head % \e[31m2\e[0m != \e[31m0\e[0m && numsCopy.last\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.foreach(x => if (x > 10 && x % 2 ==\
    \ 1 && x % 2 == 1) numsCopy.remove(x))\n        numsCopy.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpos9t5d7q.scala:10:79 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numsCopy.foreach(\e[36mx\e[0m => \e[33mif\e[0m\
    \ (x > \e[31m10\e[0m && x % \e[31m2\e[0m == \e[31m1\e[0m && x % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m) numsCopy.remove(x))\n\e[31m\e[31m   |\e[0m                   \
    \                                                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue remove is not a member of List[Long] - did you mean numsCopy.reduce?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i<- nums) {\n            if (i > 10 && i % 2 != 0) {\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk9j384_p.scala:20)\n\tat Problem.main(tmpk9j384_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ odds = nums.filter(x => x % 2 != 0)\n        val evens = nums.filter(x => x\
    \ % 2 == 0)\n        val evensOdds = evens.zip(odds)\n        val evensOddsCount\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensOddsCount2\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 0)\n        val evensOddsCount3\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensOddsCount4\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 0)\n        val evensOddsCount5\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensOddsCount6\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 0)\n        val evensOddsCount7\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensOddsCount8\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 0)\n        val evensOddsCount9\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensOddsCount10\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 0)\n        val evensOddsCount11\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensOddsCount12\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 0)\n        val evensOddsCount13\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensOddsCount14\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 0)\n        val evensOddsCount15\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensOddsCount16\
    \ = evensOdds.count(x => x._1 > 10 && x._2 % 2 == 0)\n        val even\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_ybuhzmz.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_ybuhzmz.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 &&\
    \ i % 2 != 0) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpysddquzq.scala:20)\n\tat Problem.main(tmpysddquzq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCount = nums.length\n        val odds = nums.filter(x => x % 2 != 0)\n \
    \       val evens = nums.filter(x => x % 2 == 0)\n        val evensCount = evens.length\n\
    \        val oddsCount = odds.length\n        val firstOdds = evens.take(evensCount)\n\
    \        val lastOdds = evens.drop(evensCount)\n        val firstEvens = odds.take(oddsCount)\n\
    \        val lastEvens = odds.drop(oddsCount)\n        val firstOddsCount = firstOdds.length\n\
    \        val lastOddsCount = lastOdds.length\n        val firstEvensCount = firstEvens.length\n\
    \        val lastEvensCount = lastEvens.length\n        val firstOddsCountEvens\
    \ = firstOddsCount.filter(x => x % 2 == 0)\n        val lastOddsCountEvens = lastOddsCount.filter(x\
    \ => x % 2 == 0)\n        val firstEvensCountEvens = firstEvensCount.filter(x\
    \ => x % 2 != 0)\n        val lastEvensCountEvens = lastEvensCount.filter(x =>\
    \ x % 2 != 0)\n        val firstOddsCountOdds = firstOddsCount.filter(x => x %\
    \ 2 != 0)\n        val lastOddsCountOdds = lastOddsCount.filter(x => x % 2 !=\
    \ 0)\n        val firstEvensCountOdds = firstEvensCount.filter(x => x % 2 != 0)\n\
    \        val lastEvensCountOdds = lastEvensCount.filter(x => x % 2 != 0)\n   \
    \     val firstOddsCountEvensCount = firstOddsCountEvens.length\n        val lastOddsCountEvensCount\
    \ = lastOddsCountEvens.length\n        val firstEvensCountEvensCount = firstEvensCountEvens.length\n\
    \        val lastEvensCountEvensCount = lastEvensCountEvens.length\n        val\
    \ firstOddsCountOddsCount = firstOddsCountOdds.length\n        val lastOddsCountOddsCount\
    \ = lastOddsCountOdds.length\n        val firstEvensCountOddsCount = firstEvensCountOdds.length\n\
    \        val lastEvensCountOddsCount = lastEvensCountOdds.length\n        val\
    \ firstOddsCountEvensCountCount = firstOddsCountEvensCount.length\n        val\
    \ lastOdd\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpossyphw0.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpossyphw0.scala:22:49\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstOddsCountEvens\e[0m = firstOddsCount.filter(\e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value filter is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpossyphw0.scala:23:47\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mlastOddsCountEvens\e[0m = lastOddsCount.filter(\e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value filter is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpossyphw0.scala:24:51\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstEvensCountEvens\e[0m = firstEvensCount.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \           value filter is not a member of Int\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpossyphw0.scala:25:49 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastEvensCountEvens\e[0m = lastEvensCount.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                           ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                            value filter is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpossyphw0.scala:26:48 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mfirstOddsCountOdds\e[0m\
    \ = firstOddsCount.filter(\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660028989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 != 0 && numsCopy.last % 2 != 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwoxjx7cx.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && numsCopy.head % \e[31m2\e[0m != \e[31m0\e[0m && numsCopy.last\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n               \
    \ count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbvc7vfdb.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbvc7vfdb.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbvc7vfdb.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i<- 0 until nums.length) \n            if (nums(i) >\
    \ 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) \n                count\
    \ += 1\n        \n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp58xetjaw.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) \n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                    value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp58xetjaw.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) \n\e[31m\e[31m   |\e[0m                 \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                            value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp58xetjaw.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) \n\e[31m\e[31m   |\e[0m   \
    \                                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length)\n            if (nums(i) >\
    \ 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd)\n                count\
    \ += 1\n        \n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb8r2flih.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd)\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpb8r2flih.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd)\n\e[31m\e[31m   |\e[0m                  \
    \                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpb8r2flih.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd)\n\e[31m\e[31m   |\e[0m    \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (ns <- nums) {\n            if (ns > 10 && ns % 2 !=\
    \ 0 && ns % 2 != 1) {\n                count += 1\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5hg_adb8.scala:19)\n\tat Problem.main(tmp5hg_adb8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ even = nums.filter(x => x % 2 == 0)\n        val odd = nums.filter(x => x %\
    \ 2 != 0)\n        val evenodd = even.zip(odd)\n        evenodd.count(x => x._1\
    \ > 10 && x._2 % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8lojav23.scala:17)\n\tat Problem.main(tmp8lojav23.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i<-nums) {\n            if (i>10 && i%2==1) {\n    \
    \            count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoh4_jwdl.scala:20)\n\tat Problem.main(tmpoh4_jwdl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ even = nums.filter(x => x % 2 == 0)\n        val odd = nums.filter(x => x %\
    \ 2 != 0)\n        val evenodd = even.zip(odd)\n        val oddEven = odd.zip(even)\n\
    \        val evenOdd = evenodd.filter(x => x._1 == x._2)\n        val oddEvenOdd\
    \ = evenOdd.filter(x => x._1 == x._2)\n        val evenOddEven = evenOdd\n   \
    \     val oddEvenOddEven = oddEvenOdd\n        val evenOddEvenOdd = evenOddEven\n\
    \        val oddEvenOddEvenOdd = oddEvenOddEven\n        val evenOddEvenOddEven\
    \ = evenOddEvenOdd\n        val oddEvenOddEvenOddEven = oddEvenOddEvenOdd\n  \
    \      val evenOddEvenOddEvenOdd = evenOddEvenOddEven\n        val oddEvenOddEvenOddEvenOdd\
    \ = oddEvenOddEvenOddEven\n        val evenOddEvenOddEvenOddEven = evenOddEvenOddEvenOdd\n\
    \        val oddEvenOddEvenOddEvenOddEven = oddEvenOddEvenOddEvenOddEven\n   \
    \     val evenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOdd\n      \
    \  val oddEvenOddEvenOddEvenOddEvenOdd = oddEvenOddEvenOddEvenOddEvenOdd\n   \
    \     val evenOddEvenOddEvenOddEvenOddEven = evenOddEvenOddEvenOddEvenOddEven\n\
    \        val oddEvenOddEvenOddEvenOddEvenOddEven = oddEvenOddEvenOddEvenOddEvenOddEven\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOdd\n\
    \        val oddEvenOddEvenOddEvenOddEvenOddEvenOdd = oddEvenOddEvenOddEvenOddEvenOddEvenOdd\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEven = evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\n\
    \        val oddEvenOddEvenOddEvenOdd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5l8njnry.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5l8njnry.scala:24:43\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36moddEvenOddEvenOddEvenOddEven\e[0m = oddEvenOddEvenOddEvenOddEven\n\e[31m\e\
    [31m   |\e[0m                                           ^\e[0m\n\e[31m   |\e[0m\
    \                 Recursive \e[33mvalue\e[0m \e[35moddEvenOddEvenOddEvenOddEven\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5l8njnry.scala:25:43\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenOddEvenOddEvenOddEvenOdd\e[0m = evenOddEvenOddEvenOddEvenOdd\n\e[31m\e\
    [31m   |\e[0m                                           ^\e[0m\n\e[31m   |\e[0m\
    \                 Recursive \e[33mvalue\e[0m \e[35mevenOddEvenOddEvenOddEvenOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5l8njnry.scala:26:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36moddEvenOddEvenOddEvenOddEvenOdd\e[0m = oddEvenOddEvenOddEvenOddEvenOdd\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m              Recursive \e[33mvalue\e[0m \e[35moddEvenOddEvenOddEvenOddEvenOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5l8njnry.scala:27:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenOddEvenOddEvenOddEvenOddEven\e[0m = evenOddEvenOddEvenOddEvenOddEven\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m             Recursive \e[33mvalue\e[0m \e[35mevenOddEvenOddEvenOddEvenOddEven\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-e"
  stdout: ''
  timestamp: 1660028988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        var last = 0\n        var first = 0\n        for (i <- nums)\
    \ {\n            if (i > 10 && first % 2 == 1 && last % 2 == 1) {\n          \
    \      count += 1\n            }\n            last = i\n            first = i\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vkejpbd.scala:16:19\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            last = i\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (i : Long)\n\e[31m   |\e[0m                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vkejpbd.scala:17:20 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            first = i\n\e[31m\e[31m   |\e[0m        \
    \            ^\e[0m\n\e[31m   |\e[0m                    Found:    (i : Long)\n\
    \e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ % 2 == 0)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 3 == 0)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 4 == 0)\n        val numsCopy5 = numsCopy4.filter(_ % 5\
    \ == 0)\n        val numsCopy6 = numsCopy5.filter(_ % 6 == 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 7 == 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 8 == 0)\n        val numsCopy9 = numsCopy8.filter(_ % 9 == 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 10 == 0)\n        val numsCopy11 = numsCopy10.filter(_\
    \ % 11 == 0)\n        val numsCopy12 = numsCopy11.filter(_ % 12 == 0)\n      \
    \  val numsCopy13 = numsCopy12.filter(_ % 13 == 0)\n        val numsCopy14 = numsCopy13.filter(_\
    \ % 14 == 0)\n        val numsCopy15 = numsCopy14.filter(_ % 15 == 0)\n      \
    \  val numsCopy16 = numsCopy15.filter(_ % 16 == 0)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 17 == 0)\n        val numsCopy18 = numsCopy17.filter(_ % 18 == 0)\n      \
    \  val numsCopy19 = numsCopy18.filter(_ % 19 == 0)\n        val numsCopy20 = numsCopy19.filter(_\
    \ % 20 == 0)\n        val numsCopy21 = numsCopy20.filter(_ % 21 == 0)\n      \
    \  val numsCopy22 = numsCopy21.filter(_ % 22 == 0)\n        val numsCopy23 = numsCopy22.filter(_\
    \ % 23 == 0)\n        val numsCopy24 = numsCopy23.filter(_ % 24 == 0)\n      \
    \  val numsCopy25 = numsCopy24.filter(_ % 25 == 0)\n        val numsCopy26 = numsCopy25.filter(_\
    \ % 26 == 0)\n        val numsCopy27 = numsCopy26.filter(_ % 27 == 0)\n      \
    \  val numsCopy28 = numsCopy27.filter(_ % 28 == 0)\n        val numsCopy29 = numsCopy28.filter(_\
    \ % 29 == 0)\n        val numsCopy30 = numsCopy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9xhr6kx1.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ odds = nums.filter(x => x % 2 != 0)\n        val evens = nums.filter(x => x\
    \ % 2 == 0)\n        odds.length + evens.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm6clk8iw.scala:14)\n\tat Problem.main(tmpm6clk8iw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i) >\
    \ 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu0disqpt.scala:19)\n\tat Problem.main(tmpu0disqpt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (ns <- nums) {\n            if (ns > 10 && ns % 2 !=\
    \ 0 && ns % 2 != 1) {\n                count += 1\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5hg_adb8.scala:19)\n\tat Problem.main(tmp5hg_adb8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028989
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcw4g324t.scala:20)\n\tat Problem.main(tmpcw4g324t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 == 1 && numsCopy.last % 2 == 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcjj0yqdw.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && numsCopy.head % \e[31m2\e[0m == \e[31m1\e[0m && numsCopy.last\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsFiltered = nums.filter(_ > 10).filter(_ % 2 != 0)\n        numsFiltered.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2u3c2vrr.scala:15)\n\tat Problem.main(tmp2u3c2vrr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length)\n            if (nums(i) >\
    \ 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1)\n                count += 1\n  \
    \      return count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxxo05ue6.scala:17)\n\tat Problem.main(tmpxxo05ue6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        var count = 0\n        var lastOdd = false\n\
    \        var firstOdd = false\n        for (i <- 0 until numsCopy.size) {\n  \
    \          val num = numsCopy(i)\n            if (num > 10 && lastOdd && firstOdd)\
    \ {\n                count += 1\n            }\n            if (num > 10 && !lastOdd\
    \ && !firstOdd) {\n                lastOdd = true\n            }\n           \
    \ if (num < 10 && lastOdd && !firstOdd) {\n                firstOdd = true\n \
    \           }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpow_b1uz3.scala:30)\n\tat Problem.main(tmpow_b1uz3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsp2pqqt.scala:17)\n\tat Problem.main(tmplsp2pqqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        val odds = numsSorted.filter(_ % 2 != 0)\n \
    \       val evens = numsSorted.filter(_ % 2 == 0)\n        val firstOdds = odds.takeWhile(_\
    \ < 10)\n        val lastOdds = odds.dropWhile(_ < 10)\n        val firstEvens\
    \ = evens.takeWhile(_ < 10)\n        val lastEvens = evens.dropWhile(_ < 10)\n\
    \        val firstOddEvens = firstOdds.zip(lastOdds).filter(_._1 == _._1)\n  \
    \      val lastOddEvens = lastOdds.zip(firstEvens).filter(_._1 == _._1)\n    \
    \    val firstEvenLastOdds = firstEvens.zip(lastOdds).filter(_._1 == _._1)\n \
    \       val lastEvenFirstOdds = lastEvens.zip(firstOdds).filter(_._1 == _._1)\n\
    \        val firstOddEvenLastOdds = firstOddEvens.zip(lastOddEvens).filter(_._1\
    \ == _._1)\n        val lastEvenFirstOddEvens = lastEvenFirstOdds.zip(firstEvenLastOdds).filter(_._1\
    \ == _._1)\n        val firstEvenLastOddEvens = firstEvenLastOdds.zip(lastEvenFirstOddEvens).filter(_._1\
    \ == _._1)\n        val lastEvenFirstOddEvenLastOdds = lastEvenFirstOddEvens.zip(firstOddEvenLastOdds).filter(_._1\
    \ == _._1)\n        val firstOddEvenLastOddEvenLastOdds = firstOddEvenLastOdds.zip(lastOddEvenLastOdds).filter(_._1\
    \ == _._1)\n        val lastEvenFirstOddEvenLastOddEvens = lastEvenFirstOddEvenLastOdds.zip(firstEvenLastOddEvens).filter(_._1\
    \ == _._1)\n        val firstEvenLastOddEvenLastOddEvenLastOdds = firstEvenLastOddEvenLastOdds.zip(lastEvenFirstOddEvenLastOdds).filter(_._1\
    \ == _._1)\n        val lastEvenFirstOddEvenLastOddEvenLastOddEvens = lastEvenFirstOddEvenLastOddEvens.zip(firstOddEvenLastOddEvenLastOdds).filter(_._1\
    \ == _._1)\n        val firstOddEvenLastOddEvenLastOddEvenLastOddEvens = firstOddEvenLastOdd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjottcgfi.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjottcgfi.scala:26:54 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mfirstEvenLastOddEvenLastOddEvenLastOdds\e\
    [0m = firstEvenLastOddEvenLastOdds.zip(lastEvenFirstOddEvenLastOdds).filter(_._1\
    \ == _._1)\n\e[31m\e[31m   |\e[0m                                            \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Not found: firstEvenLastOddEvenLastOdds\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjottcgfi.scala:28:61 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mfirstOddEvenLastOddEvenLastOddEvenLastOddEvens\e\
    [0m = firstOddEvenLastOdd\n\e[31m\e[31m   |\e[0m                             \
    \                                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                       Not found: firstOddEvenLastOdd\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjottcgfi.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(x =>\
    \ x % 2 != 0)\n        val evens = numsSorted.filter(x => x % 2 == 0)\n      \
    \  val firstOdds = evens.takeWhile(x => x % 2 != 0)\n        val lastOdds = evens.dropWhile(x\
    \ => x % 2 == 0).last\n        val firstEvens = odds.takeWhile(x => x % 2 == 0)\n\
    \        val lastEvens = odds.dropWhile(x => x % 2 != 0).last\n        val firstOddsEvens\
    \ = firstOdds ++ firstEvens\n        val lastOddsEvens = lastOdds ++ lastEvens\n\
    \        val firstOddsEvensLastOdds = firstOddsEvens ++ lastOdds\n        val\
    \ lastOddsEvensFirstOdds = lastOddsEvens ++ firstOdds\n        val firstOddsEvensLastOddsLastEvens\
    \ = firstOddsEvensLastOdds ++ lastEvens\n        val lastOddsEvensFirstOddsLastEvens\
    \ = lastOddsEvensFirstOdds ++ firstEvens\n        val firstOddsEvensLastOddsLastEvensLastOdds\
    \ = firstOddsEvensLastOddsLastEvens ++ lastOdds\n        val lastOddsEvensFirstOddsLastEvensLastOdds\
    \ = lastOddsEvensFirstOddsLastEvens ++ firstOdds\n        val firstOddsEvensLastOddsLastEvensLastOddsLastEvens\
    \ = firstOddsEvensLastOddsLastEvensLastOdds ++ lastEvens\n        val lastOddsEvensFirstOddsLastEvensLastOddsLastEvensLastOdds\
    \ = lastOddsEvensFirstOddsLastEvensLastOdds ++ firstOdds\n        val firstOddsEvensLastOddsLastEvensLastOddsLastEvensLastOddsLastEvens\
    \ = firstOddsEvensLastOddsLastEvensLastOddsLastEvens ++ lastOdds\n        val\
    \ lastOddsEvensFirstOddsLastEvensLastOddsLastEvensLastO\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyqlvfb1s.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyqlvfb1s.scala:17:37\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mlastOddsEvens\e[0m = lastOdds ++ lastEvens\n\e[31m\e[31m   |\e[0m        \
    \                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \     value ++ is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyqlvfb1s.scala:18:55 --------------------\e[0m\e[0m\n\e[31m18 |\e[0m\
    \        \e[33mval\e[0m \e[36mfirstOddsEvensLastOdds\e[0m = firstOddsEvens ++\
    \ lastOdds\n\e[31m\e[31m   |\e[0m                                            \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \         Found:    (lastOdds : Long)\n\e[31m   |\e[0m                       \
    \                     Required: IterableOnce[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpyqlvfb1s.scala:20:72 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfirstOddsEvensLastOddsLastEvens\e\
    [0m = firstOddsEvensLastOdds ++ lastEvens\n\e[31m\e[31m   |\e[0m             \
    \                                                           ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                            Found:    (lastEvens\
    \ : Long)\n\e[31m   |\e[0m                                            Required:\
    \ IterableOnce[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyqlvfb1s.scala:22:89\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfirstOddsEvensLastOddsLastEvensLastOdds\e\
    [0m = firstOddsEvensLastOddsLastEvens ++ lastOdds\n\e[31m\e[31m   |\e[0m     \
    \                                                                            \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \      Found:    (lastOdds :"
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        val numsFiltered = numsSorted.filter( n => n\
    \ > 10 && n % 2 == 1 && n % 2 == 0)\n        numsFiltered.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzbjvrw7b.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.last.mod(2)\
    \ == 1 && numsCopy.head.mod(2) == 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8bintlef.scala:10:53 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e[0m => x > \e[31m10\e\
    [0m && numsCopy.last.mod(\e[31m2\e[0m) == \e[31m1\e[0m && numsCopy.head.mod(\e\
    [31m2\e[0m) == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m                   \
    \                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mod is not a\
    \ member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8bintlef.scala:10:82 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e[0m => x > \e[31m10\e\
    [0m && numsCopy.last.mod(\e[31m2\e[0m) == \e[31m1\e[0m && numsCopy.head.mod(\e\
    [31m2\e[0m) == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m                   \
    \                                                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue mod is not a member of Long, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for(i <- 0 until nums.length){\n            if(nums(i) >\
    \ 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd){\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7tspmvfm.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd){\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7tspmvfm.scala:11:56 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd){\n\e[31m\e[31m   |\e[0m                 \
    \                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp7tspmvfm.scala:11:73 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd){\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsp2pqqt.scala:17)\n\tat Problem.main(tmplsp2pqqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ % 2 == 1)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2\
    \ == 1)\n        val numsCopy6 = numsCopy5.filter(_ % 2 == 1)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 == 1)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 == 1)\n        val numsCopy9 = numsCopy8.filter(_ % 2 == 1)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 2 == 1)\n        val numsCopy11 = numsCopy10.filter(_\
    \ % 2 == 1)\n        val numsCopy12 = numsCopy11.filter(_ % 2 == 1)\n        val\
    \ numsCopy13 = numsCopy12.filter(_ % 2 == 1)\n        val numsCopy14 = numsCopy13.filter(_\
    \ % 2 == 1)\n        val numsCopy15 = numsCopy14.filter(_ % 2 == 1)\n        val\
    \ numsCopy16 = numsCopy15.filter(_ % 2 == 1)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 2 == 1)\n        val numsCopy18 = numsCopy17.filter(_ % 2 == 1)\n        val\
    \ numsCopy19 = numsCopy18.filter(_ % 2 == 1)\n        val numsCopy20 = numsCopy19.filter(_\
    \ % 2 == 1)\n        val numsCopy21 = numsCopy20.filter(_ % 2 == 1)\n        val\
    \ numsCopy22 = numsCopy21.filter(_ % 2 == 1)\n        val numsCopy23 = numsCopy22.filter(_\
    \ % 2 == 1)\n        val numsCopy24 = numsCopy23.filter(_ % 2 == 1)\n        val\
    \ numsCopy25 = numsCopy24.filter(_ % 2 == 1)\n        val numsCopy26 = numsCopy25.filter(_\
    \ % 2 == 1)\n        val numsCopy27 = numsCopy26.filter(_ % 2 == 1)\n        val\
    \ numsCopy28 = numsCopy27.filter(_ % 2 == 1)\n        val numsCopy29 = numsCopy28.filter(_\
    \ % 2 == 1)\n        val numsCopy30 = numsCopy29.filter(_ % 2 == 1)\n        val\
    \ numsCopy31 = numsCopy30.filter(_ % 2 == 1)\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7mms88d6.scala:40:11 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7mms88d6.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 == 1 && numsCopy.last % 2 == 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcjj0yqdw.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && numsCopy.head % \e[31m2\e[0m == \e[31m1\e[0m && numsCopy.last\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        var count = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            if (numsCopy(i) > 10 && numsCopy(i) mod 2 != 0) {\n         \
    \       count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm_ecgm5r.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (numsCopy(i)\
    \ > \e[31m10\e[0m && numsCopy(i) mod \e[31m2\e[0m != \e[31m0\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                    Found:    Long\n\e[31m   |\e[0m       \
    \                             Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        val numsCopy5 = numsCopy4.filter(_ > 10)\n        val numsCopy6\
    \ = numsCopy5.filter(_ > 10)\n        val numsCopy7 = numsCopy6.filter(_ > 10)\n\
    \        val numsCopy8 = numsCopy7.filter(_ > 10)\n        val numsCopy9 = numsCopy8.filter(_\
    \ > 10)\n        val numsCopy10 = numsCopy9.filter(_ > 10)\n        val numsCopy11\
    \ = numsCopy10.filter(_ > 10)\n        val numsCopy12 = numsCopy11.filter(_ >\
    \ 10)\n        val numsCopy13 = numsCopy12.filter(_ > 10)\n        val numsCopy14\
    \ = numsCopy13.filter(_ > 10)\n        val numsCopy15 = numsCopy14.filter(_ >\
    \ 10)\n        val numsCopy16 = numsCopy15.filter(_ > 10)\n        val numsCopy17\
    \ = numsCopy16.filter(_ > 10)\n        val numsCopy18 = numsCopy17.filter(_ >\
    \ 10)\n        val numsCopy19 = numsCopy18.filter(_ > 10)\n        val numsCopy20\
    \ = numsCopy19.filter(_ > 10)\n        val numsCopy21 = numsCopy20.filter(_ >\
    \ 10)\n        val numsCopy22 = numsCopy21.filter(_ > 10)\n        val numsCopy23\
    \ = numsCopy22.filter(_ > 10)\n        val numsCopy24 = numsCopy23.filter(_ >\
    \ 10)\n        val numsCopy25 = numsCopy24.filter(_ > 10)\n        val numsCopy26\
    \ = numsCopy25.filter(_ > 10)\n        val numsCopy27 = numsCopy26.filter(_ >\
    \ 10)\n        val numsCopy28 = numsCopy27.filter(_ > 10)\n        val numsCopy29\
    \ = numsCopy28.filter(_ > 10)\n        val numsCopy30 = numsCopy29.filter(_ >\
    \ 10)\n        val numsCopy31 = numsCopy30.filter(_ > 10)\n        val numsCopy32\
    \ = numsCopy31.filter(_ > 10)\n        val numsCopy33 = numsCopy32.filter(_ >\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbbukovnv.scala:41:46 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mnumsCopy33\e[0m = numsCopy32.filter(_\
    \ > \n\e[31m\e[31m   |\e[0m                                              ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbbukovnv.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && x % 2 != 0 &&\
    \ x % 2 != 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpptsdsmwn.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && x % \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m2\e\
    [0m != \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i) >\
    \ 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4dviu_10.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4dviu_10.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4dviu_10.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        var lastDigit = 0\n        var firstDigit = 0\n        var\
    \ lastOdd = 0\n        var firstOdd = 0\n        for (i <- nums) {\n         \
    \   if (i > 10) {\n                count += 1\n                if (lastDigit %\
    \ 2 != 0) {\n                    lastOdd += 1\n                }\n           \
    \     if (firstDigit % 2 != 0) {\n                    firstOdd += 1\n        \
    \        }\n            }\n            lastDigit = i % 10\n            firstDigit\
    \ = i / 10\n        }\n        if (lastDigit % 2 != 0) {\n            lastOdd\
    \ += 1\n        }\n        if (firstDigit % 2 != 0) {\n            firstOdd +=\
    \ 1\n        }\n        count + lastOdd + firstOdd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ezug566.scala:24:24\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            lastDigit = i % \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    Long\n\e[31m   |\e[0m            \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8ezug566.scala:25:25 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            firstDigit = i / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    Long\n\e[31m   |\e[0m                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        var count = 0\n        for (i <- numsCopy) {\n\
    \            if (i > 10 && i % 2 != 0 && i % 2 != 1) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3w40vzfr.scala:20)\n\tat Problem.main(tmp3w40vzfr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsp2pqqt.scala:17)\n\tat Problem.main(tmplsp2pqqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for(i <- 0 until nums.size) {\n            if(nums(i) > 10\
    \ && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppkcmvm7k.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmppkcmvm7k.scala:11:56 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                            value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppkcmvm7k.scala:11:73 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i<-0 until nums.size) {\n            if (nums(i) > 10\
    \ && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count += 1\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpps9784zy.scala:19)\n\tat Problem.main(tmpps9784zy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        var count = 0\n        var lastOdd = false\n\
    \        var firstOdd = false\n        for(i <- 0 until numsSorted.length) {\n\
    \            val num = numsSorted(i)\n            if(num > 10 && lastOdd && firstOdd)\
    \ {\n                count += 1\n            }\n            if(num > 10 && !lastOdd\
    \ && !firstOdd) {\n                lastOdd = true\n            }\n           \
    \ if(num < 10 && !lastOdd && firstOdd) {\n                firstOdd = true\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbq8z8833.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        var firstOdd = false\n        var lastOdd = false\n     \
    \   for (i <- 0 until nums.length) {\n            if (nums(i) > 10) {\n      \
    \          count += 1\n                if (nums(i) % 2 != 0) {\n             \
    \       firstOdd = true\n                }\n                if (nums(i) % 2 !=\
    \ 0) {\n                    lastOdd = true\n                }\n            }\n\
    \        }\n        if (firstOdd && lastOdd) {\n            count += 1\n     \
    \   }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3utth8ko.scala:30)\n\tat Problem.main(tmp3utth8ko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i) >\
    \ 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4dviu_10.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4dviu_10.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4dviu_10.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsFiltered = nums.filter( n => n > 10 && n % 2 == 1 && n % 2 == 1 )\n    \
    \    numsFiltered.length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowgfbsfr.scala:15)\n\tat Problem.main(tmpowgfbsfr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu1k686li.scala:15)\n\tat Problem.main(tmpu1k686li.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 == 1 && numsCopy.last % 2 == 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcjj0yqdw.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && numsCopy.head % \e[31m2\e[0m == \e[31m1\e[0m && numsCopy.last\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(_ > 10).count(_ % 2 == 0) +\
    \ 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpafhcnidh.scala:13)\n\tat Problem.main(tmpafhcnidh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for(i <- 0 until nums.length){\n            if(nums(i) >\
    \ 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd){\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7tspmvfm.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd){\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7tspmvfm.scala:11:56 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd){\n\e[31m\e[31m   |\e[0m                 \
    \                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp7tspmvfm.scala:11:73 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd){\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ odds = nums.filter(x => x % 2 != 0)\n        val evens = nums.filter(x => x\
    \ % 2 == 0)\n        val odd_first = odds.filter(x => x % 10 == 0)\n        val\
    \ odd_last = odds.filter(x => x % 10 == 9)\n        val even_first = evens.filter(x\
    \ => x % 10 == 0)\n        val even_last = evens.filter(x => x % 10 == 9)\n  \
    \      odd_first.size + odd_last.size + even_first.size + even_last.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_iistba3.scala:19)\n\tat Problem.main(tmp_iistba3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (ns <- nums) {\n            if (ns > 10 && ns % 2 ==\
    \ 1 && ns % 2 == 0) {\n                count += 1\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptg6q3liu.scala:19)\n\tat Problem.main(tmptg6q3liu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i) >\
    \ 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4dviu_10.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4dviu_10.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4dviu_10.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph5vrihmd.scala:19)\n\tat Problem.main(tmph5vrihmd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5gckw_on.scala:18)\n\tat Problem.main(tmp5gckw_on.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i<-0 until nums.length){\n            if (nums(i) >\
    \ 10 && nums(i) % 2 == 1 && nums(i-1) % 2 == 1){\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpbkb8yk55.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmpbkb8yk55.scala:14)\n\
    \tat Problem$.main(tmpbkb8yk55.scala:19)\n\tat Problem.main(tmpbkb8yk55.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph5vrihmd.scala:19)\n\tat Problem.main(tmph5vrihmd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        var count = 0\n        for (i <- 0 until numsSorted.length)\
    \ {\n            if (numsSorted(i) > 10 && numsSorted(i).isOdd && numsSorted(i).isOdd\
    \ && numsSorted(i).isOdd) {\n                count += 1\n            }\n     \
    \   }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqba4vqvy.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i) >\
    \ 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4dviu_10.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4dviu_10.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4dviu_10.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ % 2 == 1)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2\
    \ == 0)\n        numsCopy5.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi2q8zrzn.scala:18)\n\tat Problem.main(tmpi2q8zrzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && x % 2 != 0 &&\
    \ x % 2 != 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpptsdsmwn.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && x % \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m2\e\
    [0m != \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 != 0).filter(_\
    \ % 2 != 1).size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpirptsu73.scala:14)\n\tat Problem.main(tmpirptsu73.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        var last = 0\n        var first = 0\n        for (i <- nums)\
    \ {\n            if (i > 10) {\n                count += 1\n                if\
    \ (last % 2 == 1) {\n                    count += 1\n                }\n     \
    \           if (first % 2 == 1) {\n                    count += 1\n          \
    \      }\n            }\n            last = i\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgv0k1dqs.scala:22:19\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            last = i\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (i : Long)\n\e[31m   |\e[0m                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ % 2 == 1)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2\
    \ == 0)\n        val numsCopy6 = numsCopy5.filter(_ % 2 == 1)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 2 == 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 2 == 1)\n        val numsCopy9 = numsCopy8.filter(_ % 2 == 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 2 == 1)\n        val numsCopy11 = numsCopy10.filter(_\
    \ % 2 == 0)\n        val numsCopy12 = numsCopy11.filter(_ % 2 == 1)\n        val\
    \ numsCopy13 = numsCopy12.filter(_ % 2 == 0)\n        val numsCopy14 = numsCopy13.filter(_\
    \ % 2 == 1)\n        val numsCopy15 = numsCopy14.filter(_ % 2 == 0)\n        val\
    \ numsCopy16 = numsCopy15.filter(_ % 2 == 1)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 2 == 0)\n        val numsCopy18 = numsCopy17.filter(_ % 2 == 1)\n        val\
    \ numsCopy19 = numsCopy18.filter(_ % 2 == 0)\n        val numsCopy20 = numsCopy19.filter(_\
    \ % 2 == 1)\n        val numsCopy21 = numsCopy20.filter(_ % 2 == 0)\n        val\
    \ numsCopy22 = numsCopy21.filter(_ % 2 == 1)\n        val numsCopy23 = numsCopy22.filter(_\
    \ % 2 == 0)\n        val numsCopy24 = numsCopy23.filter(_ % 2 == 1)\n        val\
    \ numsCopy25 = numsCopy24.filter(_ % 2 == 0)\n        val numsCopy26 = numsCopy25.filter(_\
    \ % 2 == 1)\n        val numsCopy27 = numsCopy26.filter(_ % 2 == 0)\n        val\
    \ numsCopy28 = numsCopy27.filter(_ % 2 == 1)\n        val numsCopy29 = numsCopy28.filter(_\
    \ % 2 == 0)\n        val numsCopy30 = numsCopy29.filter(_ % 2 == 1)\n        val\
    \ numsCopy31 = numsCopy30.filter(_ % 2 == 0)\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpkm2rg9m8.scala:40:11 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm2rg9m8.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n                count += 1\n         \
    \   }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfq0vjcfz.scala:11:31\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (i\
    \ > \e[31m10\e[0m && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e\
    [31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m          \
    \                     Found:    (i : Long)\n\e[31m   |\e[0m                  \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfq0vjcfz.scala:11:48 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m            \e[33mif\e[0m (i > \e[31m10\e[0m && nums(i).isOdd && nums(i).isOdd\
    \ && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                                 \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \          Found:    (i : Long)\n\e[31m   |\e[0m                             \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfq0vjcfz.scala:11:65 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m            \e[33mif\e[0m (i > \e[31m10\e[0m && nums(i).isOdd && nums(i).isOdd\
    \ && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                                 \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                               Found:    (i : Long)\n\e[31m   |\e[0m        \
    \                                            Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val oddNums = numsCopy.filter(x => x % 2 !=\
    \ 0)\n        val firstOddNum = oddNums.head\n        val lastOddNum = oddNums.last\n\
    \        val firstOddNumDigit = firstOddNum.toString.charAt(0)\n        val lastOddNumDigit\
    \ = lastOddNum.toString.charAt(0)\n        val firstOddNumDigitOdd = firstOddNumDigit\
    \ % 2 != 0\n        val lastOddNumDigitOdd = lastOddNumDigit % 2 != 0\n      \
    \  val firstOddNumDigitEven = firstOddNumDigit == lastOddNumDigit\n        val\
    \ lastOddNumDigitEven = lastOddNumDigit == firstOddNumDigit\n        val firstOddNumDigitOddAndEven\
    \ = firstOddNumDigitOdd && firstOddNumDigitEven\n        val lastOddNumDigitOddAndEven\
    \ = lastOddNumDigitOdd && lastOddNumDigitEven\n        val firstOddNumDigitOddAndOdd\
    \ = firstOddNumDigitOdd && lastOddNumDigitOdd\n        val lastOddNumDigitOddAndOdd\
    \ = lastOddNumDigitOdd && firstOddNumDigitOdd\n        val firstOddNumDigitEvenAndOdd\
    \ = firstOddNumDigitEven && lastOddNumDigitOdd\n        val lastOddNumDigitEvenAndOdd\
    \ = lastOddNumDigitEven && firstOddNumDigitOdd\n        val firstOddNumDigitOddAndEvenAndOdd\
    \ = firstOddNumDigitOddAndEven && lastOddNumDigitOddAndOdd\n        val lastOddNumDigitOddAndEvenAndOdd\
    \ = lastOddNumDigitOddAndEven && firstOddNumDigitOddAndOdd\n        val firstOddNumDigitEvenAndEvenAndOdd\
    \ = firstOddNumDigitEvenAndOdd && lastOddNumDigitEvenAndOdd\n        val lastOddNumDigitEvenAndEvenAndOdd\
    \ = lastOddNumDigitEvenAndOdd && firstOddNumDigitEvenAndOdd\n        val firstOddNumDigitOddAndOddAndEvenAndOdd\
    \ = firstOddNumDigitOddAndOdd && lastOddNum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpck7mi5a5.scala:29:82\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mfirstOddNumDigitOddAndOddAndEvenAndOdd\e\
    [0m = firstOddNumDigitOddAndOdd && lastOddNum\n\e[31m\e[31m   |\e[0m         \
    \                                                                         ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Found:    (lastOddNum\
    \ : Long)\n\e[31m   |\e[0m                                           Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpck7mi5a5.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i) >\
    \ 10 && nums(i) % 2 == 1 && nums(i) % 3 == 1) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphoplv3qn.scala:19)\n\tat Problem.main(tmphoplv3qn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjs145k4m.scala:10:57\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(_ > \e\
    [31m10\e[0m).filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).filter(_ % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5gckw_on.scala:18)\n\tat Problem.main(tmp5gckw_on.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i<- 0 until nums.length) {\n            if (nums(i)\
    \ > 10) {\n                if (nums(i) % 2 == 1 && nums(i-1) % 2 == 1) {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \      count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpryyq9ohy.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.specialFilter(tmpryyq9ohy.scala:16)\n\
    \tat Problem$.main(tmpryyq9ohy.scala:21)\n\tat Problem.main(tmpryyq9ohy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(_ %\
    \ 2 != 0)\n        val evens = numsSorted.filter(_ % 2 == 0)\n        val firstOdds\
    \ = evens.takeWhile(_ < 10)\n        val lastOdds = evens.dropWhile(_ < 10)\n\
    \        val firstEvens = odds.takeWhile(_ < 10)\n        val lastEvens = odds.dropWhile(_\
    \ < 10)\n        val firstOddEvens = firstOdds.zip(lastOdds).filter(_._1 == _._1)\n\
    \        val lastOddEvens = lastOdds.zip(firstEvens).filter(_._1 == _._1)\n  \
    \      val firstEvenEvens = firstEvens.zip(lastEvens).filter(_._1 == _._1)\n \
    \       val lastEvenEvens = lastEvens.zip(firstOdds).filter(_._1 == _._1)\n  \
    \      val firstOddEvenEvens = firstOddEvens.zip(lastOddEvens).filter(_._1 ==\
    \ _._1)\n        val lastOddEvenEvens = lastOddEvens.zip(firstEvenEvens).filter(_._1\
    \ == _._1)\n        val firstEvenEvenEvens = firstEvenEvens.zip(lastEvenEvens).filter(_._1\
    \ == _._1)\n        val lastEvenEvenEvens = lastEvenEvens.zip(firstOddEvens).filter(_._1\
    \ == _._1)\n        val firstOddEvenEvenEvens = firstOddEvenEvens.zip(lastOddEvenEvens).filter(_._1\
    \ == _._1)\n        val lastOddEvenEvenEvens = lastOddEvenEvens.zip(firstEvenEvenEvens).filter(_._1\
    \ == _._1)\n        val firstEvenEvenEvenEvens = firstEvenEvenEvens.zip(lastEvenEvenEvens).filter(_._1\
    \ == _._1)\n        val lastEvenEvenEvenEvens = lastEvenEvenEvens.zip(firstOddEvenEvens).filter(_._1\
    \ == _._1)\n        val firstOddEvenEvenEvenEvens = firstOddEvenEvenEvens.zip(lastOddEvenEvenEvens).filter(_._1\
    \ == _._1)\n        val lastOddEvenEvenEvenEvens = lastOddEvenEvens.zip(firstEvenEvenEvenEvens).filter(_._1\
    \ == _._1)\n        val firstEvenEvenEvenEvenEvens = firstEvenEvenEvenEvens.zip(lastEvenEvenEvenEvens).filter(_._1\
    \ == _._1)\n        val lastEvenEvenEvenEvenEvens = lastEvenEvenEvenEven\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphl5umlcq.scala:16:61 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mfirstOddEvens\e[0m = firstOdds.zip(lastOdds).filter(_._1\
    \ == _._1)\n\e[31m\e[31m   |\e[0m                                            \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \     value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphl5umlcq.scala:17:61 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mlastOddEvens\e[0m = lastOdds.zip(firstEvens).filter(_._1\
    \ == _._1)\n\e[31m\e[31m   |\e[0m                                            \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \     value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphl5umlcq.scala:18:64 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mfirstEvenEvens\e[0m = firstEvens.zip(lastEvens).filter(_._1\
    \ == _._1)\n\e[31m\e[31m   |\e[0m                                            \
    \                  ^^^^\e[0m\n\e[31m   |\e[0m                                \
    \        value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmphl5umlcq.scala:19:62 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mlastEvenEvens\e[0m = lastEvens.zip(firstOdds).filter(_._1\
    \ == _._1)\n\e[31m\e[31m   |\e[0m                                            \
    \                ^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \      value _1 is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmphl5umlcq.scala:29:91\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ \e[33mval\e[0m \e[36mlastOddEvenEvenEvenEvens\e[0m = lastOddEvenEvens.zip(firstEvenEvenEvenEvens).filter(_._1\
    \ == _._1)\n\e[31m\e[31m   |\e[0m                                            \
    \                                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mValues of types (Long, Long) and ((Long, Long), (Long, Long)) cannot be compared\
    \ with == or !=.\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  \
    \  Tuple.canEqualTup"
  stdout: ''
  timestamp: 1660029014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(n => n > 10 && n % 2 == 1 &&\
    \ n % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe67spvm4.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mn\e\
    [0m => n > \e[31m10\e[0m && n % \e[31m2\e[0m == \e[31m1\e[0m && n % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        var odd = 0\n        var firstOdd = 0\n        var lastOdd\
    \ = 0\n        var firstEven = 0\n        var lastEven = 0\n        for (i <-\
    \ nums) {\n            if (i > 10) {\n                count += 1\n           \
    \     if (i % 2 == 1) {\n                    odd += 1\n                    if\
    \ (i % 2 != 0) {\n                        firstEven += 1\n                   \
    \ }\n                }\n                if (i % 2 != 0) {\n                  \
    \  lastEven += 1\n                }\n                if (i % 2 == 0) {\n     \
    \               firstOdd += 1\n                }\n                if (i % 2 !=\
    \ 0) {\n                    lastOdd += 1\n                }\n            }\n \
    \       }\n        return (count * 2) + (firstOdd * 2) + (lastOdd * 2) + (firstEven\
    \ * 2) + (lastEven * 2)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps7mmx7y9.scala:39)\n\tat Problem.main(tmps7mmx7y9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 &&\
    \ i % 2 != 0) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpysddquzq.scala:20)\n\tat Problem.main(tmpysddquzq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n               \
    \ count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbvc7vfdb.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbvc7vfdb.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbvc7vfdb.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ evens = nums.filter(x => x % 2 == 0)\n        val odd = nums.filter(x => x %\
    \ 2 != 0)\n        val evensAndOdd = evens.zip(odd)\n        val evensAndOddCount\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount2\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount3\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount4\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount5\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount6\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount7\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount8\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount9\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount10\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount11\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount12\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount13\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount14\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount15\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount16\
    \ = evensAndOdd.count(x => x._1 > 10 && x._2 % 2 == 1)\n        val evensAndOddCount17\
    \ = evensAndOdd.count(x => x._\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpofdjelu7.scala:28:58 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mevensAndOddCount17\e[0m\
    \ = evensAndOdd.count(\e[36mx\e[0m => x._\n\e[31m\e[31m   |\e[0m             \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                           an identifier expected, but '_' found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpofdjelu7.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        var count = 0\n        for (i <- 0 until numsSorted.length)\
    \ {\n            if (numsSorted(i) > 10 && numsSorted(i) % 2 != 0 && numsSorted(i)\
    \ % 2 != 1) {\n                count += 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaikwrtvq.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5gckw_on.scala:18)\n\tat Problem.main(tmp5gckw_on.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsp2pqqt.scala:17)\n\tat Problem.main(tmplsp2pqqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_\
    \ % 2 == 0).size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8oglcpec.scala:14)\n\tat Problem.main(tmp8oglcpec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsp2pqqt.scala:17)\n\tat Problem.main(tmplsp2pqqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n               \
    \ count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbvc7vfdb.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbvc7vfdb.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                             value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbvc7vfdb.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 &&\
    \ i % 2 != 0) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpysddquzq.scala:20)\n\tat Problem.main(tmpysddquzq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsp2pqqt.scala:17)\n\tat Problem.main(tmplsp2pqqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for(i <- nums) {\n            if(i.gt(10) && i.mod(2).equals(1))\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpheeiy6bf.scala:11:17 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(i.gt(\e[31m10\e[0m) && i.mod(\e\
    [31m2\e[0m).equals(\e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m               ^^^^\e\
    [0m\n\e[31m   |\e[0m               value gt is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660029013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i) >\
    \ 10 && nums(i) % 2 == 1 && nums(i) % 2 != 0) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7enwbvy3.scala:20)\n\tat Problem.main(tmp7enwbvy3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && nums(i) % 2\
    \ == 1 && nums(i-1) % 2 == 1) {\n                count += 1\n            }\n \
    \       }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5q1ruup.scala:11:31\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (i\
    \ > \e[31m10\e[0m && nums(i) % \e[31m2\e[0m == \e[31m1\e[0m && nums(i-\e[31m1\e\
    [0m) % \e[31m2\e[0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                \
    \               ^\e[0m\n\e[31m   |\e[0m                               Found: \
    \   (i : Long)\n\e[31m   |\e[0m                               Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5q1ruup.scala:11:51\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (i\
    \ > \e[31m10\e[0m && nums(i) % \e[31m2\e[0m == \e[31m1\e[0m && nums(i-\e[31m1\e\
    [0m) % \e[31m2\e[0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                \
    \                                   ^^^\e[0m\n\e[31m   |\e[0m                \
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjs145k4m.scala:10:57\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(_ > \e\
    [31m10\e[0m).filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).filter(_ % \e[31m2\e[0m\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ odds = nums.filter(x => x % 2 != 0)\n        val evens = nums.filter(x => x\
    \ % 2 == 0)\n        val firstOdd = odds.head\n        val lastOdd = odds.last\n\
    \        val firstEven = evens.head\n        val lastEven = evens.last\n     \
    \   val firstOddAndLastOdd = firstOdd * lastOdd\n        val firstEvenAndLastEven\
    \ = firstEven * lastEven\n        val firstOddAndLastEvenAndLastOdd = firstOddAndLastOdd\
    \ * lastEven\n        val firstOddAndLastEvenAndLastOddAndLastEven = firstOddAndLastEven\
    \ * lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOdd =\
    \ firstOddAndLastEvenAndLastOdd * lastEven\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEven * lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOdd * lastEven\n        val\
    \ firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd *\
    \ lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\
    \ * lastEven\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\
    \ * lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLast\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7lrvwu2n.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7lrvwu2n.scala:18:55\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstOddAndLastEvenAndLastOddAndLastEven\e[0m = firstOddAndLastEven * lastOdd\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: firstOddAndLastEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7lrvwu2n.scala:23:107\
    \ --------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\e\
    [0m = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\
    \ * lastEven\n\e[31m\e[31m   |\e[0m                                          \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7lrvwu2n.scala:24:118 -----------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mfirstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\e\
    [0m = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOdd\
    \ * lastOdd\n\e[31m\e[31m   |\e[0m                                           \
    \                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31"
  stdout: ''
  timestamp: 1660029014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 &&\
    \ i % 2 != 0) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpysddquzq.scala:20)\n\tat Problem.main(tmpysddquzq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && x % 2 != 0 &&\
    \ x % 2 != 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpptsdsmwn.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && x % \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m2\e\
    [0m != \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsp2pqqt.scala:17)\n\tat Problem.main(tmplsp2pqqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.foreach(x => {\n            if (x >\
    \ 10 && x % 2 != 0 && x % 2 != 1) {\n                numsCopy.remove(x)\n    \
    \        }\n        })\n        numsCopy.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7l2tlju1.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                numsCopy.remove(x)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a\
    \ member of List[Long] - did you mean numsCopy.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1660029014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5gckw_on.scala:18)\n\tat Problem.main(tmp5gckw_on.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0)\
    \ {\n                if (i % 2 != 0) {\n                    if (nums.head % 2\
    \ != 0) {\n                        if (nums.last % 2 != 0) {\n               \
    \             count += 1\n                        }\n                    }\n \
    \               }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfis4uoim.scala:26)\n\tat Problem.main(tmpfis4uoim.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(_ %\
    \ 2 != 0)\n        val evens = numsSorted.filter(_ % 2 == 0)\n        val firstOdds\
    \ = odds.takeWhile(_ < 10)\n        val lastOdds = odds.drop(10)\n        val\
    \ firstEvens = evens.takeWhile(_ < 10)\n        val lastEvens = evens.drop(10)\n\
    \        val firstOddEvens = firstOdds.zip(lastOdds).filter(_._1 == _._1)\n  \
    \      val lastOddEvens = lastOdds.zip(firstEvens).filter(_._1 == _._1)\n    \
    \    val firstEvenLastOdds = firstEvens.zip(lastOdds).filter(_._1 == _._1)\n \
    \       val lastEvenFirstOdds = lastEvens.zip(firstOdds).filter(_._1 == _._1)\n\
    \        val firstOddEvenLastOdds = firstOddEvens.zip(lastOddEvens).filter(_._1\
    \ == _._1)\n        val lastEvenFirstOddEvens = lastEvenFirstOdds.zip(firstEvenLastOdds).filter(_._1\
    \ == _._1)\n        val firstOddEvenLastOddEvens = firstOddEvenLastOdds.zip(lastEvenFirstOddEvens).filter(_._1\
    \ == _._1)\n        val lastEvenFirstOddEvenLastOdds = lastEvenFirstOddEvens.zip(firstOddEvenLastOdds).filter(_._1\
    \ == _._1)\n        val firstOddEvenLastOddEvenLastOdds = firstOddEvenLastOddEvens.zip(lastEvenFirstOddEvenLastOdds).filter(_._1\
    \ == _._1)\n        val lastEvenFirstOddEvenLastOddEvens = lastEvenFirstOddEvenLastOdds.zip(firstOddEvenLastOddEvens).filter(_._1\
    \ == _._1)\n        val firstOddEvenLastOddEvenLastOddEvens = firstOddEvenLastOddEvenLastOdds.zip(lastEvenFirstOddEvenLastOddEvens).filter(_._1\
    \ == _._1)\n        val lastEvenFirstOddEvenLastOddEvenLastOdds = lastEvenFirstOddEvenLastOddEvenLastOdds.zip(firstOddEvenLastOddEvenLastOdds).filter(_._1\
    \ == _._1)\n        val firstOddEvenLastOddEvenLastO\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw7srb1qu.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7srb1qu.scala:16:61\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstOddEvens\e[0m = firstOdds.zip(lastOdds).filter(_._1 == _._1)\n\e[31m\e\
    [31m   |\e[0m                                                           ^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value _1 is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7srb1qu.scala:17:61\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mlastOddEvens\e[0m = lastOdds.zip(firstEvens).filter(_._1 == _._1)\n\e[31m\e\
    [31m   |\e[0m                                                           ^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value _1 is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7srb1qu.scala:18:66\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstEvenLastOdds\e[0m = firstEvens.zip(lastOdds).filter(_._1 == _._1)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \      ^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw7srb1qu.scala:19:66\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mlastEvenFirstOdds\e[0m = lastEvens.zip(firstOdds).filter(_._1 == _._1)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \      ^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ _1 is not a member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw7srb1qu.scala:27:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastEvenFirstOddEvenLastOddEvenLastOdds\e[0m = lastEvenFirstOddEvenLastOddEvenLastOdds.zip(firstOddEvenLastOddEvenLastOdds).filter(_._1\
    \ == _._1)\n\e[31m\e[31m   |\e[0m                                     "
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i<- 0 until nums.length)\n            if (nums(i) >\
    \ 10 && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd)\n                count\
    \ += 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5ttg1l6o.scala:11:40 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd)\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   value isOdd is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5ttg1l6o.scala:11:57 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd)\n\e[31m\e[31m   |\e[0m                  \
    \                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           value isOdd is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5ttg1l6o.scala:11:74 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (nums(i) > \e[31m10\e[0m &&\
    \ nums(i).isOdd && nums(i).isOdd && nums(i).isOdd)\n\e[31m\e[31m   |\e[0m    \
    \                                                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        var count = 0\n        for ( i <- 0 until numsCopy.length\
    \ ) {\n            if ( numsCopy(i) > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd\
    \ ) {\n                count += 1\n            }\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzki2benn.scala:12:49 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m ( numsCopy(i) > \e[31m10\e\
    [0m && numsCopy(i).isOdd && numsCopy(i).isOdd ) {\n\e[31m\e[31m   |\e[0m     \
    \                                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                value isOdd is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzki2benn.scala:12:70 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m ( numsCopy(i) > \e[31m10\e\
    [0m && numsCopy(i).isOdd && numsCopy(i).isOdd ) {\n\e[31m\e[31m   |\e[0m     \
    \                                                     ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value isOdd is not a member\
    \ of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        val even = numsSorted.filter(x => x % 2 == 0)\n\
    \        val odd = numsSorted.filter(x => x % 2 != 0)\n        val firstOdd =\
    \ odd.head\n        val lastOdd = odd.last\n        val firstEven = even.head\n\
    \        val lastEven = even.last\n        val firstOddEven = firstOdd * lastEven\n\
    \        val lastOddEven = lastOdd * firstEven\n        val firstOddEvenLastOdd\
    \ = firstOddEven * lastOdd\n        val lastOddEvenFirstOdd = lastOddEven * firstOdd\n\
    \        val firstOddEvenLastOddLastOdd = firstOddEvenLastOdd * lastOdd\n    \
    \    val lastOddEvenFirstOddLastOdd = lastOddEvenFirstOdd * firstOdd\n       \
    \ val firstOddEvenLastOddLastOddLastOdd = firstOddEvenLastOddLastOdd * lastOdd\n\
    \        val lastOddEvenFirstOddLastOddLastOdd = lastOddEvenFirstOddLastOdd *\
    \ firstOdd\n        val firstOddEvenLastOddLastOddLastOddLastOdd = firstOddEvenLastOddLastOddLastOdd\
    \ * lastOdd\n        val lastOddEvenFirstOddLastOddLastOddLastOdd = lastOddEvenFirstOddLastOddLastOdd\
    \ * firstOdd\n        val firstOddEvenLastOddLastOddLastOddLastOddLastOdd = firstOddEvenLastOddLastOddLastOddLastOdd\
    \ * lastOdd\n        val lastOddEvenFirstOddLastOddLastOddLastOddLastOdd = lastOddEvenFirstOddLastOddLastOddLastOdd\
    \ * firstOdd\n        val firstOddEvenLastOddLastOddLastOddLastOddLastOddLastOdd\
    \ = firstOddEvenLastOddLastOddLastOddLastOddLastOdd * lastOdd\n        val lastOddEvenFirstOddLastOddLastOddLastOddLastOddLastOdd\
    \ = lastOddEvenFirstOddLastOddLastOddLastOddLastOdd \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkz1iccd7.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkz1iccd7.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ % 2 == 0)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 3 == 0)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 4 == 0)\n        val numsCopy5 = numsCopy4.filter(_ % 5\
    \ == 0)\n        val numsCopy6 = numsCopy5.filter(_ % 6 == 0)\n        val numsCopy7\
    \ = numsCopy6.filter(_ % 7 == 0)\n        val numsCopy8 = numsCopy7.filter(_ %\
    \ 8 == 0)\n        val numsCopy9 = numsCopy8.filter(_ % 9 == 0)\n        val numsCopy10\
    \ = numsCopy9.filter(_ % 10 == 0)\n        val numsCopy11 = numsCopy10.filter(_\
    \ % 11 == 0)\n        val numsCopy12 = numsCopy11.filter(_ % 12 == 0)\n      \
    \  val numsCopy13 = numsCopy12.filter(_ % 13 == 0)\n        val numsCopy14 = numsCopy13.filter(_\
    \ % 14 == 0)\n        val numsCopy15 = numsCopy14.filter(_ % 15 == 0)\n      \
    \  val numsCopy16 = numsCopy15.filter(_ % 16 == 0)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 17 == 0)\n        val numsCopy18 = numsCopy17.filter(_ % 18 == 0)\n      \
    \  val numsCopy19 = numsCopy18.filter(_ % 19 == 0)\n        val numsCopy20 = numsCopy19.filter(_\
    \ % 20 == 0)\n        val numsCopy21 = numsCopy20.filter(_ % 21 == 0)\n      \
    \  val numsCopy22 = numsCopy21.filter(_ % 22 == 0)\n        val numsCopy23 = numsCopy22.filter(_\
    \ % 23 == 0)\n        val numsCopy24 = numsCopy23.filter(_ % 24 == 0)\n      \
    \  val numsCopy25 = numsCopy24.filter(_ % 25 == 0)\n        val numsCopy26 = numsCopy25.filter(_\
    \ % 26 == 0)\n        val numsCopy27 = numsCopy26.filter(_ % 27 == 0)\n      \
    \  val numsCopy28 = numsCopy27.filter(_ % 28 == 0)\n        val numsCopy29 = numsCopy28.filter(_\
    \ % 29 == 0)\n        val numsCopy30 = numsCopy\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9xhr6kx1.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph5vrihmd.scala:19)\n\tat Problem.main(tmph5vrihmd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for(i <- nums) {\n            if(i > 10 && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n                count += 1\n         \
    \   }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg_35_a6r.scala:11:30\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m(i >\
    \ \e[31m10\e[0m && nums(i).isOdd && nums(i).isOdd && nums(i).isOdd) {\n\e[31m\e\
    [31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m           \
    \                   Found:    (i : Long)\n\e[31m   |\e[0m                    \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpg_35_a6r.scala:11:47 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m            \e[33mif\e[0m(i > \e[31m10\e[0m && nums(i).isOdd && nums(i).isOdd\
    \ && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                                 \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \        Found:    (i : Long)\n\e[31m   |\e[0m                               \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpg_35_a6r.scala:11:64 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m            \e[33mif\e[0m(i > \e[31m10\e[0m && nums(i).isOdd && nums(i).isOdd\
    \ && nums(i).isOdd) {\n\e[31m\e[31m   |\e[0m                                 \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                              Found:    (i : Long)\n\e[31m   |\e[0m         \
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(n => n > 10 && n % 2 == 1 &&\
    \ n % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe67spvm4.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mn\e\
    [0m => n > \e[31m10\e[0m && n % \e[31m2\e[0m == \e[31m1\e[0m && n % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ evens = nums.filter(x => x % 2 == 0)\n        val odds = nums.filter(x => x\
    \ % 2 != 0)\n        val firstOdds = evens.takeWhile(x => x % 2 != 0)\n      \
    \  val lastOdds = evens.dropWhile(x => x % 2 != 0)\n        val firstEvens = evens.takeWhile(x\
    \ => x % 2 == 0)\n        val lastEvens = evens.dropWhile(x => x % 2 == 0)\n \
    \       val firstOddsAndLastEvens = firstOdds ++ lastEvens\n        val firstOddsAndLastOdds\
    \ = firstOdds ++ lastOdds\n        val firstEvensAndLastOdds = firstEvens ++ lastOdds\n\
    \        val firstEvensAndLastEvens = firstEvens ++ lastEvens\n        val firstOddsAndFirstEvens\
    \ = firstOdds ++ firstEvens\n        val firstOddsAndFirstOdds = firstOdds ++\
    \ firstOdds\n        val firstEvensAndFirstOdds = firstEvens ++ firstOdds\n  \
    \      val firstEvensAndFirstEvens = firstEvens ++ firstEvens\n        val firstOddsAndLastEvensAndFirstOdds\
    \ = firstOddsAndLastEvens ++ firstOddsAndFirstOdds\n        val firstOddsAndLastOddsAndFirstEvens\
    \ = firstOddsAndLastOdds ++ firstEvensAndFirstEvens\n        val firstEvensAndLastOddsAndFirstEvens\
    \ = firstEvensAndLastEvens ++ firstOddsAndFirstEvens\n        val firstEvensAndLastEvensAndFirstOdds\
    \ = firstEvensAndLastOdds ++ firstEvensAndFirstOdds\n        val firstOddsAndFirstEvensAndLastOdds\
    \ = firstOddsAndFirstEvens ++ lastOddsAndLastOdds\n        val firstOddsAndFirstOddsAndLastEvens\
    \ = firstOddsAndFirstOdds ++ lastEvensAndLastEvens\n        val firstEvensAndFirstOddsAndLastEvens\
    \ = firstEvensAndFirstOdds ++ lastOddsAndLastEvens\n        val firstEvensAndFirstEvensAndLastOdds\
    \ = firstEvensAndFirstEvens ++ lastEvensAndLastOdds\n        val firstOddsAndFirstEvensAndLastEvensAndFirstOdds\
    \ = firstOddsAndFirstEvensAndLastOdds ++ firstOddsAndFirstOddsAndLastEvens\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhm03xdq.scala:27:74 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mfirstOddsAndFirstEvensAndLastOdds\e\
    [0m = firstOddsAndFirstEvens ++ lastOddsAndLastOdds\n\e[31m\e[31m   |\e[0m   \
    \                                                                       ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: lastOddsAndLastOdds\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhm03xdq.scala:28:73\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstOddsAndFirstOddsAndLastEvens\e[0m = firstOddsAndFirstOdds ++ lastEvensAndLastEvens\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                        Not found: lastEvensAndLastEvens\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhm03xdq.scala:29:75 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mfirstEvensAndFirstOddsAndLastEvens\e\
    [0m = firstEvensAndFirstOdds ++ lastOddsAndLastEvens\n\e[31m\e[31m   |\e[0m  \
    \                                                                         ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Not found: lastOddsAndLastEvens\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhm03xdq.scala:30:76\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstEvensAndFirstEvensAndLastOdds\e[0m = firstEvensAndFirstEvens ++ lastEvensAndLastOdds\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                           Not found: lastEvensAndLastOdds\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compil"
  stdout: ''
  timestamp: 1660029024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(x =>\
    \ x % 2 != 0)\n        val evens = numsSorted.filter(x => x % 2 == 0)\n      \
    \  val firstOdds = evens.takeWhile(x => x % 2 != 0)\n        val lastOdds = evens.dropWhile(x\
    \ => x % 2 != 0)\n        val firstEvens = odds.takeWhile(x => x % 2 == 0)\n \
    \       val lastEvens = odds.dropWhile(x => x % 2 == 0)\n        val firstOddsEvens\
    \ = firstOdds.zip(lastEvens)\n        val lastOddsEvens = lastOdds.zip(firstEvens)\n\
    \        val firstOddsEvensCount = firstOddsEvens.count(_._1 == _._1)\n      \
    \  val lastOddsEvensCount = lastOddsEvens.count(_._1 == _._1)\n        val firstOddsEvensCount2\
    \ = firstOddsEvens.count(x => x._1 == x._1)\n        val lastOddsEvensCount2 =\
    \ lastOddsEvens.count(x => x._1 == x._1)\n        val firstOddsEvensCount3 = firstOddsEvens.count(x\
    \ => x._1 == x._1 && x._2 == x._2)\n        val lastOddsEvensCount3 = lastOddsEvens.count(x\
    \ => x._1 == x._1 && x._2 == x._2)\n        val firstOddsEvensCount4 = firstOddsEvens.count(x\
    \ => x._1 == x._1 && x._2 == x._2 && x._3 == x._3)\n        val lastOddsEvensCount4\
    \ = lastOddsEvens.count(x => x._1 == x._1 && x._2 == x._2 && x._3 == x._3)\n \
    \       val firstOddsEvensCount5 = firstOddsEvens.count(x => x._1 == x._1 && x._2\
    \ == x._2 && x._3 == x._3 && x._4 == x._4)\n        val lastOddsEvensCount5 =\
    \ lastOddsEvens.count(x => x._1 == x._1 && x._2 == x._2 && x._3 == x._3 && x._4\
    \ == x._4)\n        val firstOddsEvensCount6 = firstOddsEvens.count(x => x._1\
    \ == x._1 && x._2 == x._\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1o6u7r_x.scala:28:87 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mfirstOddsEvensCount6\e[0m\
    \ = firstOddsEvens.count(\e[36mx\e[0m => x._1 == x._1 && x._2 == x._\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     an identifier expected, but '_' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp1o6u7r_x.scala:18:57 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfirstOddsEvensCount\e[0m\
    \ = firstOddsEvens.count(_._1 == _._1)\n\e[31m\e[31m   |\e[0m                \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                             value _1 is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp1o6u7r_x.scala:19:55 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlastOddsEvensCount\e[0m\
    \ = lastOddsEvens.count(_._1 == _._1)\n\e[31m\e[31m   |\e[0m                 \
    \                                    ^^^^\e[0m\n\e[31m   |\e[0m              \
    \                          value _1 is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1o6u7r_x.scala:24:95 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfirstOddsEvensCount4\e[0m = firstOddsEvens.count(\e\
    [36mx\e[0m => x._1 == x._1 && x._2 == x._2 && x._3 == x._3)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m           value _3 is not a member\
    \ of (Long, Long) - did you mean x._1?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1o6u7r_x.scala:25:93 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mlastOddsEvensCount4\e[0m = lastOddsEvens.count(\e\
    [36mx\e[0m => x._1 == x._1 && x._2 == x._2 && x._3 == x._3)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                 "
  stdout: ''
  timestamp: 1660029026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        val odds = numsSorted.filter(_ % 2 == 1)\n \
    \       val evens = numsSorted.filter(_ % 2 == 0)\n        val firstOdd = odds.head\n\
    \        val lastOdd = odds.last\n        val firstEven = evens.head\n       \
    \ val lastEven = evens.last\n        val firstOddEven = firstOdd * lastEven\n\
    \        val lastOddEven = lastOdd * firstEven\n        val firstOddEvenLastOdd\
    \ = firstOddEven * lastOdd\n        val lastOddEvenFirstOdd = lastOddEven * firstOdd\n\
    \        val firstOddEvenLastOddEven = firstOddEvenLastOdd * lastEven\n      \
    \  val lastOddEvenFirstOddEven = lastOddEvenFirstOdd * firstEven\n        val\
    \ firstOddEvenLastOddEvenLastOdd = firstOddEvenLastOddEven * lastOdd\n       \
    \ val lastOddEvenFirstOddEvenLastOddEven = lastOddEvenFirstOddEvenLastOdd * firstOdd\n\
    \        val firstOddEvenLastOddEvenLastOddEvenLastOdd = firstOddEvenLastOddEvenLastOddEven\
    \ * lastEven\n        val lastOddEvenFirstOddEvenLastOddEvenLastOddEven = lastOddEvenFirstOddEvenLastOddEvenLastOdd\
    \ * firstEven\n        val firstOddEvenLastOddEvenLastOddEvenLastOddEvenLastOdd\
    \ = firstOddEvenLastOddEvenLastOddEvenLastOddEven * lastOdd\n        val lastOddEvenFirstOddEvenLastOddEvenLastOddEvenLastOddEven\
    \ = lastOddEvenFirstOddEvenLastOddEvenLastOddEvenLastOdd * firstOdd\n        val\
    \ firstOddEvenLastOddEvenLastOddEvenLastOddEvenLastOddEvenLastOdd = firstOddEvenLastOddEvenLastOddEvenLastOddEvenLastOddEven\
    \ * lastEven\n        val lastOddEvenFirstOddEvenLastOddEvenLastOddEvenLastOddEvenLastOddEven\
    \ = lastOddEvenFirstOddEvenLastOddEvenLastOddEvenLastOddEvenLastOdd * firstEven\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpmew0z1iy.scala:30:11 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpmew0z1iy.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmew0z1iy.scala:23:49 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastOddEvenFirstOddEvenLastOddEven\e\
    [0m = lastOddEvenFirstOddEvenLastOdd * firstOdd\n\e[31m\e[31m   |\e[0m       \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Not found: lastOddEvenFirstOddEvenLastOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmew0z1iy.scala:24:56\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mfirstOddEvenLastOddEvenLastOddEvenLastOdd\e[0m = firstOddEvenLastOddEvenLastOddEven\
    \ * lastEven\n\e[31m\e[31m   |\e[0m                                          \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                     Not found: firstOddEvenLastOddEvenLastOddEven\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmew0z1iy.scala:25:60 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlastOddEvenFirstOddEvenLastOddEvenLastOddEven\e\
    [0m = lastOddEvenFirstOddEvenLastOddEvenLastOdd * firstEven\n\e[31m\e[31m   |\e\
    [0m                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: lastOddEvenFirs"
  stdout: ''
  timestamp: 1660029025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i) >\
    \ 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu0disqpt.scala:19)\n\tat Problem.main(tmpu0disqpt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        var count = 0\n        var lastNum = 0\n   \
    \     var firstNum = 0\n        for(i <- 0 until numsCopy.size) {\n          \
    \  val num = numsCopy(i)\n            if(num > 10 && num % 2 == 1 && num % 2 ==\
    \ 0) {\n                count += 1\n                lastNum = num\n          \
    \      firstNum = num\n            }\n        }\n        count + lastNum + firstNum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps7dzbzh7.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                lastNum = num\n\
    \e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0m     \
    \                     Found:    (num : Long)\n\e[31m   |\e[0m                \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps7dzbzh7.scala:18:27 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m                firstNum = num\n\e[31m\e[31m   |\e[0m                \
    \           ^^^\e[0m\n\e[31m   |\e[0m                           Found:    (num\
    \ : Long)\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 == 1 && numsCopy.last % 2 == 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcjj0yqdw.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && numsCopy.head % \e[31m2\e[0m == \e[31m1\e[0m && numsCopy.last\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val numsFiltered = numsSorted.filter(_\
    \ > 10)\n        val numsOdds = numsFiltered.filter(_ % 2 != 0)\n        val numsOddsFirst\
    \ = numsOdds.filter(_ < 10)\n        val numsOddsLast = numsOdds.filter(_ > 9)\n\
    \        numsOddsFirst.length + numsOddsLast.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz74osjgn.scala:19)\n\tat Problem.main(tmpz74osjgn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        var count = 0\n        for (i <- 0 until numsSorted.length)\
    \ {\n            if (numsSorted(i) > 10 && (numsSorted(i) % 2 == 1 && numsSorted(i-1)\
    \ % 2 == 1)) {\n                count += 1\n            }\n        }\n       \
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu6xel2j0.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val even = numsSorted.filter(x =>\
    \ x % 2 == 0)\n        val odd = numsSorted.filter(x => x % 2 != 0)\n        val\
    \ firstOdd = odd.filter(x => x % 2 == 1)\n        val lastOdd = odd.filter(x =>\
    \ x % 2 == 0)\n        val firstEven = even.filter(x => x % 2 == 1)\n        val\
    \ lastEven = even.filter(x => x % 2 == 0)\n        val firstOddAndEven = firstOdd\
    \ ++ firstEven\n        val lastOddAndEven = lastOdd ++ lastEven\n        val\
    \ firstOddAndEvenCount = firstOddAndEven.count\n        val lastOddAndEvenCount\
    \ = lastOddAndEven.count\n        val firstOddAndEvenEvenCount = firstOddAndEven.count(x\
    \ => x % 2 == 0)\n        val lastOddAndEvenEvenCount = lastOddAndEven.count(x\
    \ => x % 2 == 0)\n        val firstOddAndEvenEvenEvenCount = firstOddAndEven.count(x\
    \ => x % 2 != 0)\n        val lastOddAndEvenEvenEvenCount = lastOddAndEven.count(x\
    \ => x % 2 != 0)\n        val firstOddAndEvenEvenEvenEvenCount = firstOddAndEven.count(x\
    \ => x % 2 != 0 && x % 2 == 0)\n        val lastOddAndEvenEvenEvenCount = lastOddAndEven.count(x\
    \ => x % 2 != 0 && x % 2 == 0)\n        val firstOddAndEvenEvenEvenEvenCount =\
    \ firstOddAndEven.count(x => x % 2 != 0 && x % 2 != 0)\n        val lastOddAndEvenEvenEvenCount\
    \ = lastOddAndEven.count(x => x % 2 != 0 && x % 2 != 0)\n        val firstOddAndEvenEvenEvenEvenCount\
    \ = firstOddAndEven.count(x => x % 2 != 0 && x % 2 != 0 && x % 2 == 0)\n     \
    \   val lastOddAndEvenEvenEvenCount = lastOddAndEven.count(x => x % 2 != 0 &&\
    \ x % 2 != 0 && x % 2 == 0)\n        val firstOddAndEvenEvenEvenEvenCount = firstOddAndEven.count(x\
    \ => x % 2 != 0 && x % 2 != 0 && x % 2 != 0)\n        val lastOddAndEvenEvenEvenCount\
    \ = lastOddAndEven.count(x => \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdc73mx70.scala:31:67 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mlastOddAndEvenEvenEvenCount\e\
    [0m = lastOddAndEven.count(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m           \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdc73mx70.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastOddAndEvenEvenEvenCount\e[0m = lastOddAndEven.count(\e[36mx\e[0m =>\
    \ x % \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastOddAndEvenEvenEvenCount is already defined as \e[33mvalue\e\
    [0m \e[35mlastOddAndEvenEvenEvenCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdc73mx70.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mfirstOddAndEvenEvenEvenEvenCount\e\
    [0m = firstOddAndEven.count(\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m &&\
    \ x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstOddAndEvenEvenEvenEvenCount is already defined as \e\
    [33mvalue\e[0m \e[35mfirstOddAndEvenEvenEvenEvenCount\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdc73mx70.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastOddAndEvenEvenEvenCount\e[0m = lastOddAndEven.count(\e[36mx\e[0m =>\
    \ x % \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i<- 0 until nums.length){\n            if (nums(i) >\
    \ 10 && nums(i) % 2 != 0 && nums(i) % 2 != 1){\n                count += 1\n \
    \           }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmd16b0vi.scala:19)\n\tat Problem.main(tmpmd16b0vi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        numsCopy5.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbnmf7l25.scala:19)\n\tat Problem.main(tmpbnmf7l25.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        var last = 0\n        var first = 0\n        for (i <- nums)\
    \ {\n            if (i > 10) {\n                count += 1\n                if\
    \ (last % 2 != 0 && first % 2 != 0) {\n                    count += 1\n      \
    \          }\n            }\n            last = i\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6iwloi86.scala:19:19\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            last = i\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (i : Long)\n\e[31m   |\e[0m                   Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ even = nums.filter(x => x % 2 == 0)\n        val odd = nums.filter(x => x %\
    \ 2 != 0)\n        val evenodd = even.zip(odd)\n        val evenoddcount = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 == 1)\n        val evenoddcount2 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 == 0)\n        val evenoddcount3 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 0)\n        val evenoddcount4 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 1)\n        val evenoddcount5 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 0)\n        val evenoddcount6 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 1)\n        val evenoddcount7 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 0)\n        val evenoddcount8 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 1)\n        val evenoddcount9 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 0)\n        val evenoddcount10 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 1)\n        val evenoddcount11 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 0)\n        val evenoddcount12 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 1)\n        val evenoddcount13 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 0)\n        val evenoddcount14 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 1)\n        val evenoddcount15 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 0)\n        val evenoddcount16 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 1)\n        val evenoddcount17 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 0)\n        val evenoddcount18 = evenodd.count(x\
    \ => x._1 > 10 && x._2 % 2 != 1)\n        val evenoddcount19 = evenodd.count(x\
    \ => x._1 > 10 && x.\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadzoqmf.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbadzoqmf.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq27vo10k.scala:17)\n\tat Problem.main(tmpq27vo10k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0)\
    \ {\n                if (i % 2 == 1) {\n                    count += 1\n     \
    \           }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp92ewocj2.scala:22)\n\tat Problem.main(tmp92ewocj2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5gckw_on.scala:18)\n\tat Problem.main(tmp5gckw_on.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i) % 2 == 1 && nums(i) != nums(i) / 2) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpidkwit2e.scala:20)\n\tat Problem.main(tmpidkwit2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCount = nums.length\n        val oddNums = nums.filter(x => x % 2 != 0)\n\
    \        val firstOddNum = oddNums.head\n        val lastOddNum = oddNums.last\n\
    \        val firstOddNumCount = firstOddNum.length\n        val lastOddNumCount\
    \ = lastOddNum.length\n        val firstOddNumOddCount = firstOddNumCount - lastOddNumCount\n\
    \        val lastOddNumOddCount = lastOddNumCount - firstOddNumCount\n       \
    \ val firstOddNumEvenCount = firstOddNumCount - firstOddNumOddCount\n        val\
    \ lastOddNumEvenCount = lastOddNumCount - lastOddNumOddCount\n        val firstOddNumOddAndLastOddCount\
    \ = firstOddNumOddCount + lastOddNumOddCount\n        val firstOddNumEvenAndLastOddCount\
    \ = firstOddNumEvenCount + lastOddNumEvenCount\n        val firstOddNumOddAndLastEvenCount\
    \ = firstOddNumOddAndLastOddCount + lastOddNumEvenCount\n        val firstOddNumEvenAndLastEvenCount\
    \ = firstOddNumEvenAndLastOddCount + lastOddNumEvenCount\n        val firstOddNumOddAndLastOddAndLastEvenCount\
    \ = firstOddNumOddAndLastEvenCount + lastOddNumEvenAndLastOddCount\n        val\
    \ firstOddNumEvenAndLastOddAndLastEvenCount = firstOddNumEvenAndLastOddAndLastEvenCount\
    \ + lastOddNumEvenAndLastEvenCount\n        val firstOddNumOddAndLastEvenAndLastOddAndLastEvenCount\
    \ = firstOddNumOddAndLastEvenAndLastOddAndLastEvenCount + lastOddNumEvenAndLastOddAndLastEvenCount\n\
    \        val firstOddNumEvenAndLastOddAndLastEvenAndLastOddAndLastEvenCount =\
    \ firstOddNumEvenAndLastOddAndLastEvenAndLastOddAndLastEvenCount + lastOddNumEvenAndLastOddAndLastEvenAndLastOddAndLastEvenCount\n\
    \        val firstOddNumEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenCount\
    \ = firstOddNumEvenAndLastOddAndLastEvenAndLastOdd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuhzfgzg9.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfirstOddNumCount\e[0m =\
    \ firstOddNum.length\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value length is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuhzfgzg9.scala:14:41\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mlastOddNumCount\e[0m = lastOddNum.length\n\e[31m\e[31m   |\e[0m          \
    \                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             value length is not a member of Long\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpuhzfgzg9.scala:24:56 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfirstOddNumEvenAndLastOddAndLastEvenCount\e\
    [0m = firstOddNumEvenAndLastOddAndLastEvenCount + lastOddNumEvenAndLastEvenCount\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m    Recursive \e[33mvalue\e[0m \e[35mfirstOddNumEvenAndLastOddAndLastEvenCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuhzfgzg9.scala:25:66\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirstOddNumOddAndLastEvenAndLastOddAndLastEvenCount\e[0m = firstOddNumOddAndLastEvenAndLastOddAndLastEvenCount\
    \ + lastOddNumEvenAndLastOddAndLastEvenCount\n\e[31m\e[31m   |\e[0m          \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35mfirstOddNumOddAndLastEvenAndLastOddAndLastEvenCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuhzfgzg9.scala:26:77\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirstOddNumEvenAndLastOddAndLastEvenAndLastOddAndLastEvenCount\e[0m =\
    \ firstOddNumEvenAndLastOddAndLastEvenAndLastOddAndLastEvenCount + las"
  stdout: ''
  timestamp: 1660029027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sort\n        var count = 0\n        for (i <- 0 until numsSorted.length)\
    \ {\n            if (numsSorted(i) > 10 && numsSorted(i).isOdd && numsSorted(i).isOdd)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqnw199rc.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = nums.sort\n\
    \e[31m\e[31m  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \    value sort is not a member of List[Long] - did you mean nums.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsp2pqqt.scala:17)\n\tat Problem.main(tmplsp2pqqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ odds = mutable.Set[Long]()\n        val evens = mutable.Set[Long]()\n      \
    \  for(i <- 0 until nums.size) {\n            val num = nums(i)\n            val\
    \ firstDigit = num / 10\n            val lastDigit = num % 10\n            if(num\
    \ > 10 && firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n                odds +=\
    \ num\n            } else {\n                evens += num\n            }\n   \
    \     }\n        odds.size\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmveuohoh.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmveuohoh.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && x % 2 != 0 &&\
    \ x % 2 != 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpptsdsmwn.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        numsCopy.filter(\e[36mx\e\
    [0m => x > \e[31m10\e[0m && x % \e[31m2\e[0m != \e[31m0\e[0m && x % \e[31m2\e\
    [0m != \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0)\
    \ {\n                if (i % 10 == 1) {\n                    if (nums.head % 10\
    \ == 1) {\n                        count += 1\n                    }\n       \
    \         }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg12xql7w.scala:23)\n\tat Problem.main(tmpg12xql7w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 != 0 &&\
    \ i % 2 != 1) {\n                count += 1\n            }\n        }\n      \
    \  count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpec_uh44r.scala:19)\n\tat Problem.main(tmpec_uh44r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ even = nums.filter(x => x % 2 == 0)\n        val odd = nums.filter(x => x %\
    \ 2 != 0)\n        val evenodd = even.zip(odd)\n        val evenoddcount = evenodd.filter(x\
    \ => x._1 > 10).length\n        val evenoddcount2 = evenodd.filter(x => x._1 ==\
    \ x._1 && x._2 > 10).length\n        val evenoddcount3 = evenodd.filter(x => x._1\
    \ == x._1 && x._2 == x._2 && x._3 > 10).length\n        val evenoddcount4 = evenodd.filter(x\
    \ => x._1 == x._1 && x._2 == x._2 && x._3 == x._3 && x._4 > 10).length\n     \
    \   val evenoddcount5 = evenodd.filter(x => x._1 == x._1 && x._2 == x._2 && x._3\
    \ == x._3 && x._4 == x._4 && x._5 > 10).length\n        val evenoddcount6 = evenodd.filter(x\
    \ => x._1 == x._1 && x._2 == x._2 && x._3 == x._3 && x._4 == x._4 && x._5 == x._5\
    \ && x._6 > 10).length\n        val evenoddcount7 = evenodd.filter(x => x._1 ==\
    \ x._1 && x._2 == x._2 && x._3 == x._3 && x._4 == x._4 && x._5 == x._5 && x._6\
    \ == x._6 && x._7 > 10).length\n        val evenoddcount8 = evenodd.filter(x =>\
    \ x._1 == x._1 && x._2 == x._2 && x._3 == x._3 && x._4 == x._4 && x._5 == x._5\
    \ && x._6 == x._6 && x._7 == x._7 && x._8 > 10).length\n        val evenoddcount9\
    \ = evenodd.filter(x => x._1 == x._1 && x._2 == x._2 && x._3 == x._3 && x._4 ==\
    \ x._4 && x._5 == x._5 && x._6 == x._6 && x._7 == x._7 && x._8 == x._8 && x._9\
    \ > 10).length\n        val evenoddcount10 = evenodd.filter(x => x._1 == x._1\
    \ && x._2 == x._2 && x._3 == x._3 && x._4 == x._4 && x._5 == x._5 && x._6 == x._6\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9pa0h3yu.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9pa0h3yu.scala:14:82\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevenoddcount3\e[0m = evenodd.filter(\e[36mx\e[0m => x._1 == x._1 && x._2 ==\
    \ x._2 && x._3 > \e[31m10\e[0m).length\n\e[31m\e[31m   |\e[0m                \
    \                                                                ^^^^\e[0m\n\e\
    [31m   |\e[0m           value _3 is not a member of (Long, Long) - did you mean\
    \ x._1?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9pa0h3yu.scala:15:82 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenoddcount4\e[0m = evenodd.filter(\e\
    [36mx\e[0m => x._1 == x._1 && x._2 == x._2 && x._3 == x._3 && x._4 > \e[31m10\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                           \
    \                                     ^^^^\e[0m\n\e[31m   |\e[0m           value\
    \ _3 is not a member of (Long, Long) - did you mean x._1?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9pa0h3yu.scala:15:98 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenoddcount4\e[0m = evenodd.filter(\e\
    [36mx\e[0m => x._1 == x._1 && x._2 == x._2 && x._3 == x._3 && x._4 > \e[31m10\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                           \
    \                                                     ^^^^\e[0m\n\e[31m   |\e\
    [0m           value _4 is not a member of (Long, Long) - did you mean x._1?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9pa0h3yu.scala:16:82 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevenoddcount5\e[0m = evenodd.filter(\e\
    [36mx\e[0m => x._1 == x._1 && x._2 == x._2 && x._3 == x._3 && x._4 == x._4 &&\
    \ x._5 > \e[31m10\e[0m).length\n\e[31m\e[31m   |\e[0m                        \
    \                                                        ^^^^\e[0m\n\e[31m   |\e\
    [0m           value _3 is not a member of (Long, Long) - did you mean x._1?\n\e\
    [31m\e[31m-- [E008] N"
  stdout: ''
  timestamp: 1660029030
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        var\
    \ count = 0\n        for (i<- nums) {\n            if (i > 10 && i % 2 != 0) {\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk9j384_p.scala:20)\n\tat Problem.main(tmpk9j384_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val even = numsCopy.filter(x => x % 2 == 0)\n\
    \        val odd = numsCopy.filter(x => x % 2 != 0)\n        val firstOdd = odd.filter(x\
    \ => x % 2 == 1)\n        val firstEven = even.filter(x => x % 2 == 0)\n     \
    \   val firstOddEven = firstOdd.filter(x => x % 2 == 1)\n        val firstOddEvenOdd\
    \ = firstOddEven.filter(x => x % 2 == 0)\n        val firstOddEvenOddEven = firstOddEvenOdd.filter(x\
    \ => x % 2 == 1)\n        val firstOddEvenOddEvenOdd = firstOddEvenOddEven.filter(x\
    \ => x % 2 == 0)\n        val firstOddEvenOddEvenOddEven = firstOddEvenOddEvenOddOdd.filter(x\
    \ => x % 2 == 1)\n        val firstOddEvenOddEvenOddEvenOdd = firstOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 == 0)\n        val firstOddEvenOddEvenOddEvenOddEven = firstOddEvenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 == 1)\n        val firstOddEvenOddEvenOddEvenOddEvenOdd = firstOddEvenOddEvenOddEvenOddEvenOddEven.filter(x\
    \ => x % 2 == 0)\n        val firstOddEvenOddEvenOddEvenOddEvenOddEven = firstOddEvenOddEvenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 == 1)\n        val firstOddEvenOddEvenOddEvenOddEvenOddEvenOdd = firstOddEvenOddEvenOddEvenOddEvenOddEvenOddEven.filter(x\
    \ => x % 2 == 0)\n        val firstOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = firstOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd.filter(x => x % 2 == 1)\n\
    \        val firstOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = firstOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp51bfphnu.scala:18:41 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfirstOddEvenOddEvenOddEven\e\
    [0m = firstOddEvenOddEvenOddOdd.filter(\e[36mx\e[0m => x % \e[31m2\e[0m == \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: firstOddEvenOddEvenOddOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp51bfphnu.scala:19:44\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirstOddEvenOddEvenOddEvenOdd\e[0m = firstOddEvenOddEvenOddEvenOdd.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                     ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mfirstOddEvenOddEvenOddEvenOdd\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp51bfphnu.scala:25:65 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mfirstOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\e\
    [0m = firstOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO\n\e[31m\e[31m   |\e[0m\
    \                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Not found: firstOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp51bfphnu.scala:26:5\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val oddNums = numsSorted.filter(_\
    \ % 2 != 0)\n        val evenNums = numsSorted.filter(_ % 2 == 0)\n        val\
    \ firstOddNum = oddNums.head\n        val lastOddNum = oddNums.last\n        val\
    \ firstEvenNum = evenNums.head\n        val lastEvenNum = evenNums.last\n    \
    \    val firstOddAndEvenNum = oddNums.head + evenNums.head\n        val lastOddAndEvenNum\
    \ = oddNums.last + evenNums.last\n        val firstOddAndEvenNumSorted = oddNums.head\
    \ + evenNums.sortWith(_ < _)\n        val lastOddAndEvenNumSorted = oddNums.last\
    \ + evenNums.sortWith(_ < _)\n        val firstOddAndEvenNumSortedReversed = oddNums.sortWith(_\
    \ < _).head + evenNums.sortWith(_ < _)\n        val lastOddAndEvenNumSortedReversed\
    \ = oddNums.sortWith(_ < _).last + evenNums.sortWith(_ < _)\n        val firstOddAndEvenNumSortedReversedSorted\
    \ = oddNums.sortWith(_ < _).head + evenNums.sortWith(_ < _).sortWith(_ < _)\n\
    \        val lastOddAndEvenNumSortedReversedSorted = oddNums.sortWith(_ < _).last\
    \ + evenNums.sortWith(_ < _).sortWith(_ < _)\n        val firstOddAndEvenNumSortedReversedSortedSorted\
    \ = oddNums.sortWith(_ < _).head + evenNums.sortWith(_ < _).sortWith(_ < _).sortWith(_\
    \ < _)\n        val lastOddAndEvenNumSortedReversedSortedSorted = oddNums.sortWith(_\
    \ < _).last + evenNums.sortWith(_ < _).sortWith(_ < _).sortWith(_ < _).sortWith(_\
    \ < _)\n        val firstOddAndEvenNumSortedReversedSortedSortedSorted = oddNums.sortWith(_\
    \ < _).head + evenNums.sortWith(_ < _).sortWith(_ < _).sortWith(_ < _).sortWith(_\
    \ < _).sortWith(_ < _).sortWith(_ < _)\n        val lastOddAndEvenNumSortedReversedSortedSortedSorted\
    \ = oddNums.sortWith(_ < \n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5zwzryp_.scala:27:84 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mlastOddAndEvenNumSortedReversedSortedSortedSorted\e\
    [0m = oddNums.sortWith(_ < \n\e[31m\e[31m   |\e[0m                           \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5zwzryp_.scala:18:52\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e\
    [0m \e[36mfirstOddAndEvenNumSorted\e[0m = oddNums.head + evenNums.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long):\
    \ Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m\
    \   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m\
    \ (x: String): String\n\e[31m   |\e[0mmatch arguments (List[Long])\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmp5zwzryp_.scala:19:51 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlastOddAndEvenNumSorted\e\
    [0m = oddNums.last + evenNums.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m         \
    \                             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e\
    [0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int):\
    \ Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e\
    [31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0m (x: String): String\n\e[31m   |\e\
    [0mmatch arguments (List[Long])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5zwzryp_.scala:20:76\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mfirstOd"
  stdout: ''
  timestamp: 1660029029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an array of numbers as input and returns\
    \ \n    // the number of elements in the array that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    def specialFilter(nums : List[Long]) : Long = {\n        val\
    \ numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n  \
    \      val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        val\
    \ numsCopy6 = numsCopy5.filter(_ % 2 != 0)\n        val numsCopy7 = numsCopy6.filter(_\
    \ % 2 != 0)\n        val numsCopy8 = numsCopy7.filter(_ % 2 != 0)\n        val\
    \ numsCopy9 = numsCopy8.filter(_ % 2 != 0)\n        val numsCopy10 = numsCopy9.filter(_\
    \ % 2 != 0)\n        val numsCopy11 = numsCopy10.filter(_ % 2 != 0)\n        val\
    \ numsCopy12 = numsCopy11.filter(_ % 2 != 0)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 != 0)\n        val numsCopy14 = numsCopy13.filter(_ % 2 != 0)\n        val\
    \ numsCopy15 = numsCopy14.filter(_ % 2 != 0)\n        val numsCopy16 = numsCopy15.filter(_\
    \ % 2 != 0)\n        val numsCopy17 = numsCopy16.filter(_ % 2 != 0)\n        val\
    \ numsCopy18 = numsCopy17.filter(_ % 2 != 0)\n        val numsCopy19 = numsCopy18.filter(_\
    \ % 2 != 0)\n        val numsCopy20 = numsCopy19.filter(_ % 2 != 0)\n        val\
    \ numsCopy21 = numsCopy20.filter(_ % 2 != 0)\n        val numsCopy22 = numsCopy21.filter(_\
    \ % 2 != 0)\n        val numsCopy23 = numsCopy22.filter(_ % 2 != 0)\n        val\
    \ numsCopy24 = numsCopy23.filter(_ % 2 != 0)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 != 0)\n        val numsCopy26 = numsCopy25.filter(_ % 2 != 0)\n        val\
    \ numsCopy27 = numsCopy26.filter(_ % 2 != 0)\n        val numsCopy28 = numsCopy27.filter(_\
    \ % 2 != 0)\n        val numsCopy29 = numsCopy28.filter(_ % 2 != 0)\n        val\
    \ numsCopy30 = numsCopy\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hlempce.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028975
