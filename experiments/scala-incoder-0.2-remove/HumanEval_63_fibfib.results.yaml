language: scala
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ListBuffer[Long]()\n        fibfibs += 0\n    \
    \    fibfibs += 0\n        fibfibs += 1\n        fibfibs += 1\n        fibfibs\
    \ += 2\n        fibfibs += 2\n        fibfibs += 3\n        fibfibs += 3\n   \
    \     fibfibs += 4\n        fibfibs += 4\n        fibfibs += 5\n        fibfibs\
    \ += 5\n        fibfibs += 6\n        fibfibs += 6\n        fibfibs += 7\n   \
    \     fibfibs += 7\n        fibfibs += 8\n        fibfibs += 8\n        fibfibs\
    \ += 9\n        fibfibs += 9\n        fibfibs += 10\n        fibfibs += 10\n \
    \       fibfibs += 11\n        fibfibs += 11\n        fibfibs += 12\n        fibfibs\
    \ += 12\n        fibfibs += 13\n        fibfibs += 13\n        fibfibs += 14\n\
    \        fibfibs += 14\n        fibfibs += 15\n        fibfibs += 15\n       \
    \ fibfibs += 16\n        fibfibs += 16\n        fibfibs += 17\n        fibfibs\
    \ += 17\n        fibfibs += 18\n        fibfibs += 18\n        fibfibs += 19\n\
    \        fibfibs += 19\n        fibfibs += 20\n        fibfibs += 20\n       \
    \ fibfibs += 21\n        fibfibs += 21\n        fibfibs += 22\n        fibfibs\
    \ += 22\n        fibfibs += 23\n        fibfibs += 23\n        fibfibs += 24\n\
    \        fibfibs += 24\n        fibfibs += 25\n        fibfibs += 25\n       \
    \ fibfibs += 26\n        fibfibs += 26\n        fibfibs += 27\n        fibfibs\
    \ += 27\n        fibfibs += 28\n        fibfibs += 28\n        fibfibs += 29\n\
    \        fibfibs += 29\n        fibfibs += 30\n        fibfibs += 30\n       \
    \ fibfibs += 31\n        fibfibs += 31\n        fibfibs += 32\n        fibfibs\
    \ += 32\n        fibfibs += 33\n        fibfibs += 33\n        fibfibs += 34\n\
    \        fibfibs += 34\n        fibfibs += 35\n        fibfibs += 35\n       \
    \ fibfibs += 36\n        fibfibs += 36\n        fibfibs += 37\n        fibfibs\
    \ += 37\n        fibfibs += 38\n        fibfibs += 38\n        fibfibs += 39\n\
    \        fibfibs += 39\n        fibfibs += 40\n        fibfibs += 40\n       \
    \ fibfibs += 41\n\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpagqrhc2z.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ListBuffer[Long]()\n        fibfibs += 0\n    \
    \    fibfibs += 1\n        fibfibs += 2\n        fibfibs += 3\n        fibfibs\
    \ += 4\n        fibfibs += 5\n        fibfibs += 6\n        fibfibs += 7\n   \
    \     fibfibs += 8\n        fibfibs += 9\n        fibfibs += 10\n        fibfibs\
    \ += 11\n        fibfibs += 12\n        fibfibs += 13\n        fibfibs += 14\n\
    \        fibfibs += 15\n        fibfibs += 16\n        fibfibs += 17\n       \
    \ fibfibs += 18\n        fibfibs += 19\n        fibfibs += 20\n        fibfibs\
    \ += 21\n        fibfibs += 22\n        fibfibs += 23\n        fibfibs += 24\n\
    \        fibfibs += 25\n        fibfibs += 26\n        fibfibs += 27\n       \
    \ fibfibs += 28\n        fibfibs += 29\n        fibfibs += 30\n        fibfibs\
    \ += 31\n        fibfibs += 32\n        fibfibs += 33\n        fibfibs += 34\n\
    \        fibfibs += 35\n        fibfibs += 36\n        fibfibs += 37\n       \
    \ fibfibs += 38\n        fibfibs += 39\n        fibfibs += 40\n        fibfibs\
    \ += 41\n        fibfibs += 42\n        fibfibs += 43\n        fibfibs += 44\n\
    \        fibfibs += 45\n        fibfibs += 46\n        fibfibs += 47\n       \
    \ fibfibs += 48\n        fibfibs += 49\n        fibfibs += 50\n        fibfibs\
    \ += 51\n        fibfibs += 52\n        fibfibs += 53\n        fibfibs += 54\n\
    \        fibfibs += 55\n        fibfibs += 56\n        fibfibs += 57\n       \
    \ fibfibs += 58\n        fibfibs += 59\n        fibfibs += 60\n        fibfibs\
    \ += 61\n        fibfibs += 62\n        fibfibs += 63\n        fibfibs += 64\n\
    \        fibfibs += 65\n        fibfibs += 66\n        fibfibs += 67\n       \
    \ fibfibs += 68\n        fibfibs += 69\n        fibfibs += 70\n        fibfibs\
    \ += 71\n        fibfibs += 72\n        fibfibs += 73\n        fibfibs += 74\n\
    \        fibfibs += 75\n        fibfibs += 76\n        fibfibs += 77\n       \
    \ fibfibs += 78\n        fibfibs += 79\n        fibfibs += 80\n        fibfibs\
    \ += 81\n        fibfibs += 82\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpre84xoqm.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 1\n        fibfibs += 1\n        fibfibs += 2\n   \
    \     fibfibs += 2\n        fibfibs += 3\n        fibfibs += 3\n        fibfibs\
    \ += 4\n        fibfibs += 4\n        fibfibs += 5\n        fibfibs += 5\n   \
    \     fibfibs += 6\n        fibfibs += 6\n        fibfibs += 7\n        fibfibs\
    \ += 7\n        fibfibs += 8\n        fibfibs += 8\n        fibfibs += 9\n   \
    \     fibfibs += 9\n        fibfibs += 10\n        fibfibs += 10\n        fibfibs\
    \ += 11\n        fibfibs += 11\n        fibfibs += 12\n        fibfibs += 12\n\
    \        fibfibs += 13\n        fibfibs += 13\n        fibfibs += 14\n       \
    \ fibfibs += 14\n        fibfibs += 15\n        fibfibs += 15\n        fibfibs\
    \ += 16\n        fibfibs += 16\n        fibfibs += 17\n        fibfibs += 17\n\
    \        fibfibs += 18\n        fibfibs += 18\n        fibfibs += 19\n       \
    \ fibfibs += 19\n        fibfibs += 20\n        fibfibs += 20\n        fibfibs\
    \ += 21\n        fibfibs += 21\n        fibfibs += 22\n        fibfibs += 22\n\
    \        fibfibs += 23\n        fibfibs += 23\n        fibfibs += 24\n       \
    \ fibfibs += 24\n        fibfibs += 25\n        fibfibs += 25\n        fibfibs\
    \ += 26\n        fibfibs += 26\n        fibfibs += 27\n        fibfibs += 27\n\
    \        fibfibs += 28\n        fibfibs += 28\n        fibfibs += 29\n       \
    \ fibfibs += 29\n        fibfibs += 30\n        fibfibs += 30\n        fibfibs\
    \ += 31\n        fibfibs += 31\n        fibfibs += 32\n        fibfibs += 32\n\
    \        fibfibs += 33\n        fibfibs += 33\n        fibfibs += 34\n       \
    \ fibfibs += 34\n        fibfibs += 35\n        fibfibs += 35\n        fibfibs\
    \ += 36\n        fibfibs += 36\n        fibfibs += 37\n        fibfibs += 37\n\
    \        fibfibs += 38\n        fibfibs += 38\n        fibfibs += 39\n       \
    \ fibfibs += 39\n        fibfibs += 40\n        fibfibs += 40\n        fibfibs\
    \ += 41\n        fibfib\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7y50hzhb.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7y50hzhb.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = Array(0, 1, 1, 2)\n        fibfibArray(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpozwk95e5.scala:12:20\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        fibfibArray(n)\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprg3sx3t0.scala:17)\n\tat Problem.main(tmprg3sx3t0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(3)\
    \ = 1\n        fibfibArray.take(n).foreach(x => fibfibArray(n) = fibfibArray(n-1)\
    \ + fibfibArray(n-2) + fibfibArray(n-3))\n        fibfibArray(n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhanc6i3.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n        fibfibArray(0)\
    \ = 0\n        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hhqsjh9.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.add(0)\n\
    \        fibfib.add(1)\n        fibfib.add(2)\n        fibfib(n) match {\n   \
    \         case 0 => 0\n            case 1 => 1\n            case 2 => 2\n    \
    \        case _ => {\n                fibfib(n-1) match {\n                  \
    \  case 0 => 0\n                    case 1 => 1\n                    case 2 =>\
    \ 2\n                    case _ => {\n                        fibfib(n-2) match\
    \ {\n                            case 0 => 0\n                            case\
    \ 1 => 1\n                            case 2 => 2\n                          \
    \  case _ => {\n                                fibfib(n-3) match {\n        \
    \                            case 0 => 0\n                                   \
    \ case 1 => 1\n                                    case 2 => 2\n             \
    \                       case _ => {\n                                        fibfib(n-4)\
    \ match {\n                                            case 0 => 0\n         \
    \                                   case 1 => 1\n                            \
    \                case 2 => 2\n                                            case\
    \ _ => {\n                                                fibfib(n-5) match {\n\
    \                                                    case 0 => 0\n           \
    \                                         case 1 => 1\n                      \
    \                              case 2 => 2\n                                 \
    \                   case _ => {\n                                            \
    \            fibfib(n-6) match {\n                                           \
    \                 case 0 => 0\n                                              \
    \              case 1 => 1\n                                                 \
    \           case 2 => 2\n                                                    \
    \        case _ => {\n                                                       \
    \         fibfib(n-7) match {\n                                              \
    \                      case 0 => 0\n                                         \
    \                           case 1 => 1\n                                    \
    \                                case 2 => 2\n                               \
    \                                     case _ => {\n                          \
    \                                              fibfib(n-8) match {\n         \
    \                                                                   case 0 =>\
    \ 0\n                                                                        \
    \    case 1 => 1\n                                                           \
    \                 case 2 => 2\n                                              \
    \                              case _ => {\n                                 \
    \                                               fibfib(n-9) match {\n        \
    \                                                                            case\
    \ 0 => 0\n                                                                   \
    \                 case 1 => 1\n                                              \
    \                                      case 2 => 2\n                         \
    \                                                           case _ => {\n    \
    \                                                                            \
    \        fibfib(n-10) match {\n                                              \
    \                                              case 0 => 0\n                 \
    \                                                                           case\
    \ 1 => 1\n                                                                   \
    \                         case 2 => 2\n                                      \
    \                                                      case _ => {\n         \
    \                                                                            \
    \           fibfib(n-11) match {\n                                           \
    \                                                         case 0 => 0\n      \
    \                                                                            \
    \                  case 1 => 1\n                                             \
    \                                                       case 2 => 2\n        \
    \                                                                            \
    \                case _ => {\n                                               \
    \                                                         fibfib(n-12) match {\n\
    \                                                                            \
    \                                case 0 => 0\n                               \
    \                                                                            \
    \ case 1 => 1\n                                                              \
    \                                              case 2 => 2\n                 \
    \                                                                            \
    \               case _ => {\n                                                \
    \                                                                fibfib(n-13)\
    \ match {\n                                                                  \
    \                                                  case 0 => 0\n             \
    \                                                                            \
    \                           case 1 => 1\n                                    \
    \                                                                            \
    \    case 2 => 2\n                                                           \
    \                                                         case _ => {\n      \
    \                                                                            \
    \                                      fibfib(n-14) match {\n                \
    \                                                                            \
    \                                case 0 \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpatrdxs0i.scala:87:4 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpatrdxs0i.scala:99:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m99 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpatrdxs0i.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e[0m mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpatrdxs0i.scala:98:1 ---------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpatrdxs0i.scala:88:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m88 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) match {\n\
    \            case 0 => 0\n            case 1 => 0\n            case 2 => 1\n \
    \           case _ => {\n                val fibfib2 = new mutable.MutableList[Long]()\n\
    \                fibfib2.append(0)\n                fibfib2.append(1)\n      \
    \          fibfib2.append(2)\n                fibfib2.append(3)\n            \
    \    fibfib2.append(4)\n                fibfib2.append(5)\n                fibfib2.append(6)\n\
    \                fibfib2.append(7)\n                fibfib2.append(8)\n      \
    \          fibfib2.append(9)\n                fibfib2.append(10)\n           \
    \     fibfib2.append(11)\n                fibfib2.append(12)\n               \
    \ fibfib2.append(13)\n                fibfib2.append(14)\n                fibfib2.append(15)\n\
    \                fibfib2.append(16)\n                fibfib2.append(17)\n    \
    \            fibfib2.append(18)\n                fibfib2.append(19)\n        \
    \        fibfib2.append(20)\n                fibfib2.append(21)\n            \
    \    fibfib2.append(22)\n                fibfib2.append(23)\n                fibfib2.append(24)\n\
    \                fibfib2.append(25)\n                fibfib2.append(26)\n    \
    \            fibfib2.append(27)\n                fibfib2.append(28)\n        \
    \        fibfib2.append(29)\n                fibfib2.append(30)\n            \
    \    fibfib2.append(31)\n                fibfib2.append(32)\n                fibfib2.append(33)\n\
    \                fibfib2.append(34)\n                fibfib2.append(35)\n    \
    \            fibfib2.append(36)\n                fibfib2.append(37)\n        \
    \        fibfib2.append(38)\n                fibfib2.append(39)\n            \
    \    fibfib2.append(40)\n                fibfib2.append(41)\n                fibfib2.append(42)\n\
    \                fibfib2.append(43)\n                fibfib2.append(44)\n    \
    \            fibfib2.append(45)\n                fibfib2.append(46)\n        \
    \        fibfib2.append(47)\n                fibfib2.append(48)\n            \
    \    fibfib2.append(49)\n                fibfib2.append(50)\n                fibfib2.append(51)\n\
    \                fibfib2.append(52)\n                fibfib2.append(53)\n    \
    \            fibfib2.append(54)\n                fibfib2.append(55)\n        \
    \        fibfib2.append(56)\n                fibfib2.append(57)\n            \
    \    fib\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7z5mc9ei.scala:92:0 ----------------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7z5mc9ei.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfibfib\e[0m = \e[33mnew\e[0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7z5mc9ei.scala:20:34 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mval\e[0m \e[36mfibfib2\e[0m = \e[33mnew\e[0m mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7z5mc9ei.scala:79:16 ------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m                fib\n\e[31m\e[31m   |\e[0m          \
    \      ^^^\e[0m\n\e[31m   |\e[0m                Not found: fib\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7z5mc9ei.scala:89:5 ---------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmp7z5mc9ei.scala:81:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m81 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](5)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg7__0mtu.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m5\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.ListBuffer[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib.append(1)\n\
    \        fibfib.append(2)\n        fibfib.append(2)\n        fibfib.append(3)\n\
    \        fibfib.append(3)\n        fibfib.append(4)\n        fibfib.append(4)\n\
    \        fibfib.append(5)\n        fibfib.append(5)\n        fibfib.append(6)\n\
    \        fibfib.append(6)\n        fibfib.append(7)\n        fibfib.append(7)\n\
    \        fibfib.append(8)\n        fibfib.append(8)\n        fibfib.append(9)\n\
    \        fibfib.append(9)\n        fibfib.append(10)\n        fibfib.append(10)\n\
    \        fibfib.append(11)\n        fibfib.append(11)\n        fibfib.append(12)\n\
    \        fibfib.append(12)\n        fibfib.append(13)\n        fibfib.append(13)\n\
    \        fibfib.append(14)\n        fibfib.append(14)\n        fibfib.append(15)\n\
    \        fibfib.append(15)\n        fibfib.append(16)\n        fibfib.append(16)\n\
    \        fibfib.append(17)\n        fibfib.append(17)\n        fibfib.append(18)\n\
    \        fibfib.append(18)\n        fibfib.append(19)\n        fibfib.append(19)\n\
    \        fibfib.append(20)\n        fibfib.append(20)\n        fibfib.append(21)\n\
    \        fibfib.append(21)\n        fibfib.append(22)\n        fibfib.append(22)\n\
    \        fibfib.append(23)\n        fibfib.append(23)\n        fibfib.append(24)\n\
    \        fibfib.append(24)\n        fibfib.append(25)\n        fibfib.append(25)\n\
    \        fibfib.append(26)\n        fibfib.append(26)\n        fibfib.append(27)\n\
    \        fibfib.append(27)\n        fibfib.append(28)\n        fibfib.append(28)\n\
    \        fibfib.append(29)\n        fibfib.append(29)\n        fibfib.append(30)\n\
    \        fibfib.append(30)\n        fibfib.append(31)\n        fibfib.append(31)\n\
    \        fibfib.append(32)\n        fibfib.append(32)\n        fibfib.append(33)\n\
    \        fibfib.append(33)\n        fibfib.append(34)\n        fibfib.append(34)\n\
    \        fibfib.append(35)\n        fibfib.append(35)\n        fibfib.append(36)\n\
    \        fibfib.append(36)\n        fibfib.append(37)\n        fibfib.append(37)\n\
    \        fibfib.append(38)\n        fibfib.append(38)\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplgl_uk2u.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs(0) = 0\n      \
    \  fibfibs(1) = 0\n        fibfibs(2) = 1\n        fibfibs(n) = fibfibs(n-1) +\
    \ fibfibs(n-2) + fibfibs(n-3)\n        fibfibs(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpae5d7wfy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray.push(fibfibArray(0))\n\
    \        fibfibArray.push(fibfibArray(1))\n        fibfibArray.push(fibfibArray(2))\n\
    \        fibfibArray.push(fibfibArray(3))\n        fibfibArray.take(n).last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprpull6sw.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = Array(0, 1, 1, 2, 3)\n        fibfibArray(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2eefvocs.scala:12:20\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        fibfibArray(n)\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jiuxgyk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ListBuffer[Long]()\n        fibfibs += 0\n    \
    \    fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpso_d77s1.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jiuxgyk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](3)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplsozy4zh.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else if (n <= 3) fibfib(n-1) + fibfib(n-2)\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw53yncgh.scala:19)\n\tat Problem.main(tmpw53yncgh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray.update(0,\
    \ 0)\n        fibfibArray.update(1, 0)\n        fibfibArray.update(2, 1)\n   \
    \     fibfibArray.update(3, 2)\n        fibfibArray.update(4, 3)\n        fibfibArray.update(5,\
    \ 5)\n        fibfibArray.update(6, 8)\n        fibfibArray.update(7, 13)\n  \
    \      fibfibArray.update(8, 21)\n        fibfibArray.update(9, 34)\n        fibfibArray.update(10,\
    \ 55)\n        fibfibArray.update(11, 89)\n        fibfibArray.update(12, 144)\n\
    \        fibfibArray.update(13, 233)\n        fibfibArray.update(14, 377)\n  \
    \      fibfibArray.update(15, 610)\n        fibfibArray.update(16, 987)\n    \
    \    fibfibArray.update(17, 1597)\n        fibfibArray.update(18, 2584)\n    \
    \    fibfibArray.update(19, 4181)\n        fibfibArray.update(20, 6765)\n    \
    \    fibfibArray.update(21, 10946)\n        fibfibArray.update(22, 17711)\n  \
    \      fibfibArray.update(23, 28657)\n        fibfibArray.update(24, 51421)\n\
    \        fibfibArray.update(25, 82317)\n        fibfibArray.update(26, 134621)\n\
    \        fibfibArray.update(27, 217814)\n        fibfibArray.update(28, 352431)\n\
    \        fibfibArray.update(29, 570269)\n        fibfibArray.update(30, 844491)\n\
    \        fibfibArray.update(31, 1376101)\n        fibfibArray.update(32, 2189221)\n\
    \        fibfibArray.update(33, 3539429)\n        fibfibArray.update(34, 5968029)\n\
    \        fibfibArray.update(35, 9306459)\n        fibfibArray.update(36, 14930352)\n\
    \        fibfibArray.update(37, 24157817)\n        fibfibArray.update(38, 39088169)\n\
    \        fibfibArray.update(39, 51422967)\n        fibfibArray.update(40, 75648211)\n\
    \        fibfibArray.update(41, 109419341)\n        fibfibArray.update(42, 177893173)\n\
    \        fibfibArray.update(43, 286577307)\n        fibfibArray.update(44, 51422967)\n\
    \        fibfibArray.update(45, 82317003)\n        fibfibArray.update(46, 134621094)\n\
    \        fibfibArray.update(47, 217814197)\n        fibfibArray.update(48, 352430131)\n\
    \        fibfib\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpejo7gspg.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpejo7gspg.scala:61:8 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(3)\
    \ = 1\n        fibfibArray.take(n).foreach(x => fibfibArray(n) = fibfibArray(n-1)\
    \ + fibfibArray(n-2) + fibfibArray(n-3))\n        fibfibArray(n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhanc6i3.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n)\
    \ = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffw1fo8m.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) match {\n\
    \            case 0 => fibfib(0)\n            case 1 => fibfib(1)\n          \
    \  case _ => {\n                fibfib(n) match {\n                    case 0\
    \ => fibfib(0)\n                    case 1 => fibfib(1)\n                    case\
    \ _ => {\n                        fibfib(n-1) match {\n                      \
    \      case 0 => fibfib(0)\n                            case 1 => fibfib(1)\n\
    \                            case _ => {\n                                fibfib(n-2)\
    \ match {\n                                    case 0 => fibfib(0)\n         \
    \                           case 1 => fibfib(1)\n                            \
    \        case _ => {\n                                        fibfib(n-3) match\
    \ {\n                                            case 0 => fibfib(0)\n       \
    \                                     case 1 => fibfib(1)\n                  \
    \                          case _ => fibfib(n-3)\n                           \
    \             }\n                                    }\n                     \
    \           }\n                            }\n                        }\n    \
    \                }\n                }\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ktgbdv6.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray.update(0,\
    \ 0)\n        fibfibArray.update(1, 0)\n        fibfibArray.update(2, 1)\n   \
    \     fibfibArray.update(3, 3)\n        fibfibArray.update(4, 6)\n        fibfibArray.update(5,\
    \ 10)\n        fibfibArray.update(6, 15)\n        fibfibArray.update(7, 21)\n\
    \        fibfibArray.update(8, 28)\n        fibfibArray.update(9, 36)\n      \
    \  fibfibArray.update(10, 45)\n        fibfibArray.update(11, 55)\n        fibfibArray.update(12,\
    \ 65)\n        fibfibArray.update(13, 75)\n        fibfibArray.update(14, 85)\n\
    \        fibfibArray.update(15, 92)\n        fibfibArray.update(16, 100)\n   \
    \     fibfibArray.update(17, 105)\n        fibfibArray.update(18, 113)\n     \
    \   fibfibArray.update(19, 121)\n        fibfibArray.update(20, 129)\n       \
    \ fibfibArray.update(21, 137)\n        fibfibArray.update(22, 146)\n        fibfibArray.update(23,\
    \ 155)\n        fibfibArray.update(24, 164)\n        fibfibArray.update(25, 173)\n\
    \        fibfibArray.update(26, 182)\n        fibfibArray.update(27, 191)\n  \
    \      fibfibArray.update(28, 200)\n        fibfibArray.update(29, 208)\n    \
    \    fibfibArray.update(30, 217)\n        fibfibArray.update(31, 227)\n      \
    \  fibfibArray.update(32, 236)\n        fibfibArray.update(33, 245)\n        fibfibArray.update(34,\
    \ 254)\n        fibfibArray.update(35, 263)\n        fibfibArray.update(36, 272)\n\
    \        fibfibArray.update(37, 281)\n        fibfibArray.update(38, 290)\n  \
    \      fibfibArray.update(39, 289)\n        fibfibArray.update(40, 289)\n    \
    \    fibfibArray.update(41, 289)\n        fibfibArray.update(42, 289)\n      \
    \  fibfibArray.update(43, 289)\n        fibfibArray.update(44, 289)\n        fibfibArray.update(45,\
    \ 289)\n        fibfibArray.update(46, 289)\n        fibfibArray.update(47, 289)\n\
    \        fibfibArray.update(48, 289)\n        fibfibArray.update(49, 289)\n  \
    \      fibfibArray.update(50, 289)\n        fibfibArray.update(51, 289)\n    \
    \    fibfibArray.update(52, 289)\n        fibfibArray.update(53, 289)\n      \
    \  fibfibArray.update(54, 289)\n        fibfibArray.update(55, 289)\n        fibfibArray.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4x1k44it.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp4x1k44it.scala:11:26 ------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibList = mutable.ArrayBuffer.empty[Long]\n        fibfibList\
    \ += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList +=\
    \ 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n \
    \       fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n  \
    \      fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n   \
    \     fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n    \
    \    fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n     \
    \   fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n      \
    \  fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n       \
    \ fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList\
    \ += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList +=\
    \ 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n \
    \       fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n  \
    \      fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n   \
    \     fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n    \
    \    fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n     \
    \   fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n      \
    \  fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n       \
    \ fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList\
    \ += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList +=\
    \ 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5p7jtval.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib.put(n,\
    \ n)\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpud3dfvm0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(3)\
    \ = 1\n        fibfibArray.take(n).foreach(fibfibArray.update(_ + _ + _))\n  \
    \      fibfibArray(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkmicm0xj.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jiuxgyk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jiuxgyk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8go40yzd.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray.update(0,\
    \ 0)\n        fibfibArray.update(1, 0)\n        fibfibArray.update(2, 1)\n   \
    \     fibfibArray.update(3, 3)\n        fibfibArray.update(4, 7)\n        fibfibArray.update(5,\
    \ 15)\n        fibfibArray.update(6, 31)\n        fibfibArray.update(7, 63)\n\
    \        fibfibArray.update(8, 127)\n        fibfibArray.update(9, 251)\n    \
    \    fibfibArray.update(10, 507)\n        fibfibArray.update(11, 1025)\n     \
    \   fibfibArray.update(12, 2049)\n        fibfibArray.update(13, 4095)\n     \
    \   fibfibArray.update(14, 8191)\n        fibfibArray.update(15, 16383)\n    \
    \    fibfibArray.update(16, 32767)\n        fibfibArray.update(17, 65535)\n  \
    \      fibfibArray.update(18, 131071)\n        fibfibArray.update(19, 262143)\n\
    \        fibfibArray.update(20, 524287)\n        fibfibArray.update(21, 1048575)\n\
    \        fibfibArray.update(22, 2097151)\n        fibfibArray.update(23, 4194303)\n\
    \        fibfibArray.update(24, 8388607)\n        fibfibArray.update(25, 16777215)\n\
    \        fibfibArray.update(26, 33554435)\n        fibfibArray.update(27, 67108863)\n\
    \        fibfibArray.update(28, 134217727)\n        fibfibArray.update(29, 268435455)\n\
    \        fibfibArray.update(30, 536870911)\n        fibfibArray.update(31, 1073741823)\n\
    \        fibfibArray.update(32, -2147483648)\n        fibfibArray.update(33, -1)\n\
    \        fibfibArray.update(34, -1)\n        fibfibArray.update(35, -1)\n    \
    \    fibfibArray.update(36, -1)\n        fibfibArray.update(37, -1)\n        fibfibArray.update(38,\
    \ -1)\n        fibfibArray.update(39, -1)\n        fibfibArray.update(40, -1)\n\
    \        fibfibArray.update(41, -1)\n        fibfibArray.update(42, -1)\n    \
    \    fibfibArray.update(43, -1)\n        fibfibArray.update(44, -1)\n        fibfibArray.update(45,\
    \ -1)\n        fibfibArray.update(46, -1)\n        fibfibArray.update(47, -1)\n\
    \        fibfibArray.update(48, -1)\n        fibfibArray.update(49, -1)\n    \
    \    fibfibArray.update(50, -1)\n        fibfibArray.update(51, -1)\n        fibfibArray.update(52,\
    \ -1)\n        fibfibArray.update(53, -1)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4046o_n3.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n        fibfibArray(0)\
    \ = 0\n        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hhqsjh9.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n +1)\n        fibfib(0) = 0\n \
    \       fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpax9lh_pk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n +\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n <= 0) 0\n        else if (n <= 2) 1\n        else fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppb2i8ot2.scala:17)\n\tat Problem.main(tmppb2i8ot2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n)\
    \ match {\n            case 0 => 0L\n            case 1 => 0L\n            case\
    \ 2 => 1L\n            case n => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4qo68qt_.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else if (n == 3) return 1\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpswmfo4vc.scala:19)\n\tat Problem.main(tmpswmfo4vc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) match {\n\
    \            case 0 => fibfib(0)\n            case 1 => fibfib(1)\n          \
    \  case _ => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphlh4ks6n.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n)\
    \ match {\n            case 0 => 0L\n            case 1 => 1L\n            case\
    \ 2 => 2L\n            case n => {\n                val prev = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                fibfib.put(n, prev)\n                prev\n \
    \           }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8nzvzq9j.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprg3sx3t0.scala:17)\n\tat Problem.main(tmprg3sx3t0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray\
    \ += 0\n        fibfibArray += 0\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7orqe47q.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n        fibfibArray(0)\
    \ = 0\n        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hhqsjh9.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray.update(n)\
    \ {\n            fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpub3tgr63.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibList = mutable.ListBuffer[Long]()\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n \
    \       fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n  \
    \      fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n   \
    \     fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n    \
    \    fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n     \
    \   fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n      \
    \  fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n       \
    \ fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList\
    \ += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList +=\
    \ 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n \
    \       fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n  \
    \      fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n   \
    \     fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n    \
    \    fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n     \
    \   fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n      \
    \  fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n       \
    \ fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList\
    \ += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList +=\
    \ 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n \
    \       fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n  \
    \      fibfibList += 0\n        fibfibList += 0\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptm1ccz1r.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfib\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ld5_vrc.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2ld5_vrc.scala:83:8 ---------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8go40yzd.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = Array[Long]()\n        fibfibArray(0) = 0\n       \
    \ fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n) = fibfibArray(n-1)\
    \ + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4n2eebnl.scala:15:20\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        fibfibArray(n) = fibfibArray(n-\e\
    [31m1\e[0m) + fibfibArray(n-\e[31m2\e[0m) + fibfibArray(n-\e[31m3\e[0m)\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (n : Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4n2eebnl.scala:15:37 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        fibfibArray(n) = fibfibArray(n-\e[31m1\e[0m)\
    \ + fibfibArray(n-\e[31m2\e[0m) + fibfibArray(n-\e[31m3\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^\e[0m\n\e[31m   |\e[0m       \
    \                              Found:    Long\n\e[31m   |\e[0m               \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4n2eebnl.scala:15:56 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        fibfibArray(n) = fibfibArray(n-\e[31m1\e[0m) + fibfibArray(n-\e\
    [31m2\e[0m) + fibfibArray(n-\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \                                           ^^^\e[0m\n\e[31m   |\e[0m        \
    \                                                Found:    Long\n\e[31m   |\e\
    [0m                                                        Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4n2eebnl.scala:15:75 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        fibfibArray(n) = fibfibArray(n-\e[31m1\e[0m)\
    \ + fibfibArray(n-\e[31m2\e[0m) + fibfibArray(n-\e[31m3\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \      ^^^\e[0m\n\e[31m   |\e[0m                                             \
    \             Found:    Long\n\e[31m   |\e[0m                                \
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation ava"
  stdout: ''
  timestamp: 1660009972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ListBuffer[Long]()\n        fibfibs += 0\n    \
    \    fibfibs += 0\n        fibfibs += 1\n        fibfibs += 2\n        fibfibs\
    \ += 3\n        fibfibs take n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_lcnrlj.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jiuxgyk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n <= 0) 0\n        else if (n <= 2) 1\n        else fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppb2i8ot2.scala:17)\n\tat Problem.main(tmppb2i8ot2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        var fibfib = 0\n      \
    \  fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n \
    \       fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddecjqvh.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        var fibfibArrayIndex\
    \ = 0\n        fibfibArray.updated(0, 0)\n        fibfibArray.updated(1, 0)\n\
    \        fibfibArray.updated(2, 1)\n        fibfibArray.updated(n, fibfibArrayIndex\
    \ + fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3))\n        fibfibArrayIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo52nhn35.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) match {\n\
    \            case 0 => fibfib(0)\n            case 1 => fibfib(1)\n          \
    \  case _ => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphlh4ks6n.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](3)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplsozy4zh.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else if (n > 2) fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        else\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptbytgpsp.scala:19)\n\tat Problem.main(tmptbytgpsp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib.put(n,\
    \ n)\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpud3dfvm0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jiuxgyk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n        fibfibArray(0)\
    \ = 0\n        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hhqsjh9.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfib\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ld5_vrc.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2ld5_vrc.scala:83:8 ---------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else if (n <= 3) fibfib(n-1) + fibfib(n-2)\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw53yncgh.scala:19)\n\tat Problem.main(tmpw53yncgh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8go40yzd.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashSet[Long]()\n        fibfib.add(0)\n   \
    \     fibfib.add(1)\n        fibfib.add(2)\n        fibfib(n) match {\n      \
    \      case 0 => 0\n            case 1 => 1\n            case 2 => 2\n       \
    \     case _ => {\n                fibfib(n-1) match {\n                    case\
    \ 0 => 0\n                    case 1 => 1\n                    case 2 => 2\n \
    \                   case _ => {\n                        fibfib(n-2) match {\n\
    \                            case 0 => 0\n                            case 1 =>\
    \ 1\n                            case 2 => 2\n                            case\
    \ _ => {\n                                fibfib(n-3) match {\n              \
    \                      case 0 => 0\n                                    case 1\
    \ => 1\n                                    case 2 => 2\n                    \
    \                case _ => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       }\n                            }\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfrzdwl_a.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 1\n        fibfibs += 2\n        fibfibs += 3\n   \
    \     fibfibs += 4\n        fibfibs += 5\n        fibfibs += 6\n        fibfibs\
    \ += 7\n        fibfibs += 8\n        fibfibs += 9\n        fibfibs += 10\n  \
    \      fibfibs += 11\n        fibfibs += 12\n        fibfibs += 13\n        fibfibs\
    \ += 14\n        fibfibs += 15\n        fibfibs += 16\n        fibfibs += 17\n\
    \        fibfibs += 18\n        fibfibs += 19\n        fibfibs += 20\n       \
    \ fibfibs += 21\n        fibfibs += 22\n        fibfibs += 23\n        fibfibs\
    \ += 24\n        fibfibs += 25\n        fibfibs += 26\n        fibfibs += 27\n\
    \        fibfibs += 28\n        fibfibs += 29\n        fibfibs += 30\n       \
    \ fibfibs += 31\n        fibfibs += 32\n        fibfibs += 33\n        fibfibs\
    \ += 34\n        fibfibs += 35\n        fibfibs += 36\n        fibfibs += 37\n\
    \        fibfibs += 38\n        fibfibs += 39\n        fibfibs += 40\n       \
    \ fibfibs += 41\n        fibfibs += 42\n        fibfibs += 43\n        fibfibs\
    \ += 44\n        fibfibs += 45\n        fibfibs += 46\n        fibfibs += 47\n\
    \        fibfibs += 48\n        fibfibs += 49\n        fibfibs += 50\n       \
    \ fibfibs += 51\n        fibfibs += 52\n        fibfibs += 53\n        fibfibs\
    \ += 54\n        fibfibs += 55\n        fibfibs += 56\n        fibfibs += 57\n\
    \        fibfibs += 58\n        fibfibs += 59\n        fibfibs += 60\n       \
    \ fibfibs += 61\n        fibfibs += 62\n        fibfibs += 63\n        fibfibs\
    \ += 64\n        fibfibs += 65\n        fibfibs += 66\n        fibfibs += 67\n\
    \        fibfibs += 68\n        fibfibs += 69\n        fibfibs += 70\n       \
    \ fibfibs += 71\n        fibfibs += 72\n        fibfibs += 73\n        fibfibs\
    \ += 74\n        fibfibs += 75\n        fibfibs += 76\n        fibfibs += 77\n\
    \        fibfibs += 78\n        fibfibs += 79\n        fibfibs += 80\n       \
    \ fibfibs += 81\n        fibfib\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpki7l5uog.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpki7l5uog.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprg3sx3t0.scala:17)\n\tat Problem.main(tmprg3sx3t0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.clear()\n\
    \        fibfib.append(0)\n        fibfib.append(0)\n        fibfib.append(1)\n\
    \        fibfib(n) match {\n            case 0 => fibfib(0)\n            case\
    \ 1 => fibfib(1)\n            case 2 => fibfib(2)\n            case _ => {\n \
    \               val fibfib2 = new mutable.MutableList[Long]()\n              \
    \  fibfib2.clear()\n                fibfib2.append(fibfib(n-1))\n            \
    \    fibfib2.append(fibfib(n-2))\n                fibfib2.append(fibfib(n-3))\n\
    \                fibfib2.last\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotyp8njs.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotyp8njs.scala:21:34\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e\
    [0m \e[36mfibfib2\e[0m = \e[33mnew\e[0m mutable.MutableList[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                  Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvgr3v9i1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 1\n        fibfibs += 1\n        fibfibs += 2\n   \
    \     fibfibs += 2\n        fibfibs += 3\n        fibfibs += 3\n        fibfibs\
    \ += 4\n        fibfibs += 4\n        fibfibs += 5\n        fibfibs += 5\n   \
    \     fibfibs += 6\n        fibfibs += 6\n        fibfibs += 7\n        fibfibs\
    \ += 7\n        fibfibs += 8\n        fibfibs += 8\n        fibfibs += 9\n   \
    \     fibfibs += 9\n        fibfibs += 10\n        fibfibs += 10\n        fibfibs\
    \ += 11\n        fibfibs += 11\n        fibfibs += 12\n        fibfibs += 12\n\
    \        fibfibs += 13\n        fibfibs += 13\n        fibfibs += 14\n       \
    \ fibfibs += 14\n        fibfibs += 15\n        fibfibs += 15\n        fibfibs\
    \ += 16\n        fibfibs += 16\n        fibfibs += 17\n        fibfibs += 17\n\
    \        fibfibs += 18\n        fibfibs += 18\n        fibfibs += 19\n       \
    \ fibfibs += 19\n        fibfibs += 20\n        fibfibs += 20\n        fibfibs\
    \ += 21\n        fibfibs += 21\n        fibfibs += 22\n        fibfibs += 22\n\
    \        fibfibs += 23\n        fibfibs += 23\n        fibfibs += 24\n       \
    \ fibfibs += 24\n        fibfibs += 25\n        fibfibs += 25\n        fibfibs\
    \ += 26\n        fibfibs += 26\n        fibfibs += 27\n        fibfibs += 27\n\
    \        fibfibs += 28\n        fibfibs += 28\n        fibfibs += 29\n       \
    \ fibfibs += 29\n        fibfibs += 30\n        fibfibs += 30\n        fibfibs\
    \ += 31\n        fibfibs += 31\n        fibfibs += 32\n        fibfibs += 32\n\
    \        fibfibs += 33\n        fibfibs += 33\n        fibfibs += 34\n       \
    \ fibfibs += 34\n        fibfibs += 35\n        fibfibs += 35\n        fibfibs\
    \ += 36\n        fibfibs += 36\n        fibfibs += 37\n        fibfibs += 37\n\
    \        fibfibs += 38\n        fibfibs += 38\n        fibfibs += 39\n       \
    \ fibfibs += 39\n        fibfibs += 40\n        fibfibs += 40\n        fibfibs\
    \ += 41\n        fibfib\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7y50hzhb.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7y50hzhb.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray.push(fibfibArray(0))\n\
    \        fibfibArray.push(fibfibArray(1))\n        fibfibArray.push(fibfibArray(2))\n\
    \        fibfibArray.push(fibfibArray(3))\n        fibfibArray.take(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n  \
    \  assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbslld2fc.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray.update(0,\
    \ 0)\n        fibfibArray.update(1, 0)\n        fibfibArray.update(2, 1)\n   \
    \     fibfibArray.update(3, fibfibArray.get(0) - fibfibArray.get(1) + fibfibArray.get(2)\
    \ - fibfibArray.get(3))\n        fibfibArray.update(4, fibfibArray.get(0) - fibfibArray.get(1)\
    \ + fibfibArray.get(2) - fibfibArray.get(3) + fibfibArray.get(4))\n        fibfibArray.update(5,\
    \ fibfibArray.get(0) - fibfibArray.get(1) + fibfibArray.get(2) - fibfibArray.get(3)\
    \ + fibfibArray.get(4) - fibfibArray.get(5))\n        fibfibArray.update(6, fibfibArray.get(0)\
    \ - fibfibArray.get(1) + fibfibArray.get(2) - fibfibArray.get(3) + fibfibArray.get(4)\
    \ - fibfibArray.get(5) - fibfibArray.get(6))\n        fibfibArray.update(7, fibfibArray.get(0)\
    \ - fibfibArray.get(1) + fibfibArray.get(2) - fibfibArray.get(3) + fibfibArray.get(4)\
    \ - fibArray.get(5) - fibfibArray.get(6) - fibfibArray.get(7))\n        fibfibArray.update(8,\
    \ fibfibArray.get(0) - fibfibArray.get(1) + fibfibArray.get(2) - fibfibArray.get(3)\
    \ + fibfibArray.get(4) - fibArray.get(5) - fibArray.get(6) - fibArray.get(7) -\
    \ fibfibfibArray.get(8))\n        fibfibArray.update(9, fibfibArray.get(0) - fibfibArray.get(1)\
    \ + fibfibArray.get(2) - fibfibArray.get(3) + fibfibArray.get(4) - fibArray.get(5)\
    \ - fibArray.get(6) - fibArray.get(7) - fibfibArray.get(8) - fibfibfibArray.get(9))\n\
    \        fibfibArray.update(10, fibfibArray.get(0) - fibfibArray.get(1) + fibfibArray.get(2)\
    \ - fibfibArray.get(3) + fibfibArray.get(4) - fibArray.get(5) - fibArray.get(6)\
    \ - fibArray.get(7) - fibArray.get(8) - fibfibArray.get(9) - fibfibfibArray.get(10))\n\
    \        fibfibArray.update(11, fibfibArray.get(0) - fibfibArray.get(1) + fibfibArray.get(2)\
    \ - fibfibArray.get(3) + fibfibArray.get(4) - fibArray.get(5) - fibArray.get(6)\
    \ - fibArray.get(7) - fibArray.get(8) - fibArray.get(9) - fibfibArray.get(10)\
    \ - fibfibArray.get(11))\n        fibfibArray.update(12, fibfibArray.get(0) -\
    \ fibfibArray.get(1) + fibfibArray.get(2) - fibfibArray.get(3) + \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppihcz9r6.scala:24:114 --------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        fibfibArray.update(\e[31m12\e[0m, fibfibArray.get(\e\
    [31m0\e[0m) - fibfibArray.get(\e[31m1\e[0m) + fibfibArray.get(\e[31m2\e[0m) -\
    \ fibfibArray.get(\e[31m3\e[0m) + \n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppihcz9r6.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]\n        fibfib.clear()\n\
    \        fibfib(0) = 0\n        fibfib(1) = 0\n        fibfib(2) = 1\n       \
    \ fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy1bycz48.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 1\n        fibfibs += 2\n        fibfibs += 3\n   \
    \     fibfibs += 4\n        fibfibs += 5\n        fibfibs += 6\n        fibfibs\
    \ += 7\n        fibfibs += 8\n        fibfibs += 9\n        fibfibs += 10\n  \
    \      fibfibs += 11\n        fibfibs += 12\n        fibfibs += 13\n        fibfibs\
    \ += 14\n        fibfibs += 15\n        fibfibs += 16\n        fibfibs += 17\n\
    \        fibfibs += 18\n        fibfibs += 19\n        fibfibs += 20\n       \
    \ fibfibs += 21\n        fibfibs += 22\n        fibfibs += 23\n        fibfibs\
    \ += 24\n        fibfibs += 25\n        fibfibs += 26\n        fibfibs += 27\n\
    \        fibfibs += 28\n        fibfibs += 29\n        fibfibs += 30\n       \
    \ fibfibs += 31\n        fibfibs += 32\n        fibfibs += 33\n        fibfibs\
    \ += 34\n        fibfibs += 35\n        fibfibs += 36\n        fibfibs += 37\n\
    \        fibfibs += 38\n        fibfibs += 39\n        fibfibs += 40\n       \
    \ fibfibs += 41\n        fibfibs += 42\n        fibfibs += 43\n        fibfibs\
    \ += 44\n        fibfibs += 45\n        fibfibs += 46\n        fibfibs += 47\n\
    \        fibfibs += 48\n        fibfibs += 49\n        fibfibs += 50\n       \
    \ fibfibs += 51\n        fibfibs += 52\n        fibfibs += 53\n        fibfibs\
    \ += 54\n        fibfibs += 55\n        fibfibs += 56\n        fibfibs += 57\n\
    \        fibfibs += 58\n        fibfibs += 59\n        fibfibs += 60\n       \
    \ fibfibs += 61\n        fibfibs += 62\n        fibfibs += 63\n        fibfibs\
    \ += 64\n        fibfibs += 65\n        fibfibs += 66\n        fibfibs += 67\n\
    \        fibfibs += 68\n        fibfibs += 69\n        fibfibs += 70\n       \
    \ fibfibs += 71\n        fibfibs += 72\n        fibfibs += 73\n        fibfibs\
    \ += 74\n        fibfibs += 75\n        fibfibs += 76\n        fibfibs += 77\n\
    \        fibfibs += 78\n        fibfibs += 79\n        fibfibs += 80\n       \
    \ fibfibs += 81\n        fibfib\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpki7l5uog.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpki7l5uog.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ListBuffer[Long]()\n        fibfibs += 0\n    \
    \    fibfibs += 0\n        fibfibs += 1\n        fibfibs += 2\n        fibfibs\
    \ += 3\n        fibfibs += 4\n        fibfibs += 5\n        fibfibs += 6\n   \
    \     fibfibs += 7\n        fibfibs += 8\n        fibfibs += 9\n        fibfibs\
    \ += 10\n        fibfibs += 11\n        fibfibs += 12\n        fibfibs += 13\n\
    \        fibfibs += 14\n        fibfibs += 15\n        fibfibs += 16\n       \
    \ fibfibs += 17\n        fibfibs += 18\n        fibfibs += 19\n        fibfibs\
    \ += 20\n        fibfibs += 21\n        fibfibs += 22\n        fibfibs += 23\n\
    \        fibfibs += 24\n        fibfibs += 25\n        fibfibs += 26\n       \
    \ fibfibs += 27\n        fibfibs += 28\n        fibfibs += 29\n        fibfibs\
    \ += 30\n        fibfibs += 31\n        fibfibs += 32\n        fibfibs += 33\n\
    \        fibfibs += 34\n        fibfibs += 35\n        fibfibs += 36\n       \
    \ fibfibs += 37\n        fibfibs += 38\n        fibfibs += 39\n        fibfibs\
    \ += 40\n        fibfibs += 41\n        fibfibs += 42\n        fibfibs += 43\n\
    \        fibfibs += 44\n        fibfibs += 45\n        fibfibs += 46\n       \
    \ fibfibs += 47\n        fibfibs += 48\n        fibfibs += 49\n        fibfibs\
    \ += 50\n        fibfibs += 51\n        fibfibs += 52\n        fibfibs += 53\n\
    \        fibfibs += 54\n        fibfibs += 55\n        fibfibs += 56\n       \
    \ fibfibs += 57\n        fibfibs += 58\n        fibfibs += 59\n        fibfibs\
    \ += 60\n        fibfibs += 61\n        fibfibs += 62\n        fibfibs += 63\n\
    \        fibfibs += 64\n        fibfibs += 65\n        fibfibs += 66\n       \
    \ fibfibs += 67\n        fibfibs += 68\n        fibfibs += 69\n        fibfibs\
    \ += 70\n        fibfibs += 71\n        fibfibs += 72\n        fibfibs += 73\n\
    \        fibfibs += 74\n        fibfibs += 75\n        fibfibs += 76\n       \
    \ fibfibs += 77\n        fibfibs += 78\n        fibfibs += 79\n        fibfibs\
    \ += 80\n        fibfibs += 81\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphkvx0sll.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n <= 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpps208ht2.scala:18)\n\tat Problem.main(tmpps208ht2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else if (n <= 3) fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        else\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjm8392ng.scala:19)\n\tat Problem.main(tmpjm8392ng.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray.update(0,\
    \ 0)\n        fibfibArray.update(1, 0)\n        fibfibArray.update(2, 1)\n   \
    \     fibfibArray.update(3, 3)\n        fibfibArray.update(4, 7)\n        fibfibArray.update(5,\
    \ 15)\n        fibfibArray.update(6, 31)\n        fibfibArray.update(7, 63)\n\
    \        fibfibArray.update(8, 127)\n        fibfibArray.update(9, 251)\n    \
    \    fibfibArray.update(10, 507)\n        fibfibArray.update(11, 1025)\n     \
    \   fibfibArray.update(12, 2049)\n        fibfibArray.update(13, 4095)\n     \
    \   fibfibArray.update(14, 8025)\n        fibfibArray.update(15, 16383)\n    \
    \    fibfibArray.update(16, 32767)\n        fibfibArray.update(17, 65535)\n  \
    \      fibfibArray.update(18, 131071)\n        fibfibArray.update(19, 262143)\n\
    \        fibfibArray.update(20, 524287)\n        fibfibArray.update(21, 1048575)\n\
    \        fibfibArray.update(22, 2097151)\n        fibfibArray.update(23, 4194303)\n\
    \        fibfibArray.update(24, 8388607)\n        fibfibArray.update(25, 16777215)\n\
    \        fibfibArray.update(26, 33554427)\n        fibfibArray.update(27, 67108863)\n\
    \        fibfibArray.update(28, 134217727)\n        fibfibArray.update(29, 268435455)\n\
    \        fibfibArray.update(30, 536870911)\n        fibfibArray.update(31, 1073741823)\n\
    \        fibfibArray.update(32, -2147483648)\n        fibfibArray.update(33, -1)\n\
    \        fibfibArray.update(34, -1)\n        fibfibArray.update(35, -1)\n    \
    \    fibfibArray.update(36, -1)\n        fibfibArray.update(37, -1)\n        fibfibArray.update(38,\
    \ -1)\n        fibfibArray.update(39, -1)\n        fibfibArray.update(40, -1)\n\
    \        fibfibArray.update(41, -1)\n        fibfibArray.update(42, -1)\n    \
    \    fibfibArray.update(43, -1)\n        fibfibArray.update(44, -1)\n        fibfibArray.update(45,\
    \ -1)\n        fibfibArray.update(46, -1)\n        fibfibArray.update(47, -1)\n\
    \        fibfibArray.update(48, -1)\n        fibfibArray.update(49, -1)\n    \
    \    fibfibArray.update(50, -1)\n        fibfibArray.update(51, -1)\n        fibfibArray.update(52,\
    \ -1)\n        fibfibArray.update(53, -1)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl2g9w1_f.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n        fibfibArray(0)\
    \ = 0\n        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hhqsjh9.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib.put(n,\
    \ n)\n        fibfib(n) match {\n            case 0 => 0\n            case 1 =>\
    \ 0\n            case 2 => 1\n            case n => fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv99mj2k1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else if (n == 3) 2\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz9p09ssv.scala:19)\n\tat Problem.main(tmpz9p09ssv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jiuxgyk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n <= 0) 0\n        else if (n <= 2) 1\n        else fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppb2i8ot2.scala:17)\n\tat Problem.main(tmppb2i8ot2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashSet[Long]()\n        fibfib.add(0)\n   \
    \     fibfib.add(1)\n        fibfib.add(2)\n        fibfib(n) match {\n      \
    \      case 0 => 0\n            case 1 => 1\n            case 2 => 2\n       \
    \     case _ => {\n                fibfib(n-1) match {\n                    case\
    \ 0 => 0\n                    case 1 => 1\n                    case 2 => 2\n \
    \                   case _ => {\n                        fibfib(n-2) match {\n\
    \                            case 0 => 0\n                            case 1 =>\
    \ 1\n                            case 2 => 2\n                            case\
    \ _ => {\n                                fibfib(n-3) match {\n              \
    \                      case 0 => 0\n                                    case 1\
    \ => 1\n                                    case 2 => 2\n                    \
    \                case _ => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       }\n                            }\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfrzdwl_a.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jiuxgyk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray.update(n)\
    \ {\n            fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n    \
    \    }\n        fibfibArray(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeb95wivt.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        var fibfibArrayIndex\
    \ = 0\n        var fibfibArraySize = n\n        while (fibfibArrayIndex < fibfibArraySize)\
    \ {\n            fibfibArray += fibfibArrayIndex\n            fibfibArrayIndex\
    \ += 1\n        }\n        fibfibArray(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpefhcqx3q.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashSet[Long]()\n        fibfib.add(0)\n   \
    \     fibfib.add(1)\n        fibfib.add(2)\n        fibfib(n) match {\n      \
    \      case 0 => 0\n            case 1 => 0\n            case 2 => 1\n       \
    \     case n => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi019ixs0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 1\n        fibfibs += 2\n        fibfibs += 3\n   \
    \     fibfibs += 4\n        fibfibs += 5\n        fibfibs += 6\n        fibfibs\
    \ += 7\n        fibfibs += 8\n        fibfibs += 9\n        fibfibs += 10\n  \
    \      fibfibs += 11\n        fibfibs += 12\n        fibfibs += 13\n        fibfibs\
    \ += 14\n        fibfibs += 15\n        fibfibs += 16\n        fibfibs += 17\n\
    \        fibfibs += 18\n        fibfibs += 19\n        fibfibs += 20\n       \
    \ fibfibs += 21\n        fibfibs += 22\n        fibfibs += 23\n        fibfibs\
    \ += 24\n        fibfibs += 25\n        fibfibs += 26\n        fibfibs += 27\n\
    \        fibfibs += 28\n        fibfibs += 29\n        fibfibs += 30\n       \
    \ fibfibs += 31\n        fibfibs += 32\n        fibfibs += 33\n        fibfibs\
    \ += 34\n        fibfibs += 35\n        fibfibs += 36\n        fibfibs += 37\n\
    \        fibfibs += 38\n        fibfibs += 39\n        fibfibs += 40\n       \
    \ fibfibs += 41\n        fibfibs += 42\n        fibfibs += 43\n        fibfibs\
    \ += 44\n        fibfibs += 45\n        fibfibs += 46\n        fibfibs += 47\n\
    \        fibfibs += 48\n        fibfibs += 49\n        fibfibs += 50\n       \
    \ fibfibs += 51\n        fibfibs += 52\n        fibfibs += 53\n        fibfibs\
    \ += 54\n        fibfibs += 55\n        fibfibs += 56\n        fibfibs += 57\n\
    \        fibfibs += 58\n        fibfibs += 59\n        fibfibs += 60\n       \
    \ fibfibs += 61\n        fibfibs += 62\n        fibfibs += 63\n        fibfibs\
    \ += 64\n        fibfibs += 65\n        fibfibs += 66\n        fibfibs += 67\n\
    \        fibfibs += 68\n        fibfibs += 69\n        fibfibs += 70\n       \
    \ fibfibs += 71\n        fibfibs += 72\n        fibfibs += 73\n        fibfibs\
    \ += 74\n        fibfibs += 75\n        fibfibs += 76\n        fibfibs += 77\n\
    \        fibfibs += 78\n        fibfibs += 79\n        fibfibs += 80\n       \
    \ fibfibs += 81\n        fibfib\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpki7l5uog.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpki7l5uog.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.ListBuffer[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) match {\n\
    \            case 0 => fibfib(0)\n            case 1 => fibfib(1)\n          \
    \  case 2 => fibfib(2)\n            case n => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpemohijql.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n        fibfibArray(0)\
    \ = 0\n        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hhqsjh9.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n)\
    \ match {\n            case 0 => 0L\n            case 1 => 1L\n            case\
    \ 2 => 2L\n            case n => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0opxof1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr601iv8f.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibList = mutable.ListBuffer[Long]()\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n \
    \       fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n  \
    \      fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n   \
    \     fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n    \
    \    fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n     \
    \   fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n      \
    \  fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n       \
    \ fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList\
    \ += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList +=\
    \ 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n \
    \       fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n  \
    \      fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n   \
    \     fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n    \
    \    fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n     \
    \   fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n      \
    \  fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n       \
    \ fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList\
    \ += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList +=\
    \ 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n \
    \       fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n  \
    \      fibfibList += 0\n        fibfibList += 0\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptm1ccz1r.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.ListBuffer[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) match {\n\
    \            case 0 => fibfib(0)\n            case 1 => fibfib(1)\n          \
    \  case 2 => fibfib(2)\n            case _ => {\n                fibfib(n) match\
    \ {\n                    case 0 => fibfib(0)\n                    case 1 => fibfib(1)\n\
    \                    case 2 => fibfib(2)\n                    case _ => {\n  \
    \                      fibfib(n) match {\n                            case 0 =>\
    \ fibfib(0)\n                            case 1 => fibfib(1)\n               \
    \             case 2 => fibfib(2)\n                            case _ => {\n \
    \                               fibfib(n) match {\n                          \
    \          case 0 => fibfib(0)\n                                    case 1 =>\
    \ fibfib(1)\n                                    case 2 => fibfib(2)\n       \
    \                             case _ => {\n                                  \
    \      fibfib(n) match {\n                                            case 0 =>\
    \ fibfib(0)\n                                            case 1 => fibfib(1)\n\
    \                                            case 2 => fibfib(2)\n           \
    \                                 case _ => {\n                              \
    \                  fibfib(n) match {\n                                       \
    \             case 0 => fibfib(0)\n                                          \
    \          case 1 => fibfib(1)\n                                             \
    \       case 2 => fibfib(2)\n                                                \
    \    case _ => {\n                                                        fibfib(n)\
    \ match {\n                                                            case 0\
    \ => fibfib(0)\n                                                            case\
    \ 1 => fibfib(1)\n                                                           \
    \ case 2 => fibfib(2)\n                                                      \
    \      case _ => {\n                                                         \
    \       fibfib(n) match {\n                                                  \
    \                  case 0 => fibfib(0)\n                                     \
    \                               case 1 => fibfib(1)\n                        \
    \                                            case 2 => fibfib(2)\n           \
    \                                                         case _ => {\n      \
    \                                                                  fibfib(n) match\
    \ {\n                                                                        \
    \    case 0 => fibfib(0)\n                                                   \
    \                         case 1 => fibfib(1)\n                              \
    \                                              case 2 => fibfib(2)\n         \
    \                                                                   case _ =>\
    \ {\n                                                                        \
    \        fibfib(n) match {\n                                                 \
    \                                   case 0 => fibfib(0)\n                    \
    \                                                                case 1 => fibfib(1)\n\
    \                                                                            \
    \        case 2 => fibfib(2)\n                                               \
    \                                     case _ => {\n                          \
    \                                                              fibfib(n) match\
    \ {\n                                                                        \
    \                    case 0 => fibfib(0)\n                                   \
    \                                                         case 1 => fibfib(1)\n\
    \                                                                            \
    \                case 2 => fibfib(2)\n                                       \
    \                                                     case _ => {\n          \
    \                                                                            \
    \          fibfib(n) match {\n                                               \
    \                                                     case 0 => fibfib(0)\n  \
    \                                                                            \
    \                      case 1 => fibfib(1)\n                                 \
    \                                                                   case 2 =>\
    \ fibfib(2)\n                                                                \
    \                                    case _ => {\n                           \
    \                                                                            \
    \ fibfib(n) match {\n                                                        \
    \                                                    case 0 => fibfib(0)\n   \
    \                                                                            \
    \                             case 1 => fibfib\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqxmiih7d.scala:90:0 ----------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqxmiih7d.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfibfib\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqxmiih7d.scala:89:1 ---------------------\e[0m\e[0m\n\e[31m89\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpqxmiih7d.scala:79:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m79 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        var fibfib = 0\n      \
    \  fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n \
    \       fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddecjqvh.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ListBuffer[Long]()\n        fibfibs += 0\n    \
    \    fibfibs += 0\n        fibfibs += 1\n        fibfibs += 2\n        fibfibs\
    \ += 3\n        fibfibs += 4\n        fibfibs += 5\n        fibfibs += 6\n   \
    \     fibfibs += 7\n        fibfibs += 8\n        fibfibs += 9\n        fibfibs\
    \ += 10\n        fibfibs += 11\n        fibfibs += 12\n        fibfibs += 13\n\
    \        fibfibs += 14\n        fibfibs += 15\n        fibfibs += 16\n       \
    \ fibfibs += 17\n        fibfibs += 18\n        fibfibs += 19\n        fibfibs\
    \ += 20\n        fibfibs += 21\n        fibfibs += 22\n        fibfibs += 23\n\
    \        fibfibs += 24\n        fibfibs += 25\n        fibfibs += 26\n       \
    \ fibfibs += 27\n        fibfibs += 28\n        fibfibs += 29\n        fibfibs\
    \ += 30\n        fibfibs += 31\n        fibfibs += 32\n        fibfibs += 33\n\
    \        fibfibs += 34\n        fibfibs += 35\n        fibfibs += 36\n       \
    \ fibfibs += 37\n        fibfibs += 38\n        fibfibs += 39\n        fibfibs\
    \ += 40\n        fibfibs += 41\n        fibfibs += 42\n        fibfibs += 43\n\
    \        fibfibs += 44\n        fibfibs += 45\n        fibfibs += 46\n       \
    \ fibfibs += 47\n        fibfibs += 48\n        fibfibs += 49\n        fibfibs\
    \ += 50\n        fibfibs += 51\n        fibfibs += 52\n        fibfibs += 53\n\
    \        fibfibs += 54\n        fibfibs += 55\n        fibfibs += 56\n       \
    \ fibfibs += 57\n        fibfibs += 58\n        fibfibs += 59\n        fibfibs\
    \ += 60\n        fibfibs += 61\n        fibfibs += 62\n        fibfibs += 63\n\
    \        fibfibs += 64\n        fibfibs += 65\n        fibfibs += 66\n       \
    \ fibfibs += 67\n        fibfibs += 68\n        fibfibs += 69\n        fibfibs\
    \ += 70\n        fibfibs += 71\n        fibfibs += 72\n        fibfibs += 73\n\
    \        fibfibs += 74\n        fibfibs += 75\n        fibfibs += 76\n       \
    \ fibfibs += 77\n        fibfibs += 78\n        fibfibs += 79\n        fibfibs\
    \ += 80\n        fibfibs += 81\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphkvx0sll.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n)\
    \ = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffw1fo8m.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvgr3v9i1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jiuxgyk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray.push(0)\n\
    \        fibfibArray.push(1)\n        fibfibArray.push(2)\n        fibfibArray.push(3)\n\
    \        fibfibArray.push(4)\n        fibfibArray.push(5)\n        fibfibArray.push(6)\n\
    \        fibfibArray.push(7)\n        fibfibArray.push(8)\n        fibfibArray.push(9)\n\
    \        fibfibArray.push(10)\n        fibfibArray.push(11)\n        fibfibArray.push(12)\n\
    \        fibfibArray.push(13)\n        fibfibArray.push(14)\n        fibfibArray.push(15)\n\
    \        fibfibArray.push(16)\n        fibfibArray.push(17)\n        fibfibArray.push(18)\n\
    \        fibfibArray.push(19)\n        fibfibArray.push(20)\n        fibfibArray.push(21)\n\
    \        fibfibArray.push(22)\n        fibfibArray.push(23)\n        fibfibArray.push(24)\n\
    \        fibfibArray.push(25)\n        fibfibArray.push(26)\n        fibfibArray.push(27)\n\
    \        fibfibArray.push(28)\n        fibfibArray.push(29)\n        fibfibArray.push(30)\n\
    \        fibfibArray.push(31)\n        fibfibArray.push(32)\n        fibfibArray.push(33)\n\
    \        fibfibArray.push(34)\n        fibfibArray.push(35)\n        fibfibArray.push(36)\n\
    \        fibfibArray.push(37)\n        fibfibArray.push(38)\n        fibfibArray.push(39)\n\
    \        fibfibArray.push(40)\n        fibfibArray.push(41)\n        fibfibArray.push(42)\n\
    \        fibfibArray.push(43)\n        fibfibArray.push(44)\n        fibfibArray.push(45)\n\
    \        fibfibArray.push(46)\n        fibfibArray.push(47)\n        fibfibArray.push(48)\n\
    \        fibfibArray.push(49)\n        fibfibArray.push(50)\n        fibfibArray.push(51)\n\
    \        fibfibArray.push(52)\n        fibfibArray.push(53)\n        fibfibArray.push(54)\n\
    \        fibfibArray.push(55)\n        fibfibArray.push(56)\n        fibfibArray.push(57)\n\
    \        fibfibArray.push(58)\n        fibfibArray.push(59)\n        fibfibArray.push(60)\n\
    \        fibfibArray.push(61)\n        fibfibArray.push(62)\n        fibfibArray.push(63)\n\
    \        fibfibArray.push(64)\n        fibfibArray.push(65)\n        fibfib\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnv9wmy78.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnv9wmy78.scala:78:8 ---------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]\n        fibfib.put(0, 0L)\n\
    \        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n) match\
    \ {\n            case 0 => 0L\n            case 1 => 1L\n            case 2 =>\
    \ 2L\n            case n => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4rdmhts1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashSet[Long]()\n        fibfib.add(0)\n   \
    \     fibfib.add(1)\n        fibfib.add(2)\n        fibfib(n) match {\n      \
    \      case 0 => 0\n            case 1 => 1\n            case 2 => 2\n       \
    \     case _ => {\n                fibfib(n-1) match {\n                    case\
    \ 0 => 0\n                    case 1 => 1\n                    case 2 => 2\n \
    \                   case _ => {\n                        fibfib(n-2) match {\n\
    \                            case 0 => 0\n                            case 1 =>\
    \ 1\n                            case 2 => 2\n                            case\
    \ _ => {\n                                fibfib(n-3) match {\n              \
    \                      case 0 => 0\n                                    case 1\
    \ => 1\n                                    case 2 => 2\n                    \
    \                case _ => {\n                                        fibfib.size\n\
    \                                    }\n                                }\n  \
    \                          }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp260zo4t9.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n        var fibfibArrayIndex\
    \ = 0\n        var fibfibArrayIndexMax = fibfibArray.length\n        while (fibfibArrayIndex\
    \ < fibfibArrayIndexMax) {\n            fibfibArrayIndex += 1\n            fibfibArrayIndexMax\
    \ -= 1\n            fibfibArray.append(fibfibArrayIndex * (fibfibArrayIndex +\
    \ 1))\n        }\n        fibfibArray(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp73at947q.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib.put(n,\
    \ n)\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpud3dfvm0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        var fibfibArrayIndex\
    \ = 0\n        var fibfibArrayIndex2 = 0\n        var fibfibArrayIndex3 = 0\n\
    \        var fibfibArrayIndex4 = 0\n        var fibfibArrayIndex5 = 0\n      \
    \  var fibfibArrayIndex6 = 0\n        var fibfibArrayIndex7 = 0\n        var fibfibArrayIndex8\
    \ = 0\n        var fibfibArrayIndex9 = 0\n        var fibfibArrayIndex10 = 0\n\
    \        var fibfibArrayIndex11 = 0\n        var fibfibArrayIndex12 = 0\n    \
    \    var fibfibArrayIndex13 = 0\n        var fibfibArrayIndex14 = 0\n        var\
    \ fibfibArrayIndex15 = 0\n        var fibfibArrayIndex16 = 0\n        var fibfibArrayIndex17\
    \ = 0\n        var fibfibArrayIndex18 = 0\n        var fibfibArrayIndex19 = 0\n\
    \        var fibfibArrayIndex20 = 0\n        var fibfibArrayIndex21 = 0\n    \
    \    var fibfibArrayIndex22 = 0\n        var fibfibArrayIndex23 = 0\n        var\
    \ fibfibArrayIndex24 = 0\n        var fibfibArrayIndex25 = 0\n        var fibfibArrayIndex26\
    \ = 0\n        var fibfibArrayIndex27 = 0\n        var fibfibArrayIndex28 = 0\n\
    \        var fibfibArrayIndex29 = 0\n        var fibfibArrayIndex30 = 0\n    \
    \    var fibfibArrayIndex31 = 0\n        var fibfibArrayIndex32 = 0\n        var\
    \ fibfibArrayIndex33 = 0\n        var fibfibArrayIndex34 = 0\n        var fibfibArrayIndex35\
    \ = 0\n        var fibfibArrayIndex36 = 0\n        var fibfibArrayIndex37 = 0\n\
    \        var fibfibArrayIndex38 = 0\n        var fibfibArrayIndex39 = 0\n    \
    \    var fibfibArrayIndex40 = 0\n        var fibfibArrayIndex41 = 0\n        var\
    \ fibfibArrayIndex42 = 0\n        var fibfibArrayIndex43 = 0\n        var fibfibArrayIndex44\
    \ = 0\n        var fibfibArrayIndex45 = 0\n        var fibfibArrayIndex46 = 0\n\
    \        var fibfibArrayIndex47 = 0\n        var fibfibArrayIndex48 = 0\n    \
    \    var fibfibArrayIndex49 = 0\n        var fibfibArrayIndex50 = 0\n        var\
    \ fibfibArrayIndex51 = 0\n        var fibfibArrayIndex52 = 0\n        var fibfibArrayIndex53\
    \ = 0\n        var fibfibArrayIndex54 = 0\n        var fibfibArrayIndex55 = 0\n\
    \        var fibfibArrayIndex56 = 0\n        var fibfibArrayIndex57 = 0\n    \
    \    var fibfibArrayIndex58 = 0\n        var fibfibArrayIndex59 = 0\n        var\
    \ fibfibArrayIndex60 = 0\n        var fibfibArrayIndex61 = 0\n        var fibfibArrayIndex62\
    \ = 0\n        var fibfibArrayIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmposht7dg9.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmposht7dg9.scala:11:26\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfibfibArray\e[0m = mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmposht7dg9.scala:75:5 ---------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8go40yzd.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n)\
    \ match {\n            case 0 => 0L\n            case 1 => 1L\n            case\
    \ 2 => 2L\n            case n => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0opxof1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8go40yzd.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 1\n        fibfibs += 1\n        fibfibs += 2\n   \
    \     fibfibs += 2\n        fibfibs += 3\n        fibfibs += 3\n        fibfibs\
    \ += 4\n        fibfibs += 4\n        fibfibs += 5\n        fibfibs += 5\n   \
    \     fibfibs += 6\n        fibfibs += 6\n        fibfibs += 7\n        fibfibs\
    \ += 7\n        fibfibs += 8\n        fibfibs += 8\n        fibfibs += 9\n   \
    \     fibfibs += 9\n        fibfibs += 10\n        fibfibs += 10\n        fibfibs\
    \ += 11\n        fibfibs += 11\n        fibfibs += 12\n        fibfibs += 12\n\
    \        fibfibs += 13\n        fibfibs += 13\n        fibfibs += 14\n       \
    \ fibfibs += 14\n        fibfibs += 15\n        fibfibs += 15\n        fibfibs\
    \ += 16\n        fibfibs += 16\n        fibfibs += 17\n        fibfibs += 17\n\
    \        fibfibs += 18\n        fibfibs += 18\n        fibfibs += 19\n       \
    \ fibfibs += 19\n        fibfibs += 20\n        fibfibs += 20\n        fibfibs\
    \ += 21\n        fibfibs += 21\n        fibfibs += 22\n        fibfibs += 22\n\
    \        fibfibs += 23\n        fibfibs += 23\n        fibfibs += 24\n       \
    \ fibfibs += 24\n        fibfibs += 25\n        fibfibs += 25\n        fibfibs\
    \ += 26\n        fibfibs += 26\n        fibfibs += 27\n        fibfibs += 27\n\
    \        fibfibs += 28\n        fibfibs += 28\n        fibfibs += 29\n       \
    \ fibfibs += 29\n        fibfibs += 30\n        fibfibs += 30\n        fibfibs\
    \ += 31\n        fibfibs += 31\n        fibfibs += 32\n        fibfibs += 32\n\
    \        fibfibs += 33\n        fibfibs += 33\n        fibfibs += 34\n       \
    \ fibfibs += 34\n        fibfibs += 35\n        fibfibs += 35\n        fibfibs\
    \ += 36\n        fibfibs += 36\n        fibfibs += 37\n        fibfibs += 37\n\
    \        fibfibs += 38\n        fibfibs += 38\n        fibfibs += 39\n       \
    \ fibfibs += 39\n        fibfibs += 40\n        fibfibs += 40\n        fibfibs\
    \ += 41\n        fibfib\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7y50hzhb.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7y50hzhb.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibList = mutable.ListBuffer[Long]()\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n \
    \       fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n  \
    \      fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n   \
    \     fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n    \
    \    fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n     \
    \   fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n      \
    \  fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n       \
    \ fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList\
    \ += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList +=\
    \ 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n \
    \       fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n  \
    \      fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n   \
    \     fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n    \
    \    fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n     \
    \   fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n      \
    \  fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n       \
    \ fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList\
    \ += 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList +=\
    \ 0\n        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n\
    \        fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n \
    \       fibfibList += 0\n        fibfibList += 0\n        fibfibList += 0\n  \
    \      fibfibList += 0\n        fibfibList += 0\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptm1ccz1r.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(1)\n        fibfib.append(2)\n        fibfib(n) match {\n\
    \            case 0 => fibfib(0)\n            case 1 => fibfib(1)\n          \
    \  case 2 => fibfib(2)\n            case _ => {\n                fibfib(n-1) match\
    \ {\n                    case 0 => fibfib(n-1)\n                    case 1 =>\
    \ fibfib(n-1) + fibfib(n-2)\n                    case 2 => fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                    case _ => {\n                        fibfib(n-2)\
    \ match {\n                            case 0 => fibfib(n-2) + fibfib(n-3)\n \
    \                           case 1 => fibfib(n-2) + fibfib(n-3) + fibfib(n-4)\n\
    \                            case 2 => fibfib(n-2) + fibfib(n-3) + fibfib(n-4)\
    \ + fibfib(n-5)\n                            case _ => {\n                   \
    \             fibfib(n-3) match {\n                                    case 0\
    \ => fibfib(n-3) + fibfib(n-4) + fibfib(n-5)\n                               \
    \     case 1 => fibfib(n-3) + fibfib(n-4) + fibfib(n-5) + fibfib(n-6)\n      \
    \                              case 2 => fibfib(n-3) + fibfib(n-4) + fibfib(n-5)\
    \ + fibfib(n-6) + fibfib(n-7)\n                                    case _ => {\n\
    \                                        fibfib(n-4) match {\n               \
    \                             case 0 => fibfib(n-4) + fibfib(n-5) + fibfib(n-6)\n\
    \                                            case 1 => fibfib(n-4) + fibfib(n-5)\
    \ + fibfib(n-6) + fibfib(n-7)\n                                            case\
    \ 2 => fibfib(n-4) + fibfib(n-5) + fibfib(n-6) + fibfib(n-7) + fibfib(n-8)\n \
    \                                           case _ => {\n                    \
    \                            fibfib(n-5) match {\n                           \
    \                         case 0 => fibfib(n-5) + fibfib(n-6) + fibfib(n-7)\n\
    \                                                    case 1 => fibfib(n-5) + fibfib(n-6)\
    \ + fibfib(n-7) + fibfib(n-8)\n                                              \
    \      case 2 => fibfib(n-5) + fibfib(n-6) + fibfib(n-7) + fibfib(n-8) + fibfib(n-9)\n\
    \                                                    case _ => {\n           \
    \                                             fibfib(n-6) match {\n          \
    \                                                  case 0 => fibfib(n-6) + fibfib(n-7)\n\
    \                                                            case 1 => fibfib(n-6)\
    \ + fibfib(n-7) + fibfib(n-8)\n                                              \
    \              case 2 => fibfib(n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjos8cjtk.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjos8cjtk.scala:61:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpjos8cjtk.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e[0m mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjos8cjtk.scala:60:1 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpjos8cjtk.scala:50:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8go40yzd.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprg3sx3t0.scala:17)\n\tat Problem.main(tmprg3sx3t0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs(0) = 0\n      \
    \  fibfibs(1) = 0\n        fibfibs(2) = 1\n        fibfibs(n) = fibfibs(n-1) +\
    \ fibfibs(n-2) + fibfibs(n-3)\n        fibfibs(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpae5d7wfy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]\n        fibfib.put(0, 0)\n\
    \        fibfib.put(1, 0)\n        fibfib.put(2, 1)\n        fibfib(n) match {\n\
    \            case 0 => 0\n            case 1 => fibfib.get(n-1)\n            case\
    \ 2 => fibfib.get(n-1) + fibfib.get(n-2)\n            case _ => fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86hombjd.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else if (n == 3) 2\n        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz9p09ssv.scala:19)\n\tat Problem.main(tmpz9p09ssv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n        fibfibArray(0)\
    \ = 0\n        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray.update(n)\
    \ { fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3) }\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpga3ql31a.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) match {\n\
    \            case 0 => fibfib(0)\n            case 1 => fibfib(1)\n          \
    \  case 2 => fibfib(2)\n            case _ => {\n                val fibfib2 =\
    \ fibfib.tail\n                fibfib(n) match {\n                    case 0 =>\
    \ fibfib2(0)\n                    case 1 => fibfib2(1)\n                    case\
    \ 2 => fibfib2(2)\n                    case _ => {\n                        val\
    \ fibfib3 = fibfib2.tail\n                        fibfib3(n) match {\n       \
    \                     case 0 => fibfib3(0)\n                            case 1\
    \ => fibfib3(1)\n                            case 2 => fibfib3(2)\n          \
    \                  case _ => fibfib3(0)\n                        }\n         \
    \           }\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_lq3ix0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) match {\n\
    \            case 0 => 0\n            case 1 => 0\n            case 2 => 1\n \
    \           case _ => {\n                fibfib(n-1) match {\n               \
    \     case 0 => 0\n                    case 1 => 0\n                    case 2\
    \ => 1\n                    case _ => {\n                        fibfib(n-2) match\
    \ {\n                            case 0 => 0\n                            case\
    \ 1 => 0\n                            case 2 => 1\n                          \
    \  case _ => {\n                                fibfib(n-3) match {\n        \
    \                            case 0 => 0\n                                   \
    \ case 1 => 0\n                                    case 2 => 1\n             \
    \                       case _ => {\n                                        fibfib(n-4)\
    \ match {\n                                            case 0 => 0\n         \
    \                                   case 1 => 0\n                            \
    \                case 2 => 1\n                                            case\
    \ _ => {\n                                                fibfib(n-5) match {\n\
    \                                                    case 0 => 0\n           \
    \                                         case 1 => 0\n                      \
    \                              case 2 => 1\n                                 \
    \                   case _ => {\n                                            \
    \            fibfib(n-6) match {\n                                           \
    \                 case 0 => 0\n                                              \
    \              case 1 => 0\n                                                 \
    \           case 2 => 1\n                                                    \
    \        case _ => {\n                                                       \
    \         fibfib(n-7) match {\n                                              \
    \                      case 0 => 0\n                                         \
    \                           case 1 => 0\n                                    \
    \                                case 2 => 1\n                               \
    \                                     case _ => {\n                          \
    \                                              fibfib(n-8) match {\n         \
    \                                                                   case 0 =>\
    \ 0\n                                                                        \
    \    case 1 => 0\n                                                           \
    \                 case 2 => 1\n                                              \
    \                              case _ => {\n                                 \
    \                                               fibfib(n-9) match {\n        \
    \                                                                            case\
    \ 0 => 0\n                                                                   \
    \                 case 1 => 0\n                                              \
    \                                      case 2 => 1\n                         \
    \                                                           case _ => {\n    \
    \                                                                            \
    \        fibfib(n-10) match {\n                                              \
    \                                              case 0 => 0\n                 \
    \                                                                           case\
    \ 1 => 0\n                                                                   \
    \                         case 2 => 1\n                                      \
    \                                                      case _ => {\n         \
    \                                                                            \
    \           fibfib(n-11) match {\n                                           \
    \                                                         case 0 => 0\n      \
    \                                                                            \
    \                  case 1 => 0\n                                             \
    \                                                       case 2 => 1\n        \
    \                                                                            \
    \                case _ => {\n                                               \
    \                                                         fibfib(n-12) match {\n\
    \                                                                            \
    \                                case 0 => 0\n                               \
    \                                                                            \
    \ case 1 => 0\n                                                              \
    \                                              case 2 => 1\n                 \
    \                                                                            \
    \               case _ => {\n                                                \
    \                                                                fibfib(n-13)\
    \ match {\n                                                                  \
    \                                                  case 0 => 0\n             \
    \                                                                            \
    \                           case 1 => 0\n                                    \
    \                                                                            \
    \    case 2 => 1\n                                                           \
    \                                                         case _ => {\n      \
    \                                                                            \
    \                                      fibfib(n-14) match {\n                \
    \                                                                            \
    \                                case 0 \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyygeb2fv.scala:87:4 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyygeb2fv.scala:99:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m99 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpyygeb2fv.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e[0m mutable.MutableList[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyygeb2fv.scala:98:1 ---------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpyygeb2fv.scala:88:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m88 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ListBuffer[Long]()\n        fibfibs += 0\n    \
    \    fibfibs += 0\n        fibfibs += 1\n        fibfibs += 1\n        fibfibs\
    \ += 2\n        fibfibs += 2\n        fibfibs += 3\n        fibfibs += 3\n   \
    \     fibfibs += 4\n        fibfibs += 4\n        fibfibs += 5\n        fibfibs\
    \ += 5\n        fibfibs += 6\n        fibfibs += 6\n        fibfibs += 7\n   \
    \     fibfibs += 7\n        fibfibs += 8\n        fibfibs += 8\n        fibfibs\
    \ += 9\n        fibfibs += 9\n        fibfibs += 10\n        fibfibs += 10\n \
    \       fibfibs += 11\n        fibfibs += 11\n        fibfibs += 12\n        fibfibs\
    \ += 12\n        fibfibs += 13\n        fibfibs += 13\n        fibfibs += 14\n\
    \        fibfibs += 14\n        fibfibs += 15\n        fibfibs += 15\n       \
    \ fibfibs += 16\n        fibfibs += 16\n        fibfibs += 17\n        fibfibs\
    \ += 17\n        fibfibs += 18\n        fibfibs += 18\n        fibfibs += 19\n\
    \        fibfibs += 19\n        fibfibs += 20\n        fibfibs += 20\n       \
    \ fibfibs += 21\n        fibfibs += 21\n        fibfibs += 22\n        fibfibs\
    \ += 22\n        fibfibs += 23\n        fibfibs += 23\n        fibfibs += 24\n\
    \        fibfibs += 24\n        fibfibs += 25\n        fibfibs += 25\n       \
    \ fibfibs += 26\n        fibfibs += 26\n        fibfibs += 27\n        fibfibs\
    \ += 27\n        fibfibs += 28\n        fibfibs += 28\n        fibfibs += 29\n\
    \        fibfibs += 29\n        fibfibs += 30\n        fibfibs += 30\n       \
    \ fibfibs += 31\n        fibfibs += 31\n        fibfibs += 32\n        fibfibs\
    \ += 32\n        fibfibs += 33\n        fibfibs += 33\n        fibfibs += 34\n\
    \        fibfibs += 34\n        fibfibs += 35\n        fibfibs += 35\n       \
    \ fibfibs += 36\n        fibfibs += 36\n        fibfibs += 37\n        fibfibs\
    \ += 37\n        fibfibs += 38\n        fibfibs += 38\n        fibfibs += 39\n\
    \        fibfibs += 39\n        fibfibs += 40\n        fibfibs += 40\n       \
    \ fibfibs += 41\n\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpagqrhc2z.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jiuxgyk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n <= 0) 0\n        else if (n <= 2) 1\n        else fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppb2i8ot2.scala:17)\n\tat Problem.main(tmppb2i8ot2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n <= 0) 0\n        else if (n <= 2) 1\n        else fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppb2i8ot2.scala:17)\n\tat Problem.main(tmppb2i8ot2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ListBuffer[Long]()\n        fibfibs += 0\n    \
    \    fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpso_d77s1.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n)\
    \ match {\n            case 0 => 0L\n            case 1 => 1L\n            case\
    \ 2 => 2L\n            case _ => {\n                val fibfib2 = new mutable.HashMap[Long,\
    \ Long]()\n                fibfib2.put(0, 0L)\n                fibfib2.put(1,\
    \ 1L)\n                fibfib2.put(2, 2L)\n                fibfib2.put(n, fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n                fibfib2.get(n)\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplik4tp8m.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplik4tp8m.scala:20:34\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e\
    [0m \e[36mfibfib2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else if (n <= 3) fibfib(n-1) + fibfib(n-2)\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw53yncgh.scala:19)\n\tat Problem.main(tmpw53yncgh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.ListBuffer[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib.append(1)\n\
    \        fibfib.append(2)\n        fibfib.append(2)\n        fibfib.append(3)\n\
    \        fibfib.append(3)\n        fibfib.append(4)\n        fibfib.append(4)\n\
    \        fibfib.append(5)\n        fibfib.append(5)\n        fibfib.append(6)\n\
    \        fibfib.append(6)\n        fibfib.append(7)\n        fibfib.append(7)\n\
    \        fibfib.append(8)\n        fibfib.append(8)\n        fibfib.append(9)\n\
    \        fibfib.append(9)\n        fibfib.append(10)\n        fibfib.append(10)\n\
    \        fibfib.append(11)\n        fibfib.append(11)\n        fibfib.append(12)\n\
    \        fibfib.append(12)\n        fibfib.append(13)\n        fibfib.append(13)\n\
    \        fibfib.append(14)\n        fibfib.append(14)\n        fibfib.append(15)\n\
    \        fibfib.append(15)\n        fibfib.append(16)\n        fibfib.append(16)\n\
    \        fibfib.append(17)\n        fibfib.append(17)\n        fibfib.append(18)\n\
    \        fibfib.append(18)\n        fibfib.append(19)\n        fibfib.append(19)\n\
    \        fibfib.append(20)\n        fibfib.append(20)\n        fibfib.append(21)\n\
    \        fibfib.append(21)\n        fibfib.append(22)\n        fibfib.append(22)\n\
    \        fibfib.append(23)\n        fibfib.append(23)\n        fibfib.append(24)\n\
    \        fibfib.append(24)\n        fibfib.append(25)\n        fibfib.append(25)\n\
    \        fibfib.append(26)\n        fibfib.append(26)\n        fibfib.append(27)\n\
    \        fibfib.append(27)\n        fibfib.append(28)\n        fibfib.append(28)\n\
    \        fibfib.append(29)\n        fibfib.append(29)\n        fibfib.append(30)\n\
    \        fibfib.append(30)\n        fibfib.append(31)\n        fibfib.append(31)\n\
    \        fibfib.append(32)\n        fibfib.append(32)\n        fibfib.append(33)\n\
    \        fibfib.append(33)\n        fibfib.append(34\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw7f0dng_.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw7f0dng_.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfibfib\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n        fibfibArray(0)\
    \ = 0\n        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray.update(n)\
    \ { fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3) }\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpga3ql31a.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib.append(1)\n\
    \        fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1xsm29oa.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8go40yzd.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else if (n <= 3) fibfib(n-1) + fibfib(n-2)\n        else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw53yncgh.scala:19)\n\tat Problem.main(tmpw53yncgh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfibArray += 0\n        fibfibArray += 0\n\
    \        fibfibArray += 0\n        fibfib\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ld5_vrc.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2ld5_vrc.scala:83:8 ---------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer.empty[Long]\n        fibfibArray(0)\
    \ = 0\n        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5hhqsjh9.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        var fibfibArrayIndex\
    \ = 0\n        var fibfibArrayIndex2 = 0\n        var fibfibArrayIndex3 = 0\n\
    \        var fibfibArrayIndex4 = 0\n        var fibfibArrayIndex5 = 0\n      \
    \  var fibfibArrayIndex6 = 0\n        var fibfibArrayIndex7 = 0\n        var fibfibArrayIndex8\
    \ = 0\n        var fibfibArrayIndex9 = 0\n        var fibfibArrayIndex10 = 0\n\
    \        var fibfibArrayIndex11 = 0\n        var fibfibArrayIndex12 = 0\n    \
    \    var fibfibArrayIndex13 = 0\n        var fibfibArrayIndex14 = 0\n        var\
    \ fibfibArrayIndex15 = 0\n        var fibfibArrayIndex16 = 0\n        var fibfibArrayIndex17\
    \ = 0\n        var fibfibArrayIndex18 = 0\n        var fibfibArrayIndex19 = 0\n\
    \        var fibfibArrayIndex20 = 0\n        var fibfibArrayIndex21 = 0\n    \
    \    var fibfibArrayIndex22 = 0\n        var fibfibArrayIndex23 = 0\n        var\
    \ fibfibArrayIndex24 = 0\n        var fibfibArrayIndex25 = 0\n        var fibfibArrayIndex26\
    \ = 0\n        var fibfibArrayIndex27 = 0\n        var fibfibArrayIndex28 = 0\n\
    \        var fibfibArrayIndex29 = 0\n        var fibfibArrayIndex30 = 0\n    \
    \    var fibfibArrayIndex31 = 0\n        var fibfibArrayIndex32 = 0\n        var\
    \ fibfibArrayIndex33 = 0\n        var fibfibArrayIndex34 = 0\n        var fibfibArrayIndex35\
    \ = 0\n        var fibfibArrayIndex36 = 0\n        var fibfibArrayIndex37 = 0\n\
    \        var fibfibArrayIndex38 = 0\n        var fibfibArrayIndex39 = 0\n    \
    \    var fibfibArrayIndex40 = 0\n        var fibfibArrayIndex41 = 0\n        var\
    \ fibfibArrayIndex42 = 0\n        var fibfibArrayIndex43 = 0\n        var fibfibArrayIndex44\
    \ = 0\n        var fibfibArrayIndex45 = 0\n        var fibfibArrayIndex46 = 0\n\
    \        var fibfibArrayIndex47 = 0\n        var fibfibArrayIndex48 = 0\n    \
    \    var fibfibArrayIndex49 = 0\n        var fibfibArrayIndex50 = 0\n        var\
    \ fibfibArrayIndex51 = 0\n        var fibfibArrayIndex52 = 0\n        var fibfibArrayIndex53\
    \ = 0\n        var fibfibArrayIndex54 = 0\n        var fibfibArrayIndex55 = 0\n\
    \        var fibfibArrayIndex56 = 0\n        var fibfibArrayIndex57 = 0\n    \
    \    var fibfibArrayIndex58 = 0\n        var fibfibArrayIndex59 = 0\n        var\
    \ fibfibArrayIndex60 = 0\n        var fibfibArrayIndex61 = 0\n        var fibfibArrayIndex62\
    \ = 0\n        var fibfibArrayIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmposht7dg9.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmposht7dg9.scala:11:26\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfibfibArray\e[0m = mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmposht7dg9.scala:75:5 ---------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.ListBuffer[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib.append(1)\n\
    \        fibfib.append(2)\n        fibfib.append(2)\n        fibfib.append(3)\n\
    \        fibfib.append(3)\n        fibfib.append(4)\n        fibfib.append(4)\n\
    \        fibfib.append(5)\n        fibfib.append(5)\n        fibfib.append(6)\n\
    \        fibfib.append(6)\n        fibfib.append(7)\n        fibfib.append(7)\n\
    \        fibfib.append(8)\n        fibfib.append(8)\n        fibfib.append(9)\n\
    \        fibfib.append(9)\n        fibfib.append(10)\n        fibfib.append(10)\n\
    \        fibfib.append(11)\n        fibfib.append(11)\n        fibfib.append(12)\n\
    \        fibfib.append(12)\n        fibfib.append(13)\n        fibfib.append(13)\n\
    \        fibfib.append(14)\n        fibfib.append(14)\n        fibfib.append(15)\n\
    \        fibfib.append(15)\n        fibfib.append(16)\n        fibfib.append(16)\n\
    \        fibfib.append(17)\n        fibfib.append(17)\n        fibfib.append(18)\n\
    \        fibfib.append(18)\n        fibfib.append(19)\n        fibfib.append(19)\n\
    \        fibfib.append(20)\n        fibfib.append(20)\n        fibfib.append(21)\n\
    \        fibfib.append(21)\n        fibfib.append(22)\n        fibfib.append(22)\n\
    \        fibfib.append(23)\n        fibfib.append(23)\n        fibfib.append(24)\n\
    \        fibfib.append(24)\n        fibfib.append(25)\n        fibfib.append(25)\n\
    \        fibfib.append(26)\n        fibfib.append(26)\n        fibfib.append(27)\n\
    \        fibfib.append(27)\n        fibfib.append(28)\n        fibfib.append(28)\n\
    \        fibfib.append(29)\n        fibfib.append(29)\n        fibfib.append(30)\n\
    \        fibfib.append(30)\n        fibfib.append(31)\n        fibfib.append(31)\n\
    \        fibfib.append(32)\n        fibfib.append(32)\n        fibfib.append(33)\n\
    \        fibfib.append(33)\n        fibfib.append(34)\n        fibfib.append(34)\n\
    \        fibfib.append(35)\n        fibfib.append(35)\n        fibfib.append(36)\n\
    \        fibfib.append(36)\n        fibfib.append(37)\n        fibfib.append(37)\n\
    \        fibfib.append(38)\n        fibfib.append(38)\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplgl_uk2u.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.ListBuffer[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib.append(1)\n\
    \        fibfib(n).foreach(fibfib(n) += fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \        fibfib(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxgtdgm3h.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n)\
    \ = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        fibfib(n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffw1fo8m.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib.put(n,\
    \ n)\n        fibfib(n) match {\n            case 0 => 0\n            case 1 =>\
    \ 0\n            case 2 => 1\n            case n => fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv99mj2k1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](n)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jiuxgyk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibList = mutable.ListBuffer[Long]()\n        var fibfibIndex\
    \ = 0\n        while (fibfibIndex < n) {\n            fibfibList += fibfibIndex\n\
    \            fibfibIndex += 1\n        }\n        fibfibList.last\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_vq4oeu.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.ListBuffer[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) match {\n\
    \            case 0 => fibfib(0)\n            case 1 => fibfib(1)\n          \
    \  case 2 => fibfib(2)\n            case _ => {\n                fibfib(n) match\
    \ {\n                    case 0 => fibfib(0)\n                    case 1 => fibfib(1)\n\
    \                    case 2 => fibfib(2)\n                    case _ => {\n  \
    \                      fibfib(n) match {\n                            case 0 =>\
    \ fibfib(0)\n                            case 1 => fibfib(1)\n               \
    \             case 2 => fibfib(2)\n                            case _ => {\n \
    \                               fibfib(n) match {\n                          \
    \          case 0 => fibfib(0)\n                                    case 1 =>\
    \ fibfib(1)\n                                    case 2 => fibfib(2)\n       \
    \                             case _ => {\n                                  \
    \      fibfib(n) match {\n                                            case 0 =>\
    \ fibfib(0)\n                                            case 1 => fibfib(1)\n\
    \                                            case 2 => fibfib(2)\n           \
    \                                 case _ => {\n                              \
    \                  fibfib(n) match {\n                                       \
    \             case 0 => fibfib(0)\n                                          \
    \          case 1 => fibfib(1)\n                                             \
    \       case 2 => fibfib(2)\n                                                \
    \    case _ => {\n                                                        fibfib(n)\
    \ match {\n                                                            case 0\
    \ => fibfib(0)\n                                                            case\
    \ 1 => fibfib(1)\n                                                           \
    \ case 2 => fibfib(2)\n                                                      \
    \      case _ => {\n                                                         \
    \       fibfib(n) match {\n                                                  \
    \                  case 0 => fibfib(0)\n                                     \
    \                               case 1 => fibfib(1)\n                        \
    \                                            case 2 => fibfib(2)\n           \
    \                                                         case _ => {\n      \
    \                                                                  fibfib(n) match\
    \ {\n                                                                        \
    \    case 0 => fibfib(0)\n                                                   \
    \                         case 1 => fibfib(1)\n                              \
    \                                              case 2 => fibfib(2)\n         \
    \                                                                   case _ =>\
    \ {\n                                                                        \
    \        fibfib(n) match {\n                                                 \
    \                                   case 0 => fibfib(0)\n                    \
    \                                                                case 1 => fibfib(1)\n\
    \                                                                            \
    \        case 2 => fibfib(2)\n                                               \
    \                                     case _ => {\n                          \
    \                                                              fibfib(n) match\
    \ {\n                                                                        \
    \                    case 0 => fibfib(0)\n                                   \
    \                                                         case 1 => fibfib(1)\n\
    \                                                                            \
    \                case 2 => fibfib(2)\n                                       \
    \                                                     case _ => {\n          \
    \                                                                            \
    \          fibfib(n) match {\n                                               \
    \                                                     case 0 => fibfib(0)\n  \
    \                                                                            \
    \                      case 1 => fibfib(1)\n                                 \
    \                                                                   case 2 =>\
    \ fibfib(2)\n                                                                \
    \                                    case _ => {\n                           \
    \                                                                            \
    \ fibfib(n) match {\n                                                        \
    \                                                    case 0 => fibfib(0)\n   \
    \                                                                            \
    \                             case 1 => fibfib\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqxmiih7d.scala:90:0 ----------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqxmiih7d.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfibfib\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqxmiih7d.scala:89:1 ---------------------\e[0m\e[0m\n\e[31m89\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpqxmiih7d.scala:79:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m79 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.Array[Long](5)\n        fibfib(0) = 0\n    \
    \    fibfib(1) = 0\n        fibfib(2) = 1\n        fibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n        fibfib(n)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg7__0mtu.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m5\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.MutableList[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) match {\n\
    \            case 0 => 0\n            case 1 => 0\n            case 2 => 1\n \
    \           case n => {\n                val temp = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                fibfib.append(temp)\n                temp\n \
    \           }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdt7b37hq.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8go40yzd.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 1\n\
    \        else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp022xwwgj.scala:18)\n\tat Problem.main(tmp022xwwgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n)\
    \ match {\n            case 0 => 0L\n            case 1 => 1L\n            case\
    \ 2 => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            case n => fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw3eftmhk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 0\n        fibfibs += 0\n        fibfibs += 0\n   \
    \     fibfibs += 0\n        fibfib\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuwl5ahy.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptuwl5ahy.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 1\n        fibfibs += 1\n        fibfibs += 2\n   \
    \     fibfibs += 2\n        fibfibs += 3\n        fibfibs += 3\n        fibfibs\
    \ += 4\n        fibfibs += 4\n        fibfibs += 5\n        fibfibs += 5\n   \
    \     fibfibs += 6\n        fibfibs += 6\n        fibfibs += 7\n        fibfibs\
    \ += 7\n        fibfibs += 8\n        fibfibs += 8\n        fibfibs += 9\n   \
    \     fibfibs += 9\n        fibfibs += 10\n        fibfibs += 10\n        fibfibs\
    \ += 11\n        fibfibs += 11\n        fibfibs += 12\n        fibfibs += 12\n\
    \        fibfibs += 13\n        fibfibs += 13\n        fibfibs += 14\n       \
    \ fibfibs += 14\n        fibfibs += 15\n        fibfibs += 15\n        fibfibs\
    \ += 16\n        fibfibs += 16\n        fibfibs += 17\n        fibfibs += 17\n\
    \        fibfibs += 18\n        fibfibs += 18\n        fibfibs += 19\n       \
    \ fibfibs += 19\n        fibfibs += 20\n        fibfibs += 20\n        fibfibs\
    \ += 21\n        fibfibs += 21\n        fibfibs += 22\n        fibfibs += 22\n\
    \        fibfibs += 23\n        fibfibs += 23\n        fibfibs += 24\n       \
    \ fibfibs += 24\n        fibfibs += 25\n        fibfibs += 25\n        fibfibs\
    \ += 26\n        fibfibs += 26\n        fibfibs += 27\n        fibfibs += 27\n\
    \        fibfibs += 28\n        fibfibs += 28\n        fibfibs += 29\n       \
    \ fibfibs += 29\n        fibfibs += 30\n        fibfibs += 30\n        fibfibs\
    \ += 31\n        fibfibs += 31\n        fibfibs += 32\n        fibfibs += 32\n\
    \        fibfibs += 33\n        fibfibs += 33\n        fibfibs += 34\n       \
    \ fibfibs += 34\n        fibfibs += 35\n        fibfibs += 35\n        fibfibs\
    \ += 36\n        fibfibs += 36\n        fibfibs += 37\n        fibfibs += 37\n\
    \        fibfibs += 38\n        fibfibs += 38\n        fibfibs += 39\n       \
    \ fibfibs += 39\n        fibfibs += 40\n        fibfibs += 40\n        fibfibs\
    \ += 41\n        fibfib\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7y50hzhb.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7y50hzhb.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray(0) = 0\n\
    \        fibfibArray(1) = 0\n        fibfibArray(2) = 1\n        fibfibArray(n)\
    \ = fibfibArray(n-1) + fibfibArray(n-2) + fibfibArray(n-3)\n        fibfibArray(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8go40yzd.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib(n)\
    \ match {\n            case 0 => 0L\n            case 1 => 1L\n            case\
    \ 2 => 2L\n            case n => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0opxof1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib.put(n,\
    \ n)\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpud3dfvm0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        fibfibs += 0\n        fibfibs\
    \ += 0\n        fibfibs += 1\n        fibfibs += 2\n        fibfibs += 3\n   \
    \     fibfibs += 4\n        fibfibs += 5\n        fibfibs += 6\n        fibfibs\
    \ += 7\n        fibfibs += 8\n        fibfibs += 9\n        fibfibs += 10\n  \
    \      fibfibs += 11\n        fibfibs += 12\n        fibfibs += 13\n        fibfibs\
    \ += 14\n        fibfibs += 15\n        fibfibs += 16\n        fibfibs += 17\n\
    \        fibfibs += 18\n        fibfibs += 19\n        fibfibs += 20\n       \
    \ fibfibs += 21\n        fibfibs += 22\n        fibfibs += 23\n        fibfibs\
    \ += 24\n        fibfibs += 25\n        fibfibs += 26\n        fibfibs += 27\n\
    \        fibfibs += 28\n        fibfibs += 29\n        fibfibs += 30\n       \
    \ fibfibs += 31\n        fibfibs += 32\n        fibfibs += 33\n        fibfibs\
    \ += 34\n        fibfibs += 35\n        fibfibs += 36\n        fibfibs += 37\n\
    \        fibfibs += 38\n        fibfibs += 39\n        fibfibs += 40\n       \
    \ fibfibs += 41\n        fibfibs += 42\n        fibfibs += 43\n        fibfibs\
    \ += 44\n        fibfibs += 45\n        fibfibs += 46\n        fibfibs += 47\n\
    \        fibfibs += 48\n        fibfibs += 49\n        fibfibs += 50\n       \
    \ fibfibs += 51\n        fibfibs += 52\n        fibfibs += 53\n        fibfibs\
    \ += 54\n        fibfibs += 55\n        fibfibs += 56\n        fibfibs += 57\n\
    \        fibfibs += 58\n        fibfibs += 59\n        fibfibs += 60\n       \
    \ fibfibs += 61\n        fibfibs += 62\n        fibfibs += 63\n        fibfibs\
    \ += 64\n        fibfibs += 65\n        fibfibs += 66\n        fibfibs += 67\n\
    \        fibfibs += 68\n        fibfibs += 69\n        fibfibs += 70\n       \
    \ fibfibs += 71\n        fibfibs += 72\n        fibfibs += 73\n        fibfibs\
    \ += 74\n        fibfibs += 75\n        fibfibs += 76\n        fibfibs += 77\n\
    \        fibfibs += 78\n        fibfibs += 79\n        fibfibs += 80\n       \
    \ fibfibs += 81\n        fibfib\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpki7l5uog.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpki7l5uog.scala:95:8 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        fibfib\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long => Long\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibs = mutable.ArrayBuffer(0)\n        var fibfib = 0\n      \
    \  fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n \
    \       fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n        fibfibs += fibfib\n\
    \        fibfibs += fibfib\n        fibfibs += fibfib\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddecjqvh.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibs\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.ListBuffer[Long]()\n        fibfib.append(0)\n\
    \        fibfib.append(0)\n        fibfib.append(1)\n        fibfib(n) match {\n\
    \            case 0 => 0\n            case 1 => 0\n            case 2 => 1\n \
    \           case _ => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4rpl7bgl.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfib = new mutable.HashMap[Long, Long]()\n        fibfib.put(0,\
    \ 0L)\n        fibfib.put(1, 0L)\n        fibfib.put(2, 1L)\n        fibfib.put(n,\
    \ n)\n        fibfib(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5yz8dvu3.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfib\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1)\
    \ == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    def fibfib(n : Long) : Long = {\n\
    \        val fibfibArray = mutable.ArrayBuffer(0)\n        fibfibArray.update(0,\
    \ 0)\n        fibfibArray.update(1, 0)\n        fibfibArray.update(2, 1)\n   \
    \     fibfibArray.update(3, 3)\n        fibfibArray.update(4, 7)\n        fibfibArray.update(5,\
    \ 15)\n        fibfibArray.update(6, 31)\n        fibfibArray.update(7, 63)\n\
    \        fibfibArray.update(8, 127)\n        fibfibArray.update(9, 251)\n    \
    \    fibfibArray.update(10, 507)\n        fibfibArray.update(11, 1025)\n     \
    \   fibfibArray.update(12, 2049)\n        fibfibArray.update(13, 4095)\n     \
    \   fibfibArray.update(14, 8191)\n        fibfibArray.update(15, 16383)\n    \
    \    fibfibArray.update(16, 32767)\n        fibfibArray.update(17, 65535)\n  \
    \      fibfibArray.update(18, 131071)\n        fibfibArray.update(19, 262143)\n\
    \        fibfibArray.update(20, 524287)\n        fibfibArray.update(21, 1048575)\n\
    \        fibfibArray.update(22, 2097151)\n        fibfibArray.update(23, 4194303)\n\
    \        fibfibArray.update(24, 8388607)\n        fibfibArray.update(25, 16777215)\n\
    \        fibfibArray.update(26, 33554435)\n        fibfibArray.update(27, 67108863)\n\
    \        fibfibArray.update(28, 134217727)\n        fibfibArray.update(29, 268435455)\n\
    \        fibfibArray.update(30, 536870911)\n        fibfibArray.update(31, 1073741823)\n\
    \        fibfibArray.update(32, -2147483648)\n        fibfibArray.update(33, -1)\n\
    \        fibfibArray.update(34, -1)\n        fibfibArray.update(35, -1)\n    \
    \    fibfibArray.update(36, -1)\n        fibfibArray.update(37, -1)\n        fibfibArray.update(38,\
    \ -1)\n        fibfibArray.update(39, -1)\n        fibfibArray.update(40, -1)\n\
    \        fibfibArray.update(41, -1)\n        fibfibArray.update(42, -1)\n    \
    \    fibfibArray.update(43, -1)\n        fibfibArray.update(44, -1)\n        fibfibArray.update(45,\
    \ -1)\n        fibfibArray.update(46, -1)\n        fibfibArray.update(47, -1)\n\
    \        fibfibArray.update(48, -1)\n        fibfibArray.update(49, -1)\n    \
    \    fibfibArray.update(50, -1)\n        fibfibArray.update(51, -1)\n        fibfibArray.update(52,\
    \ -1)\n        fibfibArray.update(53, -1)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4046o_n3.scala:11:26 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfibfibArray\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009965
