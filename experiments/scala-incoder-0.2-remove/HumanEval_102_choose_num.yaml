name: HumanEval_102_choose_num
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // This function takes two positive numbers x and y and returns the\n    //\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n    //\
  \ there's no such number, then the function should return -1.\n    // For example:\n\
  \    def chooseNum(x : Long, y : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
  \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
  \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n \
  \   assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
  \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
  \ (546l)) == (546l));\n    }\n\n}\n"
completions: ["        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val nums = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n\
    \        val odd = mutable.Set[Long]()\n        val numsSet = mutable.Set[Long]()\n\
    \        val evenSet = mutable.Set[Long]()\n        val oddSet = mutable.Set[Long]()\n\
    \        val numsSet2 = mutable.Set[Long]()\n        val evenSet2 = mutable.Set[Long]()\n\
    \        val oddSet2 = mutable.Set[Long]()\n        val numsSet3 = mutable.Set[Long]()\n\
    \        val evenSet3 = mutable.Set[Long]()\n        val oddSet3 = mutable.Set[Long]()\n\
    \        val numsSet4 = mutable.Set[Long]()\n        val evenSet4 = mutable.Set[Long]()\n\
    \        val oddSet4 = mutable.Set[Long]()\n        val numsSet5 = mutable.Set[Long]()\n\
    \        val evenSet5 = mutable.Set[Long]()\n        val oddSet5 = mutable.Set[Long]()\n\
    \        val numsSet6 = mutable.Set[Long]()\n        val evenSet6 = mutable.Set[Long]()\n\
    \        val oddSet6 = mutable.Set[Long]()\n        val numsSet7 = mutable.Set[Long]()\n\
    \        val evenSet7 = mutable.Set[Long]()\n        val oddSet7 = mutable.Set[Long]()\n\
    \        val numsSet8 = mutable.Set[Long]()\n        val evenSet8 = mutable.Set[Long]()\n\
    \        val oddSet8 = mutable.Set[Long]()\n        val numsSet9 = mutable.Set[Long]()\n\
    \        val evenSet9 = mutable.Set[Long]()\n        val oddSet9 = mutable.Set[Long]()\n\
    \        val numsSet10 = mutable.Set[Long]()\n        val evenSet10 = mutable.Set[Long]()\n\
    \        val oddSet10 = mutable.Set[Long]()\n        val numsSet11 = mutable.Set[Long]()\n\
    \        val evenSet11 = mutable.Set[Long]()\n        val oddSet11 = mutable.Set[Long]()\n\
    \        val numsSet12 = mutable.Set[Long]", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach { x => if (x % 2 == 0) evens += x else odds += x }\n  \
    \      val even = evens.max\n        val odd = odds.max\n        if (even < odd)\
    \ even else -1", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = 0\n        val even = 0\n        val odd = 0\n        val nums\
    \ = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val num = 0\n        val\
    \ even = 0\n        val odd = 0\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val num = 0\n        val even = 0\n        val odd = 0\n        val nums\
    \ = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val num = 0\n        val\
    \ even = 0\n        val odd = 0\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val num = 0\n        val even = 0\n        val odd = 0\n        val nums\
    \ = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val num = 0\n        val\
    \ even = 0\n        val odd = 0\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val num = 0\n        val even = 0\n        val odd = 0\n        val nums\
    \ = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val num = 0\n        val\
    \ even = 0\n        val odd = 0\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val num = 0\n        val even = 0\n        val odd = 0\n", "        if\
    \ (x < 0 || y < 0 || x > y) -1\n        else {\n            val evens = for (i\
    \ <- 1 to y) yield {\n                if (x % i == 0) i\n            }\n     \
    \       evens.max\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        val max = evens.max\n        if (max % 2\
    \ == 0) {\n            return max\n        }\n        return -1", "        val\
    \ even = x % 2 == 0\n        val evenInRange = if (even && y > x) y else x\n \
    \       val evenInRange2 = if (even && x > y) x else y\n        val evenInRange3\
    \ = if (even && x > y) x else y\n        val evenInRange4 = if (even && x > y)\
    \ x else y\n        val evenInRange5 = if (even && x > y) x else y\n        val\
    \ evenInRange6 = if (even && x > y) x else y\n        val evenInRange7 = if (even\
    \ && x > y) x else y\n        val evenInRange8 = if (even && x > y) x else y\n\
    \        val evenInRange9 = if (even && x > y) x else y\n        val evenInRange10\
    \ = if (even && x > y) x else y\n        val evenInRange11 = if (even && x > y)\
    \ x else y\n        val evenInRange12 = if (even && x > y) x else y\n        val\
    \ evenInRange13 = if (even && x > y) x else y\n        val evenInRange14 = if\
    \ (even && x > y) x else y\n        val evenInRange15 = if (even && x > y) x else\
    \ y\n        val evenInRange16 = if (even && x > y) x else y\n        val evenInRange17\
    \ = if (even && x > y) x else y\n        val evenInRange18 = if (even && x > y)\
    \ x else y\n        val evenInRange19 = if (even && x > y) x else y\n        val\
    \ evenInRange20 = if (even && x > y) x else y\n        val evenInRange21 = if\
    \ (even && x > y) x else y\n        val evenInRange22 = if (even && x > y) x else\
    \ y\n        val evenInRange23 = if (even && x > y) x else y\n        val evenInRange24\
    \ = if (even && x > y) x else y\n        val evenInRange25 = if (even && x > y)\
    \ x else y\n        val evenInRange26 = if (even && x > y) x else y\n        val\
    \ evenInRange27 = if (even && x > y) x else y\n        val evenInRange28 = if\
    \ (even && x > y) x else y\n        val evenInRange29 = if (even && x > y) x else\
    \ y\n        val evenInRange30 = if (even && x > y) x else y\n        val evenInRange31\
    \ = if (even && x > y) x else y\n        val evenInRange32 = if (even && x > y)\
    \ x else y\n        val ", "        if (x < 0 || y < 0 || x > y) -1\n        else\
    \ {\n            val evens = mutable.ListBuffer[Long]()\n            val odds\
    \ = mutable.ListBuffer[Long]()\n            while (x < y) {\n                if\
    \ (x % 2 == 0) evens += x\n                else odds += x\n                x +=\
    \ 1\n            }\n            val even = evens.max\n            val odd = odds.max\n\
    \            if (even > odd) even\n            else odd\n        }", "       \
    \ val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val num2 = mutable.ListBuffer[Long]()\n        val num3 = mutable.ListBuffer[Long]()\n\
    \        val num4 = mutable.ListBuffer[Long]()\n        val num5 = mutable.ListBuffer[Long]()\n\
    \        val num6 = mutable.ListBuffer[Long]()\n        val num7 = mutable.ListBuffer[Long]()\n\
    \        val num8 = mutable.ListBuffer[Long]()\n        val num9 = mutable.ListBuffer[Long]()\n\
    \        val num10 = mutable.ListBuffer[Long]()\n        val num11 = mutable.ListBuffer[Long]()\n\
    \        val num12 = mutable.ListBuffer[Long]()\n        val num13 = mutable.ListBuffer[Long]()\n\
    \        val num14 = mutable.ListBuffer[Long]()\n        val num15 = mutable.ListBuffer[Long]()\n\
    \        val num16 = mutable.ListBuffer[Long]()\n        val num17 = mutable.ListBuffer[Long]()\n\
    \        val num18 = mutable.ListBuffer[Long]()\n        val num19 = mutable.ListBuffer[Long]()\n\
    \        val num20 = mutable.ListBuffer[Long]()\n        val num21 = mutable.ListBuffer[Long]()\n\
    \        val num22 = mutable.ListBuffer[Long]()\n        val num23 = mutable.ListBuffer[Long]()\n\
    \        val num24 = mutable.ListBuffer[Long]()\n        val num25 = mutable.ListBuffer[Long]()\n\
    \        val num26 = mutable.ListBuffer[Long]()\n        val num27 = mutable.ListBuffer[Long]()\n\
    \        val num28 = mutable.ListBuffer[Long]()\n        val num29 = mutable.ListBuffer[Long]()\n\
    \        val num30 = mutable.ListBuffer[Long]()\n        val num31 = mutable.ListBuffer[Long]()\n\
    \        val num32 = mutable.ListBuffer[Long]()\n        val num33 = mutable.ListBuffer[Long]",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        for(i <- x until y) {\n            if(i%2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if(even\
    \ > odd) {\n            return even\n        } else {\n            return odd\n\
    \        }", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x to y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = scala.collection.mutable.Range(x,\
    \ y)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n     \
    \   val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val evenNums = mutable.ListBuffer[Long]()\n\
    \        val oddNums = mutable.ListBuffer[Long]()\n        val evenNumsSorted\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsSorted = mutable.ListBuffer[Long]()\n\
    \        val evenNumsSorted2 = mutable.ListBuffer[Long]()\n        val oddNumsSorted2\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsSorted3 = mutable.ListBuffer[Long]()\n\
    \        val oddNumsSorted3 = mutable.ListBuffer[Long]()\n        val evenNumsSorted4\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsSorted4 = mutable.ListBuffer[Long]()\n\
    \        val evenNumsSorted5 = mutable.ListBuffer[Long]()\n        val oddNumsSorted5\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsSorted6 = mutable.ListBuffer[Long]()\n\
    \        val oddNumsSorted6 = mutable.ListBuffer[Long]()\n        val evenNumsSorted7\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsSorted7 = mutable.ListBuffer[Long]()\n\
    \        val evenNumsSorted8 = mutable.ListBuffer[Long]()\n        val oddNumsSorted8\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsSorted9 = mutable.ListBuffer[Long]()\n\
    \        val oddNumsSorted9 = mutable.ListBuffer[Long]()\n        val evenNumsSorted10\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsSorted10 = mutable.ListBuffer[Long]()\n\
    \        val evenNumsSorted11 = mutable.ListBuffer[Long]()\n        val oddNumsSorted11\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsSorted12 = mutable.ListBuffer[Long]()\n\
    \        val oddNumsSorted12 = mutable.ListBuffer[Long]()\n        val evenNumsSorted13\
    \ = mutable.ListBuffer[Long]()\n        val odd", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsEven = mutable.ListBuffer[Long]()\n        val numsOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBoth = mutable.ListBuffer[Long]()\n        val numsBothEven =\
    \ mutable.ListBuffer[Long]()\n        val numsBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBoth = mutable.ListBuffer[Long]()\n        val numsBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBoth = mutable.ListBuffer[Long]()\n        val numsBothBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothOdd = mutable.ListBuffer[Long]()\n\
    \        val nums", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n     \
    \   val evenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n       \
    \ val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n     \
    \   val evenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEven", "    \
    \    val evens = for (i <- 1 to y) yield {\n            if (x % i == 0) i else\
    \ -1\n        }\n        val evensSorted = evens.toList.sortWith(_ < _)\n    \
    \    if (evensSorted.isEmpty) -1\n        else evensSorted.head", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val evenNums = mutable.ListBuffer[Long]()\n\
    \        val oddNums = mutable.ListBuffer[Long]()\n        val evenNumsCount =\
    \ mutable.ListBuffer[Long]()\n        val oddNumsCount = mutable.ListBuffer[Long]()\n\
    \        val evenNumsSum = mutable.ListBuffer[Long]()\n        val oddNumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsSumCount = mutable.ListBuffer[Long]()\n\
    \        val oddNumsSumCount = mutable.ListBuffer[Long]()\n        val evenNumsSumSum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsSumSum = mutable.ListBuffer[Long]()\n\
    \        val evenNumsSumSumCount = mutable.ListBuffer[Long]()\n        val oddNumsSumSumCount\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val oddNumsSumSumSum = mutable.ListBuffer[Long]()\n        val evenNumsSumSumSumCount\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsSumSumSumCount = mutable.ListBuffer[Long]()\n\
    \        val evenNumsSumSumSumSum = mutable.ListBuffer[Long]()\n        val oddNumsSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsSumSumSumSumCount = mutable.ListBuffer[Long]()\n\
    \        val oddNumsSumSumSumSumCount = mutable.ListBuffer[Long]()\n        val\
    \ evenNumsSumSumSumSum = mutable.ListBuffer[Long]()\n        val oddNumsSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsSumSumSumSumCount = mutable.ListBuffer[Long]()\n\
    \        val oddNumsSumSumSumSumCount = mutable.ListBuffer[Long]()\n        val\
    \ evenNumsSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val oddNumsSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsSumSumSumSumCount = mutable.ListBuffer[Long]()\n",
  "        var evenNum : Long = x // Initialize evenNum to x\n        var oddNum :\
    \ Long = y // Initialize oddNum to y\n        var evenNumFound : Boolean = false\
    \ // Initialize evenNumFound to false\n        var oddNumFound : Boolean = false\
    \ // Initialize oddNumFound to false\n        var maxEvenNum : Long = -1 // Initialize\
    \ maxEvenNum to -1\n        var maxOddNum : Long = -1 // Initialize maxOddNum\
    \ to -1\n        while (evenNumFound == false && oddNumFound == false) {\n   \
    \         if (evenNum % 2 == 0) {\n                if (evenNum > maxEvenNum) {\n\
    \                    maxEvenNum = evenNum\n                    evenNumFound =\
    \ true\n                }\n            }\n            else {\n               \
    \ if (oddNum > maxOddNum) {\n                    maxOddNum = oddNum\n        \
    \            oddNumFound = true\n                }\n            }\n          \
    \  evenNum = evenNum / 2\n            oddNum = oddNum / 2\n        }\n       \
    \ if (evenNumFound == true) {\n            maxEvenNum = evenNum\n        }\n \
    \       if (oddNumFound == true) {\n            maxOddNum = oddNum\n        }\n\
    \        if (maxEvenNum == -1) {\n            return -1\n        }\n        if\
    \ (maxOddNum == -1) {\n            return -1\n        }\n        if (maxEvenNum\
    \ > maxOddNum) {\n            return maxEvenNum\n        }\n        else {\n \
    \           return maxOddNum\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val numsEven = mutable.ListBuffer[Long]()\n        val numsOdd = mutable.ListBuffer[Long]()\n\
    \        val numsNums = mutable.ListBuffer[Long]()\n        val numsEvenNums =\
    \ mutable.ListBuffer[Long]()\n        val numsOddNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNums = mutable.ListBuffer[Long]()\n        val numsEvenNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val numsOddNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNumsNums = mutable.ListBuffer[Long]()\n        val numsEvenNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val numsOddNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val numsEvenNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val numsOddNumsNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val\
    \ numsEvenNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val numsOddNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val numsNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsEvenNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n \
    \       val numsOddNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n   \
    \     val numsNumsNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n    \
    \    val numsEvenNumsNumsNums", "        if (x < 0 || y < 0 || x > y || y > x)\
    \ -1\n        else (x until y by 2).find(x => x % 2 == 0).getOrElse(-1)", "  \
    \      val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x to y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else odd", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val evenNums = mutable.Set[Long]()\n\
    \        val oddNums = mutable.Set[Long]()\n        val evenNumsSet = mutable.Set[Long]()\n\
    \        val oddNumsSet = mutable.Set[Long]()\n        val evenNumsSet2 = mutable.Set[Long]()\n\
    \        val oddNumsSet2 = mutable.Set[Long]()\n        val evenNumsSet3 = mutable.Set[Long]()\n\
    \        val oddNumsSet3 = mutable.Set[Long]()\n        val evenNumsSet4 = mutable.Set[Long]()\n\
    \        val oddNumsSet4 = mutable.Set[Long]()\n        val evenNumsSet5 = mutable.Set[Long]()\n\
    \        val oddNumsSet5 = mutable.Set[Long]()\n        val evenNumsSet6 = mutable.Set[Long]()\n\
    \        val oddNumsSet6 = mutable.Set[Long]()\n        val evenNumsSet7 = mutable.Set[Long]()\n\
    \        val oddNumsSet7 = mutable.Set[Long]()\n        val evenNumsSet8 = mutable.Set[Long]()\n\
    \        val oddNumsSet8 = mutable.Set[Long]()\n        val evenNumsSet9 = mutable.Set[Long]()\n\
    \        val oddNumsSet9 = mutable.Set[Long]()\n        val evenNumsSet10 = mutable.Set[Long]()\n\
    \        val oddNumsSet10 = mutable.Set[Long]()\n        val evenNumsSet11 = mutable.Set[Long]()\n\
    \        val oddNumsSet11 = mutable.Set[Long]()\n        val evenNumsSet12 = mutable.Set[Long]()\n\
    \        val oddNumsSet12 = mutable.Set[Long]()\n        val evenNumsSet13 = mutable.Set[Long]()\n\
    \        val oddNumsSet13 = mutable.Set[Long]()\n        val evenNumsSet14 = mutable.Set[Long]()\n\
    \        val oddNumsSet14 = mutable.Set[Long]()\n        val evenNumsSet15 = mutable.Set[Long]()\n\
    \        val oddNumsSet15 = mutable.Set[Long]()\n        val evenNumsSet", " \
    \       val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val evenNum = mutable.ListBuffer[Long]()\n        val oddNum = mutable.ListBuffer[Long]()\n\
    \        val numNum = mutable.ListBuffer[Long]()\n        val evenNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNum = mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        if (evens.isEmpty) {\n            return -1\n \
    \       } else if (evens.size == 1) {\n            return evens.head\n       \
    \ } else {\n            val even = evens.min\n            val odd = odds.min\n\
    \            if (even > odd) {\n                return even\n            } else\
    \ {\n                return odd\n            }\n        }", "        var biggestEven\
    \ = -1\n        var biggestEvenNum = BigInt(0)\n        var biggestEvenNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNum = BigInt(0)\n        var biggestEvenNumNumNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNumNumNum = BigInt(0)\n        var\
    \ biggestEvenNumNumNumNumNumNum = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNum = BigInt(0)\n    \
    \    var biggestEvenNumNumNumNumNumNumNumNum = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNum = BigInt(0)\n \
    \       var biggestEvenNumNumNumNumNumNumNumNum = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNum = BigInt(0)\n\
    \        var biggestEvenNumNumNumNumNumNumNumNumNum = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNum = BigInt(0)\n\
    \        var biggestEvenNumNumNumNumNumNumNumNumNumNum = BigInt(0)\n        var\
    \ biggestEvenNumNumNumNumNumNumNumNumNumNumNum = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNumNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNumNumNum = BigInt(0)\n\
    \        var biggestEvenNumNumNumNumNumNumNumNumNumNumNum = BigInt(0)\n      \
    \  var biggestEvenNumNumNumNumNumNumNumNumNumNumNum = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNumNumNumNumNum\
    \ = BigInt(0)\n        var biggestEvenNumNumNumNumNumNumNumNumNum", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val evenNum = mutable.ListBuffer[Long]()\n        val oddNum = mutable.ListBuffer[Long]()\n\
    \        val numNum = mutable.ListBuffer[Long]()\n        val evenNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNum = mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val minNum = math.min(x, y)\n        val maxNum = math.max(x, y)\n  \
    \      for (i <- minNum to maxNum) {\n            if (i % 2 == 0) {\n        \
    \        evens += i\n            } else {\n                odds += i\n       \
    \     }\n        }\n        evens.toList ++ odds.toList ++ nums.toList\n     \
    \       .sortWith(_ < _)\n            .lastOption\n            .flatMap(x => if\
    \ (x == -1) None else Some(x))", "        if (x < 0 || y < 0 || x > y || y > x)\
    \ -1\n        else x + (y - x) / 2", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        }\n      \
    \  if (evens.size == 1) {\n            return evens.head\n        }\n        if\
    \ (evens.size == 2) {\n            return evens.head + evens.last\n        }\n\
    \        val even = evens.head\n        val odd = odds(0)\n        val evens =\
    \ evens.tail\n        val odds = odds.tail\n        val newEvens = evens.filter(_\
    \ % 2 == 0)\n        val newOdds = odds.filter(_ % 2 != 0)\n        val newEven\
    \ = newEvens.head\n        val newOdd = newOdds.head\n        val newEvens = newEvens.tail\n\
    \        val newOdds = newOdds.tail\n        val newEven = newEven + newEvens\n\
    \        val newOdd = newOdd + newOdds\n        if (newEven > newOdd) {\n    \
    \        return newEven\n        } else {\n            return newOdd\n       \
    \ }", "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val evenNum = mutable.ListBuffer[Long]()\n        val oddNum = mutable.ListBuffer[Long]()\n\
    \        val numNum = mutable.ListBuffer[Long]()\n        val evenNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNum = mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val numNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNum = mutable.ListBuffer[Long]()\n        val oddNumNum =\
    \ mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        val evens = x to\
    \ y by 2\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ mutable.Buffer[Int] = evensSorted.sorted\n        val evensSortedSortedLast\
    \ = evensSortedSorted.last\n        val evensSortedSortedLastIndex = evensSortedSorted.lastIndex\n\
    \        val evensSortedSortedLastIndexPlusOne = evensSortedSortedLastIndex +\
    \ 1\n        val evensSortedSortedLastIndexMinusOne = evensSortedSortedLastIndex\
    \ - 1\n        val evensSortedSortedLastIndexMinusOnePlusOne = evensSortedSortedLastIndexMinusOne\
    \ + 1\n        val evensSortedSortedLastIndexMinusOneMinusOne = evensSortedSortedLastIndexMinusOne\
    \ - 1\n        val evensSortedSortedLastIndexMinusOneMinusOnePlusOne = evensSortedSortedLastIndexMinusOneMinusOne\
    \ + 1\n        val evensSortedSortedLastIndexMinusOneMinusOneMinusOne = evensSortedSortedLastIndexMinusOneMinusOne\
    \ - 1\n        val evensSortedSortedLastIndexMinusOneMinusOneMinusOnePlusOne =\
    \ evensSortedSortedLastIndexMinusOneMinusOneMinusOne + 1\n        val evensSortedSortedLastIndexMinusOneMinusOneMinusOneMinusOne\
    \ = evensSortedSortedLastIndexMinusOneMinusOneMinusOne - 1\n        val evensSortedSortedLastIndexMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = evensSortedSortedLastIndexMinusOneMinusOneMinusOneMinusOnePlusOne + 1\n  \
    \      val evensSortedSortedLastIndexMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = evensSortedSortedLastIndexMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ - 1\n        val evensSortedSortedLastIndexMinusOneMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = evensSortedSortedLastIndexMinusOneMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ + 1\n        val evensSortedSortedLastIndexMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = evensSortedSortedLastIndexMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne ",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        if (evens.size == 1) {\n            return\
    \ evens.head\n        }\n        val maxEven = evens.max\n        val maxOdd =\
    \ odds.max\n        if (maxEven < maxOdd) {\n            return maxEven\n    \
    \    } else {\n            return maxOdd\n        }", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     range.foreach(x => {\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   })\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            even\n        } else {\n            odd\n        }", " \
    \       val evens = mutable.ListBuffer[Long]()\n        for(i <- 1 to y by 2){\n\
    \            val x = x + (i / 2)\n            val y = y - (i / 2)\n          \
    \  if(x * x % y == 0 && x * y % y == 0){\n                evens += x\n       \
    \     }\n        }\n        if(evens.isEmpty) -1\n        else evens.max", " \
    \       var max = 0\n        var min = x\n        while(min <= y) {\n        \
    \    val mid = (min + max) / 2\n            if(mid % 2 == 0) {\n             \
    \   max = mid\n            } else {\n                min = mid + 1\n         \
    \   }\n        }\n        if(max == x) {\n            return -1\n        }\n \
    \       return max", "        val evens = mutable.ListBuffer[Long]()\n       \
    \ val odds = mutable.ListBuffer[Long]()\n        val range = (x - y).abs \n  \
    \      val evenRange = range / 2\n        val oddRange = range % 2\n        val\
    \ even = x + evenRange\n        val odd = x + oddRange\n        while(even < y)\
    \ {\n            evens += even\n            even += evenRange\n        }\n   \
    \     while(odd > y) {\n            odds += odd\n            odd -= oddRange\n\
    \        }\n        evens.max", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- x until y){\n            if(i % 2 == 0){\n                evens\
    \ += i\n            }\n        }\n        evens.max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for(i <- x until y) \n\
    \            if(i % 2 == 0) evens += i\n            else odds += i\n        evens.max",
  "        val evens = for (i <- 1 to y) yield {\n            if (i % 2 == 0) i else\
    \ -1\n        }\n        val evensSum = evens.sum\n        if (evensSum < x &&\
    \ evensSum > y) -1\n        else if (evensSum < x) evensSum\n        else evensSum\
    \ - x", "        val evens = mutable.ListBuffer[Long]()\n        for(i <- 1 to\
    \ y) {\n            for(j <- 1 to x) {\n                if(j % i == 0) {\n   \
    \                 evens += j\n                }\n            }\n        }\n  \
    \      if(evens.isEmpty) {\n            return -1\n        }\n        evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        for(i <- x until y){\n\
    \            if(i % 2 == 0){\n                evens += i\n            }\n    \
    \    }\n        if(evens.isEmpty){\n            return -1\n        }\n       \
    \ evens.max", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        for(i <- x until y){\n            if(i\
    \ % 2 == 0){\n                evens += i\n            }else{\n               \
    \ odds += i\n            }\n        }\n        val even = evens.max\n        val\
    \ odd = odds.max\n        if(even > odd){\n            return even\n        }else{\n\
    \            return odd\n        }", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val nums = mutable.Set[Long]()\n\
    \        val evenNums = mutable.Set[Long]()\n        val oddNums = mutable.Set[Long]()\n\
    \        val evenOdds = mutable.Set[Long]()\n        val evenOddsNums = mutable.Set[Long]()\n\
    \        val evenOddsNumsNums = mutable.Set[Long]()\n        val evenOddsNumsNumsNums\
    \ = mutable.Set[Long]()\n        val evenOddsNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val evenOddsNumsNumsNumsNumsNums = mutable.Set[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNums\
    \ = mutable.Set[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val evenOddsNumsNumsNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums = mutable.Set[Long]()\n\
    \        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums\
    \ = mutable.Set[Long]()\n        val evenOddsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNumsNums",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val num2 = mutable.ListBuffer[Long]()\n        val num3 = mutable.ListBuffer[Long]()\n\
    \        val num4 = mutable.ListBuffer[Long]()\n        val num5 = mutable.ListBuffer[Long]()\n\
    \        val num6 = mutable.ListBuffer[Long]()\n        val num7 = mutable.ListBuffer[Long]()\n\
    \        val num8 = mutable.ListBuffer[Long]()\n        val num9 = mutable.ListBuffer[Long]()\n\
    \        val num10 = mutable.ListBuffer[Long]()\n        val num11 = mutable.ListBuffer[Long]()\n\
    \        val num12 = mutable.ListBuffer[Long]()\n        val num13 = mutable.ListBuffer[Long]()\n\
    \        val num14 = mutable.ListBuffer[Long]()\n        val num15 = mutable.ListBuffer[Long]()\n\
    \        val num16 = mutable.ListBuffer[Long]()\n        val num17 = mutable.ListBuffer[Long]()\n\
    \        val num18 = mutable.ListBuffer[Long]()\n        val num19 = mutable.ListBuffer[Long]()\n\
    \        val num20 = mutable.ListBuffer[Long]()\n        val num21 = mutable.ListBuffer[Long]()\n\
    \        val num22 = mutable.ListBuffer[Long]()\n        val num23 = mutable.ListBuffer[Long]()\n\
    \        val num24 = mutable.ListBuffer[Long]()\n        val num25 = mutable.ListBuffer[Long]()\n\
    \        val num26 = mutable.ListBuffer[Long]()\n        val num27 = mutable.ListBuffer[Long]()\n\
    \        val num28 = mutable.ListBuffer[Long]()\n        val num29 = mutable.ListBuffer[Long]()\n\
    \        val num30 = mutable.ListBuffer[Long]()\n        val num31 = mutable.ListBuffer[Long]()\n\
    \        val num32 = mutable.ListBuffer[Long]()\n        val num33 = mutable.ListBuffer[Long]",
  "        val evens = x to y by 2\n        val evensCount = evens.count(_ % 2 ==\
    \ 0)\n        if (evensCount > 0) {\n            evens.max\n        } else {\n\
    \            -1\n        }", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val evensAndOdds\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val evensAndOddsCountMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evensAndOddsCountMin = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val evensAndOddsCountSumMin = mutable.ArrayBuffer.empty[Long]\n     \
    \   val evensAndOddsCountSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evensAndOddsCountSumSumMax = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSum =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumMax =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumMin =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumSum =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumSumMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumSumMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumSumMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumSumMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumSumSumMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumSumSumMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evensAndOddsCountSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to y by 2){\n            val x = i\n            val y = x\
    \ + 2\n            val even = if (x % 2 == 0 && y % 2 == 0) x else -1\n      \
    \      evens += even\n        }\n        evens.max", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        val even = mutable.ArrayBuffer.empty[Long]\n        val odd = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenNum = mutable.ArrayBuffer.empty[Long]\n        val oddNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val evenNum = mutable.ListBuffer[Long]()\n        val oddNum = mutable.ListBuffer[Long]()\n\
    \        val numNum = mutable.ListBuffer[Long]()\n        val evenNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNum = mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        for (i <- x until y) {\n\
    \            if (i % 2 == 0) {\n                even += i\n            } else\
    \ {\n                odd += i\n            }\n        }\n        evens.sortWith(_\
    \ < _)\n        odds.sortWith(_ < _)\n        evens.foreach { x => if (even contains\
    \ x) even += x else odd += x }\n        odds.foreach { x => if (odd contains x)\
    \ even += x else odd += x }\n        if (evens.isEmpty) -1\n        else if (odds.isEmpty)\
    \ -1\n        else evens.head + odds.head", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        } else {\n            return evens.max\n        }",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        for(i <- x until y) {\n            if(i%2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if(even\
    \ > odd) {\n            return even\n        } else {\n            return odd\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        for(i <-\
    \ x until y) if (i % 2 == 0) evens += i\n        if (evens.isEmpty) -1\n     \
    \   else evens.max", "        val evens = mutable.ListBuffer[Long]()\n       \
    \ val odds = mutable.ListBuffer[Long]()\n        for(i <- x until y) if(i % 2\
    \ == 0) evens += i\n        for(i <- x until y) if(i % 2 != 0) odds += i\n   \
    \     evens.maxBy(_ % 2 == 0)", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for(i <- x until y) if(i % 2 == 0) evens += i\n        if(evens.isEmpty)\
    \ -1\n        else evens.max", "        var evenNum = x % 2 == 0\n        var\
    \ evenNum2 = y % 2 == 0\n        var evenNum3 = x % 3 == 0\n        var evenNum4\
    \ = y % 3 == 0\n        var evenNum5 = x % 5 == 0\n        var evenNum6 = y %\
    \ 5 == 0\n        var evenNum7 = x % 7 == 0\n        var evenNum8 = y % 7 == 0\n\
    \        var evenNum9 = x % 9 == 0\n        var evenNum10 = y % 9 == 0\n     \
    \   var evenNum11 = x % 11 == 0\n        var evenNum12 = y % 11 == 0\n       \
    \ var evenNum13 = x % 13 == 0\n        var evenNum14 = y % 13 == 0\n        var\
    \ evenNum15 = x % 15 == 0\n        var evenNum16 = y % 15 == 0\n        var evenNum17\
    \ = x % 17 == 0\n        var evenNum18 = y % 17 == 0\n        var evenNum19 =\
    \ x % 19 == 0\n        var evenNum20 = y % 19 == 0\n        var evenNum21 = x\
    \ % 20 == 0\n        var evenNum22 = y % 20 == 0\n        var evenNum23 = x %\
    \ 23 == 0\n        var evenNum24 = y % 23 == 0\n        var evenNum25 = x % 25\
    \ == 0\n        var evenNum26 = y % 25 == 0\n        var evenNum27 = x % 27 ==\
    \ 0\n        var evenNum28 = y % 27 == 0\n        var evenNum29 = x % 29 == 0\n\
    \        var evenNum30 = y % 29 == 0\n        var evenNum31 = x % 30 == 0\n  \
    \      var evenNum32 = y % 30 == 0\n        var evenNum33 = x % 33 == 0\n    \
    \    var evenNum34 = y % 33 == 0\n        var evenNum35 = x % 35 == 0\n      \
    \  var evenNum36 = y % 35 == 0\n        var evenNum37 = x % 37 == 0\n        var\
    \ evenNum38 = y % 37 == 0\n        var evenNum39 = x % 39 == 0\n        var evenNum40\
    \ = y % 39 == 0\n        var evenNum41 = x % 40 == 0\n        var evenNum42 =\
    \ y % 40 == 0\n        var evenNum43 = x % 43 == 0\n        var evenNum44 = y\
    \ % 43 == 0\n        var evenNum45 = x % 45 == 0\n        var evenNum46 = y %\
    \ 45 == 0\n        var evenNum47 = x % 47 == 0\n        var evenNum48 = y % 47\
    \ == 0\n        var evenNum49 = x % 49 == 0\n        var evenNum50 = y % 49 ==\
    \ 0\n        var evenNum51 = x % 50 == 0\n        var evenNum52 = y % 50 == 0\n\
    \        var evenNum5", "        val evens = mutable.ListBuffer[Long]()\n    \
    \    val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        ", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x to y)\n        for (i <- range) {\n            if (i %\
    \ 2 == 0) {\n                evens += i\n            } else {\n              \
    \  odds += i\n            }\n        }\n        val even = evens.max\n       \
    \ val odd = odds.max\n        if (even > odd) {\n            return even\n   \
    \     } else {\n            return odd\n        }", "        if (x < 0 || y <\
    \ 0 || x > y || y > x) -1\n        else x + (y - (x % y))", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val evenNum = mutable.ListBuffer[Long]()\n        val oddNum = mutable.ListBuffer[Long]()\n\
    \        val numNum = mutable.ListBuffer[Long]()\n        val evenNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNum = mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        val evens = x to\
    \ y by 2\n        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount\
    \ == 0) {\n            return -1\n        }\n        evens.max", "        val\
    \ evens = x until y by 2\n        val evensSorted = evens.toList\n        val\
    \ evensSortedSorted: mutable.Buffer[Int] = evensSorted.sortWith(_ < _)\n     \
    \   val evensSortedSortedLast = evensSortedSorted.last\n        if (evensSortedSortedLast\
    \ % 2 == 0) evensSortedSortedLast else -1", "        val even = x % 2 == 0\n \
    \       val evenInRange = if (even) y else x\n        val evenInRangeInt = if\
    \ (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n      \
    \  val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt =\
    \ if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n   \
    \     val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) ", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val evensAndOdds = mutable.Set[Long]()\n\
    \        val evensAndOddsSet = mutable.Set[Long]()\n        val evensAndOddsSet2\
    \ = mutable.Set[Long]()\n        val evensAndOddsSet3 = mutable.Set[Long]()\n\
    \        val evensAndOddsSet4 = mutable.Set[Long]()\n        val evensAndOddsSet5\
    \ = mutable.Set[Long]()\n        val evensAndOddsSet6 = mutable.Set[Long]()\n\
    \        val evensAndOddsSet7 = mutable.Set[Long]()\n        val evensAndOddsSet8\
    \ = mutable.Set[Long]()\n        val evensAndOddsSet9 = mutable.Set[Long]()\n\
    \        val evensAndOddsSet10 = mutable.Set[Long]()\n        val evensAndOddsSet11\
    \ = mutable.Set[Long]()\n        val evensAndOddsSet12 = mutable.Set[Long]()\n\
    \        val evensAndOddsSet13 = mutable.Set[Long]()\n        val evensAndOddsSet14\
    \ = mutable.Set[Long]()\n        val evensAndOddsSet15 = mutable.Set[Long]()\n\
    \        val evensAndOddsSet16 = mutable.Set[Long]()\n        val evensAndOddsSet17\
    \ = mutable.Set[Long]()\n        val evensAndOddsSet18 = mutable.Set[Long]()\n\
    \        val evensAndOddsSet19 = mutable.Set[Long]()\n        val evensAndOddsSet20\
    \ = mutable.Set[Long]()\n        val evensAndOddsSet21 = mutable.Set[Long]()\n\
    \        val evensAndOddsSet22 = mutable.Set[Long]()\n        val evensAndOddsSet23\
    \ = mutable.Set[Long]()\n        val evensAndOddsSet24 = mutable.Set[Long]()\n\
    \        val evensAndOddsSet25 = mutable.Set[Long]()\n        val evensAndOddsSet26\
    \ = mutable.Set[Long]()\n        val evensAndOddsSet27 = mutable.Set[Long]()",
  "        val even = x % 2 == 0\n        val evenInRange = if (even && x >= y) x\
    \ else y\n        val evenInRange2 = if (even && x >= y) y else x\n        val\
    \ evenInRange3 = if (even && x >= y) x else y\n        val evenInRange4 = if (even\
    \ && x >= y) y else x\n        val evenInRange5 = if (even && x >= y) x else y\n\
    \        val evenInRange6 = if (even && x >= y) y else x\n        val evenInRange7\
    \ = if (even && x >= y) x else y\n        val evenInRange8 = if (even && x >=\
    \ y) y else x\n        val evenInRange9 = if (even && x >= y) x else y\n     \
    \   val evenInRange10 = if (even && x >= y) y else x\n        val evenInRange11\
    \ = if (even && x >= y) x else y\n        val evenInRange12 = if (even && x >=\
    \ y) y else x\n        val evenInRange13 = if (even && x >= y) x else y\n    \
    \    val evenInRange14 = if (even && x >= y) y else x\n        val evenInRange15\
    \ = if (even && x >= y) x else y\n        val evenInRange16 = if (even && x >=\
    \ y) y else x\n        val evenInRange17 = if (even && x >= y) x else y\n    \
    \    val evenInRange18 = if (even && x >= y) y else x\n        val evenInRange19\
    \ = if (even && x >= y) x else y\n        val evenInRange20 = if (even && x >=\
    \ y) y else x\n        val evenInRange21 = if (even && x >= y) x else y\n    \
    \    val evenInRange22 = if (even && x >= y) y else x\n        val evenInRange23\
    \ = if (even && x >= y) x else y\n        val evenInRange24 = if (even && x >=\
    \ y) y else x\n        val evenInRange25 = if (even && x >= y) x else y\n    \
    \    val evenInRange26 = if (even && x >= y) y else x\n        val evenInRange27\
    \ = if (even && x >= y) x else y\n        val evenInRange28 = if (even && x >=\
    \ y) y else x\n        val evenInRange29 = if (even && x >= y) x else y\n    \
    \    val evenInRange30 = if (even && x >= y) y else x\n        val evenInRange31\
    \ = if (even && x >= y) x else y\n        val evenInRange32 = if (even && x >=\
    \ y) y else x\n        val even", "        var evenNum : Long = 0\n        var\
    \ oddNum : Long = 0\n        var num : Long = 0\n        while(x <= y) {\n   \
    \         num = x + y\n            if(num % 2 == 0) {\n                evenNum\
    \ = num\n            } else {\n                oddNum = num\n            }\n \
    \           x += 1\n            y -= 1\n        }\n        if(evenNum > oddNum)\
    \ {\n            return evenNum\n        } else {\n            return oddNum\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = 0\n        val evenNum = 0\n        val oddNum = 0\n      \
    \  val numInRange = 0\n        val evenNumInRange = 0\n        val oddNumInRange\
    \ = 0\n        val evenNumInRange2 = 0\n        val oddNumInRange2 = 0\n     \
    \   val evenNumInRange3 = 0\n        val oddNumInRange3 = 0\n        val evenNumInRange4\
    \ = 0\n        val oddNumInRange4 = 0\n        val evenNumInRange5 = 0\n     \
    \   val oddNumInRange5 = 0\n        val evenNumInRange6 = 0\n        val oddNumInRange6\
    \ = 0\n        val evenNumInRange7 = 0\n        val oddNumInRange7 = 0\n     \
    \   val evenNumInRange8 = 0\n        val oddNumInRange8 = 0\n        val evenNumInRange9\
    \ = 0\n        val oddNumInRange9 = 0\n        val evenNumInRange10 = 0\n    \
    \    val oddNumInRange10 = 0\n        val evenNumInRange11 = 0\n        val oddNumInRange11\
    \ = 0\n        val evenNumInRange12 = 0\n        val oddNumInRange12 = 0\n   \
    \     val evenNumInRange13 = 0\n        val oddNumInRange13 = 0\n        val evenNumInRange14\
    \ = 0\n        val oddNumInRange14 = 0\n        val evenNumInRange15 = 0\n   \
    \     val oddNumInRange15 = 0\n        val evenNumInRange16 = 0\n        val oddNumInRange16\
    \ = 0\n        val evenNumInRange17 = 0\n        val oddNumInRange17 = 0\n   \
    \     val evenNumInRange18 = 0\n        val oddNumInRange18 = 0\n        val evenNumInRange19\
    \ = 0\n        val oddNumInRange19 = 0\n        val evenNumInRange20 = 0\n   \
    \     val oddNumInRange20 = 0\n        val evenNumInRange21 = 0\n        val oddNumInRange21\
    \ = 0\n        val evenNumInRange22 = 0\n        val oddNumInRange22 = 0\n   \
    \     val evenNumInRange23 = 0\n        val oddNumInRange23 = 0\n        val evenNumInRange24\
    \ = 0\n        val ", "        val evens = mutable.ListBuffer[Long]()\n      \
    \  for(i <- x until y) {\n            if(i % 2 == 0) {\n                evens\
    \ += i\n            }\n        }\n        evens.max", "        if (x < 0 || y\
    \ < 0 || x > y || y > x) -1\n        else (x until y by 2).find(x => x % 2 ==\
    \ 0).getOrElse(-1)", "        val evens = mutable.ListBuffer[Long]()\n       \
    \ val odds = mutable.ListBuffer[Long]()\n        for(i <- 1 to y by 2){\n    \
    \        if((x % i) == 0){\n                evens += i\n            }else{\n \
    \               odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if(even > odd){\n            return even\n\
    \        }else{\n            return odd\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensAndOdds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSum = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsSumSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ evensAndOddsSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsSumSumSumSum", "     \
    \   val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        for(i <- x until y) {\n            if(i % 2 == 0) {\n               \
    \ evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if(even > odd) {\n            return even\n        } else {\n            return\
    \ odd\n        }", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = mutable.Range(x, y)\n        range.foreach(x => {\n     \
    \       if (x % 2 == 0) {\n                evens += x\n            } else {\n\
    \                odds += x\n            }\n        })\n        evens.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                even += x\n           \
    \ } else {\n                odd += x\n            }\n        })\n        evens.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                nums += x\n           \
    \ }\n        })\n        odds.foreach(x => {\n            if (x % 2 == 0) {\n\
    \                nums += x\n            }\n        })\n        odds.foreach(x\
    \ => {\n            if (x % 2 == 0) {\n                odd += x\n            }\n\
    \        })\n        even.foreach(x => {\n            if (x % 2 == 0) {\n    \
    \            even += x\n            }\n        })\n        odd.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                odd += x\n            }\n    \
    \    })\n        val evenNum = evens.max\n        val oddNum = odds.max\n    \
    \    val numNum = nums.max\n        if (evenNum == evenNum && oddNum == oddNum\
    \ && numNum == numNum) {\n            return evenNum\n        } else {\n     \
    \       return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsEven = mutable.ListBuffer[Long]()\n        val numsOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBoth = mutable.ListBuffer[Long]()\n        val numsBothEven =\
    \ mutable.ListBuffer[Long]()\n        val numsBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBoth = mutable.ListBuffer[Long]()\n        val numsBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBoth = mutable.ListBuffer[Long]()\n        val numsBothBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val\
    \ numsBothBothBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBothBothBothEven = mutable.ListBuffer[Long]()\n \
    \       val numsBothBothBothBothBothBothOdd = mutable.ListBuffer[Long]()\n   \
    \     val numsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n    \
    \    val numsBothBothBothBothBothBothBothEven = mutable.ListBuffer[Long]()\n \
    \       val numsBothBothBothBothBothBothBothOdd = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBothBothBothBothBothEven = mutable.ListBuffer[Long]",
  "        val evens = x to y by 2\n        val evensSorted = evens.toSeq.sortBy(_\
    \ % 2 == 0)\n        val evensSortedLast = evensSorted.last\n        val evensSortedLastIndex\
    \ = evensSorted.lastIndex\n        if (evensSortedLast == evensSortedLastIndex)\
    \ -1\n        else evensSortedLast", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenNums = mutable.ArrayBuffer.empty[Long]\n        val oddNums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenNumsSet = mutable.HashSet[Long]()\n\
    \        val oddNumsSet = mutable.HashSet[Long]()\n        val numsSet = mutable.HashSet[Long]()\n\
    \        val evenNumsSet2 = mutable.HashSet[Long]()\n        val oddNumsSet2 =\
    \ mutable.HashSet[Long]()\n        val numsSet2 = mutable.HashSet[Long]()\n  \
    \      val evenNumsSet3 = mutable.HashSet[Long]()\n        val oddNumsSet3 = mutable.HashSet[Long]()\n\
    \        val numsSet3 = mutable.HashSet[Long]()\n        val evenNumsSet4 = mutable.HashSet[Long]()\n\
    \        val oddNumsSet4 = mutable.HashSet[Long]()\n        val numsSet4 = mutable.HashSet[Long]()\n\
    \        val evenNumsSet5 = mutable.HashSet[Long]()\n        val oddNumsSet5 =\
    \ mutable.HashSet[Long]()\n        val numsSet5 = mutable.HashSet[Long]()\n  \
    \      val evenNumsSet6 = mutable.HashSet[Long]()\n        val oddNumsSet6 = mutable.HashSet[Long]()\n\
    \        val numsSet6 = mutable.HashSet[Long]()\n        val evenNumsSet7 = mutable.HashSet[Long]()\n\
    \        val oddNumsSet7 = mutable.HashSet[Long]()\n        val numsSet7 = mutable.HashSet[Long]()\n\
    \        val evenNumsSet8 = mutable.HashSet[Long]()\n        val oddNumsSet8 =\
    \ mutable.HashSet[Long]()\n        val numsSet8 = mutable.HashSet[Long]()\n  \
    \      val evenNumsSet9 = mutable.HashSet[Long]()\n        val oddNumsSet9 = mutable.HashSet[Long]()\n\
    \        val numsSet9 = mutable.HashSet[Long]()\n        val evenNumsSet10 = mutable.HashSet[Long]()\n\
    \        val oddNumsSet", "        val evens = mutable.ListBuffer[Long]()\n  \
    \      val odds = mutable.ListBuffer[Long]()\n        val evenNums = mutable.ListBuffer[Long]()\n\
    \        val oddNums = mutable.ListBuffer[Long]()\n        val evenNumsCount =\
    \ mutable.ListBuffer[Long]()\n        val oddNumsCount = mutable.ListBuffer[Long]()\n\
    \        val evenNumsCount2 = mutable.ListBuffer[Long]()\n        val oddNumsCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddNumsCount3 = mutable.ListBuffer[Long]()\n        val evenNumsCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenNumsCount5 = mutable.ListBuffer[Long]()\n        val oddNumsCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddNumsCount6 = mutable.ListBuffer[Long]()\n        val evenNumsCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenNumsCount8 = mutable.ListBuffer[Long]()\n        val oddNumsCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddNumsCount9 = mutable.ListBuffer[Long]()\n        val evenNumsCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenNumsCount11 = mutable.ListBuffer[Long]()\n        val oddNumsCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddNumsCount12 = mutable.ListBuffer[Long]()\n        val evenNumsCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddNumsCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenNumsCount14 = mutable.ListBuffer[Long]()\n        val oddNumsCount14\
    \ = mutable.ListBuffer[Long]()\n        val evenNumsCount15 = ", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val range = scala.collection.mutable.Range(x,\
    \ y)\n        range.foreach(x => if (x % 2 == 0) evens += x else odds += x)\n\
    \        range.foreach(x => if (x % 2 == 0) even += x else odd += x)\n       \
    \ even.foreach(x => if (x % 2 == 0) nums += x else nums += x)\n        odd.foreach(x\
    \ => if (x % 2 == 0) nums += x else nums += x)\n        val evenNums = nums.filter(x\
    \ => x % 2 == 0)\n        val oddNums = nums.filter(x => x % 2 != 0)\n       \
    \ val evenMax = evenNums.max\n        val oddMax = oddNums.max\n        if (evenMax\
    \ == evenMax) evenMax else -1", "        var maxEven = math.max(x, y)\n      \
    \  var even = math.min(x, y)\n        var evenCount = 0\n        while (even <\
    \ maxEven) {\n            if (even % 2 == 0) {\n                evenCount += 1\n\
    \            }\n            even += 1\n        }\n        if (evenCount == 0)\
    \ {\n            return -1\n        }\n        return even", "        val evens\
    \ = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- x until y) {\n            if(i % 2 == 0) {\n               \
    \ evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        val even = evens.max\n        val odd = odds.max\n       \
    \ if(even < odd) {\n            return even\n        } else {\n            return\
    \ odd\n        }", "        val evens = mutable.ListBuffer[Long]()\n        for(i\
    \ <- x until y) \n            if(i % 2 == 0) evens += i\n        evens.max", " \
    \       val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x to y)\n        for (i <- range) {\n            if (i %\
    \ 2 == 0) {\n                evens += i\n            } else {\n              \
    \  odds += i\n            }\n        }\n        if (evens.isEmpty) {\n       \
    \     return -1\n        }\n        if (evens.size == 1) {\n            return\
    \ evens.head\n        }\n        val maxEven = evens.max\n        if (odds contains\
    \ maxEven) {\n            return maxEven\n        } else {\n            return\
    \ -1\n        }", "        val evens = mutable.Set[Long]()\n        val odds =\
    \ mutable.Set[Long]()\n        val nums = mutable.Set[Long]()\n        val evenNums\
    \ = mutable.Set[Long]()\n        val oddNums = mutable.Set[Long]()\n        val\
    \ evenNumsSet = mutable.Set[Long]()\n        val oddNumsSet = mutable.Set[Long]()\n\
    \        val numsSet = mutable.Set[Long]()\n        val evenNumsSet2 = mutable.Set[Long]()\n\
    \        val oddNumsSet2 = mutable.Set[Long]()\n        val numsSet2 = mutable.Set[Long]()\n\
    \        val evenNumsSet3 = mutable.Set[Long]()\n        val oddNumsSet3 = mutable.Set[Long]()\n\
    \        val numsSet3 = mutable.Set[Long]()\n        val evenNumsSet4 = mutable.Set[Long]()\n\
    \        val oddNumsSet4 = mutable.Set[Long]()\n        val numsSet4 = mutable.Set[Long]()\n\
    \        val evenNumsSet5 = mutable.Set[Long]()\n        val oddNumsSet5 = mutable.Set[Long]()\n\
    \        val numsSet5 = mutable.Set[Long]()\n        val evenNumsSet6 = mutable.Set[Long]()\n\
    \        val oddNumsSet6 = mutable.Set[Long]()\n        val numsSet6 = mutable.Set[Long]()\n\
    \        val evenNumsSet7 = mutable.Set[Long]()\n        val oddNumsSet7 = mutable.Set[Long]()\n\
    \        val numsSet7 = mutable.Set[Long]()\n        val evenNumsSet8 = mutable.Set[Long]()\n\
    \        val oddNumsSet8 = mutable.Set[Long]()\n        val numsSet8 = mutable.Set[Long]()\n\
    \        val evenNumsSet9 = mutable.Set[Long]()\n        val oddNumsSet9 = mutable.Set[Long]()\n\
    \        val numsSet9 = mutable.Set[Long]()\n        val evenNumsSet10 = mutable.Set[Long]()\n\
    \        val oddNumsSet10 = mutable.Set[Long]()\n        val numsSet10 = mutable.Set[Long]()\n\
    \        val evenNumsSet11 = mutable.Set", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- x until y) {\n            if(i % 2 == 0) {\n               \
    \ evens += i\n            }\n        }\n        if(evens.isEmpty) {\n        \
    \    return -1\n        }\n        evens.max", "        if (x < 0 || y < 0 ||\
    \ x > y || y > x) -1\n        else x + (y - x) / 2", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val nums = mutable.Set[Long]()\n\
    \        val even = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n\
    \        val numsSet = mutable.Set[Long]()\n        val evenSet = mutable.Set[Long]()\n\
    \        val oddSet = mutable.Set[Long]()\n        val numsSet2 = mutable.Set[Long]()\n\
    \        val evenSet2 = mutable.Set[Long]()\n        val oddSet2 = mutable.Set[Long]()\n\
    \        val numsSet3 = mutable.Set[Long]()\n        val evenSet3 = mutable.Set[Long]()\n\
    \        val oddSet3 = mutable.Set[Long]()\n        val numsSet4 = mutable.Set[Long]()\n\
    \        val evenSet4 = mutable.Set[Long]()\n        val oddSet4 = mutable.Set[Long]()\n\
    \        val numsSet5 = mutable.Set[Long]()\n        val evenSet5 = mutable.Set[Long]()\n\
    \        val oddSet5 = mutable.Set[Long]()\n        val numsSet6 = mutable.Set[Long]()\n\
    \        val evenSet6 = mutable.Set[Long]()\n        val oddSet6 = mutable.Set[Long]()\n\
    \        val numsSet7 = mutable.Set[Long]()\n        val evenSet7 = mutable.Set[Long]()\n\
    \        val oddSet7 = mutable.Set[Long]()\n        val numsSet8 = mutable.Set[Long]()\n\
    \        val evenSet8 = mutable.Set[Long]()\n        val oddSet8 = mutable.Set[Long]()\n\
    \        val numsSet9 = mutable.Set[Long]()\n        val evenSet9 = mutable.Set[Long]()\n\
    \        val oddSet9 = mutable.Set[Long]()\n        val numsSet10 = mutable.Set[Long]()\n\
    \        val evenSet10 = mutable.Set[Long]()\n        val oddSet10 = mutable.Set[Long]()\n\
    \        val numsSet11 = mutable.Set[Long]()\n        val evenSet11 = mutable.Set[Long]()\n\
    \        val oddSet11 = mutable.Set[Long]()\n        val numsSet12 = mutable.Set[Long]",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val evenNum = mutable.ListBuffer[Long]()\n        val oddNum = mutable.ListBuffer[Long]()\n\
    \        val numNum = mutable.ListBuffer[Long]()\n        val evenNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNum = mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n\
    \        val odd = mutable.Set[Long]()\n        val evenNum = mutable.Set[Long]()\n\
    \        val oddNum = mutable.Set[Long]()\n        val evenNums = mutable.Set[Long]()\n\
    \        val oddNums = mutable.Set[Long]()\n        val evenNumsSet = mutable.Set[Long]()\n\
    \        val oddNumsSet = mutable.Set[Long]()\n        val evenNumsSet2 = mutable.Set[Long]()\n\
    \        val oddNumsSet2 = mutable.Set[Long]()\n        val evenNumsSet3 = mutable.Set[Long]()\n\
    \        val oddNumsSet3 = mutable.Set[Long]()\n        val evenNumsSet4 = mutable.Set[Long]()\n\
    \        val oddNumsSet4 = mutable.Set[Long]()\n        val evenNumsSet5 = mutable.Set[Long]()\n\
    \        val oddNumsSet5 = mutable.Set[Long]()\n        val evenNumsSet6 = mutable.Set[Long]()\n\
    \        val oddNumsSet6 = mutable.Set[Long]()\n        val evenNumsSet7 = mutable.Set[Long]()\n\
    \        val oddNumsSet7 = mutable.Set[Long]()\n        val evenNumsSet8 = mutable.Set[Long]()\n\
    \        val oddNumsSet8 = mutable.Set[Long]()\n        val evenNumsSet9 = mutable.Set[Long]()\n\
    \        val oddNumsSet9 = mutable.Set[Long]()\n        val evenNumsSet10 = mutable.Set[Long]()\n\
    \        val oddNumsSet10 = mutable.Set[Long]()\n        val evenNumsSet11 = mutable.Set[Long]()\n\
    \        val oddNumsSet11 = mutable.Set[Long]()\n        val evenNumsSet12 = mutable.Set[Long]()\n\
    \        val oddNumsSet12 = mutable.Set[Long]()\n        val evenNumsSet13 = mutable.Set[Long]()\n\
    \        val oddNumsSet13 = mutable.Set[Long]()\n        val evenNumsSet14 = mutable.Set[Long]()\n\
    \        val oddNum", "        val evens = for (i <- 1 to y) yield {\n       \
    \     if (i % 2 == 0) i\n        }\n        val evensCount = evens.count(_ > x)\n\
    \        if (evensCount == 0) -1\n        else if (evensCount == 1) evens.min\n\
    \        else evens.min", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        val even = mutable.ArrayBuffer.empty[Long]\n        val odd = mutable.ArrayBuffer.empty[Long]\n\
    \        val num = mutable.ArrayBuffer.empty[Long]\n        val evenNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddNum = mutable.ArrayBuffer.empty[Long]\n        val numNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenNumNum = mutable.ArrayBuffer.empty[Long]\n        val oddNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenNumNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ oddNumNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val numNumNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddNumNumNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n       \
    \ val numNumNumNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numNumNumNumNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n    \
    \    val evenNumNumNumNumNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n    \
    \    val oddNumNumNumNumNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n     \
    \   val numNumNumNumNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ArrayBuffer.", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = 0L\n        val even = 0L\n        val odd = 0L\n        val\
    \ nums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = 0L\n        val\
    \ even = 0L\n        val odd = 0L\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = 0L\n        val even = 0L\n        val odd = 0L\n        val\
    \ nums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = 0L\n        val\
    \ even = 0L\n        val odd = 0L\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = 0L\n        val even = 0L\n        val odd = 0L\n        val\
    \ nums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = 0L\n        val\
    \ even = 0L\n        val odd = 0L\n        val nums = mutable.ListBuffer[Long]()\n\
    \        ", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val numNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNum = mutable.ListBuffer[Long]()\n        val oddNumNum =\
    \ mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensCount = mutable.ListBuffer[Long]()\n\
    \        val oddsCount = mutable.ListBuffer[Long]()\n        val evensCount2 =\
    \ mutable.ListBuffer[Long]()\n        val oddsCount2 = mutable.ListBuffer[Long]()\n\
    \        val evensCount3 = mutable.ListBuffer[Long]()\n        val oddsCount3\
    \ = mutable.ListBuffer[Long]()\n        val evensCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount4 = mutable.ListBuffer[Long]()\n        val evensCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount5 = mutable.ListBuffer[Long]()\n\
    \        val evensCount6 = mutable.ListBuffer[Long]()\n        val oddsCount6\
    \ = mutable.ListBuffer[Long]()\n        val evensCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount7 = mutable.ListBuffer[Long]()\n        val evensCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount8 = mutable.ListBuffer[Long]()\n\
    \        val evensCount9 = mutable.ListBuffer[Long]()\n        val oddsCount9\
    \ = mutable.ListBuffer[Long]()\n        val evensCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount10 = mutable.ListBuffer[Long]()\n        val evensCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount11 = mutable.ListBuffer[Long]()\n\
    \        val evensCount12 = mutable.ListBuffer[Long]()\n        val oddsCount12\
    \ = mutable.ListBuffer[Long]()\n        val evensCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount13 = mutable.ListBuffer[Long]()\n        val evensCount14\
    \ = mutable.ListBuffer[Long]()\n        val oddsCount14 = mutable.ListBuffer[Long]()\n\
    \        val evensCount15 = mutable.ListBuffer[Long]()\n        val oddsCount15\
    \ = mutable.ListBuffer[Long]()\n        val evensCount16 = mutable.ListBuffer[Long]()\n\
    \        val oddsCount16 = mutable.ListBuffer[Long]()\n", "        val evens =\
    \ mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val nums\
    \ = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n        val odd\
    \ = mutable.Set[Long]()\n        val range = scala.collection.mutable.Range(x,\
    \ y)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n\
    \        range.foreach(x => if (x % 2 == 0) nums += x; else nums += x)\n     \
    \   range.foreach(x => if (x % 2 == 0) even += x; else odd += x)\n        val\
    \ evenNums = evens.toSet\n        val oddNums = odds.toSet\n        val numNums\
    \ = nums.toSet\n        val evenNumNums = evenNums.toSet\n        val oddNumNums\
    \ = oddNums.toSet\n        val numNumNums = numNums.toSet\n        val evenNumNumNums\
    \ = evenNumNums.toSet\n        val oddNumNumNums = oddNumNums.toSet\n        val\
    \ numNumNumNums = numNumNums.toSet\n        val evenNumNumNumNums = evenNumNumNums.toSet\n\
    \        val oddNumNumNumNums = oddNumNumNums.toSet\n        val numNumNumNumNums\
    \ = numNumNumNums.toSet\n        val evenNumNumNumNumNums = evenNumNumNumNums.toSet\n\
    \        val oddNumNumNumNumNums = oddNumNumNumNums.toSet\n        val numNumNumNumNumNums\
    \ = numNumNumNumNums.toSet\n        val evenNumNumNumNumNumNums = evenNumNumNumNumNums.toSet\n\
    \        val oddNumNumNumNumNumNums = oddNumNumNumNumNums.toSet\n        val numNumNumNumNumNumNums\
    \ = numNumNumNumNumNums.toSet\n        val evenNumNumNumNumNumNumNums = evenNumNumNumNumNumNums.toSet\n\
    \        val oddNumNumNumNumNumNumNums = oddNumNumNumNumNumNums.toSet\n      \
    \  val numNumNumNumNumNumNumNums = numNumNumNumNumNumNums.toSet\n        val evenNumNumNumNumNumNumNums\
    \ = evenNumNumNumNumNumNumNums.toSet\n        val oddNumNumNumNumNumNumNumNums\
    \ = oddNumNumNumNumNumNumNums.to", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return odd\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        for(i <- x until y){\n\
    \            if(i%2 == 0){\n                evens += i\n            }else{\n \
    \               odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if(even > odd){\n            return even\n\
    \        }else{\n            return odd\n        }", "        var evenNum : Long\
    \ = 0\n        var oddNum : Long = 0\n        var num : Long = 0\n        var\
    \ evenNumFound : Boolean = false\n        var oddNumFound : Boolean = false\n\
    \        var numFound : Boolean = false\n        while(x < y) {\n            num\
    \ = x\n            evenNumFound = false\n            oddNumFound = false\n   \
    \         numFound = false\n            while(num != 0) {\n                if(num\
    \ % 2 == 0) {\n                    if(evenNumFound == false) {\n             \
    \           evenNum = num\n                        evenNumFound = true\n     \
    \               }\n                } else {\n                    if(oddNumFound\
    \ == false) {\n                        oddNum = num\n                        oddNumFound\
    \ = true\n                    }\n                }\n                num = num\
    \ / 2\n            }\n            if(evenNumFound == true) {\n               \
    \ if(oddNumFound == true) {\n                    if(evenNum == oddNum) {\n   \
    \                     numFound = true\n                    }\n               \
    \ } else {\n                    if(evenNum == evenNum) {\n                   \
    \     numFound = true\n                    }\n                }\n            }\n\
    \            if(numFound == true) {\n                return evenNum\n        \
    \    }\n            x = x + 1\n        }\n        return -1", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        for(i <- x until y) {\n            if(i%2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if(even\
    \ < odd) {\n            return even\n        } else {\n            return odd\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = (x to y)\n        for (i <-\
    \ range) {\n            if (i % 2 == 0) {\n                evens += i\n      \
    \      } else {\n                odds += i\n            }\n        }\n       \
    \ val even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n\
    \            return even\n        } else {\n            return odd\n        }",
  "        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val even = mutable.ArrayBuffer.empty[Long]\n        val odd = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            } else {\n                odds += i\n            }\n\
    \        }\n        even.clear()\n        odd.clear()\n        even.clear()\n\
    \        odd.clear()\n        for (i <- evens ++ odds) {\n            if (i %\
    \ 2 == 0) {\n                even += i\n            } else {\n               \
    \ odd += i\n            }\n        }\n        even.clear()\n        odd.clear()\n\
    \        even.clear()\n        odd.clear()\n        for (i <- even ++ odd) {\n\
    \            if (i % 2 == 0) {\n                even += i\n            } else\
    \ {\n                odd += i\n            }\n        }\n        even.clear()\n\
    \        odd.clear()\n        even.clear()\n        odd.clear()\n        for (i\
    \ <- even ++ odd) {\n            if (i % 2 == 0) {\n                even += i\n\
    \            } else {\n                odd += i\n            }\n        }\n  \
    \      even.clear()\n        odd.clear()\n        even.clear()\n        odd.clear()\n\
    \        for (i <- even ++ odd) {\n            if (i % 2 == 0) {\n           \
    \     even += i\n            } else {\n                odd += i\n            }\n\
    \        }\n        even.clear()\n        odd.clear()\n        even.clear()\n\
    \        odd.clear()\n        for (i <- even ++ odd) {\n            if (i % 2\
    \ == 0) {\n                even += i\n            } else {\n                odd\
    \ += i\n            }\n        }\n        even.clear()\n        odd.clear()\n\
    \        even.clear()\n        odd.clear()\n        for (i <- even ++ odd) {\n\
    \            if (i % 2 == 0) {\n                even += i\n            } else\
    \ {\n                odd += i\n            }\n        }\n        even.clear()\n\
    \        odd.clear()\n        even.clear()\n        odd.clear()\n        for (i\
    \ <- even ++ odd) {\n            if (i % 2 == 0) {\n                even += i\n\
    \            } else {\n                odd += i\n            }\n        }\n  \
    \      even.clear()\n        odd.clear()\n        even.clear()\n        odd.clear()\n\
    \        for (i <- even ++ odd) {\n            if (i % 2 == 0) {\n           \
    \     even += i\n            } else {\n                odd += i\n            }\n\
    \        }\n        even.clear()\n        odd.clear()\n        even.clear()\n\
    \        odd.clear()\n        for (i <- even ++ odd) {\n            if (i % 2\
    \ == 0) {\n                even += i\n            } else {", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val range = scala.collection.mutable.Range(x,\
    \ y)\n        range.foreach(x => if (x % 2 == 0) evens += x else odds += x)\n\
    \        evens.foreach(x => if (x % 2 == 0) even += x else odd += x)\n       \
    \ evens.foreach(x => if (x % 2 == 0) nums += x else nums += x)\n        odds.foreach(x\
    \ => if (x % 2 == 1) nums += x else nums += x)\n        val maxNum = nums.max\n\
    \        if (maxNum > x) -1 else maxNum", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val range = scala.collection.mutable.Range(x,\
    \ y)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n\
    \        evens.foreach(x => if (x % 2 == 0) even += x; else odd += x)\n      \
    \  val evens = even.toList\n        val odds = odd.toList\n        val even =\
    \ evens.max\n        val odd = odds.max\n        if (even > odd) even else odd",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val evenNum = mutable.ListBuffer[Long]()\n        val oddNum = mutable.ListBuffer[Long]()\n\
    \        val numNum = mutable.ListBuffer[Long]()\n        val evenNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNum = mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val minX = math.min(x, y)\n        val maxX = math.max(x, y)\n      \
    \  val minY = math.min(y, x)\n        val maxY = math.max(y, x)\n        val even\
    \ = minX / 2\n        val odd = maxX / 2\n        val num = (minY + maxY) / 2\n\
    \        val evenNum = minX / 2\n        val oddNum = maxX / 2\n        val evenNums\
    \ = mutable.ListBuffer[Long]()\n        val oddNums = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val minX = math.min(x,\
    \ y)\n        val maxX = math.max(x, y)\n        val minY = math.min(y, x)\n \
    \       val maxY = math.max(y, x)\n        val even = minX / 2\n        val odd\
    \ = maxX / 2\n        val num = (minY + maxY) / 2\n        val evenNum = minX\
    \ / 2\n        val oddNum = maxX / 2\n        val evenNums = mutable.ListBuffer[Long]()\n\
    \        val oddNums = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val minX = math.min(x, y)\n        val maxX = math.max(x, y)\n      \
    \  val minY = math.min(y, x)\n        val maxY = math.max(y, x)\n        val even\
    \ = minX / 2\n        val odd = maxX / 2\n        val num = (minY + maxY) / 2\n\
    \        val evenNum = minX / 2\n        val oddNum = maxX / 2\n        val evenNums\
    \ = mutable.ListBuffer[Long]()\n        val oddNums = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val minX = math.min(x,\
    \ y)\n        val maxX = math.max(x, y)\n        val minY = math.min(y, x)\n \
    \       val maxY = math.max(y, x)\n        val even = minX / 2\n        val odd\
    \ = maxX / 2\n        val num = (minY + maxY) / 2\n        val evenNum = minX\
    \ / 2\n        val oddNum = maxX / 2\n        val evenNums = mutable.ListBuffer[Long]()\n\
    \        val oddNum", "        val evens = mutable.ListBuffer[Long]()\n      \
    \  for(i <- 1 to y by 2){\n            val num = i * i\n            if(num % 2\
    \ == 0){\n                evens += num\n            }\n        }\n        evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evensAndOdds = mutable.ListBuffer[Long]()\n        val evensAndOddsCount\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount2 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount3 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount4\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount5 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount6 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount7\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount8 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount9 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount10\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount11 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount12 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount13\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount14 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount15 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount16\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount17 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount18 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount19\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount20 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount21 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount22\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount23 = mutable.ListBuffer[Long]()\n\
    \        val evensAndOddsCount24 = mutable.ListBuffer[Long]()\n        val evensAndOddsCount25\
    \ = mutable.ListBuffer[Long]()\n        val evensAndOddsCount", "        var num\
    \ : Long = 0\n        var evenNum : Long = 0\n        var oddNum : Long = 0\n\
    \        var evenNumFound : Boolean = false\n        var oddNumFound : Boolean\
    \ = false\n        while (x <= y) {\n            if (x % 2 == 0) {\n         \
    \       evenNum = evenNum + x\n                evenNumFound = true\n         \
    \   } else {\n                oddNum = oddNum + x\n                oddNumFound\
    \ = true\n            }\n            x = x + 1\n        }\n        if (evenNumFound\
    \ == true && oddNumFound == true) {\n            num = evenNum\n        } else\
    \ if (evenNumFound == true && oddNumFound == false) {\n            num = oddNum\n\
    \        } else if (evenNumFound == false && oddNumFound == true) {\n        \
    \    num = evenNum\n        } else {\n            num = -1\n        }\n      \
    \  return num", "        if (x < 0 || y < 0 || x > y) -1\n        else {\n   \
    \         var even = 0\n            var odd = 0\n            var max = 0\n   \
    \         while (even < x && odd < y) {\n                if (even % 2 == 0 &&\
    \ odd % 2 == 0) {\n                    max = even\n                    even =\
    \ even + 1\n                }\n                else {\n                    max\
    \ = odd\n                    odd = odd + 1\n                }\n            }\n\
    \            if (even < x) max = even\n            if (odd < y) max = odd\n  \
    \          max\n        }", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        val even = mutable.ArrayBuffer.empty[Long]\n        val odd = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsEven = mutable.ArrayBuffer.empty[Long]\n        val numsOdd =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenEven = mutable.ArrayBuffer.empty[Long]\n        val oddOdd =\
    \ mutable.ArrayBuffer.empty[Long]\n        val numsEvenOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsOddEven = mutable.ArrayBuffer.empty[Long]\n        val numsEvenOddEven\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsOddOddEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsEvenOddOddEven = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numsOddEvenOddEven = mutable.ArrayBuffer.empty[Long]\n        val numsEvenOddOddOddEven\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsOddEvenOddOddEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsEvenOddOddOddOddEven = mutable.ArrayBuffer.empty[Long]\n    \
    \    val numsOddEvenOddOddOddOddEven = mutable.ArrayBuffer.empty[Long]\n     \
    \   val numsEvenOddOddOddOddOddEven = mutable.ArrayBuffer.empty[Long]\n      \
    \  val numsOddEvenOddOddOddOddOddEven = mutable.ArrayBuffer.empty[Long]\n    \
    \    val numsEvenOddOddOddOddOddOddOddEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsOddEvenOddOddOddOddOddOddEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsEvenOddOddOddOddOddOddOddOddEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsOddEvenOddOddOddOddOddOddOdd", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = mutable.Range(x, y)\n        range.foreach(x => if (x % 2\
    \ == 0) evens += x; else odds += x)\n        evens.foreach(x => if (x % 2 == 0)\
    \ even += x; else odd += x)\n        even.foreach(x => if (x % 2 == 0) nums +=\
    \ x; else nums += x)\n        odd.foreach(x => if (x % 2 == 0) nums += x; else\
    \ nums += x)\n        val evenNum = nums.max\n        val oddNum = nums.min\n\
    \        if (evenNum == evenNum && oddNum == oddNum) evenNum else -1", "     \
    \   val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val evenOdd = mutable.ListBuffer[Long]()\n        val evenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n     \
    \   val evenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n      \
    \  val evenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n    \
    \    val evenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEven", "        var max = 0\n        var min = 0\n\
    \        while(min < y){\n            max = min + x\n            while(max < y){\n\
    \                if(max % 2 == 0){\n                    max = max + 1\n      \
    \          }\n                else{\n                    max = max + 1\n     \
    \           }\n            }\n            min = max\n        }\n        if(max\
    \ < y){\n            return -1\n        }\n        else{\n            return max\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = 0L\n        val even = 0L\n        val odd = 0L\n        val\
    \ nums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val num = 0L\n       \
    \ val even = 0L\n        val odd = 0L\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val num = 0L\n        val even = 0L\n        val odd = 0L\n        val\
    \ nums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val num = 0L\n       \
    \ val even = 0L\n        val odd = 0L\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val num = 0L\n        val even = 0L\n        val odd = 0L\n        val\
    \ nums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val num = 0L\n       \
    \ val even = 0L\n        val odd = 0L\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val num = 0L\n        val even = 0L\n        val odd = 0L\n        val\
    \ nums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val num = 0L\n       \
    \ val even = 0L\n        val odd = 0L\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = ", "     \
    \   val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val evenNum = mutable.ListBuffer[Long]()\n        val oddNum = mutable.ListBuffer[Long]()\n\
    \        val numNum = mutable.ListBuffer[Long]()\n        val evenNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNum = mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        range.foreach(x => {\n            if (x % 2 == 0) {\n               \
    \ evens += x\n            } else {\n                odds += x\n            }\n\
    \        })\n        val even = evens.max\n        val odd = odds.max\n      \
    \  if (even > odd) {\n            return even\n        } else {\n            return\
    \ odd\n        }", "        val evens = mutable.ArrayBuffer.empty[Long]\n    \
    \    for(i <- x until y) {\n            if(i % 2 == 0) {\n                evens\
    \ += i\n            }\n        }\n        evens.max", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n   \
    \     for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        if (evens.isEmpty) {\n            return -1\n        } else {\n\
    \            val maxEven = evens.max\n            if (odds contains maxEven) {\n\
    \                return maxEven\n            } else {\n                return\
    \ -1\n            }\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return odd\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val even = x % 2 == 0\n        val odd\
    \ = y % 2 == 0\n        val evenInRange = x % y != 0\n        val oddInRange =\
    \ y % x != 0\n        \n        if (evenInRange) {\n            evens += x\n \
    \       }\n        if (oddInRange) {\n            odds += y\n        }\n     \
    \   if (even) {\n            evens += y\n        }\n        if (odd) {\n     \
    \       odds += x\n        }\n        \n        val evenMax = evens.max\n    \
    \    val oddMax = odds.max\n        \n        if (evenMax > oddMax) {\n      \
    \      return evenMax\n        } else {\n            return oddMax\n        }",
  "        val evens = for (i <- x until y) yield {\n            if (i % 2 == 0) i\
    \ else -1\n        }\n        evens.max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val numsEven = mutable.ListBuffer[Long]()\n        val numsOdd = mutable.ListBuffer[Long]()\n\
    \        val numsNums = mutable.ListBuffer[Long]()\n        val numsEvenNums =\
    \ mutable.ListBuffer[Long]()\n        val numsOddNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNums = mutable.ListBuffer[Long]()\n        val numsEvenNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val numsOddNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNumsNums = mutable.ListBuffer[Long]()\n        val numsEvenNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val numsOddNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val numsEvenNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val numsOddNumsNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val\
    \ numsEvenNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n        val numsOddNumsNumsNumsNumsNums\
    \ = mutable.ListBuffer[Long]()\n        val numsNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n\
    \        val numsEvenNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n \
    \       val numsOddNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n   \
    \     val numsNumsNumsNumsNumsNumsNumsNums = mutable.ListBuffer[Long]()\n    \
    \    val numsEvenNumsNumsNums", "        var evenNum = 0\n        var oddNum =\
    \ 0\n        var evenMax = 0\n        var oddMax = 0\n        var evenMin = 0\n\
    \        var oddMin = 0\n        var evenMaxIndex = 0\n        var oddMaxIndex\
    \ = 0\n        var evenMinIndex = 0\n        var oddMinIndex = 0\n        var\
    \ evenMaxIndex2 = 0\n        var oddMaxIndex2 = 0\n        var evenMinIndex2 =\
    \ 0\n        var oddMinIndex2 = 0\n        var evenMaxIndex3 = 0\n        var\
    \ oddMaxIndex3 = 0\n        var evenMinIndex3 = 0\n        var oddMinIndex3 =\
    \ 0\n        var evenMaxIndex4 = 0\n        var oddMaxIndex4 = 0\n        var\
    \ evenMinIndex4 = 0\n        var oddMinIndex4 = 0\n        var evenMaxIndex5 =\
    \ 0\n        var oddMaxIndex5 = 0\n        var evenMinIndex5 = 0\n        var\
    \ oddMinIndex5 = 0\n        var evenMaxIndex6 = 0\n        var oddMaxIndex6 =\
    \ 0\n        var evenMinIndex6 = 0\n        var oddMinIndex6 = 0\n        var\
    \ evenMaxIndex7 = 0\n        var oddMaxIndex7 = 0\n        var evenMinIndex7 =\
    \ 0\n        var oddMinIndex7 = 0\n        var evenMaxIndex8 = 0\n        var\
    \ oddMaxIndex8 = 0\n        var evenMinIndex8 = 0\n        var oddMinIndex8 =\
    \ 0\n        var evenMaxIndex9 = 0\n        var oddMaxIndex9 = 0\n        var\
    \ evenMinIndex9 = 0\n        var oddMinIndex9 = 0\n        var evenMaxIndex10\
    \ = 0\n        var oddMaxIndex10 = 0\n        var evenMinIndex10 = 0\n       \
    \ var oddMinIndex10 = 0\n        var evenMaxIndex11 = 0\n        var oddMaxIndex11\
    \ = 0\n        var evenMinIndex11 = 0\n        var oddMinIndex11 = 0\n       \
    \ var evenMaxIndex12 = 0\n        var oddMaxIndex12 = 0\n        var evenMinIndex12\
    \ = 0\n        var oddMinIndex12 = 0\n        var evenMaxIndex13 = 0\n       \
    \ var oddMaxIndex13 = 0\n        var evenMinIndex13 = 0\n        var oddMinIndex13\
    \ = 0\n        var evenMaxIndex14 = 0\n        var oddMaxIndex14 = 0\n       \
    \ var evenMinIndex14 = 0\n        var oddMinIndex14 = 0\n        var evenMaxIndex15\
    \ = 0\n        var oddMaxIndex15 = 0\n        var evenMinIndex15 = 0\n       \
    \ var oddMinIndex15 = 0\n        var evenMaxIndex16 = 0\n        var oddMaxIndex16\
    \ = 0\n        var evenMinIndex16 = 0\n        var oddMinIndex16 = 0\n       \
    \ var evenMaxIndex17 = 0\n        var oddMaxIndex17 = 0\n        var evenMinIndex17\
    \ = 0\n        var oddMinIndex17 = 0\n        var evenMaxIndex18 = 0\n       \
    \ var oddMax", "        val evens = for (i <- 1 to y) yield {\n            if\
    \ (i % 2 == 0) i\n            else -1\n        }\n        val evensSum = evens.sum\n\
    \        if (evensSum > x) evensSum\n        else if (evensSum < y) evensSum\n\
    \        else -1", "        val evens = mutable.ListBuffer[Long]()\n        val\
    \ odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n       \
    \ for (i <- range) {\n            if (i % 2 == 0) {\n                evens +=\
    \ i\n            } else {\n                odds += i\n            }\n        }\n\
    \        val even = evens.max\n        val odd = odds.max\n        if (even >\
    \ odd) {\n            return even\n        } else {\n            return odd\n\
    \        }", "        val evens = x to y by 2\n        val evensCount = evens.count(_\
    \ % 2 == 0)\n        if (evensCount == 0) {\n            return -1\n        }\n\
    \        val maxEven = evens.max\n        if (maxEven % 2 == 0) {\n          \
    \  return maxEven\n        }\n        val maxEven2 = maxEven / 2\n        if (maxEven2\
    \ % 2 == 0) {\n            return maxEven2\n        }\n        val maxEven3 =\
    \ maxEven2 / 2\n        if (maxEven3 % 2 == 0) {\n            return maxEven3\n\
    \        }\n        val maxEven4 = maxEven3 / 2\n        if (maxEven4 % 2 == 0)\
    \ {\n            return maxEven4\n        }\n        val maxEven5 = maxEven4 /\
    \ 2\n        if (maxEven5 % 2 == 0) {\n            return maxEven5\n        }\n\
    \        val maxEven6 = maxEven5 / 2\n        if (maxEven6 % 2 == 0) {\n     \
    \       return maxEven6\n        }\n        val maxEven7 = maxEven6 / 2\n    \
    \    if (maxEven7 % 2 == 0) {\n            return maxEven7\n        }\n      \
    \  val maxEven8 = maxEven7 / 2\n        if (maxEven8 % 2 == 0) {\n           \
    \ return maxEven8\n        }\n        val maxEven9 = maxEven8 / 2\n        if\
    \ (maxEven9 % 2 == 0) {\n            return maxEven9\n        }\n        val maxEven10\
    \ = maxEven9 / 2\n        if (maxEven10 % 2 == 0) {\n            return maxEven10\n\
    \        }\n        val maxEven11 = maxEven10 / 2\n        if (maxEven11 % 2 ==\
    \ 0) {\n            return maxEven11\n        }\n        val maxEven12 = maxEven11\
    \ / 2\n        if (maxEven12 % 2 == 0) {\n            return maxEven12\n     \
    \   }\n        val maxEven13 = maxEven12 / 2\n        if (maxEven13 % 2 == 0)\
    \ {\n            return maxEven13\n        }\n        val maxEven14 = maxEven13\
    \ / 2\n        if (maxEven14 % 2 == 0) {\n            return maxEven14\n     \
    \   }\n        val maxEven15 = maxEven14 / 2\n        if (maxEven15 % 2 == 0)\
    \ {\n            return maxEven15\n        }\n        val maxEven16 = maxEven15\
    \ / 2\n        if (maxEven16 % 2 == 0) {\n            return maxEven16\n     \
    \   }\n        val maxEven17 = maxEven16 / 2\n        if (maxEven17 % 2 == 0)\
    \ {\n            return maxEven17\n        }\n        val maxEven18 = maxEven17\
    \ / 2\n        if (maxEven18 % 2 == 0) {\n            return maxEven18\n     \
    \   }\n        val maxEven19 = maxEven18", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for (i <- x until y) {\n            if (i % 2 == 0) {\n             \
    \   evens += i\n            }\n        }\n        if (evens.isEmpty) {\n     \
    \       return -1\n        }\n        evens.max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val range = scala.collection.mutable.Range(x, y)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odds += x)\n        range.foreach(x => if\
    \ (x % 2 == 0) evens += x; else odds += x)\n        range.foreach(x => if (x %\
    \ 2 == 0) evens += x; else odds += x)\n        range.foreach(x => if (x % 2 ==\
    \ 0) evens += x; else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x;\
    \ else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else\
    \ odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds\
    \ += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odds += x)\n        range.foreach(x => if\
    \ (x % 2 == 0) evens += x; else odds += x)\n        range.foreach(x => if (x %\
    \ 2 == 0) evens += x; else odds += x)\n        range.foreach(x => if (x % 2 ==\
    \ 0) evens += x; else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x;\
    \ else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else\
    \ odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds\
    \ += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    range.foreach(x => if (x % 2 == 0) evens += x; else ", "        if (x < 0\
    \ || y < 0 || x > y) -1\n        else x % 2 == 0 && y % 2 == 0 ? x : -1", "  \
    \      val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = mutable.ListBuffer[Long]()\n\
    \        val evenNum = mutable.ListBuffer[Long]()\n        val oddNum = mutable.ListBuffer[Long]()\n\
    \        val numNum = mutable.ListBuffer[Long]()\n        val evenNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNum = mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        var maxNum = math.max(x,\
    \ y)\n        var minNum = math.min(x, y)\n        var evenNum = math.max(minNum,\
    \ maxNum)\n        var evenNum2 = math.min(minNum, maxNum)\n        var evenNum3\
    \ = math.max(minNum, maxNum)\n        var evenNum4 = math.min(minNum, maxNum)\n\
    \        var evenNum5 = math.max(minNum, maxNum)\n        var evenNum6 = math.min(minNum,\
    \ maxNum)\n        var evenNum7 = math.max(minNum, maxNum)\n        var evenNum8\
    \ = math.min(minNum, maxNum)\n        var evenNum9 = math.max(minNum, maxNum)\n\
    \        var evenNum10 = math.min(minNum, maxNum)\n        var evenNum11 = math.max(minNum,\
    \ maxNum)\n        var evenNum12 = math.min(minNum, maxNum)\n        var evenNum13\
    \ = math.max(minNum, maxNum)\n        var evenNum14 = math.min(minNum, maxNum)\n\
    \        var evenNum15 = math.max(minNum, maxNum)\n        var evenNum16 = math.min(minNum,\
    \ maxNum)\n        var evenNum17 = math.max(minNum, maxNum)\n        var evenNum18\
    \ = math.min(minNum, maxNum)\n        var evenNum19 = math.max(minNum, maxNum)\n\
    \        var evenNum20 = math.min(minNum, maxNum)\n        var evenNum21 = math.max(minNum,\
    \ maxNum)\n        var evenNum22 = math.min(minNum, maxNum)\n        var evenNum23\
    \ = math.max(minNum, maxNum)\n        var evenNum24 = math.min(minNum, maxNum)\n\
    \        var evenNum25 = math.max(minNum, maxNum)\n        var evenNum26 = math.min(minNum,\
    \ maxNum)\n        var evenNum27 = math.max(minNum, maxNum)\n        var evenNum28\
    \ = math.min(minNum, maxNum)\n        var evenNum29 = math.max(minNum, maxNum)\n\
    \        var evenNum30 = math.min(minNum, maxNum)\n        var evenNum31 = math.max(minNum,\
    \ maxNum)\n        var evenNum32 = math.min(minNum, maxNum)\n        var evenNum33\
    \ = math.max(minNum, maxNum)\n        var evenNum34 = math.min(minNum, maxNum)\n\
    \        var evenNum35 = math.max(minNum, maxNum)\n        var evenNum36 = math.min(minNum,\
    \ maxNum)\n        var evenNum37", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = mutable.ListBuffer[Long]()\n        val evenNum = mutable.ListBuffer[Long]()\n\
    \        val oddNum = mutable.ListBuffer[Long]()\n        val numNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNum = mutable.ListBuffer[Long]()\n        val oddNumNum =\
    \ mutable.ListBuffer[Long]()\n        val numNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val evenNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ oddNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val numNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val oddNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val evenNumNumNumNumNumNumNumNum\
    \ = mutable.ListBuffer[Long]()\n        val oddNumNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n\
    \        val numNumNumNumNumNumNumNum = mutable.ListBuffer[Long]()\n        val\
    \ evenNumNumNumNumNumNumNumNum = mutable.ListBuffer", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        val even = mutable.ArrayBuffer.empty[Long]\n        val odd = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenNum = mutable.ArrayBuffer.empty[Long]\n        val oddNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n        val evenNumNumNumNum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddNumNumNumNum = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsNumNumNumNum = mutable.ArrayBuffer.empty[", "        val even\
    \ = x % 2 == 0\n        val evenInRange = if (even && y > x) y else x\n      \
    \  val evenInRange2 = if (even && x > y) x else y\n        val evenInRange3 =\
    \ if (even && x > y) x else y\n        val evenInRange4 = if (even && x > y) x\
    \ else y\n        val evenInRange5 = if (even && x > y) x else y\n        val\
    \ evenInRange6 = if (even && x > y) x else y\n        val evenInRange7 = if (even\
    \ && x > y) x else y\n        val evenInRange8 = if (even && x > y) x else y\n\
    \        val evenInRange9 = if (even && x > y) x else y\n        val evenInRange10\
    \ = if (even && x > y) x else y\n        val evenInRange11 = if (even && x > y)\
    \ x else y\n        val evenInRange12 = if (even && x > y) x else y\n        val\
    \ evenInRange13 = if (even && x > y) x else y\n        val evenInRange14 = if\
    \ (even && x > y) x else y\n        val evenInRange15 = if (even && x > y) x else\
    \ y\n        val evenInRange16 = if (even && x > y) x else y\n        val evenInRange17\
    \ = if (even && x > y) x else y\n        val evenInRange18 = if (even && x > y)\
    \ x else y\n        val evenInRange19 = if (even && x > y) x else y\n        val\
    \ evenInRange20 = if (even && x > y) x else y\n        val evenInRange21 = if\
    \ (even && x > y) x else y\n        val evenInRange22 = if (even && x > y) x else\
    \ y\n        val evenInRange23 = if (even && x > y) x else y\n        val evenInRange24\
    \ = if (even && x > y) x else y\n        val evenInRange25 = if (even && x > y)\
    \ x else y\n        val evenInRange26 = if (even && x > y) x else y\n        val\
    \ evenInRange27 = if (even && x > y) x else y\n        val evenInRange28 = if\
    \ (even && x > y) x else y\n        val evenInRange29 = if (even && x > y) x else\
    \ y\n        val evenInRange30 = if (even && x > y) x else y\n        val evenInRange31\
    \ = if (even && x > y) x else y\n        val evenInRange32 = if (even && x > y)\
    \ x else y\n        val ", "        if (x >= y) -1\n        else x + (y - (x %\
    \ y))", "        val evens = mutable.ListBuffer[Long]()\n        for (i <- x until\
    \ y) {\n            if (i % 2 == 0) {\n                evens += i\n          \
    \  }\n        }\n        evens.max", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val evenNum = mutable.Set[Long]()\n\
    \        val oddNum = mutable.Set[Long]()\n        val evenNums = mutable.Set[Long]()\n\
    \        val oddNums = mutable.Set[Long]()\n        val evenNumsSet = mutable.Set[Long]()\n\
    \        val oddNumsSet = mutable.Set[Long]()\n        val evenNumsSet2 = mutable.Set[Long]()\n\
    \        val oddNumsSet2 = mutable.Set[Long]()\n        val evenNumsSet3 = mutable.Set[Long]()\n\
    \        val oddNumsSet3 = mutable.Set[Long]()\n        val evenNumsSet4 = mutable.Set[Long]()\n\
    \        val oddNumsSet4 = mutable.Set[Long]()\n        val evenNumsSet5 = mutable.Set[Long]()\n\
    \        val oddNumsSet5 = mutable.Set[Long]()\n        val evenNumsSet6 = mutable.Set[Long]()\n\
    \        val oddNumsSet6 = mutable.Set[Long]()\n        val evenNumsSet7 = mutable.Set[Long]()\n\
    \        val oddNumsSet7 = mutable.Set[Long]()\n        val evenNumsSet8 = mutable.Set[Long]()\n\
    \        val oddNumsSet8 = mutable.Set[Long]()\n        val evenNumsSet9 = mutable.Set[Long]()\n\
    \        val oddNumsSet9 = mutable.Set[Long]()\n        val evenNumsSet10 = mutable.Set[Long]()\n\
    \        val oddNumsSet10 = mutable.Set[Long]()\n        val evenNumsSet11 = mutable.Set[Long]()\n\
    \        val oddNumsSet11 = mutable.Set[Long]()\n        val evenNumsSet12 = mutable.Set[Long]()\n\
    \        val oddNumsSet12 = mutable.Set[Long]()\n        val evenNumsSet13 = mutable.Set[Long]()\n\
    \        val oddNumsSet13 = mutable.Set[Long]()\n        val evenNumsSet14 = mutable.Set[Long]()\n\
    \        val oddNumsSet14 = mutable.Set[Long]()\n        val evenNumsSet15 = mutable.Set[",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val nums = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n\
    \        val odd = mutable.Set[Long]()\n        val num = 0\n        val even\
    \ = 0\n        val odd = 0\n        val nums = mutable.Set[Long]()\n        val\
    \ evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n      \
    \  val even = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n   \
    \     val num = 0\n        val even = 0\n        val odd = 0\n        val nums\
    \ = mutable.Set[Long]()\n        val evens = mutable.Set[Long]()\n        val\
    \ odds = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n       \
    \ val odd = mutable.Set[Long]()\n        val num = 0\n        val even = 0\n \
    \       val odd = 0\n        val nums = mutable.Set[Long]()\n        val evens\
    \ = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val even\
    \ = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n        val num\
    \ = 0\n        val even = 0\n        val odd = 0\n        val nums = mutable.Set[Long]()\n\
    \        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val even = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n\
    \        val num = 0\n        val even = 0\n        val odd = 0\n        val nums\
    \ = mutable.Set[Long]()\n        val evens = mutable.Set[Long]()\n        val\
    \ odds = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n       \
    \ val odd = mutable.Set[Long]()\n        val num = 0\n        val even = 0\n \
    \       val odd = 0\n        val nums = mutable.Set[Long]()\n        val evens\
    \ = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val even\
    \ = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n        val ",
  "        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val numsEven = mutable.ListBuffer[Long]()\n\
    \        val numsOdd = mutable.ListBuffer[Long]()\n        val numsBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothEven = mutable.ListBuffer[Long]()\n        val numsBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBothEven = mutable.ListBuffer[Long]()\n        val\
    \ numsBothBothBothBothOdd = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothEven = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBothBothOdd = mutable.ListBuffer[Long]()\n      \
    \  val numsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val\
    \ numsBothBothBothBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothBoth =\
    \ mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothBothBothEven\
    \ = mutable.ListBuffer[Long]", "        if (x >= y) {\n            -1\n      \
    \  } else if (x < y) {\n            val even = x % 2 == 0\n            val evenInRange\
    \ = if (even) x else y\n            val evenInRange2 = if (even) y else x\n  \
    \          val evenInRange3 = if (even) x else y\n            val evenInRange4\
    \ = if (even) y else x\n            val evenInRange5 = if (even) y else x\n  \
    \          val evenInRange6 = if (even) y else x\n            val evenInRange7\
    \ = if (even) y else x\n            val evenInRange8 = if (even) y else x\n  \
    \          val evenInRange9 = if (even) y else x\n            val evenInRange10\
    \ = if (even) y else x\n            val evenInRange11 = if (even) y else x\n \
    \           val evenInRange12 = if (even) y else x\n            val evenInRange13\
    \ = if (even) y else x\n            val evenInRange14 = if (even) y else x\n \
    \           val evenInRange15 = if (even) y else x\n            val evenInRange16\
    \ = if (even) y else x\n            val evenInRange17 = if (even) y else x\n \
    \           val evenInRange18 = if (even) y else x\n            val evenInRange19\
    \ = if (even) y else x\n            val evenInRange20 = if (even) y else x\n \
    \           val evenInRange21 = if (even) y else x\n            val evenInRange22\
    \ = if (even) y else x\n            val evenInRange23 = if (even) y else x\n \
    \           val evenInRange24 = if (even) y else x\n            val evenInRange25\
    \ = if (even) y else x\n            val evenInRange26 = if (even) y else x\n \
    \           val evenInRange27 = if (even) y else x\n            val evenInRange28\
    \ = if (even) y else x\n            val evenInRange29 = if (even) y else x\n \
    \           val evenInRange30 = if (even) y else x\n            val evenInRange31\
    \ = if (even) y else x\n            val evenInRange32 = if (even) y else x\n \
    \           val evenInRange33 = if (even) y else x\n            val evenInRange34\
    \ = if (even) y else x\n            val evenInRange35 = if (even) y else x\n \
    \           val evenInRange36 = if (even) y else x\n", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val evenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEven = mutable.ListBuffer[Long]()\n        val evenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val evenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val\
    \ evenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val nums = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n\
    \        val odd = mutable.Set[Long]()\n        val evenNum = mutable.Set[Long]()\n\
    \        val oddNum = mutable.Set[Long]()\n        val numsNum = mutable.Set[Long]()\n\
    \        val evenNumNum = mutable.Set[Long]()\n        val oddNumNum = mutable.Set[Long]()\n\
    \        val numsNumNum = mutable.Set[Long]()\n        val evenNumNumNum = mutable.Set[Long]()\n\
    \        val oddNumNumNum = mutable.Set[Long]()\n        val numsNumNumNum = mutable.Set[Long]()\n\
    \        val evenNumNumNumNum = mutable.Set[Long]()\n        val oddNumNumNumNum\
    \ = mutable.Set[Long]()\n        val numsNumNumNumNum = mutable.Set[Long]()\n\
    \        val evenNumNumNumNum = mutable.Set[Long]()\n        val oddNumNumNumNum\
    \ = mutable.Set[Long]()\n        val numsNumNumNumNum = mutable.Set[Long]()\n\
    \        val evenNumNumNumNum = mutable.Set[Long]()\n        val oddNumNumNumNum\
    \ = mutable.Set[Long]()\n        val numsNumNumNumNum = mutable.Set[Long]()\n\
    \        val evenNumNumNumNum = mutable.Set[Long]()\n        val oddNumNumNumNum\
    \ = mutable.Set[Long]()\n        val numsNumNumNumNum = mutable.Set[Long]()\n\
    \        val evenNumNumNumNum = mutable.Set[Long]()\n        val oddNumNumNumNum\
    \ = mutable.Set[Long]()\n        val numsNumNumNumNum = mutable.Set[Long]()\n\
    \        val evenNumNumNumNum = mutable.Set[Long]()\n        val oddNumNumNumNum\
    \ = mutable.Set[Long]()\n        val numsNumNumNumNum = mutable.Set[Long]()\n\
    \        val evenNumNumNumNum = mutable.Set[Long]()\n        val oddNumNumNumNum\
    \ = mutable.Set[Long", "        val evens = mutable.Set[Long]()\n        val odds\
    \ = mutable.Set[Long]()\n        val range = (x to y)\n        for (i <- range)\
    \ {\n            if (i % 2 == 0) {\n                evens += i\n            }\
    \ else {\n                odds += i\n            }\n        }\n        val even\
    \ = evens.max\n        val odd = odds.max\n        if (even > odd) {\n       \
    \     return even\n        } else {\n            return odd\n        }", "   \
    \     var evenNum = x + y\n        var oddNum = x - y\n        var evenMax = evenNum\n\
    \        var oddMax = oddNum\n        while(evenNum < x || oddNum < y) {\n   \
    \         if(evenNum % 2 == 0 && oddNum % 2 == 0) {\n                evenMax =\
    \ evenNum\n                oddMax = oddNum\n            }\n            else if(evenNum\
    \ % 2 != 0 && oddNum % 2 != 0) {\n                evenMax = evenNum\n        \
    \        oddMax = oddNum\n            }\n            else if(evenNum % 2 == 0\
    \ && oddNum % 2 != 0) {\n                evenMax = evenNum\n                oddMax\
    \ = oddNum\n            }\n            else if(evenNum % 2 != 0 && oddNum % 2\
    \ == 0) {\n                evenMax = evenNum\n                oddMax = oddNum\n\
    \            }\n            evenNum = evenNum + 2\n            oddNum = oddNum\
    \ - 2\n        }\n        if(evenMax == x && oddMax == y) {\n            return\
    \ evenMax\n        }\n        else if(evenMax == x || oddMax == y) {\n       \
    \     return -1\n        }\n        else if(evenMax == y) {\n            return\
    \ evenMax\n        }\n        else if(evenMax == x) {\n            return -1\n\
    \        }", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        for (i <- range) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n        }\n        if (evens.size == 0) {\n   \
    \         return -1\n        } else if (evens.size == 1) {\n            return\
    \ evens.head\n        } else {\n            val maxEven = evens.max\n        \
    \    val maxOdd = odds.max\n            if (maxEven < maxOdd) {\n            \
    \    return maxEven\n            } else {\n                return maxOdd\n   \
    \         }\n        }", "        val evens = x to y by 2\n        val evensSorted\
    \ = evens.toSeq.sortBy(_ % 2 == 0)\n        val evensSortedSize = evensSorted.length\n\
    \        val evensSortedLast = evensSorted.last\n        val evensSortedLastSize\
    \ = evensSortedLast.asInstanceOf[Int]\n        val evensSortedLastLast = evensSortedLast.last\n\
    \        val evensSortedLastLastSize = evensSortedLastLast.asInstanceOf[Int]\n\
    \        val evensSortedLastLastLast = evensSortedLastLast.last\n        val evensSortedLastLastLastSize\
    \ = evensSortedLastLastLast.asInstanceOf[Int]\n        val evensSortedLastLastLastLast\
    \ = evensSortedLastLastLastLast.last\n        val evensSortedLastLastLastLastSize\
    \ = evensSortedLastLastLastLast.asInstanceOf[Int]\n        val evensSortedLastLastLastLastLast\
    \ = evensSortedLastLastLastLastLast.last\n        val evensSortedLastLastLastLastLastSize\
    \ = evensSortedLastLastLastLastLast.asInstanceOf[Int]\n        val evensSortedLastLastLastLastLastLast\
    \ = evensSortedLastLastLastLastLastLast.last\n        val evensSortedLastLastLastLastLastLastSize\
    \ = evensSortedLastLastLastLastLastLast.asInstanceOf[Int]\n        val evensSortedLastLastLastLastLastLastLast\
    \ = evensSortedLastLastLastLastLastLastLastLast.last\n        val evensSortedLastLastLastLastLastLastLastSize\
    \ = evensSortedLastLastLastLastLastLastLastLast.asInstanceOf[Int]\n        val\
    \ evensSortedLastLastLastLastLastLastLastLast = evensSortedLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedLastLastLastLastLastLastLastSize = evensSortedLastLastLastLastLastLastLastLast.asInstanceOf[Int]\n\
    \        val evensSortedLastLastLastLastLastLastLastLast = evensSortedLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val evensSortedLastLastLastLastLastLastLastLastSize = evensSortedLastLastLastLastLastLastLastLastLast.asInstanceOf[Int]\n\
    \        val evensSortedLastLastLastLastLastLastLastLastLast = evensSortedLastLastLastLastLastLastLastLastLastLastLast.last\n\
    \        ", "        var maxEven = x // Initialize maxEven to x\n        var minEven\
    \ = y // Initialize minEven to y\n        val evens = mutable.ListBuffer[Long]()\n\
    \        while (maxEven < minEven) {\n            val even = math.max(maxEven,\
    \ minEven)\n            evens += even\n            maxEven = even + 2\n      \
    \      minEven = even - 2\n        }\n        if (evens.isEmpty) {\n         \
    \   return -1\n        }\n        evens.max", "        val evens = for (i <- 1\
    \ to y) yield {\n            if (x % i == 0) i\n        }\n        val maxEven\
    \ = evens.max\n        if (maxEven != 0) maxEven else -1", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        for(i <- x until y){\n            if(i%2 == 0){\n                evens\
    \ += i\n            }else{\n                odds += i\n            }\n       \
    \ }\n        val even = evens.max\n        val odd = odds.max\n        if(even\
    \ > odd){\n            return even\n        }else{\n            return odd\n \
    \       }", "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x)\n        range.foreach(x => if (x % 2 != 0) odds += x)\n        if (evens.size\
    \ == 0 || odds.size == 0) -1\n        else {\n            val maxEven = evens.max\n\
    \            val maxOdd = odds.max\n            if (maxEven < maxOdd) maxEven\n\
    \            else maxOdd\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = 0\n        val even = 0\n        val odd = 0\n        val nums\
    \ = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = 0\n        val\
    \ even = 0\n        val odd = 0\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = 0\n        val even = 0\n        val odd = 0\n        val nums\
    \ = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = 0\n        val\
    \ even = 0\n        val odd = 0\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val num = 0\n        val even = 0\n        val odd = 0\n        val nums\
    \ = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val odd = mutable.ListBuffer[Long]()\n        val num = 0\n        val\
    \ even = 0\n        val odd = 0\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.",
  "        val evens = mutable.ListBuffer[Long]()\n        for (i <- x until y) {\n\
    \            if (i % 2 == 0) {\n                evens += i\n            }\n  \
    \      }\n        evens.max", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val even = mutable.ArrayBuffer.empty[Long]\n\
    \        val odd = mutable.ArrayBuffer.empty[Long]\n        val evenInRange =\
    \ mutable.ArrayBuffer.empty[Long]\n        val oddInRange = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenInRange2 = mutable.ArrayBuffer.empty[Long]\n        val oddInRange2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenInRange3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddInRange3 = mutable.ArrayBuffer.empty[Long]\n        val evenInRange4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddInRange4 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenInRange5 = mutable.ArrayBuffer.empty[Long]\n        val oddInRange5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenInRange6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddInRange6 = mutable.ArrayBuffer.empty[Long]\n        val evenInRange7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddInRange7 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenInRange8 = mutable.ArrayBuffer.empty[Long]\n        val oddInRange8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenInRange9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddInRange9 = mutable.ArrayBuffer.empty[Long]\n        val evenInRange10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddInRange10 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenInRange11 = mutable.ArrayBuffer.empty[Long]\n        val oddInRange11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenInRange12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddInRange12 = mutable.ArrayBuffer.empty[Long]\n        val evenInRange13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddInRange13 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenInRange14 = mutable.ArrayBuffer.empty[Long]\n        val oddInRange14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenInRange15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddInRange15 = mutable.ArrayBuffer.empty[Long]\n        val evenIn",
  "        val evens = for (i <- 1 to y) yield {\n            if (i % 2 == 0) i\n\
    \        }\n        val evensSum = evens.sum\n        if (evensSum < x) -1\n \
    \       else if (evensSum > y) -1\n        else evens.max", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        for (i <- x until y) {\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            }\n        }\n     \
    \   if (evens.isEmpty) {\n            return -1\n        }\n        val max =\
    \ evens.max\n        if (evens.contains(max)) {\n            return max\n    \
    \    }\n        return -1", "        val evens = mutable.Set[Long]()\n       \
    \ val odds = mutable.Set[Long]()\n        val range = Range(x, y)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odds += x)\n        val even = evens.max\n\
    \        val odd = odds.max\n        if (even > odd) even else -1", "        val\
    \ even = x % 2 == 0\n        val evenInRange = if (even && x >= y) x else y\n\
    \        val evenInRange2 = if (even && x <= y) x else y\n        val evenInRange3\
    \ = if (even && x >= y) x else y\n        val evenInRange4 = if (even && x <=\
    \ y) x else y\n        val evenInRange5 = if (even && x >= y) x else y\n     \
    \   val evenInRange6 = if (even && x <= y) x else y\n        val evenInRange7\
    \ = if (even && x >= y) x else y\n        val evenInRange8 = if (even && x <=\
    \ y) x else y\n        val evenInRange9 = if (even && x >= y) x else y\n     \
    \   val evenInRange10 = if (even && x <= y) x else y\n        val evenInRange11\
    \ = if (even && x >= y) x else y\n        val evenInRange12 = if (even && x <=\
    \ y) x else y\n        val evenInRange13 = if (even && x >= y) x else y\n    \
    \    val evenInRange14 = if (even && x <= y) x else y\n        val evenInRange15\
    \ = if (even && x >= y) x else y\n        val evenInRange16 = if (even && x <=\
    \ y) x else y\n        val evenInRange17 = if (even && x >= y) x else y\n    \
    \    val evenInRange18 = if (even && x <= y) x else y\n        val evenInRange19\
    \ = if (even && x >= y) x else y\n        val evenInRange20 = if (even && x <=\
    \ y) x else y\n        val evenInRange21 = if (even && x >= y) x else y\n    \
    \    val evenInRange22 = if (even && x <= y) x else y\n        val evenInRange23\
    \ = if (even && x >= y) x else y\n        val evenInRange24 = if (even && x <=\
    \ y) x else y\n        val evenInRange25 = if (even && x >= y) x else y\n    \
    \    val evenInRange26 = if (even && x <= y) x else y\n        val evenInRange27\
    \ = if (even && x >= y) x else y\n        val evenInRange28 = if (even && x <=\
    \ y) x else y\n        val evenInRange29 = if (even && x >= y) x else y\n    \
    \    val evenInRange30 = if (even && x <= y) x else y\n        val evenInRange31\
    \ = if (even && x >= y) x else y\n        val evenInRange32 = if (even && x <=\
    \ y) x else y\n        val even", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n\
    \        for (i <- range) {\n            if (i % 2 == 0) {\n                evens\
    \ += i\n            } else {\n                odds += i\n            }\n     \
    \   }\n        val even = evens.max\n        val odd = odds.max\n        if (even\
    \ > odd) {\n            return even\n        } else {\n            return odd\n\
    \        }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        for(i <- x until y) {\n            if(i%2\
    \ == 0) {\n                evens += i\n            } else {\n                odds\
    \ += i\n            }\n        }\n        val even = evens.max\n        val odd\
    \ = odds.max\n        if(even > odd) {\n            return even\n        } else\
    \ {\n            return odd\n        }", "        val evens = x to y by 2\n  \
    \      val evensSorted = evens.toList\n        val evensSortedSorted: Seq[Int]\
    \ = evensSorted.sort\n        val evensSortedSortedSorted: Seq[Int] = evensSortedSorted.sort\n\
    \        val evensSortedSortedSortedSorted: Seq[Int] = evensSortedSortedSorted.sort\n\
    \        val evensSortedSortedSortedSortedSorted: Seq[Int] = evensSortedSortedSortedSorted.sort\n\
    \        val evensSortedSortedSortedSortedSortedSorted: Seq[Int] = evensSortedSortedSortedSortedSorted.sort\n\
    \        val evensSortedSortedSortedSortedSortedSortedSorted: Seq[Int] = evensSortedSortedSortedSortedSortedSorted.sort\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Int] =\
    \ evensSortedSortedSortedSortedSortedSortedSorted.sort\n        val evensSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSorted.sort\n    \
    \    val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Int]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort\n \
    \       val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Int] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort\n",
  "        var maxNum = math.max(x, y)\n        var evenNum = math.min(maxNum, math.max(x,\
    \ y))\n        var evenNum2 = math.min(maxNum, math.max(x - 1, y))\n        var\
    \ evenNum3 = math.min(maxNum, math.max(x - 1, y - 1))\n        var evenNum4 =\
    \ math.min(maxNum, math.max(x - 1, y - 2))\n        var evenNum5 = math.min(maxNum,\
    \ math.max(x - 1, y - 3))\n        var evenNum6 = math.min(maxNum, math.max(x\
    \ - 1, y - 4))\n        var evenNum7 = math.min(maxNum, math.max(x - 1, y - 5))\n\
    \        var evenNum8 = math.min(maxNum, math.max(x - 1, y - 6))\n        var\
    \ evenNum9 = math.min(maxNum, math.max(x - 1, y - 7))\n        var evenNum10 =\
    \ math.min(maxNum, math.max(x - 1, y - 8))\n        var evenNum11 = math.min(maxNum,\
    \ math.max(x - 1, y - 9))\n        var evenNum12 = math.min(maxNum, math.max(x\
    \ - 1, y - 10))\n        var evenNum13 = math.min(maxNum, math.max(x - 1, y -\
    \ 11))\n        var evenNum14 = math.min(maxNum, math.max(x - 1, y - 12))\n  \
    \      var evenNum15 = math.min(maxNum, math.max(x - 1, y - 13))\n        var\
    \ evenNum16 = math.min(maxNum, math.max(x - 1, y - 14))\n        var evenNum17\
    \ = math.min(maxNum, math.max(x - 1, y - 15))\n        var evenNum18 = math.min(maxNum,\
    \ math.max(x - 1, y - 16))\n        var evenNum19 = math.min(maxNum, math.max(x\
    \ - 1, y - 17))\n        var evenNum20 = math.min(maxNum, math.max(x - 1, y -\
    \ 18))\n        var evenNum21 = math.min(maxNum, math.max(x - 1, y - 19))\n  \
    \      var evenNum22 = math.min(maxNum, math.max(x - 1, y - 20))\n        var\
    \ evenNum23 = math.min(maxNum, math.max(x - 1, y - 21))\n        var evenNum24\
    \ = math.min(maxNum, math.max(x - 1, y - 22))\n        var evenNum25 = math.min(maxNum,\
    \ math.max(x - 1, y - 23))\n        var evenNum26 = math.min(maxNum, math.max(x\
    \ - 1, y - 24))\n        var evenNum27 = math.min(maxNum, math.max(x - 1, y -\
    \ 25))\n        var evenNum28 = math.min(maxNum, math.max(x - 1, y - 26))\n  \
    \      var evenNum29 = math.min(maxNum, math.max(x - 1, y - 27))\n        var\
    \ evenNum30 = math.min(maxNum, ", "        val evens = mutable.Set[Long]()\n \
    \       val odds = mutable.Set[Long]()\n        val nums = mutable.Set[Long]()\n\
    \        val even = mutable.Set[Long]()\n        val odd = mutable.Set[Long]()\n\
    \        val range = mutable.Range(x, y)\n        range.foreach(x => if (x % 2\
    \ == 0) evens += x; else odds += x)\n        range.foreach(x => if (x % 2 == 0)\
    \ evens += x; else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x;\
    \ else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else\
    \ odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds\
    \ += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odds += x)\n        range.foreach(x => if\
    \ (x % 2 == 0) evens += x; else odds += x)\n        range.foreach(x => if (x %\
    \ 2 == 0) evens += x; else odds += x)\n        range.foreach(x => if (x % 2 ==\
    \ 0) evens += x; else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x;\
    \ else odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else\
    \ odds += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds\
    \ += x)\n        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n\
    \        range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n    \
    \    range.foreach(x => if (x % 2 == 0) evens += x; else odds += x)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x; else odds += x)\n        range.foreach(x => if\
    \ (x % 2 == 0) evens += x; else odds += x)\n        range.foreach(", "       \
    \ var evenNum = x // Initialize to x\n        var oddNum = y // Initialize to\
    \ y\n        var evenMax = evenNum // Initialize to x\n        var oddMax = oddNum\
    \ // Initialize to y\n        var evenMin = evenNum // Initialize to x\n     \
    \   var oddMin = oddNum // Initialize to y\n        var evenMaxIndex = 0 // Initialize\
    \ to 0\n        var oddMaxIndex = 0 // Initialize to 0\n        var evenMinIndex\
    \ = 0 // Initialize to 0\n        var oddMinIndex = 0 // Initialize to 0\n   \
    \     var evenMaxCount = 0 // Initialize to 0\n        var oddMaxCount = 0 //\
    \ Initialize to 0\n        var evenMinCount = 0 // Initialize to 0\n        var\
    \ oddMinCount = 0 // Initialize to 0\n        var evenMaxCountIndex = 0 // Initialize\
    \ to 0\n        var oddMaxCountIndex = 0 // Initialize to 0\n        var evenMinCountIndex\
    \ = 0 // Initialize to 0\n        var oddMinCountIndex = 0 // Initialize to 0\n\
    \        while (evenNum <= oddNum) {\n            if (evenNum % 2 == 0) {\n  \
    \              if (evenNum > evenMax) {\n                    evenMax = evenNum\n\
    \                    evenMaxIndex = evenNum\n                    evenMaxCount\
    \ = 1\n                }\n                else {\n                    evenMaxCount\
    \ = evenMaxCount + 1\n                }\n            }\n            else {\n \
    \               if (evenNum > oddMax) {\n                    oddMax = evenNum\n\
    \                    oddMaxIndex = evenNum\n                    oddMaxCount =\
    \ 1\n                }\n                else {\n                    oddMaxCount\
    \ = oddMaxCount + 1\n                }\n            }\n            evenNum = evenNum\
    \ + 2\n            oddNum = oddNum + 2\n        }\n        while (evenNum <= oddNum)\
    \ {\n            if (evenNum % 2 == 0) {\n                if (evenNum < evenMin)\
    \ {\n                    evenMin = evenNum\n                    evenMinIndex =\
    \ evenNum\n                    evenMinCount = 1\n                }\n         \
    \       else {\n                    evenMinCount = evenMinCount + 1\n        \
    \        }\n            }\n            else {\n                if (evenNum < oddMin)\
    \ {\n                    oddMin = evenNum\n                    oddMinIndex = evenNum\n\
    \                    oddMinCount = 1\n                }\n                else\
    \ {\n                    oddMinCount = oddMinCount + 1\n                }\n  \
    \          }\n            evenNum = evenNum + 2\n            oddNum = oddNum +\
    \ 2\n        }\n        if (evenMaxCount > oddMaxCount) {\n            return\
    \ evenMaxIndex\n        }\n        else {\n            return oddMaxIndex\n  \
    \      }", "        val evens = mutable.ListBuffer[Long]()\n        val odds =\
    \ mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x)\n        range.foreach(x => if (x % 2 == 1) odds\
    \ += x)\n        val even = evens.max\n        val odd = odds.max\n        if\
    \ (even > odd) even else odd", "        val even = x % 2 == 0\n        val evenInRange\
    \ = if (even && x >= y) x else y\n        val evenInRange2 = if (even && x >=\
    \ y) y else x\n        val evenInRange3 = if (even && x >= y) x else y\n     \
    \   val evenInRange4 = if (even && x >= y) y else x\n        val evenInRange5\
    \ = if (even && x >= y) x else y\n        val evenInRange6 = if (even && x >=\
    \ y) y else x\n        val evenInRange7 = if (even && x >= y) x else y\n     \
    \   val evenInRange8 = if (even && x >= y) y else x\n        val evenInRange9\
    \ = if (even && x >= y) x else y\n        val evenInRange10 = if (even && x >=\
    \ y) y else x\n        val evenInRange11 = if (even && x >= y) x else y\n    \
    \    val evenInRange12 = if (even && x >= y) y else x\n        val evenInRange13\
    \ = if (even && x >= y) x else y\n        val evenInRange14 = if (even && x >=\
    \ y) y else x\n        val evenInRange15 = if (even && x >= y) x else y\n    \
    \    val evenInRange16 = if (even && x >= y) y else x\n        val evenInRange17\
    \ = if (even && x >= y) x else y\n        val evenInRange18 = if (even && x >=\
    \ y) y else x\n        val evenInRange19 = if (even && x >= y) x else y\n    \
    \    val evenInRange20 = if (even && x >= y) y else x\n        val evenInRange21\
    \ = if (even && x >= y) x else y\n        val evenInRange22 = if (even && x >=\
    \ y) y else x\n        val evenInRange23 = if (even && x >= y) x else y\n    \
    \    val evenInRange24 = if (even && x >= y) y else x\n        val evenInRange25\
    \ = if (even && x >= y) x else y\n        val evenInRange26 = if (even && x >=\
    \ y) y else x\n        val evenInRange27 = if (even && x >= y) x else y\n    \
    \    val evenInRange28 = if (even && x >= y) y else x\n        val evenInRange29\
    \ = if (even && x >= y) x else y\n        val evenInRange30 = if (even && x >=\
    \ y) y else x\n        val evenInRange31 = if (even && x >= y) x else y\n    \
    \    val evenInRange32 = if (even && x >= y) y else x\n        val even", "  \
    \      val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x; else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else odd", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val evensCount = mutable.ListBuffer[Long]()\n\
    \        val oddsCount = mutable.ListBuffer[Long]()\n        val evensSum = mutable.ListBuffer[Long]()\n\
    \        val oddsSum = mutable.ListBuffer[Long]()\n        val evensSumCount =\
    \ mutable.ListBuffer[Long]()\n        val oddsSumCount = mutable.ListBuffer[Long]()\n\
    \        val evensSumOdds = mutable.ListBuffer[Long]()\n        val oddsSumOdds\
    \ = mutable.ListBuffer[Long]()\n        val evensSumOddsCount = mutable.ListBuffer[Long]()\n\
    \        val oddsSumOddsCount = mutable.ListBuffer[Long]()\n        val evensSumOddsSum\
    \ = mutable.ListBuffer[Long]()\n        val oddsSumOddsSum = mutable.ListBuffer[Long]()\n\
    \        val evensSumOddsSumCount = mutable.ListBuffer[Long]()\n        val oddsSumOddsSumCount\
    \ = mutable.ListBuffer[Long]()\n        val evensSumOddsSumOdds = mutable.ListBuffer[Long]()\n\
    \        val oddsSumOddsSumOdds = mutable.ListBuffer[Long]()\n        val evensSumOddsSumOddsCount\
    \ = mutable.ListBuffer[Long]()\n        val oddsSumOddsSumOddsCount = mutable.ListBuffer[Long]()\n\
    \        val evensSumOddsSumOddsSum = mutable.ListBuffer[Long]()\n        val\
    \ oddsSumOddsSumOddsSum = mutable.ListBuffer[Long]()\n        val evensSumOddsSumOddsSumCount\
    \ = mutable.ListBuffer[Long]()\n        val oddsSumOddsSumOddsSumCount = mutable.ListBuffer[Long]()\n\
    \        val evensSumOddsSumOddsSumOdds = mutable.ListBuffer[Long]()\n       \
    \ val oddsSumOddsSumOddsSumOdds = mutable.ListBuffer[Long]()\n        val evensSumOddsSumOddsSumOddsCount\
    \ = mutable.ListBuffer[Long]", "        val even = x % 2 == 0\n        val evenInRange\
    \ = if (even) y else x\n        val evenInRangeInt = if (even) y else x\n    \
    \    val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) y else x\n        val evenInRangeIntInt = if (even) y else x\n \
    \       val evenInRangeIntInt = if (even) y else x\n        val evenInRangeIntInt\
    \ = if (even) ", "        val evens = for (i <- 1 to y) yield {\n            if\
    \ (x % i == 0) i\n        }\n        evens.max", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val evenNums = mutable.Set[Long]()\n\
    \        val oddNums = mutable.Set[Long]()\n        val evenNumsSet = mutable.Set[Long]()\n\
    \        val oddNumsSet = mutable.Set[Long]()\n        val evenNumsSet2 = mutable.Set[Long]()\n\
    \        val oddNumsSet2 = mutable.Set[Long]()\n        val evenNumsSet3 = mutable.Set[Long]()\n\
    \        val oddNumsSet3 = mutable.Set[Long]()\n        val evenNumsSet4 = mutable.Set[Long]()\n\
    \        val oddNumsSet4 = mutable.Set[Long]()\n        val evenNumsSet5 = mutable.Set[Long]()\n\
    \        val oddNumsSet5 = mutable.Set[Long]()\n        val evenNumsSet6 = mutable.Set[Long]()\n\
    \        val oddNumsSet6 = mutable.Set[Long]()\n        val evenNumsSet7 = mutable.Set[Long]()\n\
    \        val oddNumsSet7 = mutable.Set[Long]()\n        val evenNumsSet8 = mutable.Set[Long]()\n\
    \        val oddNumsSet8 = mutable.Set[Long]()\n        val evenNumsSet9 = mutable.Set[Long]()\n\
    \        val oddNumsSet9 = mutable.Set[Long]()\n        val evenNumsSet10 = mutable.Set[Long]()\n\
    \        val oddNumsSet10 = mutable.Set[Long]()\n        val evenNumsSet11 = mutable.Set[Long]()\n\
    \        val oddNumsSet11 = mutable.Set[Long]()\n        val evenNumsSet12 = mutable.Set[Long]()\n\
    \        val oddNumsSet12 = mutable.Set[Long]()\n        val evenNumsSet13 = mutable.Set[Long]()\n\
    \        val oddNumsSet13 = mutable.Set[Long]()\n        val evenNumsSet14 = mutable.Set[Long]()\n\
    \        val oddNumsSet14 = mutable.Set[Long]()\n        val evenNumsSet15 = mutable.Set[Long]()\n\
    \        val oddNumsSet15 = mutable.Set[Long]()\n        val evenNumsSet", " \
    \       var max = 0\n        var min = 0\n        var even = 0\n        var odd\
    \ = 0\n        var evenMax = 0\n        var evenMin = 0\n        var oddMax =\
    \ 0\n        var oddMin = 0\n        var evenMaxIndex = 0\n        var evenMinIndex\
    \ = 0\n        var oddMaxIndex = 0\n        var oddMinIndex = 0\n        var evenMaxCount\
    \ = 0\n        var evenMinCount = 0\n        var oddMaxCount = 0\n        var\
    \ oddMinCount = 0\n        var evenMaxSum = 0\n        var evenMinSum = 0\n  \
    \      var oddMaxSum = 0\n        var oddMinSum = 0\n        var evenMaxSumIndex\
    \ = 0\n        var evenMinSumIndex = 0\n        var oddMaxSumIndex = 0\n     \
    \   var oddMinSumIndex = 0\n        var evenMaxSumCount = 0\n        var evenMinSumCount\
    \ = 0\n        var oddMaxSumCount = 0\n        var oddMinSumCount = 0\n      \
    \  var evenMaxSumSum = 0\n        var evenMinSumSum = 0\n        var oddMaxSumSum\
    \ = 0\n        var oddMinSumSum = 0\n        var evenMaxSumSumIndex = 0\n    \
    \    var evenMinSumSumIndex = 0\n        var oddMaxSumSumIndex = 0\n        var\
    \ oddMinSumSumIndex = 0\n        var evenMaxSumSumCount = 0\n        var evenMinSumSumCount\
    \ = 0\n        var oddMaxSumSumCount = 0\n        var oddMinSumSumCount = 0\n\
    \        var evenMaxSumSumSum = 0\n        var evenMinSumSumSum = 0\n        var\
    \ oddMaxSumSumSum = 0\n        var oddMinSumSumSum = 0\n        var evenMaxSumSumSumIndex\
    \ = 0\n        var evenMinSumSumSumIndex = 0\n        var oddMaxSumSumSumIndex\
    \ = 0\n        var oddMinSumSumSumIndex = 0\n        var evenMaxSumSumSumCount\
    \ = 0\n        var evenMinSumSumSumCount = 0\n        var oddMaxSumSumSumCount\
    \ = 0\n        var oddMinSumSumSumCount = 0\n        var evenMaxSumSumSumSum =\
    \ 0\n        var evenMinSumSumSum = 0\n        var oddMaxSumSumSum = 0\n     \
    \   var oddMinSumSumSum = 0\n        var evenMaxSumSumSumIndex = 0\n        var\
    \ evenMinSumSumSumIndex = 0\n        var oddMaxSumSumSumIndex = 0\n        var\
    \ oddMinSumSumSumIndex = 0\n        var evenMaxSumSumSumCount = 0\n        var\
    \ evenMinSumSumSumCount = 0\n        var oddMaxSumSumSumCount = 0\n        var\
    \ oddMinSumSumSumCount = 0\n        var evenMaxSumSumSumSum = 0\n        var evenMinSumSumSum\
    \ = 0\n        var oddMaxSumSumSum = 0\n        var oddMinSumSumSum = 0\n    \
    \    var evenMaxSumSumSumIndex = 0\n        var evenMinSumSum", "        val evens\
    \ = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n        val range\
    \ = (x to y)\n        for (i <- range) {\n            if (i % 2 == 0) {\n    \
    \            evens += i\n            } else {\n                odds += i\n   \
    \         }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) {\n            return even\n        } else {\n      \
    \      return odd\n        }", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val even = x % 2\n   \
    \     val odd = y % 2\n        if (even > 0 && odd > 0) {\n            evens +=\
    \ even\n            odds += odd\n        }\n        if (even > 0 && odd < 0) {\n\
    \            evens += even\n            odds += -odd\n        }\n        if (even\
    \ < 0 && odd > 0) {\n            evens += -even\n            odds += odd\n   \
    \     }\n        if (even < 0 && odd < 0) {\n            evens += -even\n    \
    \        odds += -odd\n        }\n        if (evens.isEmpty) {\n            return\
    \ -1\n        }\n        if (evens.size == 1) {\n            return evens.head\n\
    \        }\n        if (evens.size == 2) {\n            return evens.head + evens.last\n\
    \        }\n        val evenSum = evens.sum\n        val oddSum = evens.sum -\
    \ evenSum\n        if (evenSum == oddSum) {\n            return evens.head + evens.last\n\
    \        }\n        val evenMax = evens.max\n        val oddMax = evens.max -\
    \ evenMax\n        if (evenMax < oddMax) {\n            return evens.head + evens.last\n\
    \        }\n        val evenMin = evens.min\n        val oddMin = evens.min -\
    \ evenMin\n        if (evenMin > oddMin) {\n            return evens.head + evens.last\n\
    \        }\n        val evenProduct = evens.product\n        val oddProduct =\
    \ evens.product - evenProduct\n        if (evenProduct == oddProduct) {\n    \
    \        return evens.head + evens.last\n        }\n        val evenProductSum\
    \ = evens.productSum\n        val oddProductSum = evens.productSum - evenProductSum\n\
    \        if (evenProductSum == oddProductSum) {\n            return evens.head\
    \ + evens.last\n        }\n        val evenProductMax = evens.productMax\n   \
    \     val oddProductMax = evens.productMax - evenProductMax\n        if (evenProductMax\
    \ < oddProductMax) {\n            return evens.head + evens.last\n        }\n\
    \        val evenProductMin = evens.productMin\n        val oddProductMin = evens.productMin\
    \ - evenProductMin\n        if (evenProductMin > oddProductMin) {\n          \
    \  return evens.head + evens.last\n        }\n        val evenProductProduct =\
    \ evens.productProduct\n        val oddProductProduct = evens.productProduct -\
    \ evenProductProduct\n        if (evenProductProduct == oddProductProduct) {\n\
    \            return evens.head + evens.last\n        }\n        val ", "     \
    \   if (x < 0 || y < 0 || x > y || y == 0) return -1\n        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val range = (x to y).filter(_\
    \ % 2 == 0)\n        for (i <- range) {\n            if (i % 2 == 0) {\n     \
    \           evens += i\n            } else {\n                odds += i\n    \
    \        }\n        }\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) return even\n        else return odd", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(x, y)\n        range.foreach(x => if (x % 2 == 0) evens\
    \ += x else odds += x)\n        val even = evens.max\n        val odd = odds.max\n\
    \        if (even > odd) even else odd", "        val evens = x until y by 2\n\
    \        val evensCount = evens.count(_ % 2 == 0)\n        if (evensCount > 0)\
    \ {\n            evens.max\n        } else {\n            -1\n        }", "  \
    \      val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- x until y){\n            if(i % 2 == 0){\n                evens\
    \ += i\n            }else{\n                odds += i\n            }\n       \
    \ }\n        val even = evens.max\n        val odd = odds.max\n        if(even\
    \ > odd){\n            return even\n        }else{\n            return odd\n \
    \       }", "        val evens = mutable.ListBuffer[Long]()\n        val odds\
    \ = mutable.ListBuffer[Long]()\n        val range = Range(x, y)\n        for (i\
    \ <- range) {\n            if (i % 2 == 0) {\n                evens += i\n   \
    \         } else {\n                odds += i\n            }\n        }\n    \
    \    if (evens.isEmpty) {\n            return -1\n        }\n        if (evens.size\
    \ > odds.size) {\n            return evens.last\n        } else {\n          \
    \  return -1\n        }", "        val evens = mutable.ListBuffer[Long]()\n  \
    \      val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val minNum = math.min(x, y)\n        val maxNum = math.max(x, y)\n  \
    \      val numRange = maxNum - minNum\n        val numRangeInt = math.round(numRange)\n\
    \        val numRangeIntInt = math.round(numRangeInt)\n        val numRangeIntInt\
    \ = math.round(numRangeIntInt)\n        val numRangeIntInt = math.round(numRangeIntInt)\n\
    \        val numRangeIntInt = math.round(numRangeIntInt)\n        val numRangeIntInt\
    \ = math.round(numRangeIntInt)\n        val numRangeIntInt = math.round(numRangeIntInt)\n\
    \        val numRangeIntInt = math.round(numRangeIntInt)\n        val numRangeIntInt\
    \ = math.round(numRangeIntInt)\n        val numRangeIntInt = math.round(numRangeIntInt)\n\
    \        val numRangeIntInt = math.round(numRangeIntInt)\n        val numRangeIntInt\
    \ = math.round(numRangeIntInt)\n        val numRangeIntInt = math.round(numRangeIntInt)\n\
    \        val numRangeIntInt = math.round(numRangeIntInt)\n        val numRangeIntInt\
    \ = math.round(numRangeIntInt)\n        val numRangeIntInt = math.round(numRangeIntInt)\n\
    \        val numRangeIntInt = math.round(numRangeIntInt)\n        val numRangeIntInt\
    \ = math.round(numRangeIntInt)\n        val numRangeIntInt = math.round(numRangeIntInt)\n\
    \        val numRangeIntInt = math.round(numRangeIntInt)\n        val numRangeIntInt\
    \ = math.round(numRangeIntInt)\n        val numRangeIntInt = math.round(numRangeIntInt)\n\
    \        val numRangeIntInt = math.round(numRangeIntInt)\n        val numRangeIntInt\
    \ = math.round(numRangeIntInt)\n        val numRangeIntInt = math.round(numRangeIntInt)\n\
    \        val numRangeIntInt = math.round(numRangeIntInt)\n        val numRangeIntInt\
    \ = math.round(numRangeIntInt)\n        val numRangeIntInt = math.round(numRangeIntInt)\n\
    \        val numRangeIntInt = math.round(numRangeIntInt)\n        val numRangeIntInt\
    \ = math.round(numRangeIntInt", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for(i <- x until y){\n            if(i % 2 == 0){\n                evens\
    \ += i\n            }\n        }\n        evens.max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to y by 2){\n            if((x % i) == 0){\n             \
    \   evens += i\n            }\n        }\n        if(evens.isEmpty){\n       \
    \     return -1\n        }\n        evens.max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to x to y) {\n            if(i%2 == 0) {\n               \
    \ evens += i\n            }\n        }\n        evens.max", "        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (x to y)\n        range.foreach{ x =>\n            if (x\
    \ % 2 == 0) {\n                evens += x\n            } else {\n            \
    \    odds += x\n            }\n        }\n        val even = evens.max\n     \
    \   val odd = odds.max\n        if (even < odd) {\n            return even\n \
    \       } else {\n            return odd\n        }", "        var maxEven = math.max(x,\
    \ y)\n        var minEven = math.min(x, y)\n        var even = math.max(minEven,\
    \ maxEven)\n        var evenNum = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum2 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum3 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum4 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum5 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum6 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum7 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum8 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum9 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum10 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum11 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum12 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum13 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum14 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum15 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum16 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum17 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum18 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum19 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum20 = math.min(math.max(minEven, maxEven), math.max(minEven,\
    \ maxEven))\n        var evenNum21 = math.min(math.max(minEven, maxEven), math.",
  "        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val even = mutable.ArrayBuffer.empty[Long]\n        val odd = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenInRange = mutable.ArrayBuffer.empty[Long]\n        val oddInRange\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenInRange2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddInRange2 = mutable.ArrayBuffer.empty[Long]\n        val evenInRange3\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddInRange3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenInRange4 = mutable.ArrayBuffer.empty[Long]\n        val oddInRange4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenInRange5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddInRange5 = mutable.ArrayBuffer.empty[Long]\n        val evenInRange6\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddInRange6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenInRange7 = mutable.ArrayBuffer.empty[Long]\n        val oddInRange7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenInRange8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddInRange8 = mutable.ArrayBuffer.empty[Long]\n        val evenInRange9\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddInRange9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenInRange10 = mutable.ArrayBuffer.empty[Long]\n        val oddInRange10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenInRange11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddInRange11 = mutable.ArrayBuffer.empty[Long]\n        val evenInRange12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddInRange12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenInRange13 = mutable.ArrayBuffer.empty[Long]\n        val oddInRange13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenInRange14 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddInRange14 = mutable.ArrayBuffer.empty[Long]\n        val evenInRange15\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddInRange15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenIn", "        val even = x % 2 == 0\n        val evenInRange\
    \ = if (even && y > x) y else x\n        val evenInRange2 = if (even && x > y)\
    \ x else y\n        val evenInRange3 = if (even && x > y) x else y\n        val\
    \ evenInRange4 = if (even && x > y) x else y\n        val evenInRange5 = if (even\
    \ && x > y) x else y\n        val evenInRange6 = if (even && x > y) x else y\n\
    \        val evenInRange7 = if (even && x > y) x else y\n        val evenInRange8\
    \ = if (even && x > y) x else y\n        val evenInRange9 = if (even && x > y)\
    \ x else y\n        val evenInRange10 = if (even && x > y) x else y\n        val\
    \ evenInRange11 = if (even && x > y) x else y\n        val evenInRange12 = if\
    \ (even && x > y) x else y\n        val evenInRange13 = if (even && x > y) x else\
    \ y\n        val evenInRange14 = if (even && x > y) x else y\n        val evenInRange15\
    \ = if (even && x > y) x else y\n        val evenInRange16 = if (even && x > y)\
    \ x else y\n        val evenInRange17 = if (even && x > y) x else y\n        val\
    \ evenInRange18 = if (even && x > y) x else y\n        val evenInRange19 = if\
    \ (even && x > y) x else y\n        val evenInRange20 = if (even && x > y) x else\
    \ y\n        val evenInRange21 = if (even && x > y) x else y\n        val evenInRange22\
    \ = if (even && x > y) x else y\n        val evenInRange23 = if (even && x > y)\
    \ x else y\n        val evenInRange24 = if (even && x > y) x else y\n        val\
    \ evenInRange25 = if (even && x > y) x else y\n        val evenInRange26 = if\
    \ (even && x > y) x else y\n        val evenInRange27 = if (even && x > y) x else\
    \ y\n        val evenInRange28 = if (even && x > y) x else y\n        val evenInRange29\
    \ = if (even && x > y) x else y\n        val evenInRange30 = if (even && x > y)\
    \ x else y\n        val evenInRange31 = if (even && x > y) x else y\n        val\
    \ evenInRange32 = if (even && x > y) x else y\n        val ", "        if (x <\
    \ 0 || y < 0 || x > y) -1\n        else {\n            val evens = for (i <- 1\
    \ to y) yield {\n                if (x % i == 0) i\n            }\n          \
    \  evens.max\n        }", "        val evens = mutable.ListBuffer[Long]()\n  \
    \      val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val numEven = mutable.ListBuffer[Long]()\n        val numOdd = mutable.ListBuffer[Long]()\n\
    \        val numEvenOdd = mutable.ListBuffer[Long]()\n        val numEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val numEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val numEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val numEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val numEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n      \
    \  val numEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ numEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val\
    \ numEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n      \
    \  val numEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val numEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val numEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[", "        val evens = mutable.ListBuffer[Long]()\n  \
    \      for (i <- x until y) {\n            if (i % 2 == 0) {\n               \
    \ evens += i\n            }\n        }\n        if (evens.isEmpty) {\n       \
    \     return -1\n        }\n        evens.max", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsEven = mutable.ListBuffer[Long]()\n        val numsOdd = mutable.ListBuffer[Long]()\n\
    \        val evensOdd = mutable.ListBuffer[Long]()\n        val evensEven = mutable.ListBuffer[Long]()\n\
    \        val oddsEven = mutable.ListBuffer[Long]()\n        val oddsOdd = mutable.ListBuffer[Long]()\n\
    \        val evensEvenOdd = mutable.ListBuffer[Long]()\n        val evensOddEven\
    \ = mutable.ListBuffer[Long]()\n        val oddsEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val oddsEvenEven = mutable.ListBuffer[Long]()\n        val evensOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val evensEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evensOddEvenOdd = mutable.ListBuffer[Long]()\n        val oddsEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val oddsEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evensEvenOddOdd = mutable.ListBuffer[Long]()\n        val evensOddEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evensOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val evensEvenOddOdd = mutable.ListBuffer[Long]()\n        val evensOddEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evensOddOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val evensEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n        val\
    \ evensOddOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val evensEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evensOddEvenOddEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evensOddOddEvenOddEvenOdd = mut", "        val evens = for (i <-\
    \ 1 to y) yield {\n            if (i % 2 == 0) i\n            else -1\n      \
    \  }\n        val evensSum = evens.sum\n        if (evensSum > x) evensSum\n \
    \       else if (evensSum < y) evensSum\n        else -1", "        val evens\
    \ = for (i <- 1 to y) yield {\n            if (i % 2 == 0) i\n        }\n    \
    \    val evensSum = evens.sum\n        if (evensSum < x && evensSum > y) -1\n\
    \        else evens.max", "        val evens = mutable.ListBuffer[Long]()\n  \
    \      val odds = mutable.ListBuffer[Long]()\n        for(i <- x until y){\n \
    \           if(i%2 == 0){\n                evens += i\n            }else{\n  \
    \              odds += i\n            }\n        }\n        val even = evens.max\n\
    \        val odd = odds.max\n        if(even > odd){\n            return even\n\
    \        }else{\n            return odd\n        }", "        val evens = mutable.Set[Long]()\n\
    \        val odds = mutable.Set[Long]()\n        val even = mutable.Set[Long]()\n\
    \        val odd = mutable.Set[Long]()\n        val evenNum = mutable.Set[Long]()\n\
    \        val oddNum = mutable.Set[Long]()\n        val evenNums = mutable.Set[Long]()\n\
    \        val oddNums = mutable.Set[Long]()\n        val evenNumsSet = mutable.Set[Long]()\n\
    \        val oddNumsSet = mutable.Set[Long]()\n        val evenNumsSet2 = mutable.Set[Long]()\n\
    \        val oddNumsSet2 = mutable.Set[Long]()\n        val evenNumsSet3 = mutable.Set[Long]()\n\
    \        val oddNumsSet3 = mutable.Set[Long]()\n        val evenNumsSet4 = mutable.Set[Long]()\n\
    \        val oddNumsSet4 = mutable.Set[Long]()\n        val evenNumsSet5 = mutable.Set[Long]()\n\
    \        val oddNumsSet5 = mutable.Set[Long]()\n        val evenNumsSet6 = mutable.Set[Long]()\n\
    \        val oddNumsSet6 = mutable.Set[Long]()\n        val evenNumsSet7 = mutable.Set[Long]()\n\
    \        val oddNumsSet7 = mutable.Set[Long]()\n        val evenNumsSet8 = mutable.Set[Long]()\n\
    \        val oddNumsSet8 = mutable.Set[Long]()\n        val evenNumsSet9 = mutable.Set[Long]()\n\
    \        val oddNumsSet9 = mutable.Set[Long]()\n        val evenNumsSet10 = mutable.Set[Long]()\n\
    \        val oddNumsSet10 = mutable.Set[Long]()\n        val evenNumsSet11 = mutable.Set[Long]()\n\
    \        val oddNumsSet11 = mutable.Set[Long]()\n        val evenNumsSet12 = mutable.Set[Long]()\n\
    \        val oddNumsSet12 = mutable.Set[Long]()\n        val evenNumsSet13 = mutable.Set[Long]()\n\
    \        val oddNumsSet13 = mutable.Set[Long]()\n        val evenNumsSet14 = mutable.Set[Long]()\n\
    \        val oddNum", "        var evenNum = x % 2\n        var biggerNum = y\n\
    \        var evenNumCount = 0\n        var biggerNumCount = 0\n        while (evenNum\
    \ < biggerNum) {\n            evenNum = evenNum + 2\n            evenNumCount\
    \ = evenNumCount + 1\n            biggerNum = biggerNum + 2\n            biggerNumCount\
    \ = biggerNumCount + 1\n        }\n        if (evenNumCount == biggerNumCount)\
    \ {\n            return evenNum\n        } else {\n            return -1\n   \
    \     }", "        var maxNum = math.max(x, y)\n        var minNum = math.min(x,\
    \ y)\n        var evenNum = 0\n        var oddNum = 0\n        while (evenNum\
    \ < maxNum && oddNum < minNum) {\n            if (evenNum % 2 == 0 && oddNum %\
    \ 2 == 1) {\n                evenNum = evenNum + 1\n                oddNum = oddNum\
    \ + 1\n            } else if (evenNum % 2 != 0 && oddNum % 2 == 1) {\n       \
    \         evenNum = evenNum + 1\n                oddNum = oddNum + 1\n       \
    \     } else if (evenNum % 2 != 0 && oddNum % 2 != 0) {\n                evenNum\
    \ = evenNum + 1\n                oddNum = oddNum + 1\n            }\n        }\n\
    \        if (evenNum == maxNum && oddNum == minNum) {\n            return evenNum\n\
    \        } else {\n            return -1\n        }", "        if (x > y) {\n\
    \            val temp = x\n            x = y\n            y = temp\n        }\n\
    \        var num : Long = y\n        while (x % 2 == 0) {\n            x /= 2\n\
    \            num /= 2\n        }\n        if (num > x) {\n            num = x\n\
    \        }\n        num", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        for (i <- x until\
    \ y) {\n            if (i % 2 == 0) {\n                evens += i\n          \
    \  } else {\n                odds += i\n            }\n        }\n        val\
    \ even = evens.max\n        val odd = odds.max\n        if (even > odd) {\n  \
    \          return even\n        } else {\n            return odd\n        }",
  "        val evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n\
    \        val range = (x - y).abs \n        val evenRange = range.filter(_ % 2\
    \ == 0)\n        val oddRange = range.filter(_ % 2 == 1)\n        evenRange foreach\
    \ { x => evens += x }\n        oddRange foreach { x => odds += x }\n        evens.max",
  "        val evens = mutable.ListBuffer[Long]()\n        for(i <- 1 to y by 2){\n\
    \            val even = if (x % i == 0) x else -1\n            evens += even\n\
    \        }\n        if (evens.isEmpty) -1\n        else evens.max", "        val\
    \ evens = mutable.Set[Long]()\n        val odds = mutable.Set[Long]()\n      \
    \  val evensCount = mutable.Set[Long]()\n        val oddsCount = mutable.Set[Long]()\n\
    \        val evensCount2 = mutable.Set[Long]()\n        val oddsCount2 = mutable.Set[Long]()\n\
    \        val evensCount3 = mutable.Set[Long]()\n        val oddsCount3 = mutable.Set[Long]()\n\
    \        val evensCount4 = mutable.Set[Long]()\n        val oddsCount4 = mutable.Set[Long]()\n\
    \        val evensCount5 = mutable.Set[Long]()\n        val oddsCount5 = mutable.Set[Long]()\n\
    \        val evensCount6 = mutable.Set[Long]()\n        val oddsCount6 = mutable.Set[Long]()\n\
    \        val evensCount7 = mutable.Set[Long]()\n        val oddsCount7 = mutable.Set[Long]()\n\
    \        val evensCount8 = mutable.Set[Long]()\n        val oddsCount8 = mutable.Set[Long]()\n\
    \        val evensCount9 = mutable.Set[Long]()\n        val oddsCount9 = mutable.Set[Long]()\n\
    \        val evensCount10 = mutable.Set[Long]()\n        val oddsCount10 = mutable.Set[Long]()\n\
    \        val evensCount11 = mutable.Set[Long]()\n        val oddsCount11 = mutable.Set[Long]()\n\
    \        val evensCount12 = mutable.Set[Long]()\n        val oddsCount12 = mutable.Set[Long]()\n\
    \        val evensCount13 = mutable.Set[Long]()\n        val oddsCount13 = mutable.Set[Long]()\n\
    \        val evensCount14 = mutable.Set[Long]()\n        val oddsCount14 = mutable.Set[Long]()\n\
    \        val evensCount15 = mutable.Set[Long]()\n        val oddsCount15 = mutable.Set[Long]()\n\
    \        val evensCount16 = mutable.Set[Long]()\n        val oddsCount16 = mutable.Set[Long]()\n\
    \        val evensCount17 = mutable.Set[Long]()\n        val oddsCount17 = mutable.Set[Long]()\n\
    \        val evens"]
stop_tokens:
- "\n    }\n"
