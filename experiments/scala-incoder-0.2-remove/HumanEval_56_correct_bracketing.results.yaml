language: scala
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.HashMap[String, Int]()\n        val\
    \ closingBracketsMap = mutable.HashMap[String, Int]()\n        openingBrackets.foreach(x\
    \ => {\n            val key = x.trim\n            openingBracketsMap += key ->\
    \ openingBracketsMap.getOrElse(key, 0) + 1\n        })\n        closingBrackets.foreach(x\
    \ => {\n            val key = x.trim\n            closingBracketsMap += key ->\
    \ closingBracketsMap.getOrElse(key, 0) + 1\n        })\n        openingBracketsMap.forall(_._2\
    \ > 0)\n        && closingBracketsMap.forall(_._2 > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm4p4in4j.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm4p4in4j.scala:12:33 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = mutable.HashSet[Char]()\n        val closingBrackets\
    \ = mutable.HashSet[Char]()\n        var openingBracketsCount = 0\n        var\
    \ closingBracketsCount = 0\n        for(i <- 0 until bracketsArray.length){\n\
    \            if(bracketsArray(i) == '<'){\n                openingBracketsCount\
    \ += 1\n                openingBrackets += bracketsArray(i)\n            }\n \
    \           if(bracketsArray(i) == '>'){\n                closingBracketsCount\
    \ += 1\n                closingBrackets += bracketsArray(i)\n            }\n \
    \       }\n        if(openingBracketsCount == closingBracketsCount){\n       \
    \     true\n        }\n        else{\n            false\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppohpkzfi.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppohpkzfi.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.zipAll(closingBrackets,\
    \ _.length).forall(x => x._1 == x._2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpg8leogfw.scala:9:48 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        openingBrackets.zipAll(closingBrackets, _.length).forall(\e\
    [36mx\e[0m => x._1 == x._2)\n\e[31m\e[31m  |\e[0m                            \
    \                    ^\e[0m\n\e[31m  |\e[0m     Missing parameter type\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m     I could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m  |\e[0m     _$1 => _$1.length.\n1 error found\n"
  stdout: ''
  timestamp: 1660009889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = new mutable.HashMap[String, Int]()\n       \
    \ val closingBracketsMap = new mutable.HashMap[String, Int]()\n        openingBrackets.foreach(x\
    \ => {\n            val y = x.split(\"-\")\n            openingBracketsMap +=\
    \ (y(0) -> 1)\n        })\n        closingBrackets.foreach(x => {\n          \
    \  val y = x.split(\"-\")\n            closingBracketsMap += (y(0) -> 1)\n   \
    \     })\n        openingBracketsMap.foreach {\n            case (k, v) =>\n \
    \               val count = closingBracketsMap.get(k)\n                if (count\
    \ != 0) {\n                    val newCount = count - 1\n                    closingBracketsMap\
    \ += (k -> newCount)\n                }\n        }\n        closingBracketsMap.foreach\
    \ {\n            case (k, v) =>\n                val count = openingBracketsMap.get(k)\n\
    \                if (count != 0) {\n                    val newCount = count -\
    \ 1\n                    openingBracketsMap += (k -> newCount)\n             \
    \   }\n        }\n        openingBracketsMap.size == closingBracketsMap.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6umcqmdk.scala:11:37 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6umcqmdk.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas73yff5.scala:16)\n\tat Problem.main(tmpas73yff5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = new mutable.HashMap[String, Int]()\n       \
    \ val closingBracketsMap = new mutable.HashMap[String, Int]()\n        openingBrackets.foreach(x\
    \ => {\n            val y = x.split(\"-\")\n            openingBracketsMap +=\
    \ (y(0) -> 1)\n        })\n        closingBrackets.foreach(x => {\n          \
    \  val y = x.split(\"-\")\n            closingBracketsMap += (y(0) -> 1)\n   \
    \     })\n        openingBracketsMap.foreach { case (k, v) =>\n            val\
    \ count = closingBracketsMap.get(k)\n            if (count != 0) {\n         \
    \       val newCount = count - 1\n                closingBracketsMap += (k ->\
    \ newCount)\n            }\n        }\n        openingBracketsMap == closingBracketsMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4i5o5x6.scala:11:37 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4i5o5x6.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBracketsArray = Array(\"<\", \">\")\n        val closingBracketsArray\
    \ = Array(\"<\", \">\")\n        val openingBracketsCount = openingBracketsArray.length\n\
    \        val closingBracketsCount = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        var openingBracketsArrayLength = 0\n        var closingBracketsArrayLength\
    \ = 0\n        var openingBracketsArray = Array.empty[String]\n        var closingBracketsArray\
    \ = Array.empty[String]\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var openingBracketsCount = 0\n        var closingBracketsCount = 0\n      \
    \  var openingBracketsArray = Array.empty[String]\n        var closingBracketsArray\
    \ = Array.empty[String]\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var openingBracketsCount = 0\n        var closingBracketsCount = 0\n      \
    \  var openingBracketsArray = Array.empty[String]\n        var closingBracketsArray\
    \ = Array.empty[String]\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var openingBracketsCount = 0\n        var closingBracketsCount = 0\n      \
    \  var openingBracketsArray = Array.empty[String]\n        var closingBracketsArray\
    \ = Array.empty[String]\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var openingBracketsCount = 0\n        var closingBracketsCount = 0\n      \
    \  var openingBracketsArray = Array.empty[String]\n        var closingBracketsArray\
    \ = Array.empty[String]\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var opening\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0_y_loxq.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0_y_loxq.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketsCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopeningBracketsCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mopeningBracketsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0_y_loxq.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mclosingBracketsCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mclosingBracketsCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mclosingBracketsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0_y_loxq.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketsArrayLength\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mopeningBracketsArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mopeningBracketsArrayLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0_y_loxq.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsArrayLength\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mclosingBracketsArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mclosingBracketsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel defin"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val bracketsArrayLength = bracketsArray.length\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var openingBracketsCountInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracket = 0\n        var openingBracketsCountInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracket = 0\n      \
    \  var openingBracketsCountInsideBracketInsideBracketInsideBracket = 0\n     \
    \   var closingBracketsCountInsideBracketInsideBracketInsideBracket = 0\n    \
    \    var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketIn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp00ololy2.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00ololy2.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp00ololy2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mclosingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp00ololy2.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mopeningBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\e\
    [0m = \e[3"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = new mutable.HashMap[String, Int]()\n       \
    \ val closingBracketsMap = new mutable.HashMap[String, Int]()\n        openingBrackets.foreach(x\
    \ => {\n            val openingBracket = x.split(\"-\")\n            openingBracketsMap.put(openingBracket(0),\
    \ openingBracketsMap.getOrElse(openingBracket(0), 0) + 1)\n        })\n      \
    \  closingBrackets.foreach(x => {\n            val closingBracket = x.split(\"\
    -\")\n            closingBracketsMap.put(closingBracket(0), closingBracketsMap.getOrElse(closingBracket(0),\
    \ 0) + 1)\n        })\n        openingBracketsMap.forall { case (k, v) => closingBracketsMap.get(k)\
    \ == v }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5y_wnz0q.scala:11:37 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5y_wnz0q.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas73yff5.scala:16)\n\tat Problem.main(tmpas73yff5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.zipAll(closingBrackets,\
    \ (a, b) => a != b).forall(x => x._1 == x._2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpyd4a5ycp.scala:9:49 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        openingBrackets.zipAll(closingBrackets, (\e[36ma\e\
    [0m, \e[36mb\e[0m) => a != b).forall(\e[36mx\e[0m => x._1 == x._2)\n\e[31m\e[31m\
    \  |\e[0m                                                 ^\e[0m\n\e[31m  |\e\
    [0m                            Missing parameter type\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m                            I could not infer the type of the parameter\
    \ a.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpyd4a5ycp.scala:9:52 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        openingBrackets.zipAll(closingBrackets, (\e[36ma\e\
    [0m, \e[36mb\e[0m) => a != b).forall(\e[36mx\e[0m => x._1 == x._2)\n\e[31m\e[31m\
    \  |\e[0m                                                    ^\e[0m\n\e[31m  |\e\
    [0m                            Missing parameter type\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m                            I could not infer the type of the parameter\
    \ b.\n2 errors found\n"
  stdout: ''
  timestamp: 1660009889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.HashMap[String, Int]()\n        val\
    \ closingBracketsMap = mutable.HashMap[String, Int]()\n        openingBrackets.foreach(x\
    \ => {\n            val openingBracket = x.trim\n            val closingBracket\
    \ = closingBrackets.find(y => y.trim == openingBracket).trim\n            openingBracketsMap(openingBracket)\
    \ = openingBracketsMap(openingBracket) + 1\n            closingBracketsMap(closingBracket)\
    \ = closingBracketsMap(closingBracket) + 1\n        })\n        openingBracketsMap.forall(x\
    \ => closingBracketsMap(x) == openingBracketsMap(x))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo1qfv9yn.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpo1qfv9yn.scala:12:33 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo1qfv9yn.scala:15:85\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36mclosingBracket\e[0m = closingBrackets.find(\e[36my\e[0m => y.trim == openingBracket).trim\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue trim is not a member of Option[String] - did you mean\
    \ Option[String].wait?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas73yff5.scala:16)\n\tat Problem.main(tmpas73yff5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBracketsCount = bracketsArray.count(c => c == '<')\n     \
    \   val closingBracketsCount = bracketsArray.count(c => c == '>')\n        openingBracketsCount\
    \ == closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbr4qi7uz.scala:18)\n\tat Problem.main(tmpbr4qi7uz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpobs_qr5k.scala:14)\n\tat Problem.main(tmpobs_qr5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.zipAll(closingBrackets,\
    \ _.length).forall { case (opening, closing, length) =>\n            opening ==\
    \ closing\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmptqz3qkpa.scala:9:48 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        openingBrackets.zipAll(closingBrackets, _.length).forall\
    \ { \e[33mcase\e[0m (opening, closing, length) =>\n\e[31m\e[31m  |\e[0m      \
    \                                          ^\e[0m\n\e[31m  |\e[0m     Missing\
    \ parameter type\n\e[31m  |\e[0m\n\e[31m  |\e[0m     I could not infer the type\
    \ of the parameter _$1 of expanded function:\n\e[31m  |\e[0m     _$1 => _$1.length.\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.HashMap[String, Int]()\n        val\
    \ closingBracketsMap = mutable.HashMap[String, Int]()\n        openingBrackets.foreach(x\
    \ => {\n            val openingBracket = x.split(\"[\")\n            val closingBracket\
    \ = x.split(\"]\")\n            val openingBracketCount = openingBracket.length\n\
    \            val closingBracketCount = closingBracket.length\n            openingBracketCount\
    \ match {\n                case 1 => {\n                    openingBracketsMap.put(openingBracket(0),\
    \ openingBracketCount)\n                }\n                case 2 => {\n     \
    \               openingBracketsMap.put(openingBracket(0), openingBracketCount)\n\
    \                    openingBracketsMap.put(openingBracket(1), openingBracketCount)\n\
    \                }\n                case 3 => {\n                    openingBracketsMap.put(openingBracket(0),\
    \ openingBracketCount)\n                    openingBracketsMap.put(openingBracket(1),\
    \ openingBracketCount)\n                    openingBracketsMap.put(openingBracket(2),\
    \ openingBracketCount)\n                }\n                case 4 => {\n     \
    \               openingBracketsMap.put(openingBracket(0), openingBracketCount)\n\
    \                    openingBracketsMap.put(openingBracket(1), openingBracketCount)\n\
    \                    openingBracketsMap.put(openingBracket(2), openingBracketCount)\n\
    \                    openingBracketsMap.put(openingBracket(3), openingBracketCount)\n\
    \                }\n                case 5 => {\n                    openingBracketsMap.put(openingBracket(0),\
    \ openingBracketCount)\n                    openingBracketsMap.put(openingBracket(1),\
    \ openingBracketCount)\n                    openingBracketsMap.put(openingBracket(2),\
    \ openingBracketCount)\n                    openingBracketsMap.put(openingBracket(3),\
    \ openingBracketCount)\n                    openingBracketsMap.put(openingBracket(4),\
    \ openingBracketCount)\n                }\n                case 6 => {\n     \
    \               openingBracketsMap.put(openingBracket(0), openingBracketCoun\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3uqtczl1.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3uqtczl1.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp3uqtczl1.scala:11:33 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3uqtczl1.scala:12:33\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mclosingBracketsMap\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmp3uqtczl1.scala:47:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660009889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBracketsCount = bracketsArray.count(_ == '<')\n        val\
    \ closingBracketsCount = bracketsArray.count(_ == '>')\n        openingBracketsCount\
    \ != closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkno9xad8.scala:13)\n\tat Problem.main(tmpkno9xad8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = new mutable.HashMap[String, Int]()\n       \
    \ val closingBracketsMap = new mutable.HashMap[String, Int]()\n        openingBrackets.foreach(x\
    \ => {\n            val openingBracket = x.trim\n            val closingBracket\
    \ = closingBrackets.find(y => y.trim==openingBracket).trim\n            openingBracketsMap\
    \ += openingBracket -> openingBracketsMap.getOrElse(openingBracket, 0)+1\n   \
    \         closingBracketsMap += closingBracket -> closingBracketsMap.getOrElse(closingBracket,\
    \ 0)-1\n        })\n        openingBracketsMap.forall(_._2==0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmwmqiuz.scala:11:37 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmwmqiuz.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwmwmqiuz.scala:15:83 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mclosingBracket\e[0m\
    \ = closingBrackets.find(\e[36my\e[0m => y.trim==openingBracket).trim\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue trim is not a member of Option[String] - did you mean\
    \ Option[String].wait?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        if (openingBracketsCount != closingBracketsCount) {\n            return\
    \ false\n        }\n        var openingBracketsIndex = 0\n        var closingBracketsIndex\
    \ = 0\n        while (openingBracketsIndex < openingBracketsCount && closingBracketsIndex\
    \ < closingBracketsCount) {\n            if (openingBrackets(openingBracketsIndex)\
    \ != closingBrackets(closingBracketsIndex)) {\n                return false\n\
    \            }\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9j55spgz.scala:26)\n\tat Problem.main(tmp9j55spgz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = mutable.HashSet[Char]()\n        val closingBrackets\
    \ = mutable.HashSet[Char]()\n        for (i <- 0 until bracketsArray.length) {\n\
    \            if (bracketsArray(i) == '<') {\n                openingBrackets +=\
    \ bracketsArray(i + 1)\n            } else if (bracketsArray(i) == '>') {\n  \
    \              closingBrackets += bracketsArray(i + 1)\n            }\n      \
    \  }\n        openingBrackets.size == closingBrackets.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnqi26zc1.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnqi26zc1.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = new mutable.HashMap[String, Int]()\n       \
    \ val closingBracketsMap = new mutable.HashMap[String, Int]()\n        for (i\
    \ <- 0 until openingBracketsCount) {\n            val openingBracket = openingBrackets(i)\n\
    \            val closingBracket = closingBrackets(i)\n            openingBracketsMap.put(openingBracket,\
    \ openingBracketsMap.getOrElse(openingBracket, 0) + 1)\n            closingBracketsMap.put(closingBracket,\
    \ closingBracketsMap.getOrElse(closingBracket, 0) + 1)\n        }\n        for\
    \ (i <- 0 until closingBracketsCount) {\n            val openingBracket = openingBrackets(i)\n\
    \            val closingBracket = closingBrackets(i)\n            val openingBracketsCount\
    \ = openingBracketsMap.getOrElse(openingBracket, 0)\n            val closingBracketsCount\
    \ = closingBracketsMap.getOrElse(closingBracket, 0)\n            if (openingBracketsCount\
    \ != closingBracketsCount) {\n                return false\n            }\n  \
    \      }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4gy9tm4w.scala:11:37 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4gy9tm4w.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.Map[String, Int]()\n        val closingBracketsMap\
    \ = mutable.Map[String, Int]()\n        openingBrackets.foreach(openingBracket\
    \ => {\n            val openingBracketIndex = openingBracket.indexOf(\"(\")\n\
    \            val closingBracketIndex = openingBracket.indexOf(\")\")\n       \
    \     openingBracketsMap(openingBracket) = openingBracketIndex\n            closingBracketsMap(openingBracket)\
    \ = closingBracketIndex\n        })\n        closingBrackets.foreach(closingBracket\
    \ => {\n            val openingBracketIndex = closingBracket.indexOf(\"(\")\n\
    \            val closingBracketIndex = closingBracket.indexOf(\")\")\n       \
    \     openingBracketsMap(closingBracket) = openingBracketIndex\n            closingBracketsMap(closingBracket)\
    \ = closingBracketIndex\n        })\n        openingBracketsMap.forall(_._2 !=\
    \ closingBracketsMap(_._2))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpii27e431.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpii27e431.scala:12:33 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        if (openingBracketsCount != closingBracketsCount) {\n            return\
    \ false\n        }\n        var openingBracketsIndex = 0\n        var closingBracketsIndex\
    \ = 0\n        while (openingBracketsIndex < openingBracketsCount && closingBracketsIndex\
    \ < closingBracketsCount) {\n            if (openingBrackets(openingBracketsIndex)\
    \ != closingBrackets(closingBracketsIndex)) {\n                return false\n\
    \            }\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9j55spgz.scala:26)\n\tat Problem.main(tmp9j55spgz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.zipAll(closingBrackets,\
    \ (a, b) => a != b).forall { case (a, b) => a }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp5y6u0ucp.scala:9:49 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        openingBrackets.zipAll(closingBrackets, (\e[36ma\e\
    [0m, \e[36mb\e[0m) => a != b).forall { \e[33mcase\e[0m (a, b) => a }\n\e[31m\e\
    [31m  |\e[0m                                                 ^\e[0m\n\e[31m  |\e\
    [0m                            Missing parameter type\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m                            I could not infer the type of the parameter\
    \ a.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp5y6u0ucp.scala:9:52 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        openingBrackets.zipAll(closingBrackets, (\e[36ma\e\
    [0m, \e[36mb\e[0m) => a != b).forall { \e[33mcase\e[0m (a, b) => a }\n\e[31m\e\
    [31m  |\e[0m                                                    ^\e[0m\n\e[31m\
    \  |\e[0m                            Missing parameter type\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m                            I could not infer the type of the parameter\
    \ b.\n2 errors found\n"
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = new mutable.HashMap[String, Int]()\n       \
    \ val closingBracketsMap = new mutable.HashMap[String, Int]()\n        openingBrackets.foreach(openingBracket\
    \ => {\n            val closingBracket = closingBrackets(openingBracketsCount\
    \ - 1)\n            openingBracketsMap.put(openingBracket, closingBracketsMap.getOrElse(closingBracket,\
    \ 0) + 1)\n        })\n        closingBrackets.foreach(closingBracket => {\n \
    \           val openingBracket = openingBracketsMap.getOrElse(closingBracket,\
    \ 0)\n            closingBracketsMap.put(closingBracket, openingBracketsMap.getOrElse(openingBracket,\
    \ 0) - 1)\n        })\n        openingBracketsMap.size == closingBracketsMap.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp08kvbhw.scala:11:37 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp08kvbhw.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas73yff5.scala:16)\n\tat Problem.main(tmpas73yff5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpobs_qr5k.scala:14)\n\tat Problem.main(tmpobs_qr5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = mutable.HashSet[Char]()\n        val closingBrackets\
    \ = mutable.HashSet[Char]()\n        var openingBracketCount = 0\n        var\
    \ closingBracketCount = 0\n        var openingBracketIndex = 0\n        var closingBracketIndex\
    \ = 0\n        while (openingBracketIndex < bracketsArray.length) {\n        \
    \    val currentChar = bracketsArray(openingBracketIndex)\n            if (currentChar\
    \ == '<') {\n                openingBracketCount += 1\n                openingBracketIndex\
    \ += 1\n            } else if (currentChar == '>') {\n                closingBracketCount\
    \ += 1\n                closingBracketIndex += 1\n            } else {\n     \
    \           openingBracketCount -= 1\n                closingBracketCount -= 1\n\
    \            }\n            if (openingBracketCount == 0 && closingBracketCount\
    \ == 0) {\n                openingBracketIndex += 1\n                closingBracketIndex\
    \ += 1\n            }\n        }\n        return openingBracketIndex == closingBracketIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7uu6xtuh.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7uu6xtuh.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBracketsCount = bracketsArray.count(c => c == '<')\n     \
    \   val closingBracketsCount = bracketsArray.count(c => c == '>')\n        openingBracketsCount\
    \ == closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbr4qi7uz.scala:18)\n\tat Problem.main(tmpbr4qi7uz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBracketsCount = bracketsArray.filter(c => c == '<').length\n\
    \        val closingBracketsCount = bracketsArray.filter(c => c == '>').length\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd64vks0a.scala:18)\n\tat Problem.main(tmpd64vks0a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = new mutable.HashMap[String, Int]()\n       \
    \ val closingBracketsMap = new mutable.HashMap[String, Int]()\n        openingBrackets.foreach(x\
    \ => openingBracketsMap += (x -> 1))\n        closingBrackets.foreach(x => closingBracketsMap\
    \ += (x -> 1))\n        openingBracketsMap.foreach(x => openingBracketsMap +=\
    \ (x -> openingBracketsMap.getOrElse(x, 0) - 1))\n        closingBracketsMap.foreach(x\
    \ => closingBracketsMap += (x -> closingBracketsMap.getOrElse(x, 0) - 1))\n  \
    \      openingBracketsMap.forall(x => closingBracketsMap.getOrElse(x, 0) == 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfvxvr2re.scala:11:37 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfvxvr2re.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = mutable.HashSet[Char]()\n        val closingBrackets\
    \ = mutable.HashSet[Char]()\n        val openingBracketsArray = mutable.ArrayBuffer.empty[Char]\n\
    \        val closingBracketsArray = mutable.ArrayBuffer.empty[Char]\n        for\
    \ (i <- 0 until bracketsArray.length) {\n            val c = bracketsArray(i)\n\
    \            if (c == '<') {\n                openingBrackets += c\n         \
    \       openingBracketsArray += c\n            } else if (c == '>') {\n      \
    \          closingBrackets += c\n                closingBracketsArray += c\n \
    \           }\n        }\n        openingBrackets.size == closingBrackets.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5xiwv8h.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5xiwv8h.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5xiwv8h.scala:10:35 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsArray\e[0m\
    \ = mutable.ArrayBuffer.empty[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj5xiwv8h.scala:11:35 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mclosingBracketsArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas73yff5.scala:16)\n\tat Problem.main(tmpas73yff5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.HashMap[String, Int]()\n        val\
    \ closingBracketsMap = mutable.HashMap[String, Int]()\n        openingBrackets.foreach(x\
    \ => {\n            val openingBracket = x.trim\n            val closingBracket\
    \ = closingBrackets(openingBracketsCount - openingBracketsMap.getOrElse(openingBracket,\
    \ 0) - 1).trim\n            openingBracketsMap += (openingBracket -> 1)\n    \
    \        closingBracketsMap += (closingBracket -> 1)\n        })\n        closingBrackets.foreach(x\
    \ => {\n            val openingBracket = x.trim\n            val closingBracket\
    \ = openingBracketsMap.getOrElse(openingBracket, \"\").trim\n            openingBracketsMap\
    \ += (openingBracket -> -1)\n            closingBracketsMap += (closingBracket\
    \ -> -1)\n        })\n        openingBracketsMap.forall(x => closingBracketsMap.getOrElse(x._1,\
    \ \"\") == x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ppvt9ke.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5ppvt9ke.scala:12:33 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpobs_qr5k.scala:14)\n\tat Problem.main(tmpobs_qr5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = mutable.HashSet[Char]()\n        val closingBrackets\
    \ = mutable.HashSet[Char]()\n        val openingBracketsArray = mutable.ArrayBuffer.empty[Char]\n\
    \        val closingBracketsArray = mutable.ArrayBuffer.empty[Char]\n        val\
    \ openingBracketsCount = mutable.HashSet[Int]()\n        val closingBracketsCount\
    \ = mutable.HashSet[Int]()\n        var openingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n    \
    \    var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n  \
    \      var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdkk9fftr.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdkk9fftr.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketsCountArrayLength\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsCountArrayLength is already defined as \e[33mvariable\e\
    [0m \e[35mopeningBracketsCountArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdkk9fftr.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mclosingBracketsCountArrayLength\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsCountArrayLength is already defined as \e[33mvariable\e\
    [0m \e[35mclosingBracketsCountArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdkk9fftr.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketsCountArrayLength\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsCountArrayLength is already defined as \e[33mvariable\e\
    [0m \e[35mopeningBracketsCountArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdkk9fftr.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mclosingBracketsCountArrayLength\e[0m = muta"
  stdout: ''
  timestamp: 1660009900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.HashMap[String, Int]()\n        val\
    \ closingBracketsMap = mutable.HashMap[String, Int]()\n        openingBrackets.foreach(openingBracket\
    \ => {\n            val closingBracket = closingBrackets(openingBracketsMap.get(openingBracket))\n\
    \            openingBracketsMap.put(openingBracket, openingBracketsMap.get(openingBracket)\
    \ + 1)\n            closingBracketsMap.put(closingBracket, closingBracketsMap.get(closingBracket)\
    \ + 1)\n        })\n        openingBracketsMap.size == closingBracketsMap.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk92qi260.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpk92qi260.scala:12:33 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = mutable.HashSet[Char]()\n        val closingBrackets\
    \ = mutable.HashSet[Char]()\n        var openingBracketsCount = 0\n        var\
    \ closingBracketsCount = 0\n        for(i <- 0 until bracketsArray.length){\n\
    \            if(bracketsArray(i) == '<'){\n                openingBracketsCount\
    \ += 1\n                openingBrackets += bracketsArray(i)\n            }\n \
    \           else if(bracketsArray(i) == '>'){\n                closingBracketsCount\
    \ += 1\n                closingBrackets += bracketsArray(i)\n            }\n \
    \       }\n        openingBracketsCount == closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphiqh5fos.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphiqh5fos.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.zipAll(closingBrackets,\
    \ (a, b) => a != b).forall(x => x._2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmph6cdlsxw.scala:9:49 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        openingBrackets.zipAll(closingBrackets, (\e[36ma\e\
    [0m, \e[36mb\e[0m) => a != b).forall(\e[36mx\e[0m => x._2)\n\e[31m\e[31m  |\e\
    [0m                                                 ^\e[0m\n\e[31m  |\e[0m   \
    \                         Missing parameter type\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m                            I could not infer the type of the parameter a.\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmph6cdlsxw.scala:9:52 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        openingBrackets.zipAll(closingBrackets, (\e[36ma\e\
    [0m, \e[36mb\e[0m) => a != b).forall(\e[36mx\e[0m => x._2)\n\e[31m\e[31m  |\e\
    [0m                                                    ^\e[0m\n\e[31m  |\e[0m\
    \                            Missing parameter type\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m                            I could not infer the type of the parameter b.\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpobs_qr5k.scala:14)\n\tat Problem.main(tmpobs_qr5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = mutable.HashSet[Char]()\n        val closingBrackets\
    \ = mutable.HashSet[Char]()\n        val openingBracketsCount = mutable.HashMap[Char,\
    \ Int]()\n        val closingBracketsCount = mutable.HashMap[Char, Int]()\n  \
    \      val openingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n      \
    \  val closingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n        for\
    \ (i <- 0 until bracketsArray.length) {\n            val currentChar = bracketsArray(i)\n\
    \            if (currentChar == '<') {\n                openingBrackets += currentChar\n\
    \                openingBracketsCount += currentChar -> 1\n                openingBracketsCountArray\
    \ += openingBracketsCount.getOrElse(currentChar, 0)\n            }\n         \
    \   if (currentChar == '>') {\n                closingBrackets += currentChar\n\
    \                closingBracketsCount += currentChar -> 1\n                closingBracketsCountArray\
    \ += closingBracketsCount.getOrElse(currentChar, 0)\n            }\n        }\n\
    \        openingBracketsCountArray.forall(x => x == closingBracketsCountArray.last)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx44epzeg.scala:8:30 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mopeningBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx44epzeg.scala:9:30 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mclosingBrackets\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                              Not found: mutable\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx44epzeg.scala:10:35 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsCount\e[0m\
    \ = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpx44epzeg.scala:11:35 ------------------------\e[0m\e\
    [0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsCount\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx44epzeg.scala:12:40\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mopeningBracketsCountArray\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer e"
  stdout: ''
  timestamp: 1660009898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBracketsCount = bracketsArray.count(c => c == '<')\n     \
    \   val closingBracketsCount = bracketsArray.count(c => c == '>')\n        openingBracketsCount\
    \ == closingBracketsCount\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbr4qi7uz.scala:18)\n\tat Problem.main(tmpbr4qi7uz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val bracketsArrayLength = bracketsArray.length\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '<')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == '>')\n        openingBracketsCount != closingBracketsCount\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq3uc97nh.scala:14)\n\tat Problem.main(tmpq3uc97nh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.zipAll(closingBrackets,\
    \ (a, b) => a + b).forall(x => x == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmplkvv8j6v.scala:9:49 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        openingBrackets.zipAll(closingBrackets, (\e[36ma\e\
    [0m, \e[36mb\e[0m) => a + b).forall(\e[36mx\e[0m => x == \e[31m0\e[0m)\n\e[31m\e\
    [31m  |\e[0m                                                 ^\e[0m\n\e[31m  |\e\
    [0m                            Missing parameter type\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m                            I could not infer the type of the parameter\
    \ a.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmplkvv8j6v.scala:9:52 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        openingBrackets.zipAll(closingBrackets, (\e[36ma\e\
    [0m, \e[36mb\e[0m) => a + b).forall(\e[36mx\e[0m => x == \e[31m0\e[0m)\n\e[31m\e\
    [31m  |\e[0m                                                    ^\e[0m\n\e[31m\
    \  |\e[0m                            Missing parameter type\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m                            I could not infer the type of the parameter\
    \ b.\n2 errors found\n"
  stdout: ''
  timestamp: 1660009899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpobs_qr5k.scala:14)\n\tat Problem.main(tmpobs_qr5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas73yff5.scala:16)\n\tat Problem.main(tmpas73yff5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas73yff5.scala:16)\n\tat Problem.main(tmpas73yff5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBracketsArray = Array(\"<\", \">\")\n        val closingBracketsArray\
    \ = Array(\"<\", \">\")\n        val openingBracketsCount = openingBracketsArray.length\n\
    \        val closingBracketsCount = closingBracketsArray.length\n        val openingBracketsMap\
    \ = mutable.HashMap[Char, Int]()\n        val closingBracketsMap = mutable.HashMap[Char,\
    \ Int]()\n        var openingBracketsCountInCurrentLine = 0\n        var closingBracketsCountInCurrentLine\
    \ = 0\n        var currentLine = 0\n        var currentLineChar = 0\n        var\
    \ currentLineCharCount = 0\n        var currentLineCharCountInCurrentLine = 0\n\
    \        var currentLineCharCountInCurrentLineInCurrentLine = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var \n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpj3bsk6mv.scala:32:11 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3bsk6mv.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj3bsk6mv.scala:13:33 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj3bsk6mv.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.Map[Char, Int]()\n        val closingBracketsMap\
    \ = mutable.Map[Char, Int]()\n        openingBrackets.foreach(c => {\n       \
    \     openingBracketsMap += (c -> 1)\n        })\n        closingBrackets.foreach(c\
    \ => {\n            closingBracketsMap += (c -> 1)\n        })\n        openingBracketsMap.forall(c\
    \ => closingBracketsMap.get(c.toChar) != null)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1w03ska.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpm1w03ska.scala:12:33 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.Map[\e[35mChar\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        if (openingBracketsCount != closingBracketsCount) {\n            return\
    \ false\n        }\n        var openingBracketsIndex = 0\n        var closingBracketsIndex\
    \ = 0\n        while (openingBracketsIndex < openingBracketsCount && closingBracketsIndex\
    \ < closingBracketsCount) {\n            if (openingBrackets(openingBracketsIndex)\
    \ != closingBrackets(closingBracketsIndex)) {\n                return false\n\
    \            }\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        }\n        if (openingBracketsIndex != openingBracketsCount) {\n\
    \            return false\n        }\n        if (closingBracketsIndex != closingBracketsCount)\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpohpm33ai.scala:32)\n\tat Problem.main(tmpohpm33ai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas73yff5.scala:16)\n\tat Problem.main(tmpas73yff5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        if (openingBracketsCount != closingBracketsCount) {\n            return\
    \ false\n        }\n        val openingBracketsMap = mutable.HashMap[Char, Int]()\n\
    \        val closingBracketsMap = mutable.HashMap[Char, Int]()\n        for (i\
    \ <- 0 until openingBracketsCount) {\n            val openingBracket = openingBrackets(i)\n\
    \            val closingBracket = closingBrackets(i)\n            val openingBracketIndex\
    \ = openingBracket.length\n            val closingBracketIndex = closingBracket.length\n\
    \            if (openingBracketIndex != closingBracketIndex) {\n             \
    \   return false\n            }\n            openingBracketsMap(openingBracket)\
    \ = (openingBracketsMap(openingBracket) + 1)\n            closingBracketsMap(closingBracket)\
    \ = (closingBracketsMap(closingBracket) + 1)\n        }\n        for (i <- 0 until\
    \ closingBracketsCount) {\n            val closingBracket = closingBrackets(i)\n\
    \            val closingBracketIndex = closingBracket.length\n            if (openingBracketsMap(closingBracket)\
    \ != closingBracketsMap(closingBracket)) {\n                return false\n   \
    \         }\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjtgmbs0.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcjtgmbs0.scala:15:33 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.Map[String, Int]()\n        val closingBracketsMap\
    \ = mutable.Map[String, Int]()\n        openingBrackets.foreach(x => {\n     \
    \       val y = x.split(\"[\")\n            val z = y.length\n            val\
    \ a = y.last\n            val b = y.head\n            openingBracketsMap += (a\
    \ -> 1)\n            openingBracketsMap += (b -> 1)\n        })\n        closingBrackets.foreach(x\
    \ => {\n            val y = x.split(\"[\")\n            val z = y.length\n   \
    \         val a = y.last\n            val b = y.head\n            closingBracketsMap\
    \ += (a -> 1)\n            closingBracketsMap += (b -> 1)\n        })\n      \
    \  openingBracketsMap.forall { case (k, v) => closingBracketsMap.get(k) == v }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt1vyg5gh.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpt1vyg5gh.scala:12:33 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas73yff5.scala:16)\n\tat Problem.main(tmpas73yff5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.Map[Char, Int]()\n        val closingBracketsMap\
    \ = mutable.Map[Char, Int]()\n        openingBrackets.foreach(c => openingBracketsMap\
    \ += c -> 0)\n        closingBrackets.foreach(c => closingBracketsMap += c ->\
    \ 0)\n        openingBracketsMap.foreach { case (c, count) =>\n            closingBracketsMap\
    \ += c -> count\n        }\n        openingBracketsMap.toSeq.forall(c => closingBracketsMap.getOrElse(c,\
    \ 0) == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt1u8y2xo.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpt1u8y2xo.scala:12:33 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.Map[\e[35mChar\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpobs_qr5k.scala:14)\n\tat Problem.main(tmpobs_qr5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpobs_qr5k.scala:14)\n\tat Problem.main(tmpobs_qr5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.size\
    \ == closingBrackets.size\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7rnw2kll.scala:12)\n\tat Problem.main(tmp7rnw2kll.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val bracketsArrayLength = bracketsArray.length\n        val openingBracketsCount\
    \ = new mutable.HashMap[Char, Int]()\n        val closingBracketsCount = new mutable.HashMap[Char,\
    \ Int]()\n        var openingBracketsCountCount = 0\n        var closingBracketsCountCount\
    \ = 0\n        var openingBracketsCountCountMax = 0\n        var closingBracketsCountCountMax\
    \ = 0\n        var openingBracketsCountCountMin = 0\n        var closingBracketsCountCountMin\
    \ = 0\n        var openingBracketsCountCountMaxMin = 0\n        var closingBracketsCountCountMaxMin\
    \ = 0\n        var openingBracketsCountCountMinMax = 0\n        var closingBracketsCountCountMinMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMax = 0\n        var closingBracketsCountCountMaxMinMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMax = 0\n        var closingBracketsCountCountMinMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMaxMinMaxMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMaxMinMaxMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8jqb7xag.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8jqb7xag.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketsCountCountMaxMinMaxMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mopeningBracketsCountCountMaxMinMaxMax is already defined as \e[33mvariable\e\
    [0m \e[35mopeningBracketsCountCountMaxMinMaxMax\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8jqb7xag.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mclosingBracketsCountCountMaxMinMaxMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mclosingBracketsCountCountMaxMinMaxMax is already defined as \e[33mvariable\e\
    [0m \e[35mclosingBracketsCountCountMaxMinMaxMax\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8jqb7xag.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mopeningBracketsCountCountMinMaxMaxMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mopeningBracketsCountCountMinMaxMaxMax is already defined as \e[33mvariable\e\
    [0m \e[35mopeningBracketsCountCountMinMaxMaxMax\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8jqb7xag.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mclosingBracketsCountCountMinMaxMaxMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas73yff5.scala:16)\n\tat Problem.main(tmpas73yff5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.size\
    \ == closingBrackets.size\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7rnw2kll.scala:12)\n\tat Problem.main(tmp7rnw2kll.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        var openingBrackets = 0\n        var closingBrackets = 0\n        var\
    \ openingBracketsArray = new Array[Char](bracketsArray.length)\n        var closingBracketsArray\
    \ = new Array[Char](bracketsArray.length)\n        var openingBracketsArrayIndex\
    \ = 0\n        var closingBracketsArrayIndex = 0\n        var openingBracketsArrayIndex2\
    \ = 0\n        var closingBracketsArrayIndex2 = 0\n        var openingBracketsArrayIndex3\
    \ = 0\n        var closingBracketsArrayIndex3 = 0\n        var openingBracketsArrayIndex4\
    \ = 0\n        var closingBracketsArrayIndex4 = 0\n        var openingBracketsArrayIndex5\
    \ = 0\n        var closingBracketsArrayIndex5 = 0\n        var openingBracketsArrayIndex6\
    \ = 0\n        var closingBracketsArrayIndex6 = 0\n        var openingBracketsArrayIndex7\
    \ = 0\n        var closingBracketsArrayIndex7 = 0\n        var openingBracketsArrayIndex8\
    \ = 0\n        var closingBracketsArrayIndex8 = 0\n        var openingBracketsArrayIndex9\
    \ = 0\n        var closingBracketsArrayIndex9 = 0\n        var openingBracketsArrayIndex10\
    \ = 0\n        var closingBracketsArrayIndex10 = 0\n        var openingBracketsArrayIndex11\
    \ = 0\n        var closingBracketsArrayIndex11 = 0\n        var openingBracketsArrayIndex12\
    \ = 0\n        var closingBracketsArrayIndex12 = 0\n        var openingBracketsArrayIndex13\
    \ = 0\n        var closingBracketsArrayIndex13 = 0\n        var openingBracketsArrayIndex14\
    \ = 0\n        var closingBracketsArrayIndex14 = 0\n        var openingBracketsArrayIndex15\
    \ = 0\n        var closingBracketsArrayIndex15 = 0\n        var openingBracketsArrayIndex16\
    \ = 0\n        var closingBracketsArrayIndex16 = 0\n        var openingBracketsArrayIndex17\
    \ = 0\n        var closingBracketsArrayIndex17 = 0\n        var openingBracketsArrayIndex18\
    \ = 0\n        var closingBracketsArrayIndex18 = 0\n        var openingBracketsArrayIndex19\
    \ = 0\n        var closingBracketsArrayIndex19 = 0\n        var openingBracketsArrayIndex20\
    \ = 0\n        var closingBracketsArrayIndex20 = 0\n        var openingBracketsArrayIndex21\
    \ = 0\n        var closingBracketsArrayIndex21 = 0\n        var openingBracketsArrayIndex22\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0idca_oy.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0idca_oy.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.size\
    \ == closingBrackets.size\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7rnw2kll.scala:12)\n\tat Problem.main(tmp7rnw2kll.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = new mutable.HashMap[Char, Int]()\n        val\
    \ closingBracketsMap = new mutable.HashMap[Char, Int]()\n        openingBrackets.foreach(c\
    \ => {\n            openingBracketsMap += (c -> 1)\n        })\n        closingBrackets.foreach(c\
    \ => {\n            closingBracketsMap += (c -> 1)\n        })\n        openingBracketsMap.foreach\
    \ { case (k, v) =>\n            closingBracketsMap -= (k)\n        }\n       \
    \ openingBracketsMap.size == closingBracketsCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsqakh69t.scala:11:37 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsqakh69t.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        if (openingBracketsCount != closingBracketsCount) {\n            return\
    \ false\n        }\n        val openingBracketsMap = openingBrackets.toMap\n \
    \       val closingBracketsMap = closingBrackets.toMap\n        val openingBracketsKeys\
    \ = openingBracketsMap.keys\n        val closingBracketsKeys = closingBracketsMap.keys\n\
    \        val openingBracketsValues = openingBracketsMap.values.toList\n      \
    \  val closingBracketsValues = closingBracketsMap.values.toList\n        val openingBracketsValuesCount\
    \ = openingBracketsValues.size\n        val closingBracketsValuesCount = closingBracketsValues.size\n\
    \        if (openingBracketsValuesCount != closingBracketsValuesCount) {\n   \
    \         return false\n        }\n        val openingBracketsKeysCount = openingBracketsKeys.size\n\
    \        val closingBracketsKeysCount = closingBracketsKeys.size\n        if (openingBracketsKeysCount\
    \ != closingBracketsKeysCount) {\n            return false\n        }\n      \
    \  val openingBracketsValuesList = openingBracketsValues.toList\n        val closingBracketsValuesList\
    \ = closingBracketsValues.toList\n        val openingBracketsValuesCount = openingBracketsValuesList.size\n\
    \        val closingBracketsValuesCount = closingBracketsValuesList.size\n   \
    \     if (openingBracketsValuesCount != closingBracketsValuesCount) {\n      \
    \      return false\n        }\n        val openingBracketsValuesSet = openingBracketsValuesList.toSet\n\
    \        val closingBracketsValuesSet = closingBracketsValuesList.toSet\n    \
    \    val openingBracketsValuesSetCount = openingBracketsValuesSet.size\n     \
    \   val closingBracketsValuesSetCount = closingBracketsValuesSet.size\n      \
    \  if (openingBracketsValuesSetCount != closingBracketsValuesSetCount) {\n   \
    \         return false\n        }\n        val openingBracketsKeysSet = openingBracketsKeysList.toSet\n\
    \        val closingBracketsKeysSet = closingBracketsKeysList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpordvh8qf.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsValuesCount\e\
    [0m = openingBracketsValuesList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsValuesCount is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsValuesCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpordvh8qf.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsValuesCount\e\
    [0m = closingBracketsValuesList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsValuesCount is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsValuesCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- Error: /tmp/tmpordvh8qf.scala:14:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = openingBrackets.toMap\n\e[31m\e[31m   |\e[0m                             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \         Cannot prove that String <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                                     where:    K is a type variable\n\e[31m \
    \  |\e[0m                                               V is a type variable\n\
    \e[31m   |\e[0m                                     .\n\e[31m\e[31m-- Error: /tmp/tmpordvh8qf.scala:15:54\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = closingBrackets.toMap\n\e[31m\e\
    [31m   |\e[0m                                                      ^\e[0m\n\e\
    [31m   |\e[0m                                     Cannot prove that String <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                   \
    \  wher"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t0d0obo.scala:12)\n\tat Problem.main(tmp6t0d0obo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m_krem4.scala:14)\n\tat Problem.main(tmp7m_krem4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.size\
    \ == closingBrackets.size\n    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7rnw2kll.scala:12)\n\tat Problem.main(tmp7rnw2kll.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb1cdjlv.scala:14)\n\tat Problem.main(tmpdb1cdjlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.HashMap[String, Int]()\n        val\
    \ closingBracketsMap = mutable.HashMap[String, Int]()\n        openingBrackets.foreach(x\
    \ => {\n            val openingBracket = x.split(\"[\")\n            val closingBracket\
    \ = x.split(\"]\")\n            openingBracketsMap(openingBracket(0)) = openingBracketsMap.getOrElse(openingBracket(0),\
    \ 0) + 1\n            closingBracketsMap(closingBracket(0)) = closingBracketsMap.getOrElse(closingBracket(0),\
    \ 0) + 1\n        })\n        closingBracketsMap.foreach {\n            case (closingBracket,\
    \ count) =>\n                if (openingBracketsMap.get(closingBracket) == count)\
    \ {\n                    true\n                } else {\n                    false\n\
    \                }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbcpczre2.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsMap\e[0m\
    \ = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbcpczre2.scala:12:33 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mclosingBracketsMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        var openingBrackets : List[Char] = Nil\n        var closingBrackets :\
    \ List[Char] = Nil\n        var openingBracketsCount : Int = 0\n        var closingBracketsCount\
    \ : Int = 0\n        var openingBracketsIndex : Int = 0\n        var closingBracketsIndex\
    \ : Int = 0\n        var openingBracketsIndex2 : Int = 0\n        var closingBracketsIndex2\
    \ : Int = 0\n        var openingBracketsIndex3 : Int = 0\n        var closingBracketsIndex3\
    \ : Int = 0\n        var openingBracketsIndex4 : Int = 0\n        var closingBracketsIndex4\
    \ : Int = 0\n        var openingBracketsIndex5 : Int = 0\n        var closingBracketsIndex5\
    \ : Int = 0\n        var openingBracketsIndex6 : Int = 0\n        var closingBracketsIndex6\
    \ : Int = 0\n        var openingBracketsIndex7 : Int = 0\n        var closingBracketsIndex7\
    \ : Int = 0\n        var openingBracketsIndex8 : Int = 0\n        var closingBracketsIndex8\
    \ : Int = 0\n        var openingBracketsIndex9 : Int = 0\n        var closingBracketsIndex9\
    \ : Int = 0\n        var openingBracketsIndex10 : Int = 0\n        var closingBracketsIndex10\
    \ : Int = 0\n        var openingBracketsIndex11 : Int = 0\n        var closingBracketsIndex11\
    \ : Int = 0\n        var openingBracketsIndex12 : Int = 0\n        var closingBracketsIndex12\
    \ : Int = 0\n        var openingBracketsIndex13 : Int = 0\n        var closingBracketsIndex13\
    \ : Int = 0\n        var openingBracketsIndex14 : Int = 0\n        var closingBracketsIndex14\
    \ : Int = 0\n        var openingBracketsIndex15 : Int = 0\n        var closingBracketsIndex15\
    \ : Int = 0\n        var openingBracketsIndex16 : Int = 0\n        var closingBracketsIndex16\
    \ : Int = 0\n        var openingBracketsIndex17 : Int = 0\n        var closingBracketsIndex17\
    \ : Int = 0\n        var openingBracketsIndex18 : Int = 0\n        var closingBracketsIndex18\
    \ : Int = 0\n        var openingBracketsIndex19 : Int = 0\n        var closingBracketsIndex19\
    \ : Int = 0\n        var openingBracketsIndex20 : Int = 0\n        var closingBracketsIndex20\
    \ : Int = 0\n        var open\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbkbsjinm.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbkbsjinm.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas73yff5.scala:16)\n\tat Problem.main(tmpas73yff5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = mutable.HashSet[Char]()\n        val closingBrackets\
    \ = mutable.HashSet[Char]()\n        val openingBracketsArray = mutable.ArrayBuffer.empty[Char]\n\
    \        val closingBracketsArray = mutable.ArrayBuffer.empty[Char]\n        val\
    \ openingBracketsCount = mutable.HashSet[Int]()\n        val closingBracketsCount\
    \ = mutable.HashSet[Int]()\n        val openingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n    \
    \    val openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n  \
    \      val closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        val closingBracketsCountArrayLength = mutable.Array\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(correctBracketing((\"<>\")) == (true));\n   \
    \ assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nlringq.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mopeningBracketsCountArrayLength\e\
    [0m = mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mopeningBracketsCountArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsCountArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nlringq.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclosingBracketsCountArrayLength\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsCountArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mclosingBracketsCountArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nlringq.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopeningBracketsCountArrayLength\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopeningBracketsCountArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mopeningBracketsCountArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5nlringq.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclosingBracketsCountArrayLength\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosingBracketsCountArrayLength is already defined a"
  stdout: ''
  timestamp: 1660009902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4abjsm2_.scala:14)\n\tat Problem.main(tmp4abjsm2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009891
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every\
    \ opening bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
    \ : String) : Boolean = {\n        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn39x_2t8.scala:12)\n\tat Problem.main(tmpn39x_2t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009892
