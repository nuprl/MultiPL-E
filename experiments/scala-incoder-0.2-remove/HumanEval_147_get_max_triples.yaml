name: HumanEval_147_get_max_triples
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i\
  \ * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where\
  \ i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example\
  \ :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
  \ is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
  \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
  \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
completions: ["        val a = Array.ofDim[Int](n)\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while (i < n && j <\
    \ n && k < n) {\n            a(i) = i * i - i + 1\n            i += 1\n      \
    \      j += 1\n            k += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ < n).map(_._1).sum\n        val multiple = triples % 3\n        if (multiple\
    \ == 0) count else -1", "        var a = Array.ofDim[Int](n)\n        for(i <-\
    \ 0 until n){\n            for(j <- 0 until n){\n                for(k <- 0 until\
    \ n){\n                    if(i<j && j<k && a(i)+a(j)+a(k) == 3*a(i)+3*a(j)+3*a(k)){\n\
    \                        a(i) = a(i)+a(j)+a(k);\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        a.toList.filter(_%3\
    \ ==0).length", "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int,\
    \ Int]()\n        for( i <- 1 to n ) {\n            val j = i\n            val\
    \ k = n - i\n            if( i < j ) {\n                val temp = i\n       \
    \         i = j\n                j = temp\n            }\n            if( j <\
    \ k ) {\n                val temp = j\n                j = k\n               \
    \ k = temp\n            }\n            if( i < k ) {\n                val temp\
    \ = i\n                i = k\n                k = temp\n            }\n      \
    \      if( i == j ) {\n                val temp = i\n                i = j\n \
    \               j = temp\n            }\n            if( i == k ) {\n        \
    \        val temp = i\n                i = k\n                k = temp\n     \
    \       }\n            if( j == k ) {\n                val temp = j\n        \
    \        j = k\n                k = temp\n            }\n            if( i ==\
    \ j ) {\n                val temp = i\n                i = j\n               \
    \ j = temp\n            }\n            if( i == k ) {\n                val temp\
    \ = i\n                i = k\n                k = temp\n            }\n      \
    \      if( j == k ) {\n                val temp = j\n                j = k\n \
    \               k = temp\n            }\n            if( i == j ) {\n        \
    \        val temp = i\n                i = j\n                j = temp\n     \
    \       }\n            if( i == k ) {\n                val temp = i\n        \
    \        i = k\n                k = temp\n            }\n            if( j ==\
    \ k ) {\n                val temp = j\n                j = k\n               \
    \ k = temp\n            }\n            if( i == j ) {\n                val temp\
    \ = i\n                i = j\n                j = temp\n            }\n      \
    \      if( i == k ) {\n                val temp = i\n                i = k\n \
    \               k = temp\n            }\n            if( j == k ) {\n        \
    \        val temp = j\n                j = k\n                k = temp\n     \
    \       }\n            if( i == j ) {\n                val temp = i\n        \
    \        i = j\n                j = temp\n            }\n            if( i ==\
    \ k ) {\n                val temp = i\n                i = k\n               \
    \ k = temp\n            }\n            if( j == k ) {\n                val temp\
    \ = j\n                j = k\n                k = temp\n            }\n      \
    \      if( i == j ) {\n                val temp = i\n                i = j\n \
    \               j = temp\n            }\n            if( i == k ) {\n        \
    \        val temp = i\n                i = k\n                k = temp\n     \
    \       }\n            if( j == k ) {\n                val temp = j\n        \
    \        j = k\n                k = temp\n            }\n            if( i ==\
    \ j ) {\n                val temp = i\n                i = j\n               \
    \ j = temp\n            }\n            ", "        val a = Array.ofDim[Int](n)\n\
    \        val m = a.length\n        val n = a.length\n        val result = new\
    \ mutable.HashMap[Int, Int]()\n        val triples = mutable.HashMap[Int, Int]()\n\
    \        val triple = mutable.HashMap[Int, Int]()\n        val triple2 = mutable.HashMap[Int,\
    \ Int]()\n        val triple3 = mutable.HashMap[Int, Int]()\n        val triple4\
    \ = mutable.HashMap[Int, Int]()\n        val triple5 = mutable.HashMap[Int, Int]()\n\
    \        val triple6 = mutable.HashMap[Int, Int]()\n        val triple7 = mutable.HashMap[Int,\
    \ Int]()\n        val triple8 = mutable.HashMap[Int, Int]()\n        val triple9\
    \ = mutable.HashMap[Int, Int]()\n        val triple10 = mutable.HashMap[Int, Int]()\n\
    \        val triple11 = mutable.HashMap[Int, Int]()\n        val triple12 = mutable.HashMap[Int,\
    \ Int]()\n        val triple13 = mutable.HashMap[Int, Int]()\n        val triple14\
    \ = mutable.HashMap[Int, Int]()\n        val triple15 = mutable.HashMap[Int, Int]()\n\
    \        val triple16 = mutable.HashMap[Int, Int]()\n        val triple17 = mutable.HashMap[Int,\
    \ Int]()\n        val triple18 = mutable.HashMap[Int, Int]()\n        val triple19\
    \ = mutable.HashMap[Int, Int]()\n        val triple20 = mutable.HashMap[Int, Int]()\n\
    \        val triple21 = mutable.HashMap[Int, Int]()\n        val triple22 = mutable.HashMap[Int,\
    \ Int]()\n        val triple23 = mutable.HashMap[Int, Int]()\n        val triple24\
    \ = mutable.HashMap[Int, Int]()\n        val triple25 = mutable.HashMap[Int, Int]()\n\
    \        val triple26 = mutable.HashMap[Int, Int]()\n        val triple27 = mutable.HashMap[Int,\
    \ Int]()\n        val triple28 = mutable.HashMap[Int, Int]()\n        val triple29\
    \ = mutable.HashMap[Int, Int]()\n        val triple30 = mutable.HashMap[Int, Int]()\n\
    \        val triple31 = mutable.HashMap[Int, Int]()\n        val triple32 = mutable.Hash",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In", "        val a = Array.ofDim[Int](n)\n        val m = scala.math.pow(3,\
    \ n)\n        val n = scala.math.pow(3, n-1)\n        val k = scala.math.pow(3,\
    \ n-2) \n        val i = scala.math.pow(3, n-3) \n        val j = scala.math.pow(3,\
    \ n-4) \n        val l = scala.math.pow(3, n-5) \n        val m = scala.math.pow(3,\
    \ n-6) \n        val n = scala.math.pow(3, n-7) \n        val k = scala.math.pow(3,\
    \ n-8) \n        val i = scala.math.pow(3, n-9) \n        val j = scala.math.pow(3,\
    \ n-10) \n        val l = scala.math.pow(3, n-11) \n        val m = scala.math.pow(3,\
    \ n-12) \n        val n = scala.math.pow(3, n-13) \n        val k = scala.math.pow(3,\
    \ n-14) \n        val i = scala.math.pow(3, n-15) \n        val j = scala.math.pow(3,\
    \ n-16) \n        val l = scala.math.pow(3, n-17) \n        val m = scala.math.pow(3,\
    \ n-18) \n        val n = scala.math.pow(3, n-19) \n        val k = scala.math.pow(3,\
    \ n-20) \n        val i = scala.math.pow(3, n-21) \n        val j = scala.math.pow(3,\
    \ n-22) \n        val l = scala.math.pow(3, n-23) \n        val m = scala.math.pow(3,\
    \ n-24) \n        val n = scala.math.pow(3, n-25) \n        val k = scala.math.pow(3,\
    \ n-26) \n        val i = scala.math.pow(3, n-27) \n        val j = scala.math.pow(3,\
    \ n-28) \n        val l = scala.math.pow(3, n-29) \n        val m = scala.math.pow(3,\
    \ n-30) \n        val n = scala.math.pow(3, n-31) \n        val k = scala.math.pow(3,\
    \ n-32) \n        val i = scala.math.pow(3, n-33) \n        val j = scala.math.pow(3,\
    \ n-34) \n        val l = scala.math.pow(3, n-35) \n        val m = scala.math.pow(3,\
    \ n-36) \n        val n = scala.math.pow(3, n-37) \n        val k = scala.math.pow(3,\
    \ n-38) \n        val i = scala.math.pow(3, n-39) \n        val j = scala.math.pow(3,\
    \ n-40) \n        val l = scala.math.pow(3, n-41) \n", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            val j = i + 1\n\
    \            val k = n - i\n            val sum = i * i - i + 1\n            a(i)\
    \ = i * i - i + 1\n            val key = a(i) + a(i) + a(i)\n            val value\
    \ = count(key)\n            if(value == 0){\n                count(key) = 1\n\
    \            }else{\n                count(key) = value + 1\n            }\n \
    \       }\n        val triples = mutable.Map[Int, Int]()\n        for(i <- 0 until\
    \ n){\n            val j = i + 1\n            val k = n - i\n            val sum\
    \ = i * i - i + 1\n            val key = a(i) + a(i) + a(i)\n            val value\
    \ = count(key)\n            if(value == 3){\n                triples(key) = value\n\
    \            }\n        }\n        val maxTriples = triples.maxBy(_._2)\n    \
    \    return maxTriples._1", "        var a = new Array[Int](n)\n        for( i\
    \ <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n        var count\
    \ = 0\n        for( i <- 0 until n ) {\n            for( j <- 0 until n ) {\n\
    \                for( k <- 0 until n ) {\n                    if( i < j < k &&\
    \ a(i) + a(j) + a(k) % 3 == 0 ) {\n                        count += 1\n      \
    \              }\n                }\n            }\n        }\n        count",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until n) {\n                for (k <- 0 until n) {\n\
    \                    if (a(i) + a(j) + a(k) % 3 == 0) {\n                    \
    \    count(a(i), a(j), a(k)) = count(a(i), a(j), a(k)) + 1\n                 \
    \   }\n                }\n            }\n        }\n        count.values.toList.max",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val sums = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, ", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n", "        val a = Array.ofDim[Int](n)\n\
    \        val result = mutable.ArrayBuffer.empty[Int]\n        val max = (3 * n)\
    \ - 1\n        val min = (3 * n) / 2\n        val mid = max / 2\n        var i\
    \ = 0\n        var j = 0\n        var k = 0\n        while (i < n) {\n       \
    \     a(i) = i * i - i + 1\n            i += 1\n        }\n        while (j <\
    \ n) {\n            a(j) = j * j - j + 1\n            j += 1\n        }\n    \
    \    while (k < n) {\n            a(k) = k * k - k + 1\n            k += 1\n \
    \       }\n        val n = a.length\n        var count = 0\n        while (i <\
    \ n) {\n            val j = i + 1\n            while (j < n) {\n             \
    \   val k = j + 1\n                while (k < n) {\n                    if (a(i)\
    \ + a(j) + a(k) == mid) {\n                        count += 1\n              \
    \      }\n                    k += 1\n                }\n                j +=\
    \ 1\n            }\n            i += 1\n        }\n        result(0) = count\n\
    \        result.length", "        val a = Array.ofDim[Int](n)\n        val count\
    \ = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n \
    \       val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[In",
  "        val a = Array.ofDim[Int](n)\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val max = a.length - 1\n        val max2 = a.length\
    \ - 1\n        val max3 = a.length - 1\n        val max4 = a.length - 1\n    \
    \    val max5 = a.length - 1\n        val max6 = a.length - 1\n        val max7\
    \ = a.length - 1\n        val max8 = a.length - 1\n        val max9 = a.length\
    \ - 1\n        val max10 = a.length - 1\n        val max11 = a.length - 1\n  \
    \      val max12 = a.length - 1\n        val max13 = a.length - 1\n        val\
    \ max14 = a.length - 1\n        val max15 = a.length - 1\n        val max16 =\
    \ a.length - 1\n        val max17 = a.length - 1\n        val max18 = a.length\
    \ - 1\n        val max19 = a.length - 1\n        val max20 = a.length - 1\n  \
    \      val max21 = a.length - 1\n        val max22 = a.length - 1\n        val\
    \ max23 = a.length - 1\n        val max24 = a.length - 1\n        val max25 =\
    \ a.length - 1\n        val max26 = a.length - 1\n        val max27 = a.length\
    \ - 1\n        val max28 = a.length - 1\n        val max29 = a.length - 1\n  \
    \      val max30 = a.length - 1\n        val max31 = a.length - 1\n        val\
    \ max32 = a.length - 1\n        val max33 = a.length - 1\n        val max34 =\
    \ a.length - 1\n        val max35 = a.length - 1\n        val max36 = a.length\
    \ - 1\n        val max37 = a.length - 1\n        val max38 = a.length - 1\n  \
    \      val max39 = a.length - 1\n        val max40 = a.length - 1\n        val\
    \ max41 = a.length - 1\n        val max42 = a.length - 1\n        val max43 =\
    \ a.length - 1\n        val max44 = a.length - 1\n        val max45 = a.length\
    \ - 1\n        val max46 = a.length - 1\n        val max47 = a.length - 1\n  \
    \      val max48 = a.length - 1\n        val max49 = a.length - 1\n        val\
    \ max50 = a.length - 1\n        val max51 = a.length - 1\n        val max52 =\
    \ a.length - 1\n        val max53 = a.length - 1\n        val max54 = a.length\
    \ - 1\n        val max55 = a.length - 1\n        val max56 = ", "        var triples\
    \ = 0\n        var a = new Array[Int](n)\n        for(i<- 1 to n){\n         \
    \   a(i) = i * i - i + 1\n        }\n        for(i<- 1 to n){\n            for(j<-\
    \ 1 to n){\n                for(k <- 1 to n){\n                    if(i<j && i<k\
    \ && j<k){\n                        if(a(i) + a(j) + a(k) == 3){\n           \
    \                 triples += 1\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return triples", " \
    \       val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n + 1)\n        a(0) = 1\n        a(1) = 3\n \
    \       a(2) = 7\n        a(3) = 13\n        a(4) = 21\n        val triples =\
    \ mutable.ListBuffer[Int]()\n        for (i <- 0 until a.length) {\n         \
    \   for (j <- 0 until a.length) {\n                for (k <- 0 until a.length)\
    \ {\n                    if (i != j && i != k && j != k) {\n                 \
    \       val sum = i * i + j * j + k * k\n                        if (sum % 3 ==\
    \ 0) {\n                            triples += (i * i + j * j + k * k)\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n        triples.toList.length", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0)\n        triples.foreach { case (triple, i) =>\n            val key\
    \ = triple(0)\n            val value = triple(1)\n            val count = count(key)\n\
    \            if (count == 0) {\n                count(key) = value\n         \
    \   } else {\n                count(key) = count + value\n            }\n    \
    \    }\n        count(triples.head._1)", "        var a = Array.ofDim[Int](n)\n\
    \        for( i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n\
    \        val res = a.filter(_ % 3 == 0).length\n        a.clear()\n        res",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        for (i <- 1 to n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        val max = 0\n        for\
    \ (i <- 1 to n) {\n            for (j <- 1 to n) {\n                for (k <-\
    \ 1 to n) {\n                    if (a(i) + a(j) + a(k) % 3 == 0) {\n        \
    \                m += (i + j + k)\n                    }\n                }\n\
    \            }\n        }\n        m.toList.sorted.last", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[In", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[In", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, ", "        val a = Array.ofDim[Int](n+1)\n        a(0) =\
    \ 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n        a(4) = 21\n\
    \        val ans = a.zipWithIndex.foldLeft(0)((acc, i) => {\n            val j\
    \ = i._2\n            val k = i._1\n            val sum = i._1 + i._2 + i._3\n\
    \            if (sum % 3 == 0) {\n                acc + 1\n            } else\
    \ {\n                acc\n            }\n        })\n        return ans", "  \
    \      var count = 0\n        var a = new Array[Int](n)\n        for( i <- 1 to\
    \ n){\n            for(j <- 1 to n){\n                for(k <- 1 to n){\n    \
    \                if(i<j && i<k && j<k){\n                        if(a(i) + a(j)\
    \ + a(k) == 0){\n                            count = count + 1\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n        return count", "        val a = Array.ofDim[Int](n)\n        val\
    \ count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[",
  "        val a = Array.ofDim[Int](n)\n        val m = scala.math.pow(3, n).toInt\n\
    \        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n).toInt\n        val m = scala.math.pow(3,\
    \ m).toInt\n        val n = scala.math.pow(3, n", "        val a = Array.ofDim[Int](n+1)\n\
    \        a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n   \
    \     a(4) = 21\n        val triples = mutable.HashSet[Int]()\n        for(i<-0\
    \ until n){\n            for(j<-0 until n){\n                for(k<-0 until n){\n\
    \                    if(i<j && i<k && j<k){\n                        if(a(i) +\
    \ a(j) + a(k) == 3){\n                            triples.add(a(i) + a(j) + a(k))\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        triples.toList.size", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triple2 =\
    \ mutable.Map[Int, Int]()\n        val triple3 = mutable.Map[Int, Int]()\n   \
    \     val triple4 = mutable.Map[Int, Int]()\n        val triple5 = mutable.Map[Int,\
    \ Int]()\n        val triple6 = mutable.Map[Int, Int]()\n        val triple7 =\
    \ mutable.Map[Int, Int]()\n        val triple8 = mutable.Map[Int, Int]()\n   \
    \     val triple9 = mutable.Map[Int, Int]()\n        val triple10 = mutable.Map[Int,\
    \ Int]()\n        val triple11 = mutable.Map[Int, Int]()\n        val triple12\
    \ = mutable.Map[Int, Int]()\n        val triple13 = mutable.Map[Int, Int]()\n\
    \        val triple14 = mutable.Map[Int, Int]()\n        val triple15 = mutable.Map[Int,\
    \ Int]()\n        val triple16 = mutable.Map[Int, Int]()\n        val triple17\
    \ = mutable.Map[Int, Int]()\n        val triple18 = mutable.Map[Int, Int]()\n\
    \        val triple19 = mutable.Map[Int, Int]()\n        val triple20 = mutable.Map[Int,\
    \ Int]()\n        val triple21 = mutable.Map[Int, Int]()\n        val triple22\
    \ = mutable.Map[Int, Int]()\n        val triple23 = mutable.Map[Int, Int]()\n\
    \        val triple24 = mutable.Map[Int, Int]()\n        val triple25 = mutable.Map[Int,\
    \ Int]()\n        val triple26 = mutable.Map[Int, Int]()\n        val triple27\
    \ = mutable.Map[Int, Int]()\n        val triple28 = mutable.Map[Int, Int]()\n\
    \        val triple29 = mutable.Map[Int, Int]()\n        val triple30 = mutable.Map[Int,\
    \ Int]()\n        val triple31 = mutable.Map[Int, Int]()\n        val triple32\
    \ = mutable.Map[Int, Int]()\n        val triple33 = mutable.Map[Int, Int]()\n\
    \        val triple34 = mutable.Map[Int, Int]()\n        val triple35 = mutable.Map[Int,\
    \ Int]", "        val a = Array.ofDim[Int](n)\n        val result = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.Array", " \
    \       val a = Array.ofDim[Int](n)\n        val m = mutable.HashMap[Int, Int]()\n\
    \        val n = mutable.HashMap[Int, Int]()\n        val s = mutable.HashMap[Int,\
    \ Int]()\n        val t = mutable.HashMap[Int, Int]()\n        val u = mutable.HashMap[Int,\
    \ Int]()\n        val v = mutable.HashMap[Int, Int]()\n        val w = mutable.HashMap[Int,\
    \ Int]()\n        val x = mutable.HashMap[Int, Int]()\n        val y = mutable.HashMap[Int,\
    \ Int]()\n        val z = mutable.HashMap[Int, Int]()\n        val a = mutable.HashMap[Int,\
    \ Int]()\n        val b = mutable.HashMap[Int, Int]()\n        val c = mutable.HashMap[Int,\
    \ Int]()\n        val d = mutable.HashMap[Int, Int]()\n        val e = mutable.HashMap[Int,\
    \ Int]()\n        val f = mutable.HashMap[Int, Int]()\n        val g = mutable.HashMap[Int,\
    \ Int]()\n        val h = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val l = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val o = mutable.HashMap[Int,\
    \ Int]()\n        val p = mutable.HashMap[Int, Int]()\n        val q = mutable.HashMap[Int,\
    \ Int]()\n        val r = mutable.HashMap[Int, Int]()\n        val s = mutable.HashMap[Int,\
    \ Int]()\n        val t = mutable.HashMap[Int, Int]()\n        val u = mutable.HashMap[Int,\
    \ Int]()\n        val v = mutable.HashMap[Int, Int]()\n        val w = mutable.HashMap[Int,\
    \ Int]()\n        val x = mutable.HashMap[Int, Int]()\n        val y = mutable.HashMap[Int,\
    \ Int]()\n        val z = mutable.HashMap[Int, Int]()\n        val a = mutable.HashMap[Int,\
    \ Int]()\n        val b = mutable.HashMap[Int, Int]()\n        val c = mutable.HashMap[",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val j = i * i - i + 1\n            val\
    \ k = i * i + i + j\n            if (j > k) {\n                a(i) = j\n    \
    \            count(i) = count(i) + 1\n            }\n        }\n        count(1)",
  "        val a = Array.ofDim[Int](n)\n        val result = new mutable.HashMap[Int,\
    \ Int]()\n        val max = 0\n        val min = 0\n        val sum = 0\n    \
    \    val sum2 = 0\n        val sum3 = 0\n        val sum4 = 0\n        val sum5\
    \ = 0\n        val sum6 = 0\n        val sum7 = 0\n        val sum8 = 0\n    \
    \    val sum9 = 0\n        val sum10 = 0\n        val sum11 = 0\n        val sum12\
    \ = 0\n        val sum13 = 0\n        val sum14 = 0\n        val sum15 = 0\n \
    \       val sum16 = 0\n        val sum17 = 0\n        val sum18 = 0\n        val\
    \ sum19 = 0\n        val sum20 = 0\n        val sum21 = 0\n        val sum22 =\
    \ 0\n        val sum23 = 0\n        val sum24 = 0\n        val sum25 = 0\n   \
    \     val sum26 = 0\n        val sum27 = 0\n        val sum28 = 0\n        val\
    \ sum29 = 0\n        val sum30 = 0\n        val sum31 = 0\n        val sum32 =\
    \ 0\n        val sum33 = 0\n        val sum34 = 0\n        val sum35 = 0\n   \
    \     val sum36 = 0\n        val sum37 = 0\n        val sum38 = 0\n        val\
    \ sum39 = 0\n        val sum40 = 0\n        val sum41 = 0\n        val sum42 =\
    \ 0\n        val sum43 = 0\n        val sum44 = 0\n        val sum45 = 0\n   \
    \     val sum46 = 0\n        val sum47 = 0\n        val sum48 = 0\n        val\
    \ sum49 = 0\n        val sum50 = 0\n        val sum51 = 0\n        val sum52 =\
    \ 0\n        val sum53 = 0\n        val sum54 = 0\n        val sum55 = 0\n   \
    \     val sum56 = 0\n        val sum57 = 0\n        val sum58 = 0\n        val\
    \ sum59 = 0\n        val sum60 = 0\n        val sum61 = 0\n        val sum62 =\
    \ 0\n        val sum63 = 0\n        val sum64 = 0\n        val sum65 = 0\n   \
    \     val sum66 = 0\n        val sum67 = 0\n        val sum68 = 0\n        val\
    \ sum69 = 0\n        val sum70 = 0\n        val sum71 = 0\n        val sum72 =\
    \ 0\n        val sum73 = 0\n        val sum74 = 0\n        val sum75 = 0\n   \
    \     val sum76 = 0\n        val sum77 = 0\n        val sum78 = 0\n        val\
    \ sum79 = 0\n        val sum80", "        val a = Array.ofDim[Int](n)\n      \
    \  val result = new mutable.HashMap[Int, Int]()\n        val triples = mutable.HashMap[Int,\
    \ Int]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var\
    \ count = 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n     \
    \       i += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2 <\
    \ n).filter(_._1 < n).filter(_._2 < n).map(_._1).distinct\n        triples.foreach\
    \ { x =>\n            val triple = a.zipWithIndex.filter(_._1 < x).filter(_._2\
    \ < n).filter(_._1 < n).filter(_._2 < n).map(_._1).distinct\n            triple.foreach\
    \ { y =>\n                val triple = a.zipWithIndex.filter(_._1 < y).filter(_._2\
    \ < n).filter(_._1 < n).filter(_._2 < n).map(_._1).distinct\n                triple.foreach\
    \ { z =>\n                    val triple = a.zipWithIndex.filter(_._1 < z).filter(_._2\
    \ < n).filter(_._1 < n).filter(_._2 < n).map(_._1).distinct\n                \
    \    triple.foreach { t =>\n                        if (t < x && t < y && t <\
    \ z) {\n                            triples += (x -> y + z) -> 1\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n        triples.foreach { x =>\n            val triple = a.zipWithIndex.filter(_._1\
    \ < x).filter(_._2 < n).filter(_._1 < n).filter(_._2 < n).map(_._1).distinct\n\
    \            triple.foreach { y =>\n                val triple = a.zipWithIndex.filter(_._1\
    \ < y).filter(_._2 < n).filter(_._1 < n).filter(_._2 < n).map(_._1).distinct\n\
    \                triple.foreach { z =>\n                    val triple = a.zipWithIndex.filter(_._1\
    \ < z).filter(_._2 < n).filter(_._1 < n).filter(_._2 < n).map(_._1).distinct\n\
    \                    triple.foreach { t =>\n                        if (t < x\
    \ && t < y && t < z) {\n                            triples += (x -> y + z) ->\
    \ 1\n                        }\n                    }\n                }\n   \
    \         }\n        }\n        triples.foreach { x =>\n            val triple\
    \ = a.zipWithIndex.filter(_._1 < x).filter(_._2 < n).filter(_._1 < n).filter(_._",
  "        val a = Array.ofDim[Int](n)\n        var count = 0\n        for(i<-0 until\
    \ n){\n            for(j<-0 until n){\n                for(k<-0 until n){\n  \
    \                  if(i<j && j<k && k<i && a(i)+a(j)+a(k) == i*i*i){\n       \
    \                 count += 1\n                    }\n                }\n     \
    \       }\n        }\n        count", "        val a = Array.ofDim[Int](n)\n \
    \       val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriplesCount = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriplesCount2 = mutable.HashMap[Int, Int]()\n       \
    \ val maxTriplesCount3 = mutable.HashMap[Int, Int]()\n        val maxTriplesCount4\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriplesCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriplesCount6 = mutable.HashMap[Int, Int]()\n       \
    \ val maxTriplesCount7 = mutable.HashMap[Int, Int]()\n        val maxTriplesCount8\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriplesCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriplesCount10 = mutable.HashMap[Int, Int]()\n      \
    \  val maxTriplesCount11 = mutable.HashMap[Int, Int]()\n        val maxTriplesCount12\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriplesCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriplesCount14 = mutable.HashMap[Int, Int]()\n      \
    \  val maxTriplesCount15 = mutable.HashMap[Int, Int]()\n        val maxTriplesCount16\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriplesCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriplesCount18 = mutable.HashMap[Int, Int]()\n      \
    \  val maxTriplesCount19 = mutable.HashMap[Int, Int]()\n        val maxTriplesCount20\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriplesCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriplesCount22 = mutable.HashMap[Int, Int]()\n      \
    \  val maxTriplesCount23 = mutable.HashMap[Int, ", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val max = 0\n        val\
    \ maxTriple = 0\n        val maxTripleCount = 0\n        val maxTripleCount2 =\
    \ 1\n        val maxTripleCount3 = 1\n        val maxTripleCount4 = 1\n      \
    \  val maxTripleCount5 = 1\n        val maxTripleCount6 = 1\n        val maxTripleCount7\
    \ = 1\n        val maxTripleCount8 = 1\n        val maxTripleCount9 = 1\n    \
    \    val maxTripleCount10 = 1\n        val maxTripleCount11 = 1\n        val maxTripleCount12\
    \ = 1\n        val maxTripleCount13 = 1\n        val maxTripleCount14 = 1\n  \
    \      val maxTripleCount15 = 1\n        val maxTripleCount16 = 1\n        val\
    \ maxTripleCount17 = 1\n        val maxTripleCount18 = 1\n        val maxTripleCount19\
    \ = 1\n        val maxTripleCount20 = 1\n        val maxTripleCount21 = 1\n  \
    \      val maxTripleCount22 = 1\n        val maxTripleCount23 = 1\n        val\
    \ maxTripleCount24 = 1\n        val maxTripleCount25 = 1\n        val maxTripleCount26\
    \ = 1\n        val maxTripleCount27 = 1\n        val maxTripleCount28 = 1\n  \
    \      val maxTripleCount29 = 1\n        val maxTripleCount30 = 1\n        val\
    \ maxTripleCount31 = 1\n        val maxTripleCount32 = 1\n        val maxTripleCount33\
    \ = 1\n        val maxTripleCount34 = 1\n        val maxTripleCount35 = 1\n  \
    \      val maxTripleCount36 = 1\n        val maxTripleCount37 = 1\n        val\
    \ maxTripleCount38 = 1\n        val maxTripleCount39 = 1\n        val maxTripleCount40\
    \ = 1\n        val maxTripleCount41 = 1\n        val maxTripleCount42 = 1\n  \
    \      val maxTripleCount43 = 1\n        val maxTripleCount44 = 1\n        val\
    \ maxTripleCount45 = 1\n        val maxTripleCount46 = 1\n        val maxTripleCount47\
    \ = 1\n        val maxTripleCount48 = 1\n        val maxTripleCount49 = 1\n  \
    \      val maxTripleCount50 = 1\n        val maxTripleCount51 = 1\n        val\
    \ maxTripleCount52 = 1\n        val ", "        val a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        for(i <- 0 until n){\n            for(j <- 0 until\
    \ n){\n                for(k <- 0 until n){\n                    if(i<j && j<k\
    \ && k<n){\n                        a(i) = i*i - i + 1 \n                    \
    \    a(j) = j*j - j + 1\n                        a(k) = k*k - k + 1\n        \
    \                if(a(i) + a(j) + a(k) == 3){\n                            count\
    \ += 1\n                        }\n                    }\n                }\n\
    \            }\n        }\n        count", "        var triples = 0\n        var\
    \ a = new Array[Int](n)\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       while(i < n) {\n            triples += 1\n            i += 1\n       \
    \ }\n        while(j < n) {\n            triples += 1\n            j += 1\n  \
    \      }\n        while(k < n) {\n            triples += 1\n            k += 1\n\
    \        }\n        while(i < n && j < n && k < n) {\n            triples += (a(i)\
    \ + a(j) + a(k)) % 3 == 0\n            i += 1\n            j += 1\n          \
    \  k += 1\n        }\n        while(i < n) {\n            triples += 1\n     \
    \       i += 1\n        }\n        while(j < n) {\n            triples += 1\n\
    \            j += 1\n        }\n        while(k < n) {\n            triples +=\
    \ 1\n            k += 1\n        }\n        while(i < n && j < n && k < n) {\n\
    \            triples += (a(i) + a(j) + a(k)) % 3 == 0\n            i += 1\n  \
    \          j += 1\n            k += 1\n        }\n        while(i < n) {\n   \
    \         triples += 1\n            i += 1\n        }\n        while(j < n) {\n\
    \            triples += 1\n            j += 1\n        }\n        while(k < n)\
    \ {\n            triples += 1\n            k += 1\n        }\n        return triples",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until n) {\n                for (k <- 0 until n) {\n\
    \                    val sum = if (a(i) < a(j) && a(j) < a(k)) a(i) + a(j) + a(k)\
    \ else 0\n                    if (sum % 3 == 0) m.update(i + j + k -> 1)\n   \
    \             }\n            }\n        }\n        m.size", "        val a = Array.ofDim[Int](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n            count\
    \ += 1\n        }\n        val triples = a.filter(_ % 3 == 0).length\n       \
    \ if (triples == count) {\n            return count\n        }\n        return\
    \ -1", "        val a = Array.ofDim[Int](n)\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[",
  "        val a = Array.ofDim[Int](n)\n        var count = 0\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        while (i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        val triples = a.zipWithIndex.filter(_._1\
    \ < _._2).filter(_._2 < _._3).map(_._1).sum\n        if (triples == 0) triples\
    \ = 1\n        count = triples * 3\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        var count = 0\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        while(i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        while(i < n) {\n            count += 1\n\
    \            i += 1\n        }\n        while(j < n) {\n            count += 1\n\
    \            j += 1\n        }\n        while(k < n) {\n            count += 1\n\
    \            k += 1\n        }\n        val triples = count * 3\n        if(triples\
    \ % 3 == 0) {\n            return triples / 3\n        } else {\n            return\
    \ 0\n        }", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 1 to n) {\n            a(i) = i * i - i + 1\n        }\n  \
    \      for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                for\
    \ (k <- 1 to n) {\n                    if (a(i) + a(j) + a(k) % 3 == 0) {\n  \
    \                      m += (i + j + k)\n                    }\n             \
    \   }\n            }\n        }\n        m.toList.size", "        var a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        for (i<-0 until n) {\n            a(i) = i * i\
    \ - i + 1\n        }\n        for (i<-0 until n) {\n            for (j<-0 until\
    \ n) {\n                for (k<-0 until n) {\n                    if (a(i) + a(j)\
    \ + a(k) % 3 == 0) {\n                        count += 1\n                   \
    \ }\n                }\n            }\n        }\n        count", "        val\
    \ a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n  \
    \      val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        var triples = 0\n     \
    \   var a = Array.ofDim[Int](n)\n        var i = 0\n        var j = 0\n      \
    \  var k = 0\n        var max = 0\n        while (i < n && j < n && k < n) {\n\
    \            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n  \
    \          k += 1\n        }\n        max = a(0) + a(1) + a(2)\n        triples\
    \ = triples + ((max - a(0)) * (max - a(1)) * (max - a(2)))\n        triples =\
    \ triples + ((max * a(0) - a(1)) * (max * a(1) - a(2)))\n        triples = triples\
    \ + ((max * a(0) - a(1)) * (max * a(1) - a(2)) - (max * a(2) - a(0)))\n      \
    \  triples = triples + ((max * a(0) - a(1)) * (max * a(1) - a(2)) - (max * a(2)\
    \ - a(0)) - (max * a(2) - a(1)))\n        triples = triples + ((max * a(0) - a(1))\
    \ * (max * a(1) - a(2)) - (max * a(2) - a(0)) - (max * a(2) - a(1))) - ((max *\
    \ a(2) - a(0)) * (max * a(2) - a(1)))\n        triples = triples + ((max * a(0)\
    \ - a(1)) * (max * a(1) - a(2)) - (max * a(2) - a(0)) - (max * a(2) - a(1))) -\
    \ ((max * a(2) - a(0)) * (max * a(2) - a(1))) - ((max * a(2) - a(0)) * (max *\
    \ a(2) - a(1)))\n        triples = triples + ((max * a(0) - a(1)) * (max * a(1)\
    \ - a(2)) - (max * a(2) - a(0)) - (max * a(2) - a(1))) - ((max * a(2) - a(0))\
    \ * (max * a(2) - a(1))) - ((max * a(2) - a(0)) * (max * a(2) - a(1)))\n     \
    \   triples = triples + ((max * a(0) - a(1)) * (max * a(1) - a(2)) - (max * a(2)\
    \ - a(0)) - (max * a(2) - a(1))) - ((max * a(2) - a(0)) * (max * a(2) - a(1)))\
    \ - ((max * a(2) - a(0)) * (max * a(2) - a(1)))\n        triples = triples + ((max\
    \ * a(0) - a(1)) * (max * a(1) - a(2)) - (max * a(2) - a(0)) - (max * a(2) - a(1)))\
    \ - ((max * a(2) - a(0)) * (max * a(2) - a(1))) - ((max * a(2) - a(0)) * (max\
    \ * a(2) - a(1)))\n        triples = triples + ((max * a(0) - a(1)) * (max * a(1)\
    \ - a(2)) - (max * a(2) - a(0)) - (max * a(2) - a(1))) - ((max * a", "       \
    \ var count = 0\n        var a = Array.ofDim[Int](n)\n        var a1 = Array.ofDim[Int](n)\n\
    \        var a2 = Array.ofDim[Int](n)\n        var a3 = Array.ofDim[Int](n)\n\
    \        var a4 = Array.ofDim[Int](n)\n        var a5 = Array.ofDim[Int](n)\n\
    \        var a6 = Array.ofDim[Int](n)\n        var a7 = Array.ofDim[Int](n)\n\
    \        var a8 = Array.ofDim[Int](n)\n        var a9 = Array.ofDim[Int](n)\n\
    \        var a10 = Array.ofDim[Int](n)\n        var a11 = Array.ofDim[Int](n)\n\
    \        var a12 = Array.ofDim[Int](n)\n        var a13 = Array.ofDim[Int](n)\n\
    \        var a14 = Array.ofDim[Int](n)\n        var a15 = Array.ofDim[Int](n)\n\
    \        var a16 = Array.ofDim[Int](n)\n        var a17 = Array.ofDim[Int](n)\n\
    \        var a18 = Array.ofDim[Int](n)\n        var a19 = Array.ofDim[Int](n)\n\
    \        var a20 = Array.ofDim[Int](n)\n        var a21 = Array.ofDim[Int](n)\n\
    \        var a22 = Array.ofDim[Int](n)\n        var a23 = Array.ofDim[Int](n)\n\
    \        var a24 = Array.ofDim[Int](n)\n        var a25 = Array.ofDim[Int](n)\n\
    \        var a26 = Array.ofDim[Int](n)\n        var a27 = Array.ofDim[Int](n)\n\
    \        var a28 = Array.ofDim[Int](n)\n        var a29 = Array.ofDim[Int](n)\n\
    \        var a30 = Array.ofDim[Int](n)\n        var a31 = Array.ofDim[Int](n)\n\
    \        var a32 = Array.ofDim[Int](n)\n        var a33 = Array.ofDim[Int](n)\n\
    \        var a34 = Array.ofDim[Int](n)\n        var a35 = Array.ofDim[Int](n)\n\
    \        var a36 = Array.ofDim[Int](n)\n        var a37 = Array.ofDim[Int](n)\n\
    \        var a38 = Array.ofDim[Int](n)\n        var a39 = Array.ofDim[Int](n)\n\
    \        var a40 = Array.ofDim[Int](n)\n        var a41 = Array.ofDim[Int](n)\n\
    \        var a42 = Array.ofDim[Int](n)\n        var a43 = Array.ofDim[Int](n)\n",
  "        val a = Array.ofDim[Int](n)\n        val m = scala.math.BigInt(3)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n        val\
    \ m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n        val\
    \ a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n        val m = scala.math.BigInt(m)\n\
    \        val n = scala.math.BigInt(n)\n        val a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n        val\
    \ m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n        val\
    \ a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n        val m = scala.math.BigInt(m)\n\
    \        val n = scala.math.BigInt(n)\n        val a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n        val\
    \ m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n        val\
    \ a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n        val m = scala.math.BigInt(m)\n\
    \        val n = scala.math.BigInt(n)\n        val a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n        val\
    \ m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n        val\
    \ a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n        val m = scala.math.BigInt(m)\n\
    \        val n = scala.math.BigInt(n)\n        val a = scala.collection.mutable.ArrayBuffer.ofDim[Int](n)\n",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[In", "        val a = Array.ofDim[Int](n)\n\
    \        val result = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n    \
    \    while (i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n \
    \       }\n        val maxTriples = a.zipWithIndex.filter(_._2 % 3 == 0).length\n\
    \        result(0) = maxTriples\n        result.foreach(println)\n        return\
    \ result(0)", "        val a = Array.ofDim[Long](n)\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n", "        val a = Array.ofDim[Int](n)\n\
    \        val result = mutable.ArrayBuffer.empty[Int]\n        val maxTriples =\
    \ mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriples = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty", "        val a = Array.ofDim[Int](n)\n\
    \        val m = scala.math.BigInt(3)\n        val n = scala.math.BigInt(n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2 % 3 == 0).map(_._1)\n\
    \        triples.foreach(x => {\n            val y = a.zipWithIndex.filter(_._2\
    \ % 3 == 0).map(_._1)\n            y.foreach(y => {\n                val z = a.zipWithIndex.filter(_._2\
    \ % 3 == 0).map(_._1)\n                z.foreach(z => {\n                    if\
    \ (x._1 == y._1 && x._2 == y._2 && x._3 == z._1 && x._4 != z._4) {\n         \
    \               count += 1\n                    }\n                })\n      \
    \      })\n        })\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTriples = mutable.ArrayBuffer.empty[Int]\n        val maxTriple\
    \ = mutable.ArrayBuffer.empty[Int]\n        val triples = mutable.ArrayBuffer.empty[Int]\n\
    \        val triple = mutable.ArrayBuffer.empty[Int]\n        val tripleSum =\
    \ mutable.ArrayBuffer.empty[Int]\n        val tripleSum2 = mutable.ArrayBuffer.empty[Int]\n\
    \        val tripleSum3 = mutable.ArrayBuffer.empty[Int]\n        val tripleSum4\
    \ = mutable.ArrayBuffer.empty[Int]\n        val tripleSum5 = mutable.ArrayBuffer.empty[Int]\n\
    \        val tripleSum6 = mutable.ArrayBuffer.empty[Int]\n        val tripleSum7\
    \ = mutable.ArrayBuffer.empty[Int]\n        val tripleSum8 = mutable.ArrayBuffer.empty[Int]\n\
    \        val tripleSum9 = mutable.ArrayBuffer.empty[Int]\n        val tripleSum10\
    \ = mutable.ArrayBuffer.empty[Int]\n        val tripleSum11 = mutable.ArrayBuffer.empty[Int]\n\
    \        val tripleSum12 = mutable.ArrayBuffer.empty[Int]\n        val tripleSum13\
    \ = mutable.ArrayBuffer.empty[Int]\n        val tripleSum14 = mutable.ArrayBuffer.empty[Int]\n\
    \        val tripleSum15 = mutable.ArrayBuffer.empty[Int]\n        val tripleSum16\
    \ = mutable.ArrayBuffer.empty[Int]\n        val tripleSum17 = mutable.ArrayBuffer.empty[Int]\n\
    \        val tripleSum18 = mutable.ArrayBuffer.empty[Int]\n        val tripleSum19\
    \ = mutable.ArrayBuffer.empty[Int]\n        val tripleSum20 = mutable.ArrayBuffer.empty[Int]\n\
    \        val tripleSum21 = mutable.ArrayBuffer.empty[Int]\n        val tripleSum22\
    \ = mutable.ArrayBuffer.empty[Int]\n        val tripleSum23 = mutable.ArrayBuffer.empty[Int]\n\
    \        val tripleSum24 = mutable.ArrayBuffer.empty[Int]\n        val tripleSum25\
    \ = mutable.ArrayBuffer.empty[Int]\n        val tripleSum26 = mutable.ArrayBuffer.",
  "        val a = Array.ofDim[Long](n)\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val max = scala.math.max(3, n)\n        val maxTriples = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxTriple = mutable.ArrayBuffer.empty[Long]\n        var i = 0\n\
    \        while (i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \        }\n        val maxTriples = a.sliding(3).map(x => x.sum).filter(x =>\
    \ x % 3 == 0).length\n        val maxTriple = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).head\n        val maxTriples = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).length\n        val maxTriple = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).head\n        val maxTriples = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).length\n        val maxTriple = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).head\n        val maxTriples = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).length\n        val maxTriple = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).head\n        val maxTriples = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).length\n        val maxTriple = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).head\n        val maxTriples = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).length\n        val maxTriple = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).head\n        val maxTriples = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).length\n        val maxTriple = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).head\n        val maxTriples = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).length\n        val maxTriple = a.sliding(3).map(x => x.sum).filter(x\
    \ => x % 3 == 0).head\n        val maxTriples = a.sliding(3).map(x => ", "   \
    \     var count = 0\n        var a = new Array[Long](n)\n        for( i <- 0 until\
    \ n ) {\n            a(i) = i * i - i + 1\n        }\n        for( i <- 0 until\
    \ n ) {\n            for( j <- 0 until n ) {\n                for( k <- 0 until\
    \ n ) {\n                    if( i < j && j < k && k < i ) {\n               \
    \         if( a(i) + a(j) + a(k) == 3 ) {\n                            count +=\
    \ 1\n                        }\n                    }\n                }\n   \
    \         }\n        }\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[", "        val a = Array.ofDim[Long](n)\n\
    \        val result = new mutable.HashMap[Long, Long]()\n        val triplesCounter\
    \ = new mutable.HashMap[Long, Long]()\n        val triplesCounter2 = new mutable.HashMap[Long,\
    \ Long]()\n        val triplesCounter3 = new mutable.HashMap[Long, Long]()\n \
    \       val triplesCounter4 = new mutable.HashMap[Long, Long]()\n        val triplesCounter5\
    \ = new mutable.HashMap[Long, Long]()\n        val triplesCounter6 = new mutable.HashMap[Long,\
    \ Long]()\n        val triplesCounter7 = new mutable.HashMap[Long, Long]()\n \
    \       val triplesCounter8 = new mutable.HashMap[Long, Long]()\n        val triplesCounter9\
    \ = new mutable.HashMap[Long, Long]()\n        val triplesCounter10 = new mutable.HashMap[Long,\
    \ Long]()\n        val triplesCounter11 = new mutable.HashMap[Long, Long]()\n\
    \        val triplesCounter12 = new mutable.HashMap[Long, Long]()\n        val\
    \ triplesCounter13 = new mutable.HashMap[Long, Long]()\n        val triplesCounter14\
    \ = new mutable.HashMap[Long, Long]()\n        val triplesCounter15 = new mutable.HashMap[Long,\
    \ Long]()\n        val triplesCounter16 = new mutable.HashMap[Long, Long]()\n\
    \        val triplesCounter17 = new mutable.HashMap[Long, Long]()\n        val\
    \ triplesCounter18 = new mutable.HashMap[Long, Long]()\n        val triplesCounter19\
    \ = new mutable.HashMap[Long, Long]()\n        val triplesCounter20 = new mutable.HashMap[Long,\
    \ Long]()\n        val triplesCounter21 = new mutable.HashMap[Long, Long]()\n\
    \        val triplesCounter22 = new mutable.HashMap[Long, Long]()\n        val\
    \ triplesCounter23 = new mutable.HashMap[Long, Long]()\n        val triplesCounter24\
    \ = new mutable.HashMap[Long, Long]()\n        val triplesCounter25 = new mutable.HashMap[Long,\
    \ Long]()\n        val triplesCounter26 = new mutable.HashMap[Long, Long]()\n\
    \        val triplesCounter27 = new mutable.HashMap[Long, Long]()\n        val\
    \ triplesCounter28 = new mutable.HashMap[Long, Long]()\n        val triplesCounter29\
    \ = new mutable.HashMap[", "        val a = Array.ofDim[Int](n)\n        val m\
    \ = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        while (i < n) {\n\
    \            a(i) = i * i - i + 1\n            i += 1\n        }\n        val\
    \ n = a.length\n        var j = 0\n        while (j < n) {\n            val k\
    \ = j + 1\n            while (k < n) {\n                if (a(k) == a(k) + a(k)\
    \ + 3) {\n                    m += k\n                }\n                k +=\
    \ 1\n            }\n            j += 1\n        }\n        m.length", "      \
    \  val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        while (j < n) {\n            m(j) = a(i) + a(i) + a(i)\n\
    \            j += 1\n        }\n        while (j < n) {\n            count(k)\
    \ += m(j) * m(j) * m(j)\n            k += 1\n        }\n        count = count\
    \ / 3\n        return count", "        var triples = 0\n        var a = new Array[Long](n)\n\
    \        for(i<- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n \
    \       for(i<- 0 until n) {\n            for(j<- 0 until n) {\n             \
    \   for(k <- 0 until n) {\n                    if(i<j && i<k && j<k) {\n     \
    \                   if(a(i) + a(j) + a(k) == 3) {\n                          \
    \  triples += 1\n                        }\n                    }\n          \
    \      }\n            }\n        }\n        return triples", "        val a =\
    \ Array.ofDim[Int](n)\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var count = 0\n        while (i < n && j < n && k < n) {\n          \
    \  a(i) = i * i - i + 1\n            i += 1\n            j += 1\n            k\
    \ += 1\n            count += 1\n        }\n        val triples = a.filter(_ %\
    \ 3 == 0)\n        val tripleCount = triples.count(_ % 3 == 0)\n        tripleCount",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        var a = Array.ofDim[Int](n\
    \ + 1)\n        var count = 0\n        for (i<- 1 to n) {\n            a(i) =\
    \ i * i - i + 1\n        }\n        for (i<- 1 to n) {\n            for (j<- 1\
    \ to n) {\n                for (k<- 1 to n) {\n                    if (a(i) +\
    \ a(j) + a(k) == 3) {\n                        count += 1\n                  \
    \  }\n                }\n            }\n        }\n        count", "        val\
    \ a = Array.ofDim[Int](n)\n        val m = a.length\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var count = 0\n        while (i < m\
    \ && j < m && k < m) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \            j += 1\n            k += 1\n            if (a(i) + a(j) + a(k) %\
    \ 3 == 0) {\n                count += 1\n            }\n        }\n        count",
  "        val a = Array.ofDim[Int](n)\n        var i = 0\n        var j = 0\n   \
    \     var k = 0\n        var count = 0\n        while (i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n            count += 1\n        }\n        val triples =\
    \ a.filter(_ % 3 == 0).length\n        count + triples", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 1 to n){\n   \
    \         val j = i * i - i + 1\n            val k = i * i + i + j\n         \
    \   if((j + k) % 3 == 0){\n                a(i) = j\n                count(j)\
    \ = count(j) + 1\n            }\n        }\n        count(a(0))", "        val\
    \ a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n     \
    \   val sum = 0\n        for (i <- 1 to n) {\n            a(i) = i * i - i + 1\n\
    \            sum += a(i)\n        }\n        for (i <- 1 to n) {\n           \
    \ for (j <- 1 to n) {\n                for (k <- 1 to n) {\n                 \
    \   if (a(i) + a(j) + a(k) == sum) {\n                        count(a(i), a(j),\
    \ a(k)) = count(a(i), a(j), a(k)) + 1\n                    }\n               \
    \ }\n            }\n        }\n        count.values.toList.max", "        val\
    \ a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n     \
    \   val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[In", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val max = 0\n        val\
    \ maxTriples = mutable.Map[Int, Int]()\n        for( i <- 0 until n ) {\n    \
    \        val j = i + 1\n            val k = i + 2\n            if( j < n && k\
    \ < n ) {\n                a(i) = i * i - i + 1\n                count(a(i)) =\
    \ count(a(i)) + (i + j + k) * 3\n                if( count(a(i)) > max ) {\n \
    \                   max = count(a(i))\n                    maxTriples(a(i)) =\
    \ (i + j + k)\n                }\n            }\n        }\n        count.toList.toArray",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        for( i <- 1 to n){\n            val j = i * i - i + 1\n            val\
    \ k = i * i + i + j\n            if( j > k){\n                a(i) = j\n     \
    \           count(j) = count(j) + 1\n            }\n            if( k > j){\n\
    \                a(i) = k\n                count(k) = count(k) + 1\n         \
    \   }\n        }\n        count(a(0))", "        val a = Array.ofDim[Int](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val triples = a.zipWithIndex.filter(_._2 % 3 == 0).map(_._1)\n       \
    \ triples.foreach(x => count = count + a.count(_ == x))\n        count", "   \
    \     val a = Array.ofDim[Int](n)\n        val m = mutable.Map[Int, Int]()\n \
    \       val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int", "        var a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        for (i <- 1 to n) {\n            val j = i - 1\n\
    \            val k = i + 1\n            if (a(i) > 0) {\n                val temp\
    \ = a(i)\n                a(i) = a(i) - temp\n                a(k) = a(k) - temp\n\
    \                val temp2 = a(i) + a(k) + temp\n                if (temp2 % 3\
    \ == 0) {\n                    count = count + 1\n                }\n        \
    \        a(i) = temp\n                a(k) = temp\n            }\n        }\n\
    \        count", "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[", "       \
    \ var triples = 0\n        var a = Array.ofDim[Int](n)\n        for(i<-0 until\
    \ n){\n            a(i) = i * i - i + 1\n        }\n        for(i<-0 until n){\n\
    \            for(j<-0 until n){\n                for(k <- 0 until n){\n      \
    \              if(i<j && i<k && j<k){\n                        if(a(i) + a(j)\
    \ + a(k) == 3){\n                            triples += 1\n                  \
    \      }\n                    }\n                }\n            }\n        }\n\
    \        return triples", "        val a = Array.ofDim[Int](n)\n        val m\
    \ = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int, Int]()\n\
    \        val s = mutable.HashMap[Int, Int]()\n        val t = mutable.HashMap[Int,\
    \ Int]()\n        val u = mutable.HashMap[Int, Int]()\n        val v = mutable.HashMap[Int,\
    \ Int]()\n        val w = mutable.HashMap[Int, Int]()\n        val x = mutable.HashMap[Int,\
    \ Int]()\n        val y = mutable.HashMap[Int, Int]()\n        val z = mutable.HashMap[Int,\
    \ Int]()\n        val a = mutable.HashMap[Int, Int]()\n        val b = mutable.HashMap[Int,\
    \ Int]()\n        val c = mutable.HashMap[Int, Int]()\n        val d = mutable.HashMap[Int,\
    \ Int]()\n        val e = mutable.HashMap[Int, Int]()\n        val f = mutable.HashMap[Int,\
    \ Int]()\n        val g = mutable.HashMap[Int, Int]()\n        val h = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val o = mutable.HashMap[Int, Int]()\n        val p = mutable.HashMap[Int,\
    \ Int]()\n        val q = mutable.HashMap[Int, Int]()\n        val r = mutable.HashMap[Int,\
    \ Int]()\n        val s = mutable.HashMap[Int, Int]()\n        val t = mutable.HashMap[Int,\
    \ Int]()\n        val u = mutable.HashMap[Int, Int]()\n        val v = mutable.HashMap[Int,\
    \ Int]()\n        val w = mutable.HashMap[Int, Int]()\n        val x = mutable.HashMap[Int,\
    \ Int]()\n        val y = mutable.HashMap[Int, Int]()\n        val z = mutable.HashMap[Int,\
    \ Int]()\n        val a = mutable.HashMap[Int, Int]()\n        val b = mutable.HashMap[Int,\
    \ Int]()\n        val c = mutable.HashMap[", "        var a = Array.ofDim[Int](n)\n\
    \        for( i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n\
    \        val count = mutable.Map[Int, Int]()\n        for( i <- 0 until n ) {\n\
    \            for( j <- 0 until n ) {\n                for( k <- 0 until n ) {\n\
    \                    if( i < j && j < k && a(i) + a(j) + a(k) % 3 == 0 ) {\n \
    \                       count(a(i), a(j), a(k)) = count(a(i), a(j), a(k)) + 1\n\
    \                    }\n                }\n            }\n        }\n        count(a(0),\
    \ a(0), a(0))", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        val triples = mutable.Map[Int,\
    \ Int]()\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n\
    \                for (k <- 0 until n) {\n                    if (a(i) + a(j) +\
    \ a(k)%3 == 0) {\n                        triples(a(i), a(j), a(k)) = triples(a(i),\
    \ a(j), a(k)) + (triples(a(i), a(j), a(k))+1)\n                    }\n       \
    \         }\n            }\n        }\n        triples.filter(_._2 > 1).length",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n  \
    \          val j = i * i - i + 1\n            val k = i * i + i + j\n        \
    \    val value = j + k\n            if (value % 3 == 0) {\n                a(i)\
    \ = value\n                count(value) = count(value) + 1\n            }\n  \
    \      }\n        count(0)", "        var a = Array.ofDim[Int](n + 1)\n      \
    \  a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n        a(4)\
    \ = 21\n        var count = 0\n        for (i <- 0 until a.length) {\n       \
    \     for (j <- 0 until a.length) {\n                for (k <- 0 until a.length)\
    \ {\n                    if (i < j && j < k && k < i) {\n                    \
    \    val sum = i + j + k\n                        if (sum % 3 == 0) {\n      \
    \                      count += 1\n                        }\n               \
    \     }\n                }\n            }\n        }\n        count", "      \
    \  val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val i = mutable.ArrayBuffer.empty[Int]\n        val j = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val triples = a.filter(_ % 3 == 0).length\n        if (triples > 0) {\n\
    \            count = triples * 3\n        }\n        count", "        val a =\
    \ Array.ofDim[Int](n)\n        val result = new mutable.HashMap[Int, Int]()\n\
    \        \n        for( i <- 1 to n ) {\n            val j = i\n            val\
    \ k = n - i\n            \n            if( j > k ) {\n                val temp\
    \ = j\n                j = k\n                k = temp\n            }\n      \
    \      \n            if( j > 0 ) {\n                val temp = a(j)\n        \
    \        a(j) = a(k) - temp\n                a(k) = temp\n            }\n    \
    \        \n            if( k > 0 ) {\n                val temp = a(k)\n      \
    \          a(k) = a(j) - temp\n                a(j) = temp\n            }\n  \
    \          \n            if( j > 0 && k > 0 ) {\n                val temp = a(j)\
    \ + a(k)\n                if( temp % 3 == 0 ) {\n                    result.put(i,\
    \ temp)\n                }\n            }\n        }\n        \n        val count\
    \ = result.getOrElse(n, 0L)\n        \n        return count", "        val a =\
    \ Array.ofDim[Int](n)\n        var count = 0\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        while(i < n && j < n && k < n) {\n         \
    \   a(i) = i * i - i + 1\n            i += 1\n            j += 1\n           \
    \ k += 1\n        }\n        while(i < n) {\n            count += 1\n        \
    \    i += 1\n        }\n        while(j < n) {\n            count += 1\n     \
    \       j += 1\n        }\n        while(k < n) {\n            count += 1\n  \
    \          k += 1\n        }\n        count += a.filter(_ % 3 == 0).length\n \
    \       return count", "        val a = Array.ofDim[Int](n)\n        val m = scala.math.BigInt(3)\n\
    \        val n = scala.math.BigInt(n)\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var count = 0\n        while (i < n) {\n         \
    \   a(i) = i * i - i + 1\n            i += 1\n        }\n        while (j < n)\
    \ {\n            a(j) = a(j) + a(j) + a(j)\n            j += 1\n        }\n  \
    \      while (k < n) {\n            val temp = a(k) + a(j) + a(k)\n          \
    \  if (temp % m == 0) {\n                count += 1\n            }\n         \
    \   k += 1\n        }\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[", "        val a = Array.ofDim[Int](n)\n        var i = 0\n \
    \       var j = 0\n        var k = 0\n        var count = 0\n        while (i\
    \ < n && j < n && k < n) {\n            a(i) = i * i - i + 1\n            i +=\
    \ 1\n            j += 1\n            k += 1\n        }\n        val triples =\
    \ a.zipWithIndex.filter(_._2 < n).map(_._1).sum\n        val triple = triples\
    \ % 3\n        if (triple == 0) count else -1", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        while (j < n) {\n            a(j) = a(i) + a(i) + a(j)\n\
    \            j += 1\n        }\n        while (k < (n - 1)) {\n            a(k)\
    \ = a(i) + a(i) + a(k)\n            k += 1\n        }\n        val l = a.length\n\
    \        for (i <- 0 until l) {\n            val x = a(i)\n            if (x %\
    \ 3 == 0) {\n                count += 1\n                m += x\n            }\n\
    \        }\n        count * 3", "        val a = Array.ofDim[Int](n + 1)\n   \
    \     val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.", "        var a = Array.ofDim[Int](n + 1)\n        var count = 0\n\
    \        for (i<- 1 to n) {\n            a(i) = i * i - i + 1\n        }\n   \
    \     val triples = a.zipWithIndex.filter(_._3 > 0).map(_._1)\n        triples.foreach\
    \ { triple =>\n            val triple2 = a.zipWithIndex.filter(_._3 == triple).map(_._1)\n\
    \            triple2.foreach { triple2 =>\n                val triple3 = a.zipWithIndex.filter(_._3\
    \ == triple2).map(_._1)\n                triple3.foreach { triple3 =>\n      \
    \              val triple4 = a.zipWithIndex.filter(_._3 == triple3).map(_._1)\n\
    \                    triple4.foreach { triple4 =>\n                        val\
    \ triple5 = a.zipWithIndex.filter(_._3 == triple4).map(_._1)\n               \
    \         triple5.foreach { triple5 =>\n                            val triple6\
    \ = a.zipWithIndex.filter(_._3 == triple5).map(_._1)\n                       \
    \     triple6.foreach { triple6 =>\n                                val triple7\
    \ = a.zipWithIndex.filter(_._3 == triple6).map(_._1)\n                       \
    \         triple7.foreach { triple7 =>\n                                    val\
    \ triple8 = a.zipWithIndex.filter(_._3 == triple7).map(_._1)\n               \
    \                     triple8.foreach { triple8 =>\n                         \
    \               val triple9 = a.zipWithIndex.filter(_._3 == triple8).map(_._1)\n\
    \                                        triple9.foreach { triple9 =>\n      \
    \                                      val triple10 = a.zipWithIndex.filter(_._3\
    \ == triple9).map(_._1)\n                                            triple10.foreach\
    \ { triple10 =>\n                                                val triple11\
    \ = a.zipWithIndex.filter(_._3 == triple10).map(_._1)\n                      \
    \                          triple11.foreach { triple11 =>\n                  \
    \                                  val triple12 = a.zipWithIndex.filter(_._3 ==\
    \ triple11).map(_._1)\n                                                    triple12.foreach\
    \ { triple12 =>\n                                                        val triple13\
    \ = a.zipWithIndex.filter(_._3 == triple12).map(_._1)\n                      \
    \                                  triple13.foreach { triple13 =>\n          \
    \                                                  val triple14 = a.zipWithIndex.filter(_._3\
    \ == triple13).map(_._1)\n                                                   \
    \         triple14.foreach { triple14 =>\n                                   \
    \                             val triple15 = a.zipWithIndex.filter(_._3 == triple14).map(_._1)\n\
    \                                                                triple15.foreach\
    \ { triple15 =>\n                                                            \
    \        val triple16 = a.zipWithIndex.filter(_._3 == triple15).map", "      \
    \  val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val k = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[",
  "        var a = Array.ofDim[Int](n)\n        var count = 0\n        for(i <- 1\
    \ to n){\n            for(j <- 1 to n){\n                for(k <- 1 to n){\n \
    \                   if(i<j && j<k && a(i)+a(j)+a(k) == 3*(i+j+k)){\n         \
    \               count += 1\n                    }\n                }\n       \
    \     }\n        }\n        count", "        val a = Array.ofDim[Int](n)\n   \
    \     val result = new mutable.HashMap[Int, Int]()\n        val maxTriples = 0\
    \ // to store the max number of triples found\n        val maxTriple = -1 // to\
    \ store the max number of triples found so far\n        val maxTriples = 0 //\
    \ to store the max number of triples found\n        val maxTriple = -1 // to store\
    \ the max number of triples found so far\n        val maxTriples = 0 // to store\
    \ the max number of triples found\n        val maxTriple = -1 // to store the\
    \ max number of triples found so far\n        val maxTriples = 0 // to store the\
    \ max number of triples found\n        val maxTriple = -1 // to store the max\
    \ number of triples found so far\n        val maxTriples = 0 // to store the max\
    \ number of triples found\n        val maxTriple = -1 // to store the max number\
    \ of triples found so far\n        val maxTriples = 0 // to store the max number\
    \ of triples found\n        val maxTriple = -1 // to store the max number of triples\
    \ found so far\n        val maxTriples = 0 // to store the max number of triples\
    \ found\n        val maxTriple = -1 // to store the max number of triples found\
    \ so far\n        val maxTriples = 0 // to store the max number of triples found\n\
    \        val maxTriple = -1 // to store the max number of triples found so far\n\
    \        val maxTriples = 0 // to store the max number of triples found\n    \
    \    val maxTriple = -1 // to store the max number of triples found so far\n \
    \       val maxTriples = 0 // to store the max number of triples found\n     \
    \   val maxTriple = -1 // to store the max number of triples found so far\n  \
    \      val maxTriples = 0 // to store the max number of triples found\n      \
    \  val maxTriple = -1 // to store the max number of triples found so far\n   \
    \     val maxTriples = 0 // to store the max number of triples found\n       \
    \ val maxTriple = -1 // to store the max number of triples found so far\n    \
    \    val maxTriples = 0 // to store the max number of triples found\n        val\
    \ maxTriple = -1 // to store the max number of triples found so far\n        val\
    \ maxTriples = 0 // to store the max number of triples found\n        val maxTriple\
    \ = -1 // to store the max number of triples found so far\n        val maxTriples\
    \ = 0 // to store the max number of triples found\n        val maxTriple = -1\
    \ // to ", "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val m = scala.math.BigInt(3)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        val m = scala.math.BigInt(m)\n   \
    \     val n = scala.math.BigInt(n)\n        ", "        var triples = 0\n    \
    \    var a = Array.ofDim[Int](n)\n        var i = 0\n        var j = 0\n     \
    \   var k = 0\n        var temp = 0\n        while (i < n) {\n            a(i)\
    \ = i * i - i + 1\n            i += 1\n        }\n        while (j < n) {\n  \
    \          a(j) = i * i - j + 1\n            j += 1\n        }\n        while\
    \ (k < n) {\n            a(k) = i * i - k + 1\n            k += 1\n        }\n\
    \        val maxTriples = a.filter(_ % 3 == 0).length\n        return maxTriples",
  "        val a = Array.ofDim[Int](n)\n        var i = 0\n        var j = 0\n   \
    \     var k = 0\n        var count = 0\n        while (i < n && j < n && k < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        var i = 0\n        var j = 0\n       \
    \ var k = 0\n        while (i < n && j < n && k < n) {\n            if (a(i) +\
    \ a(j) + a(k) % 3 == 0) {\n                count += 1\n            }\n       \
    \     i += 1\n            j += 1\n            k += 1\n        }\n        count",
  "        val a = Array.ofDim[Long](n)\n        val count = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        for (i <- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + j\n      \
    \      val triple = (i, j, k)\n            triples += triple\n            if (triples.contains(triple))\
    \ {\n                val count = triples(triple)\n                count += 3\n\
    \                count match {\n                    case x if x > 0 => triples(triple)\
    \ = count\n                    case _ => triples(triple) = 0\n               \
    \ }\n            }\n        }\n        triples.toSeq.sortBy(_._1).reverse.head._2",
  "        var a = Array.ofDim[Int](n+1)\n        a(0) = 1\n        a(1) = 3\n   \
    \     a(2) = 7\n        a(3) = 13\n        a(4) = 21\n        var count = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        while (i < a.length)\
    \ {\n            while (j < a.length) {\n                while (k < a.length)\
    \ {\n                    if (a(i) + a(j) + a(k) == 3) {\n                    \
    \    count += 1\n                    }\n                    k += 1\n         \
    \       }\n                j += 1\n            }\n            i += 1\n       \
    \ }\n        count", "        val a = Array.ofDim[Int](n+1)\n        a(0) = 1\n\
    \        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n        a(4) = 21\n  \
    \      val result = a.zipWithIndex.filter(_._2 > 0).map(_._1).sum\n        result\
    \ % 3 == 0 ? result : -1", "        val a = Array.ofDim[Int](n+1)\n        a(0)\
    \ = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n        a(4) = 21\n\
    \        val m = a.length\n        val n = a.last\n        val max = a.last\n\
    \        val result = new mutable.HashMap[Int, Int]()\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0)\n        triples.foreach {\n            case ((a,i),(j,k)) => {\n\
    \                val key = a + j + k\n                if (key > max) {\n     \
    \               max = key\n                }\n                if (key > result.size)\
    \ {\n                    result.put(key, 1)\n                } else {\n      \
    \              result.get(key) += 1\n                }\n            }\n      \
    \  }\n        result.values.toList.max", "        val a = Array.ofDim[Int](n)\n\
    \        val result = new mutable.HashMap[Int, Int]()\n        var i = 0\n   \
    \     var j = 0\n        var k = 0\n        var count = 0\n        while (i <\
    \ n) {\n            a(i) = i * i - i + 1\n            i += 1\n        }\n    \
    \    while (j < n) {\n            a(j) = j * j - j + 1\n            j += 1\n \
    \       }\n        while (k < n) {\n            a(k) = k * k - k + 1\n       \
    \     k += 1\n        }\n        val len = a.length\n        for (i <- 0 until\
    \ len) {\n            val a = a(i)\n            val b = a(j) + a(k)\n        \
    \    if (b == 0) continue\n            if (b == 1) count += 1\n            val\
    \ c = a(i) + a(j) + a(k) - b\n            if (c % 3 == 0) {\n                count\
    \ += 1\n                result.put(a(i), count)\n            }\n        }\n  \
    \      result.values.sum", "        val a = Array.ofDim[Int](n)\n        val count\
    \ = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n \
    \       val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[In",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val triples = mutable.Map[Int, Int]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until n) {\n                for (k <- 0 until n) {\n\
    \                    if (a(i) + a(j) + a(k)%3 > 0) {\n                       \
    \ triples(a(i), a(j), a(k)) + 1\n                    }\n                }\n  \
    \          }\n        }\n        triples.filter(_._2 > 0).size", "        val\
    \ a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n  \
    \      for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n \
    \       for (i <- 0 until n) {\n            for (j <- 0 until n) {\n         \
    \       for (k <- 0 until n) {\n                    if (i < j && j < k && k <\
    \ i) {\n                        m += (a(i) + a(j) + a(k))\n                  \
    \  }\n                }\n            }\n        }\n        m.toList.sum", "  \
    \      val a = Array.ofDim[Int](n)\n        val result = new mutable.HashMap[Int,\
    \ Int]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var\
    \ count = 0\n        while(i < n && j < n && k < n) {\n            if(i == j &&\
    \ i == k) {\n                count += 1\n                result.put(a(i), count)\n\
    \                i += 1\n                j += 1\n                k += 1\n    \
    \        } else if(j == k) {\n                count += 1\n                result.put(a(i),\
    \ count)\n                i += 1\n                j += 1\n                k +=\
    \ 1\n            } else if(k == i) {\n                count += 1\n           \
    \     result.put(a(i), count)\n                i += 1\n                j += 1\n\
    \                k += 1\n            } else if(i == j) {\n                count\
    \ += 1\n                result.put(a(i), count)\n                i += 1\n    \
    \            j += 1\n                k += 1\n            } else if(j == k) {\n\
    \                count += 1\n                result.put(a(i), count)\n       \
    \         i += 1\n                j += 1\n                k += 1\n           \
    \ } else if(k == i) {\n                count += 1\n                result.put(a(i),\
    \ count)\n                i += 1\n                j += 1\n                k +=\
    \ 1\n            } else if(i == k) {\n                count += 1\n           \
    \     result.put(a(i), count)\n                i += 1\n                j += 1\n\
    \                k += 1\n            } else if(j == k) {\n                count\
    \ += 1\n                result.put(a(i), count)\n                i += 1\n    \
    \            j += 1\n                k += 1\n            } else if(k == i) {\n\
    \                count += 1\n                result.put(a(i), count)\n       \
    \         i += 1\n                j += 1\n                k += 1\n           \
    \ } else if(i == j) {\n                count += 1\n                result.put(a(i),\
    \ count)\n                i += 1\n                j += 1\n                k +=\
    \ 1\n            } else if(j == k) {\n                count += 1\n           \
    \     result.put(a(i), count)\n                i += 1\n                j += 1\n\
    \                k += 1\n            } else if(k == i) {\n                count\
    \ += 1\n                result.put(a(i), count)\n                i += 1\n    \
    \            j += 1\n                k += 1\n            } else if(i == k) {\n\
    \                count += 1\n                result.put(a(i), count)\n       \
    \         i += 1\n                j += 1\n                k += 1\n           \
    \ } else if(j == k) {\n                count += 1\n                result.put(a(i),\
    \ count)\n                i += 1\n                j += 1\n                k +=\
    \ 1\n            } else if(k == i) {\n                count += 1\n           \
    \     result.put(a(i), count)\n                i += 1\n                j += 1\n\
    \                k += 1\n            } else if(i == j) {\n                count\
    \ += 1\n                result.put(a(i), count)", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int]()\n\
    \        val m = mutable.Map[Int, Int]()\n        val n = mutable.Map[Int, Int",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        for (i <- 0 until n)\
    \ {\n            a(i) = i * i - i + 1\n        }\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until n) {\n                for (k <- 0 until n)\
    \ {\n                    if (a(i) + a(j) + a(k)%3 == 0) {\n                  \
    \      count(a(i), a(j), a(k)) + 1\n                    }\n                }\n\
    \            }\n        }\n        count.foreach {\n            case (a, b, c)\
    \ =>\n                if (maxTriples.getOrElse(a, b) == 0 || maxTriples.getOrElse(a,\
    \ b) > c) {\n                    maxTriples.put(a, b)\n                }\n   \
    \     }\n        maxTriples.values.sum", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val m = a.length\n        val n =\
    \ m * m * m\n        val sum = a.map(x => x * x - x + 1)\n        val sum2 = sum.map(x\
    \ => x * x)\n        val sum3 = sum2.map(x => x * x)\n        val sum4 = sum3.map(x\
    \ => x * x)\n        val sum5 = sum4.map(x => x * x)\n        val sum6 = sum5.map(x\
    \ => x * x)\n        val sum7 = sum6.map(x => x * x)\n        val sum8 = sum7.map(x\
    \ => x * x)\n        val sum9 = sum8.map(x => x * x)\n        val sum10 = sum9.map(x\
    \ => x * x)\n        val sum11 = sum10.map(x => x * x)\n        val sum12 = sum11.map(x\
    \ => x * x)\n        val sum13 = sum12.map(x => x * x)\n        val sum14 = sum13.map(x\
    \ => x * x)\n        val sum15 = sum14.map(x => x * x)\n        val sum16 = sum15.map(x\
    \ => x * x)\n        val sum17 = sum16.map(x => x * x)\n        val sum18 = sum17.map(x\
    \ => x * x)\n        val sum19 = sum18.map(x => x * x)\n        val sum20 = sum19.map(x\
    \ => x * x)\n        val sum21 = sum20.map(x => x * x)\n        val sum22 = sum21.map(x\
    \ => x * x)\n        val sum23 = sum22.map(x => x * x)\n        val sum24 = sum23.map(x\
    \ => x * x)\n        val sum25 = sum24.map(x => x * x)\n        val sum26 = sum25.map(x\
    \ => x * x)\n        val sum27 = sum26.map(x => x * x)\n        val sum28 = sum27.map(x\
    \ => x * x)\n        val sum29 = sum28.map(x => x * x)\n        val sum30 = sum29.map(x\
    \ => x * x)\n        val sum31 = sum30.map(x => x * x)\n        val sum32 = sum31.map(x\
    \ => x * x)\n        val sum33 = sum32.map(x => x * x)\n        val sum34 = sum33.map(x\
    \ => x * x)\n        val sum35 = sum34.map(x => x * x)\n        val sum36 = sum35.map(x\
    \ => x * x)\n        val sum37 = sum36.map(x => x * x)\n        val sum38 = sum37.map(x\
    \ => x * x)\n        val sum39", "        val a = Array.ofDim[Int](n)\n      \
    \  val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[Int, Int]()\n        val triples =\
    \ mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int, Int]()\n    \
    \    val triples = mutable.Map[Int, Int]()\n        val triple = mutable.Map[Int,\
    \ Int]()\n        val triples = mutable.Map[Int, Int]()\n        val triple =\
    \ mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int, Int]()\n   \
    \     val triple = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val triple = mutable.Map[In", "        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val a = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val a = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val a = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val a = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val a = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val a = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.HashMap[Int, Int]()\n\
    \        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = scala.math.pow(3, n).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n).toInt\n        val m = scala.math.pow(3, m).toInt\n        val n = scala.math.pow(3,\
    \ n", "        val a = Array.ofDim[Int](n)\n        val m = a.length\n       \
    \ val n = m\n        var i = 0\n        var j = 0\n        var k = 0\n       \
    \ var count = 0\n        while (i < n && j < n && k < n) {\n            val x\
    \ = a(i) + a(j) + a(k) + 3\n            if (x % 3 == 0) {\n                count\
    \ += 1\n            }\n            i += 1\n            j += 1\n            k +=\
    \ 1\n        }\n        count", "        val a = Array.ofDim[Int](n+1)\n     \
    \   a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n        a(4)\
    \ = 21\n        val res = a.zipWithIndex.filter(_._2 > 1).filter(_._2 < n).filter(_._3\
    \ > 1).filter(_._3 < n).filter(_._3 > 1).filter(_._3 < n).filter(_._3 > 1).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3 < n).filter(_._3\
    \ < n).filter(_", "        var triples = 0\n        var a = Array.ofDim[Int](n)\n\
    \        for( i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n\
    \        for( i <- 0 until n ) {\n            for( j <- 0 until n ) {\n      \
    \          for( k <- 0 until n ) {\n                    if( i < j < k && a(i)\
    \ + a(j) + a(k) % 3 == 0 ) {\n                        triples += 1\n         \
    \           }\n                }\n            }\n        }\n        return triples",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val i = mutable.ArrayBuffer.empty[Int]\n\
    \        val j = mutable.ArrayBuffer.empty[Int]\n        val k = mutable.ArrayBuffer.empty[Int]\n\
    \        val s = mutable.ArrayBuffer.empty[Int]\n        val t = mutable.ArrayBuffer.empty[Int]\n\
    \        val r = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.HashMap[Long, Long]()\n        for(i <- 0 until n){\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + j\n      \
    \      val v = if (m.contains(k)) m.get(k) else 0\n            a.updated(i, v)\n\
    \            m.put(k, v)\n        }\n        val triples = a.filter(_ % 3 == 0).length\n\
    \        triples * 3", "        var triples = 0\n        var a = Array.ofDim[Int](n\
    \ + 1)\n        a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n\
    \        a(4) = 21\n        for(i <- 0 until n) {\n            for(j <- 0 until\
    \ n) {\n                for(k <- 0 until n) {\n                    if(i+j+k ==\
    \ n+1) {\n                        triples += 1\n                    }\n      \
    \          }\n            }\n        }\n        for(i <- 0 until n) {\n      \
    \      for(j <- 0 until n) {\n                for(k <- 0 until n) {\n        \
    \            if(a(i) + a(j) + a(k) == 3) {\n                        triples +=\
    \ 1\n                    }\n                }\n            }\n        }\n    \
    \    return triples", "        val a = Array.ofDim[Long](n)\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val s = mutable.HashMap[Long,\
    \ Long]()\n        val t = mutable.HashMap[Long, Long]()\n        val u = mutable.HashMap[Long,\
    \ Long]()\n        val v = mutable.HashMap[Long, Long]()\n        val w = mutable.HashMap[Long,\
    \ Long]()\n        val x = mutable.HashMap[Long, Long]()\n        val y = mutable.HashMap[Long,\
    \ Long]()\n        val z = mutable.HashMap[Long, Long]()\n        val a = mutable.HashMap[Long,\
    \ Long]()\n        val b = mutable.HashMap[Long, Long]()\n        val c = mutable.HashMap[Long,\
    \ Long]()\n        val d = mutable.HashMap[Long, Long]()\n        val e = mutable.HashMap[Long,\
    \ Long]()\n        val f = mutable.HashMap[Long, Long]()\n        val g = mutable.HashMap[Long,\
    \ Long]()\n        val h = mutable.HashMap[Long, Long]()\n        val i = mutable.HashMap[Long,\
    \ Long]()\n        val j = mutable.HashMap[Long, Long]()\n        val k = mutable.HashMap[Long,\
    \ Long]()\n        val l = mutable.HashMap[Long, Long]()\n        val m = mutable.HashMap[Long,\
    \ Long]()\n        val n = mutable.HashMap[Long, Long]()\n        val o = mutable.HashMap[Long,\
    \ Long]()\n        val p = mutable.HashMap[Long, Long]()\n        val q = mutable.HashMap[Long,\
    \ Long]()\n        val r = mutable.HashMap[Long, Long]()\n        val s = mutable.HashMap[Long,\
    \ Long]()\n        val t = mutable.HashMap[Long, Long]()\n        val u = mutable.HashMap[Long,\
    \ Long]()\n        val v = mutable.HashMap[Long, Long]()\n        val w = mutable.HashMap[Long,\
    \ Long]()\n        val x = mutable.HashMap[Long, Long]()\n        val y = mutable.HashMap[Long,\
    \ Long]()\n        val z = mutable.HashMap[Long, Long]()\n        val a = mutable.HashMap[Long,\
    \ Long]()\n        val b = mutable.HashMap[Long, Long]()\n        val c = mutable.HashMap[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.HashMap[Int, Int]()\n\
    \        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val l = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val l = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val l = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val l = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val l = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val l = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        for (i <- 1 to n) {\n            val j = i * i - i + 1\n            val\
    \ k = i * i * i\n            val x = a(i)\n            val y = a(j)\n        \
    \    val z = a(k)\n            if (x < y && x < z && y < z) {\n              \
    \  count(x) = count(x) + 1\n                count(y) = count(y) + 1\n        \
    \        count(z) = count(z) + 1\n            }\n        }\n        count.values.toList.max",
  "        val a = Array.ofDim[Long](n)\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val a = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        var triples = 0\n     \
    \   var a = Array.ofDim[Int](n)\n        for(i <- 0 until n) {\n            for(j\
    \ <- 0 until n) {\n                for(k <- 0 until n) {\n                   \
    \ if(i+j+k == n) triples += 1\n                    if(a(i) + a(j) + a(k) == 3*n)\
    \ triples += 1\n                }\n            }\n            a(i) = i*i - i +\
    \ 1\n        }\n        triples", "        val a = Array.ofDim[Int](n)\n     \
    \   val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val max = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]", "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[", "       \
    \ var a = new Array[Int](n)\n        var count = 0\n        for(i<- 1 to n){\n\
    \            for(j<- 1 to n){\n                for(k<- 1 to n){\n            \
    \        if(i<j && i<k && j<k){\n                        a(i) = i*i - i + 1\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n        return count", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val l = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        for( i <- 1 to n ) {\n            val j = i * i - i + 1\n           \
    \ val k = i * i + i + 1\n            if( j < k ) {\n                a(i) = j\n\
    \                count(j) = count(j) + 1\n                count(k) = count(k)\
    \ + 1\n            }\n        }\n        count(a(0))", "        val a = Array.ofDim[Int](n)\n\
    \        val result = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[", "        val a = Array.ofDim[Int](n)\n        var i = 0\n \
    \       var j = 0\n        var k = 0\n        var count = 0\n        while(i <\
    \ n && j < n && k < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \            j += 1\n            k += 1\n            count += 1\n        }\n \
    \       while(i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \            count += 1\n        }\n        while(j < n) {\n            a(j) =\
    \ i * i - i + 1\n            j += 1\n            count += 1\n        }\n     \
    \   while(k < n) {\n            a(k) = i * i - i + 1\n            k += 1\n   \
    \         count += 1\n        }\n        for(i <- 0 until n) {\n            for(j\
    \ <- 0 until n) {\n                for(k <- 0 until n) {\n                   \
    \ if(a(i) + a(j) + a(k) % 3 == 0) {\n                        count += 1\n    \
    \                }\n                }\n            }\n        }\n        count",
  "        val a = Array.ofDim[Int](n + 1)\n        a(0) = 1\n        a(1) = 3\n \
    \       a(2) = 7\n        a(3) = 13\n        a(4) = 21\n        val triples =\
    \ mutable.HashSet[Int]()\n        for (i <- 0 until a.length - 1) {\n        \
    \    for (j <- i + 1 until a.length - 1) {\n                for (k <- j + 1 until\
    \ a.length - 1) {\n                    if (a(i) + a(j) + a(k) % 3 == 0) {\n  \
    \                      triples.add(a(i) + a(j) + a(k))\n                    }\n\
    \                }\n            }\n        }\n        triples.toList.size", " \
    \       val a = Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val result = mutable.ArrayBuffer.empty[Int]\n        val counter = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val maxTriples\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTriple = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleIndex = mutable.ArrayBuffer.empty[Int]\n        val maxTripleValue\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleCounter = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleCounterIndex = mutable.ArrayBuffer.empty[Int]\n        val\
    \ maxTripleCounterValue = mutable.ArrayBuffer.empty[Int]\n        val maxTripleCounterCounter\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxTripleCounterCounterIndex =\
    \ mutable.ArrayBuffer.empty[Int]\n        val maxTripleCounterCounterValue = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleCounterCounterCounter = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxTripleCounterCounterIndex = mutable.ArrayBuffer.empty[Int]\n \
    \       val maxTripleCounterCounterValue = mutable.ArrayBuffer.empty[Int]\n  \
    \      val maxTripleCounterCounterCounter = mutable.ArrayBuffer.empty[Int]\n \
    \       val maxTripleCounterCounterIndex = mutable.ArrayBuffer.empty[Int]\n  \
    \      val maxTripleCounterCounterValue = mutable.ArrayBuffer.empty[Int]\n   \
    \     val maxTripleCounterCounterCounter = mutable.ArrayBuffer.empty[Int]\n  \
    \      val maxTripleCounterCounterIndex = mutable.ArrayBuffer.empty[Int]\n   \
    \     val maxTripleCounterCounterValue = mutable.ArrayBuffer.empty[Int]\n    \
    \    val maxTripleCounterCounterCounter = mutable.ArrayBuffer.empty[Int]\n   \
    \     val maxTripleCounterCounterIndex = mutable.ArrayBuffer.empty[Int]\n    \
    \    val maxTripleCounterCounterValue = mutable.ArrayBuffer.empty[Int]\n     \
    \   val maxTripleCounterCounterCounter = mutable.ArrayBuffer.empty[Int]\n    \
    \    val maxTripleCounterCounterIndex = mutable.ArrayBuffer.empty[Int]\n     \
    \   val maxTripleCounterCounterValue = mutable.ArrayBuffer.empty[Int]\n      \
    \  val maxTripleCounterCounterCounter = mutable.ArrayBuffer.empty[Int]\n     \
    \   val maxTripleCounterCounterIndex = mutable.ArrayBuffer.empty[Int]\n      \
    \  val maxTripleCounterCounterValue = mut", "        val a = Array.ofDim[Int](n\
    \ + 1)\n        a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n\
    \        a(4) = 21\n        val triples = a.zipWithIndex.filter(_._2 > 0).filter(_._2\
    \ < n).filter(_._3 > 0).filter(_._3 < n).filter(_._3 > 0).map(_._1).distinct\n\
    \        triples.toList.foldLeft(0)((a, b) => a + b)", "        var sum = 0\n\
    \        var a = new Array[Long](n)\n        for( i <- 0 until n ) {\n       \
    \     a(i) = i * i - i + 1\n        }\n        for( i <- 0 until n ) {\n     \
    \       for( j <- 0 until n ) {\n                for( k <- 0 until n ) {\n   \
    \                 if( i < j < k && a(i) + a(j) + a(k) == 3 ) {\n             \
    \           sum += 1 \n                    }\n                }\n            }\n\
    \        }\n        return sum", "        val a = Array.ofDim[Int](n)\n      \
    \  val result = new mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.HashSet[Int]()\n\
    \        val maxTriple = mutable.HashSet[Int]()\n        val maxTriples = mutable.",
  "        val a = Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        for (i <- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + 1\n      \
    \      if (j < k) {\n                a(i) = j\n                count(j) = count(j)\
    \ + 1\n                count(k) = count(k) + 1\n            } else {\n       \
    \         a(i) = k\n                count(k) = count(k) + 1\n            }\n \
    \       }\n        for (i <- 1 to n) {\n            val j = i * i - i + 1\n  \
    \          val k = i * i + i + 1\n            if (count(j) > count(k)) {\n   \
    \             maxTriples(i) = j\n            } else {\n                maxTriples(i)\
    \ = k\n            }\n        }\n        count(maxTriples(n))", "        val a\
    \ = Array.ofDim[Long](n)\n        val count = mutable.Map[Long, Long]()\n    \
    \    val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long", "        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val sum = 0\n        val\
    \ max = 0\n        for(i <- 0 until n){\n            val j = i + 1\n         \
    \   val k = i + 2\n            val value = i * i - i + 1\n            sum += value\n\
    \            a(i) = value\n            a(j) = value\n            a(k) = value\n\
    \            if((i < j) && (j < k) && (k < n) && (a(i) + a(j) + a(k) == sum)){\n\
    \                count(i) = count(i) + 1\n                count(j) = count(j)\
    \ + 1\n                count(k) = count(k) + 1\n                max = Math.max(max,\
    \ a(i) + a(j) + a(k))\n            }\n        }\n        max.toLong", "      \
    \  val a = Array.ofDim[Int](n)\n        val m = scala.math.pow(3, n)\n       \
    \ var i = 0\n        var j = 0\n        var k = 0\n        var count = 0\n   \
    \     while(i < n && j < n && k < n) {\n            a(i) = i * i - i + 1\n   \
    \         i += 1\n            j += 1\n            k += 1\n            count +=\
    \ 1\n        }\n        while(i < n) {\n            a(i) = i * i - i + 1\n   \
    \         i += 1\n            count += 1\n        }\n        while(j < n) {\n\
    \            a(j) = j * j - j + 1\n            j += 1\n            count += 1\n\
    \        }\n        while(k < n) {\n            a(k) = k * k - k + 1\n       \
    \     k += 1\n            count += 1\n        }\n        for(i <- 0 until n) {\n\
    \            for(j <- 0 until n) {\n                for(k <- 0 until n) {\n  \
    \                  if(a(i) + a(j) + a(k) == m) {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       count", "        val a = Array.ofDim[Int](n)\n        val result = mutable.Map[Int,\
    \ Int]()\n        val max = scala.math.max(3, n)\n        for(i <- 1 to max){\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + 1\n      \
    \      val v = a(i) + a(j) + a(k) - 3\n            if(v > 0){\n              \
    \  a(i) = v\n                result(i) = v\n            }\n        }\n       \
    \ val count = result.filter(_._2 > 0).size\n        return count", "        val\
    \ a = Array.ofDim[Int](n+1)\n        a(0) = 1\n        a(1) = 3\n        a(2)\
    \ = 7\n        a(3) = 13\n        a(4) = 21\n        val triples = mutable.ListBuffer[Int]()\n\
    \        val triple = (_: Int) => (_: Int) => (_: Int) => (triples += 1)\n   \
    \     a.foreach(triple)\n        triples.toList.length", "        var a = Array.ofDim[Int](n)\n\
    \        var count = 0\n        for( i <- 1 to n-1 ) {\n            for( j <-\
    \ i+1 to n ) {\n                for( k <- j+1 to n ) {\n                    if(\
    \ a(i) + a(j) + a(k)%3 > 0 ) {\n                        count += 1\n         \
    \           }\n                }\n            }\n        }\n        count", " \
    \       val a = Array.ofDim[Int](n)\n        val result = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.empty[Int]\n\
    \        val triples = mutable.ArrayBuffer.empty[Int]\n        val triple = mutable.ArrayBuffer.",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.HashMap[Int, Int]()\n\
    \        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.HashMap[Int, Int]()\n\
    \        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val m = mutable.HashMap[",
  "        val a = Array.ofDim[Int](n)\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int]()\n        val m = mutable.Map[Int, Int]()\n\
    \        val n = mutable.Map[Int, Int", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n+1)\n        a(0) = 1\n        a(1) = 3\n   \
    \     a(2) = 7\n        a(3) = 13\n        a(4) = 21\n        val result = mutable.ListBuffer.empty[Int]\n\
    \        val triples = mutable.ListBuffer.empty[Int]\n        val triple = mutable.ListBuffer.empty[Int]\n\
    \        val triple2 = mutable.ListBuffer.empty[Int]\n        val triple3 = mutable.ListBuffer.empty[Int]\n\
    \        val triple4 = mutable.ListBuffer.empty[Int]\n        val triple5 = mutable.ListBuffer.empty[Int]\n\
    \        val triple6 = mutable.ListBuffer.empty[Int]\n        val triple7 = mutable.ListBuffer.empty[Int]\n\
    \        val triple8 = mutable.ListBuffer.empty[Int]\n        val triple9 = mutable.ListBuffer.empty[Int]\n\
    \        val triple10 = mutable.ListBuffer.empty[Int]\n        val triple11 =\
    \ mutable.ListBuffer.empty[Int]\n        val triple12 = mutable.ListBuffer.empty[Int]\n\
    \        val triple13 = mutable.ListBuffer.empty[Int]\n        val triple14 =\
    \ mutable.ListBuffer.empty[Int]\n        val triple15 = mutable.ListBuffer.empty[Int]\n\
    \        val triple16 = mutable.ListBuffer.empty[Int]\n        val triple17 =\
    \ mutable.ListBuffer.empty[Int]\n        val triple18 = mutable.ListBuffer.empty[Int]\n\
    \        val triple19 = mutable.ListBuffer.empty[Int]\n        val triple20 =\
    \ mutable.ListBuffer.empty[Int]\n        val triple21 = mutable.ListBuffer.empty[Int]\n\
    \        val triple22 = mutable.ListBuffer.empty[Int]\n        val triple23 =\
    \ mutable.ListBuffer.empty[Int]\n        val triple24 = mutable.ListBuffer.empty[Int]\n\
    \        val triple25 = mutable.ListBuffer.empty[Int]\n        val triple26 =\
    \ mutable.ListBuffer.empty[Int]\n        val triple27 = mutable.ListBuffer.empty[Int]\n\
    \        val triple28 = mutable.ListBuffer.empty[Int]\n        val triple29 =\
    \ mutable.ListBuffer.empty[Int]\n        val triple30 = mutable.ListBuffer.empty[Int]\n\
    \        val triple31 = mutable.ListBuffer.empty[Int]\n        val triple32 =\
    \ mutable.ListBuffer.empty[Int]\n        val triple33 = mutable.ListBuffer.empty[Int]\n\
    \        val triple", "        val a = Array.ofDim[Int](n)\n        val m = mutable.HashMap[Int,\
    \ Int]()\n        val n = mutable.HashMap[Int, Int]()\n        val i = mutable.HashMap[Int,\
    \ Int]()\n        val j = mutable.HashMap[Int, Int]()\n        val k = mutable.HashMap[Int,\
    \ Int]()\n        val triples = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = ", "        var a = Array.ofDim[Int](n)\n \
    \       var count = 0\n        for (i<-0 until n) {\n            a(i) = i * i\
    \ - i + 1\n        }\n        for (i<-0 until n) {\n            for (j<-0 until\
    \ n) {\n                for (k<-0 until n) {\n                    if (a(i) + a(j)\
    \ + a(k) == 3) {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n        count", "        val a =\
    \ Array.ofDim[Int](n)\n        val count = mutable.Map[Int, Int]()\n        val\
    \ maxTriples = mutable.Map[Int, Int]()\n        for (i <- 0 until n) {\n     \
    \       a(i) = i * i - i + 1\n        }\n        for (i <- 0 until n) {\n    \
    \        for (j <- 0 until n) {\n                for (k <- 0 until n) {\n    \
    \                if (a(i) + a(j) + a(k)%3 == 0) {\n                        count(a(i),\
    \ a(j), a(k)) = count(a(i), a(j), a(k)) + 1\n                        if (count(a(i),\
    \ a(j), a(k)) > maxTriples(a(i), a(j), a(k))) {\n                            maxTriples(a(i),\
    \ a(j), a(k)) = count(a(i), a(j), a(k))\n                        }\n         \
    \           }\n                }\n            }\n        }\n        maxTriples.values.sum",
  "        val a = Array.ofDim[Int](n)\n        val m = scala.math.max(3, n)\n   \
    \     val result = mutable.ListBuffer[Int]()\n        \n        for(i <- 1 to\
    \ m) {\n            for(j <- i to n) {\n                for(k <- j to n) {\n \
    \                   if(i + j + k == m) {\n                        result += (i\
    \ + j + k)\n                    }\n                }\n            }\n        }\n\
    \        \n        result.size", "        val a = Array.ofDim[Int](n)\n      \
    \  val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        val a = Array.ofDim[Int](n)\n        var count = 0\n        for (i<- 1\
    \ to n) {\n            a(i) = i * i - i + 1\n        }\n        val triples =\
    \ a.zipWithIndex.filter(_._2 % 3 == 0)\n        triples.foreach { t =>\n     \
    \       val i = t._1\n            val j = t._2 + 1\n            val k = t._2 +\
    \ 2\n            val sum = t._1 + t._2 + t._3\n            if (sum % 3 == 0) {\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   val a = Array.ofDim[Int](n)\n        val m = scala.math.BigInt(3)\n      \
    \  val n = scala.math.BigInt(n)\n        val i = scala.math.BigInt(1)\n      \
    \  val j = scala.math.BigInt(2)\n        val k = scala.math.BigInt(3)\n      \
    \  val count = scala.math.BigInt(0)\n        val maxCount = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        val maxTriple = scala.math.BigInt(0)\n\
    \        val maxTriples = scala.math.BigInt(0)\n        ", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val i = mutable.HashMap[Int, Int]()\n        val j = mutable.HashMap[Int,\
    \ Int]()\n        val k = mutable.HashMap[Int, Int]()\n        val triples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriple = mutable.HashMap[Int, Int]()\n        val maxTriples\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriple = mutable.HashMap[Int,\
    \ Int]()\n        val maxTriples = mutable.HashMap[Int, Int]()\n        val maxTriple\
    \ = mutable.HashMap[Int, Int]()\n        val maxTriples = ", "        val a =\
    \ Array.ofDim[Int](n)\n        val m = a.length\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while (i < m && j <\
    \ m && k < m) {\n            if (a(i) > a(j)) {\n                i += 1\n    \
    \        } else if (a(i) < a(j)) {\n                j += 1\n            } else\
    \ {\n                k += 1\n            }\n            count += 1\n        }\n\
    \        if (count > 0) {\n            val triples = count * 3\n            val\
    \ tripleSum = triples * 3\n            val tripleSum2 = tripleSum * 3\n      \
    \      val tripleSum3 = tripleSum2 * 3\n            val tripleSum4 = tripleSum3\
    \ * 3\n            val tripleSum5 = tripleSum4 * 3\n            val tripleSum6\
    \ = tripleSum5 * 3\n            val tripleSum7 = tripleSum6 * 3\n            val\
    \ tripleSum8 = tripleSum7 * 3\n            val tripleSum9 = tripleSum8 * 3\n \
    \           val tripleSum10 = tripleSum9 * 3\n            val tripleSum11 = tripleSum10\
    \ * 3\n            val tripleSum12 = tripleSum11 * 3\n            val tripleSum13\
    \ = tripleSum12 * 3\n            val tripleSum14 = tripleSum13 * 3\n         \
    \   val tripleSum15 = tripleSum14 * 3\n            val tripleSum16 = tripleSum15\
    \ * 3\n            val tripleSum17 = tripleSum16 * 3\n            val tripleSum18\
    \ = tripleSum17 * 3\n            val tripleSum19 = tripleSum18 * 3\n         \
    \   val tripleSum20 = tripleSum19 * 3\n            val tripleSum21 = tripleSum20\
    \ * 3\n            val tripleSum22 = tripleSum21 * 3\n            val tripleSum23\
    \ = tripleSum22 * 3\n            val tripleSum24 = tripleSum23 * 3\n         \
    \   val tripleSum25 = tripleSum24 * 3\n            val tripleSum26 = tripleSum25\
    \ * 3\n            val tripleSum27 = tripleSum26 * 3\n            val tripleSum28\
    \ = tripleSum27 * 3\n            val tripleSum29 = tripleSum28 * 3\n         \
    \   val tripleSum30 = tripleSum29 * 3\n            val tripleSum31 = tripleSum30\
    \ * 3\n            val tripleSum32 = tripleSum31 * 3\n            val tripleSum33\
    \ = tripleSum32 * 3\n            val tripleSum34 = tripleSum33 * 3\n         \
    \   val tripleSum35 = tripleSum34 * 3\n            val tripleSum36 = tripleSum35\
    \ * 3\n            val tripleSum37 = tripleSum36 * 3\n", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[Int]\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        val n = mutable.ArrayBuffer.empty[",
  "        var a = Array.ofDim[Int](n + 1)\n        a(0) = 1\n        a(1) = 3\n \
    \       a(2) = 7\n        a(3) = 13\n        a(4) = 21\n        var count = 0\n\
    \        var i = 0\n        while (i < n) {\n            var j = i + 1\n     \
    \       var k = i + 1\n            while (j < n && k < n) {\n                if\
    \ (a(i) + a(j) + a(k) == 3) {\n                    count += 1\n              \
    \  }\n                j += 1\n                k += 1\n            }\n        \
    \    i += 1\n        }\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        for(i<-0 until n){\n   \
    \         val j = i*i\n            val k = i*i+1\n            val l = i*i+2\n\
    \            if(i<j && j<k && k<l){\n                a(i) = i\n              \
    \  count(i) = 1\n            }\n        }\n        for(i<-0 until n){\n      \
    \      val j = i*i\n            val k = i*i+1\n            val l = i*i+2\n   \
    \         if(i<j && j<k && k<l && count(i)>0){\n                count(i) = count(i)\
    \ + count(j)\n                count(i) = count(i) + count(k)\n               \
    \ count(i) = count(i) + count(l)\n            }\n        }\n        count(0)",
  "        val a = Array.ofDim[Int](n)\n        val m = a.length\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var count = 0\n        while\
    \ (i < m && j < m && k < m) {\n            if (a(i) + a(j) + a(k) == 0) {\n  \
    \              count += 1\n            }\n            i += 1\n            j +=\
    \ 1\n            k += 1\n        }\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n\
    \        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        val maxTriple\
    \ = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n\
    \        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples = mutable.Map[Int,\
    \ Int]()\n        val maxTriple = mutable.Map[Int, Int]()\n        val maxTriples\
    \ = mutable.Map[", "        val a = Array.ofDim[Int](n)\n        var i = 0\n \
    \       var j = 0\n        var k = 0\n        var count = 0\n        while (i\
    \ < n && j < n && k < n) {\n            a(i) = i * i - i + 1\n            i +=\
    \ 1\n            j += 1\n            k += 1\n        }\n        val max = a.max\n\
    \        val min = a(0)\n        val sum = a(0) + a(1) + a(2)\n        val triples\
    \ = a.filter(_ % 3 == 0).length\n        count = triples * 3\n        if (sum\
    \ % 3 == 0) {\n            count = count + 1\n        }\n        if (count > max)\
    \ {\n            count = max\n        }\n        if (count < min) {\n        \
    \    count = min\n        }\n        count", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[Int, Int]()\n        val n = mutable.HashMap[Int,\
    \ Int]()\n        val m = mutable.HashMap[", "        val a = Array.ofDim[Int](n)\n\
    \        val count = mutable.Map[Int, Int]()\n        val triples = mutable.Map[Int,\
    \ Int]()\n        val maxTriples = mutable.Map[Int, Int]()\n        for (i <-\
    \ 0 until n) {\n            a(i) = i * i - i + 1\n        }\n        for (i <-\
    \ 0 until n) {\n            val j = i + 1\n            val k = n - 1\n       \
    \     val triple = a(i) + a(j) + a(k) \n            if (triple % 3 == 0) {\n \
    \               triples(triple) = triples(triple) + 1\n                count(triple)\
    \ = count(triple) + 1\n            }\n            if (triples(triple) > maxTriples(triple))\
    \ {\n                maxTriples(triple) = triples(triple)\n            }\n   \
    \     }\n        count.toList.sortBy(_._2).reverse.head._1", "        val a =\
    \ Array.ofDim[Int](n)\n        val m = mutable.ArrayBuffer.empty[Int]\n      \
    \  val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[Int]\n        val m = mutable.ArrayBuffer.empty[Int]\n\
    \        val n = mutable.ArrayBuffer.empty[", "        val a = Array.ofDim[Int](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while(i < n && j <\
    \ n && k < n) {\n            if(a(i) == a(j) && a(j) == a(k)) {\n            \
    \    count += 1\n                m += i\n                m += j\n            \
    \    m += k\n                i += 1\n                j += 1\n                k\
    \ += 1\n            } else if(a(i) == a(j)) {\n                i += 1\n      \
    \          j += 1\n            } else if(a(i) == a(k)) {\n                k +=\
    \ 1\n            } else {\n                i += 1\n                j += 1\n  \
    \              k += 1\n            }\n        }\n        count"]
stop_tokens:
- "\n    }\n"
