language: scala
name: HumanEval_148_bf
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", \"Venus\"),\n            Planet(\"Mercury\", \"Earth\"\
    ),\n            Planet(\"Mercury\", \"Mars\"),\n            Planet(\"Mercury\"\
    , \"Jupiter\"),\n            Planet(\"Mercury\", \"Saturn\"),\n            Planet(\"\
    Mercury\", \"Uranus\"),\n            Planet(\"Mercury\", \"Neptune\"),\n     \
    \       Planet(\"Venus\", \"Earth\"),\n            Planet(\"Venus\", \"Mars\"\
    ),\n            Planet(\"Venus\", \"Jupiter\"),\n            Planet(\"Venus\"\
    , \"Saturn\"),\n            Planet(\"Venus\", \"Uranus\"),\n            Planet(\"\
    Venus\", \"Neptune\"),\n            Planet(\"Earth\", \"Mars\"),\n           \
    \ Planet(\"Earth\", \"Jupiter\"),\n            Planet(\"Earth\", \"Saturn\"),\n\
    \            Planet(\"Earth\", \"Uranus\"),\n            Planet(\"Earth\", \"\
    Neptune\"),\n            Planet(\"Mars\", \"Jupiter\"),\n            Planet(\"\
    Mars\", \"Saturn\"),\n            Planet(\"Mars\", \"Uranus\"),\n            Planet(\"\
    Mars\", \"Neptune\"),\n            Planet(\"Jupiter\", \"Saturn\"),\n        \
    \    Planet(\"Jupiter\", \"Uranus\"),\n            Planet(\"Jupiter\", \"Neptune\"\
    ),\n            Planet(\"Saturn\", \"Uranus\"),\n            Planet(\"Saturn\"\
    , \"Neptune\"),\n            Planet(\"Uranus\", \"Neptune\")\n        )\n    \
    \    val planetsBetween = planets.filter(p => p.name1.equals(planet1) && p.name2.equals(planet2))\n\
    \        val planetsBetweenSorted = planetsBetween.sortBy(p => p.distanceToSun)\n\
    \        val planetsBetweenSortedWithSun = planetsBetweenSorted.filter(p => p.distanceToSun\
    \ > 0)\n        val planetsBetweenSortedWithSunSorted = planetsBetweenSortedWithSun.sortBy(p\
    \ => p.distanceToSun)\n        val planetsBetweenSortedWithSunSortedWithSun =\
    \ planetsBetweenSortedWithSunSorted.filter(p => p.distanceToSun > 0)\n       \
    \ val planetsBetweenSortedWithSunSortedWithSunSorted = planetsBetweenSortedWithSunSortedWithSun.sortBy(p\
    \ => p.distanceToSun)\n        val plan\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz04xc41u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz04xc41u.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpz04xc41u.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Earth\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz04xc41u.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Mars\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpz04xc41u.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Jupiter\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz04xc41u.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpz04xc41u.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Mercury\""
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsBetween = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2)\n        val planetsBetweenWithSun\
    \ = planetsBetween.filter(planet => planet != planet1 && planet != planet2 &&\
    \ planet != planets.last)\n        val planetsBetweenWithSunWithSun = planetsBetweenWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSun = planetsBetweenWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSunWithSun = planetsBetweenWithSunWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSunWithSunWithSun = planetsBetweenWithSunWithSunWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSun = planetsBetweenWithSunWithSunWithSunWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSunWithSun = planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSunWithSunWithSun\
    \ = planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSunWith\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0knq7umf.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0knq7umf.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val sun = Planet(\"Sun\")\n        val planet1 = Planet(planet1)\n\
    \        val planet2 = Planet(planet2)\n        val orbit1 = planet1.orbit(sun)\n\
    \        val orbit2 = planet2.orbit(sun)\n        val orbits = List(orbit1, orbit2)\n\
    \        val proximity = orbits.map(o => o.distance(sun))\n        proximity.sortBy(o\
    \ => o).takeWhile(o => o > 0).reverse.map(o => planets(o))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcbwso_6q.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcbwso_6q.scala:17:22 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mplanet1\e[0m = Planet(planet1)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpcbwso_6q.scala:17:29 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mplanet1\e[0m = Planet(planet1)\n\e[31m\e\
    [31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m            \
    \                 Recursive \e[33mvalue\e[0m \e[35mplanet1\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcbwso_6q.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mplanet2\e[0m = Planet(planet2)\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcbwso_6q.scala:18:29 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mplanet2\e[0m = Planet(planet2)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Recursive \e[33mvalue\e[0m \e[35mplanet2\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcbwso_6q.scala:22:42\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mproximity\e[0m = orbits.map("
  stdout: ''
  timestamp: 1660009534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val sun = Planet(\"Sun\"\
    , 8)\n        val planet1 = planets.find(_.name == planet1).get\n        val planet2\
    \ = planets.find(_.name == planet2).get\n        val orbit1 = planet1.orbit(sun)\n\
    \        val orbit2 = planet2.orbit(sun)\n        val distance1 = orbit1.distanceTo(sun)\n\
    \        val distance2 = orbit2.distanceTo(sun)\n        val proximity = distance1.min(distance2)\n\
    \        val planetsBetween = planets.filter(_.orbit(sun).distanceTo(sun).isBetween(proximity,\
    \ distance2))\n        planetsBetween.sortBy(_.orbit(sun).distanceTo(sun))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu3g5nul1.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu3g5nul1.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpu3g5nul1.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m2\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu3g5nul1.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpu3g5nul1.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m4\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu3g5nul1.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m5\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tm"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n\
    \            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n\
    \            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n\
    \            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n\
    \            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n\
    \            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n\
    \            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n\
    \            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0)))\n\
    \        )\n        val sun = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))\n\
    \        val orbits = planets.map(_.orbit(sun))\n        val proximity = orbits.map(_.map(_.dist(sun)))\n\
    \        proximity.toList.sortBy(_.sum).reverse.map(_.head).filter(_.equals(planet1)).map(_.name)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8thjhp9e.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m))),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8thjhp9e.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m))),\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8thjhp9e.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e\
    [0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e\
    [0m,\e[31m0\e[0m,\e[31m0\e[0m))),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8thjhp9e.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m))),\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8thjhp9e.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(Vecto"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val planetsBetween = planets.filter(p\
    \ => p.orbit(planet1) < p.orbit(planet2))\n        val planetsClosest = planets.filter(p\
    \ => p.orbit(planet1) > p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) < p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) > p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) < p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) > p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) < p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) > p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) < p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) > p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) < p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) > p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) < p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ => p.orbit(planet1) > p.orbit(planet2))\n        val planetsClosestToSun = planets.filter(p\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"),\
    \ (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcirdwft1.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcirdwft1.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsClosestToSun\e[0m = planets.filter(\e[36mp\e[0m => p.orbit(planet1)\
    \ > p.orbit(planet2))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsClosestToSun is already defined as \e[33mvalue\e[0m\
    \ \e[35mplanetsClosestToSun\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcirdwft1.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mplanetsClosestToSun\e[0m\
    \ = planets.filter(\e[36mp\e[0m => p.orbit(planet1) < p.orbit(planet2))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsClosestToSun is already defined as \e[33mvalue\e[0m\
    \ \e[35mplanetsClosestToSun\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcirdwft1.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mplanetsClosestToSun\e[0m\
    \ = planets.filter(\e[36mp\e[0m => p.orbit(planet1) > p.orbit(planet2))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsClosestToSun is already defined as \e[33mvalue\e[0m\
    \ \e[35mplanetsClosestToSun\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcirdwft1.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mplanetsClosestToSun\e[0m\
    \ = planets.filte"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsBetween = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2)\n        val planetsBetween2 = planets.filter(planet\
    \ => planets.contains(planet) && planet != planet2 && planet != planet1)\n   \
    \     val planetsBetween3 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3)\n        val\
    \ planetsBetween4 = planets.filter(planet => planets.contains(planet) && planet\
    \ != planet1 && planet != planet2 && planet != planet3 && planet != planet4)\n\
    \        val planetsBetween5 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5)\n        val planetsBetween6 = planets.filter(planet\
    \ => planets.contains(planet) && planet != planet1 && planet != planet2 && planet\
    \ != planet3 && planet != planet4 && planet != planet5 && planet != planet6)\n\
    \        val planetsBetween7 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet != planet7)\n  \
    \      val planetsBetween8 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet != planet7 && planet\
    \ != planet8)\n        val planetsBetween9 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet != plan\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1smbg9f.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1smbg9f.scala:18:135\
    \ -----------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetween3\e[0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Not\
    \ found: planet3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1smbg9f.scala:19:135\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetween4\e[0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4)\n\e[31m\e[31m   |\e[0m                                            \
    \                                                                            \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                      Not found: planet3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpu1smbg9f.scala:19:156 -----------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetween4\e[0m = planets.filter(\e\
    [36mplanet\e[0m => planets.contains(planet) && planet != planet1 && planet !=\
    \ planet2 && planet != planet3 && planet != planet4)\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                                                            \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \         Not found: planet4\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\"\
    )\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\"\
    )\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planet1 = planet1.toUpperCase\n\
    \        val planet2 = planet2.toUpperCase\n        if (planet1 == planet2) List(sun)\n\
    \        else if (planets.contains(planet1) && planets.contains(planet2)) List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        else List()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdun4hr6.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphdun4hr6.scala:17:22 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdun4hr6.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdun4hr6.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdun4hr6.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphdun4hr6.scala:21:22 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1660009529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", PlanetType.Mercury),\n            Planet(\"Venus\", PlanetType.Venus),\n\
    \            Planet(\"Earth\", PlanetType.Earth),\n            Planet(\"Mars\"\
    , PlanetType.Mars),\n            Planet(\"Jupiter\", PlanetType.Jupiter),\n  \
    \          Planet(\"Saturn\", PlanetType.Saturn),\n            Planet(\"Uranus\"\
    , PlanetType.Uranus),\n            Planet(\"Neptune\", PlanetType.Neptune)\n \
    \       )\n        val planet1 = planets.find(_.name == planet1).get\n       \
    \ val planet2 = planets.find(_.name == planet2).get\n        val sun = Planet(\"\
    Sun\", PlanetType.Sun)\n        val orbit1 = planet1.orbit(sun)\n        val orbit2\
    \ = planet2.orbit(sun)\n        val orbits = orbit1 ++ orbit2\n        val proximity\
    \ = orbits.map(_.distanceTo(sun))\n        proximity.sortWith(_.compare(_.toDouble))\
    \ match {\n            case Nil => Nil\n            case x :: Nil => x\n     \
    \       case x :: y :: Nil => y\n            case x :: y :: z :: Nil => z\n  \
    \          case x :: y :: z :: w :: Nil => w\n            case x :: y :: z ::\
    \ w :: x :: Nil => x\n            case x :: y :: z :: w :: x :: y :: Nil => y\n\
    \            case x :: y :: z :: w :: x :: y :: z :: Nil => z\n            case\
    \ x :: y :: z :: w :: x :: y :: z :: w :: Nil => w\n            case x :: y ::\
    \ z :: w :: x :: y :: z :: w :: x :: Nil => x\n            case x :: y :: z ::\
    \ w :: x :: y :: z :: w :: x :: y :: Nil => y\n            case x :: y :: z ::\
    \ w :: x :: y :: z :: w :: x :: y :: z :: Nil => z\n            case x :: y ::\
    \ z :: w :: x :: y :: z :: w :: x :: y :: z :: w :: Nil => w\n            case\
    \ x :: y :: z :: w :: x :: y :: z :: w :: x :: y :: z :: w :: x :: Nil => x\n\
    \            case x :: y :: z :: w :: x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppjznfsju.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppjznfsju.scala:60:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmppjznfsju.scala:16:12 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, PlanetType.Mercury),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjznfsju.scala:16:30\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, PlanetType.Mercury),\n\e[31m\e[31m   |\e[0m                  \
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not\
    \ found: PlanetType\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjznfsju.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, PlanetType.Venus),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppjznfsju.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, PlanetType.Venus),\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            Not found: PlanetType\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppjznfsju.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, PlanetType.Earth),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val sun = Planet(\"Sun\"\
    , 8)\n        val orbits = planets.map(p => (p.name, p.orbit))\n        val sunOrbit\
    \ = orbits.find(p => p._1 == sun._1)._2\n        val sunOrbits = orbits.filter(p\
    \ => p._2 <= sunOrbit)\n        val planet1Orbit = orbits.find(p => p._1 == planet1._1)._2\n\
    \        val planet2Orbit = orbits.find(p => p._1 == planet2._1)._2\n        val\
    \ planet1Orbits = orbits.filter(p => p._2 <= planet1Orbit)\n        val planet2Orbits\
    \ = orbits.filter(p => p._2 <= planet2Orbit)\n        val planet1OrbitsSorted\
    \ = planet1Orbits.sortBy(p => p._2 - sunOrbit)\n        val planet2OrbitsSorted\
    \ = planet2Orbits.sortBy(p => p._2 - sunOrbit)\n        val planet1OrbitsSortedWithSun\
    \ = planet1OrbitsSorted.filter(p => p._2 == sunOrbit)\n        val planet2OrbitsSortedWithSun\
    \ = planet2OrbitsSorted.filter(p => p._2 == sunOrbit)\n        val planet1OrbitsSortedWithSunAndPlanet2\
    \ = planet1OrbitsSortedWithSun.filter(p => p._2 == planet2Orbit)\n        val\
    \ planet2OrbitsSortedWithSunAndPlanet2 = planet2OrbitsSortedWithSun.filter(p =>\
    \ p._2 == planet2Orbit)\n        val planet1OrbitsSortedWithSunAndPlanet1 = planet1OrbitsSortedWithSun.filter(p\
    \ => p._2 == planet1Orbit)\n        val planet2OrbitsSortedWithSunAndPlanet1 =\
    \ planet2OrbitsSortedWithSun.filter(p => p._2 == planet1Orbit)\n        val planet1OrbitsSortedWithSunAndPlanet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxq_b04_6.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxq_b04_6.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxq_b04_6.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m1\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxq_b04_6.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m2\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxq_b04_6.scala:19:12 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m3\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxq_b04_6.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m, \e[31m4\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxq_b04_6.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m, \e[31m5\e[0m),\n\
    \e[31m\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0))\n \
    \       val sun = Planet(\"Sun\", 0, 0)\n        val planet1 = planets.find(_.name\
    \ == planet1).get\n        val planet2 = planets.find(_.name == planet2).get\n\
    \        val sun1 = planets.find(_.name == sun).get\n        val sun2 = planets.find(_.name\
    \ == sun1).get\n        val sun3 = planets.find(_.name == sun2).get\n        val\
    \ sun4 = planets.find(_.name == sun3).get\n        val sun5 = planets.find(_.name\
    \ == sun4).get\n        val sun6 = planets.find(_.name == sun5).get\n        val\
    \ sun7 = planets.find(_.name == sun6).get\n        val sun8 = planets.find(_.name\
    \ == sun7).get\n        val sun9 = planets.find(_.name == sun8).get\n        val\
    \ sun10 = planets.find(_.name == sun9).get\n        val sun11 = planets.find(_.name\
    \ == sun10).get\n        val sun12 = planets.find(_.name == sun11).get\n     \
    \   val sun13 = planets.find(_.name == sun12).get\n        val sun14 = planets.find(_.name\
    \ == sun13).get\n        val sun15 = planets.find(_.name == sun14).get\n     \
    \   val sun16 = planets.find(_.name == sun15).get\n        val sun17 = planets.find(_.name\
    \ == sun16).get\n        val sun18 = planets.find(_.name == sun17).get\n     \
    \   val sun19 = planets.find(_.name == sun18).get\n        val sun20 = planets.find(_.name\
    \ == sun19).get\n        val sun21 = planets.find(_.name == sun20).get\n     \
    \   val sun22 = planets.find(_.name == sun21).get\n        val sun23 = planets.find(_.name\
    \ == sun22).get\n        val sun24 = planets.find(_.name == sun23).get\n     \
    \   val sun25 = planets.find(_.name == sun24).get\n        val sun26 = planets.find(_.name\
    \ == sun25).get\n        val sun\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcdd83ie7.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcdd83ie7.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpcdd83ie7.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcdd83ie7.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcdd83ie7.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpcdd83ie7.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcdd83ie7.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            "
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n  \
    \      )\n        val sun = Planet(\"Sun\", 0, 0) // the sun is located at position\
    \ 0, 0\n        val orbits = planets.map(planet => \n            Orbit(planet.name,\
    \ planet.orbit, planet.distanceTo(sun))\n        )\n        val planetsBetweenSunAndPlanet1\
    \ = orbits.filter(orbit => orbit.planet.name == planet1).map(orbit => orbit)\n\
    \        val planetsBetweenSunAndPlanet2 = orbits.filter(orbit => orbit.planet.name\
    \ == planet2).map(orbit => orbit)\n        val planetsBetweenSunAndPlanet1And2\
    \ = planetsBetweenSunAndPlanet1.intersect(planetsBetweenSunAndPlanet2)\n     \
    \   planetsBetweenSunAndPlanet1And2.sortBy(orbit => orbit.distanceTo(sun)).map(orbit\
    \ => orbit.planet.name)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4gsr2um.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpw4gsr2um.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4gsr2um.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw4gsr2um.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpw4gsr2um.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4gsr2um.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available"
  stdout: ''
  timestamp: 1660009536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1Orbit = orbit(planet1, sun)\n        val planet2Orbit = orbit(planet2,\
    \ sun)\n        val planet1Orbits = planet1Orbit :: planet1Orbit.filter(_.name\
    \ != \"Sun\")\n        val planet2Orbits = planet2Orbit :: planet2Orbit.filter(_.name\
    \ != \"Sun\")\n        val planet1OrbitsSorted = planet1Orbits.sortBy(_.distanceTo(sun))\n\
    \        val planet2OrbitsSorted = planet2Orbits.sortBy(_.distanceTo(sun))\n \
    \       val planet1OrbitsSortedWithSun = planet1OrbitsSorted.filter(_.name !=\
    \ \"Sun\")\n        val planet2OrbitsSortedWithSun = planet2OrbitsSorted.filter(_.name\
    \ != \"Sun\")\n        val planet1OrbitsSortedWithSunAndPlanet2 = planet1OrbitsSortedWithSun.filter(_.name\
    \ == planet2)\n        val planet2OrbitsSortedWithSunAndPlanet2 = planet2OrbitsSortedWithSun.filter(_.name\
    \ == planet2)\n        val planet1OrbitsSortedWithSunAndPlanet1 = planet1OrbitsSortedWithSunAndPlanet2.filter(_.name\
    \ == planet1)\n        val planet2OrbitsSortedWithSunAndPlanet1 = planet2OrbitsSortedWithSunAndPlanet2.filter(_.name\
    \ == planet1)\n        val planet1OrbitsSortedWithSunAndPlanet1AndPlanet2 = planet1OrbitsSortedWithSunAndPlanet1.filter(_.name\
    \ == planet2)\n        val planet2OrbitsSortedWithSunAndPlanet1AndPlanet2 = planet2OrbitsSortedWithSunAndPlanet1.filter(_.name\
    \ == planet2)\n        val planet1OrbitsSortedWithSunAndPlanet1AndPlanet2AndPlanet3\
    \ = planet1OrbitsSortedWithSunAndPlanet1AndPlanet2.filter(_.name == planet\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxwga_qyh.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxwga_qyh.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxwga_qyh.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxwga_qyh.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxwga_qyh.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxwga_qyh.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxwga_qyh.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1smrku9t.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1smrku9t.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1smrku9t.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0,0,0)),\n            Planet(\"Venus\", Vector(0,0,1)),\n\
    \            Planet(\"Earth\", Vector(1,0,0)),\n            Planet(\"Mars\", Vector(1,0,1)),\n\
    \            Planet(\"Jupiter\", Vector(2,0,0)),\n            Planet(\"Saturn\"\
    , Vector(2,0,1)),\n            Planet(\"Uranus\", Vector(3,0,0)),\n          \
    \  Planet(\"Neptune\", Vector(3,0,1))\n        )\n        val sun = Planet(\"\
    Sun\", Vector(0,0,0))\n        val orbits = planets.map(_.orbit(sun))\n      \
    \  val proximity = orbits.map(_.map(_.distanceTo(sun))).flatten\n        proximity.sortBy(_.abs)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1xl1tf5w.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1xl1tf5w.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Vector(\e[31m0\e\
    [0m,\e[31m0\e[0m,\e[31m1\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1xl1tf5w.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Vector(\e[31m1\e\
    [0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1xl1tf5w.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, Vector(\e[31m1\e\
    [0m,\e[31m0\e[0m,\e[31m1\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1xl1tf5w.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, Vector(\e\
    [31m2\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1xl1tf5w.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m, Vector(\e[31m2\e\
    [0m,\e[31m0\e[0m,\e[31m1\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^"
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit\
    \ = planets.find(_.name == planet2).getOrElse(sun)\n        val orbits = planets.filter(_.orbit(planet1Orbit,\
    \ planet2Orbit))\n        val proximity = orbits.map(_.distance(planet1Orbit,\
    \ planet2Orbit)).sortBy(_.toDouble)\n        proximity.toList.sortBy(_.toDouble)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_esqi8wf.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_esqi8wf.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_esqi8wf.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_esqi8wf.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_esqi8wf.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_esqi8wf.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_esqi8wf.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n  \
    \      )\n        val sun = Planet(\"Sun\", 0, 0) // the sun is the only planet\
    \ in the system\n        val planet1 = planets.find(_.name == planet1).get\n \
    \       val planet2 = planets.find(_.name == planet2).get\n        val sun1 =\
    \ planets.find(_.name == sun.name).get\n        val sun2 = planets.find(_.name\
    \ == sun1.name).get // the sun is also the second planet\n        val sun3 = planets.find(_.name\
    \ == sun2.name).get // the sun is also the third planet\n        val sun4 = planets.find(_.name\
    \ == sun3.name).get // the sun is also the fourth planet\n        val sun5 = planets.find(_.name\
    \ == sun4.name).get // the sun is also the fifth planet\n        val sun6 = planets.find(_.name\
    \ == sun5.name).get // the sun is also the sixth planet\n        val sun7 = planets.find(_.name\
    \ == sun6.name).get // the sun is also the seventh planet\n        val sun8 =\
    \ planets.find(_.name == sun7.name).get // the sun is also the eighth planet\n\
    \        val sun9 = planets.find(_.name == sun8.name).get // the sun is also the\
    \ ninth planet\n        val sun10 = planets.find(_.name == sun9.name).get\n  \
    \      val sun11 = planets.find(_.name == sun10.name).get // the sun is also the\
    \ tenth planet\n        val sun12 = planets.find(_.name == sun11.name).get\n \
    \       val sun13 = planets.find(_.name == sun12.name).get\n        val sun14\
    \ = planets.find(_.name == sun13.name).get\n        val sun15 = planets.find(_.name\
    \ == sun14.name).get\n        val sun16 = planets.find(_.name == sun15.name).get\n\
    \        val sun17 = planets.find(_.name == sun16.name).get\n        val sun18\
    \ = planets.find(_.name == sun17.name).get\n        val sun\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprr90exmi.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprr90exmi.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprr90exmi.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprr90exmi.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprr90exmi.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprr90exmi.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprr90exmi.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            "
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsBetween = planets.filter(planet => planet != planet1 &&\
    \ planet != planet2)\n        val planetsBetweenOrbits = planetsBetween.map(planet\
    \ => planet + \"Orbit\")\n        val planetsBetweenOrbitsAndSun = planetsBetweenOrbits.map(planet\
    \ => planet + \"AndSun\")\n        val planetsBetweenOrbitsAndSunAndPlanet = planetsBetweenOrbitsAndSun.map(planet\
    \ => planet + \"And\" + planet)\n        val planetsBetweenOrbitsAndSunAndPlanetAndPlanet\
    \ = planetsBetweenOrbitsAndSunAndPlanet.map(planet => planet + \"And\" + planet)\n\
    \        val planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanet = planetsBetweenOrbitsAndSunAndPlanetAndPlanet.map(planet\
    \ => planet + \"And\" + planet)\n        val planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanet\
    \ = planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanet.map(planet => planet\
    \ + \"And\" + planet)\n        val planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanetAndPlanet\
    \ = planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanet.map(planet\
    \ => planet + \"And\" + planet)\n        val planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanetAndPlanetAndPlanet\
    \ = planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanetAndPlanet.map(planet\
    \ => planet + \"And\" + planet)\n        val planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanetAndPlanetAndPlanet\
    \ = planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanetAndPlanet.map(planet\
    \ => planet + \"And\" + planet)\n        val planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanetAndPlanetAndPlanetAndPlan\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphsj04awi.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphsj04awi.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanetAndPlanetAndPlanet\e\
    [0m = planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanetAndPlanet.map(\e\
    [36mplanet\e[0m => planet + \e[31m\"And\"\e[0m + planet)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanetAndPlanetAndPlanet\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  planetsBetweenOrbitsAndSunAndPlanetAndPlanetAndPlanetAndPlanetAndPlanetAndPlanet\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphsj04awi.scala:27:5 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(planet => planet.orbit(sun))\n        val orbits1 = orbits.filter(orbit\
    \ => orbit.contains(planet1))\n        val orbits2 = orbits.filter(orbit => orbit.contains(planet2))\n\
    \        val proximity = orbits1.zip(orbits2).map(orbit => orbit.distanceTo(sun))\n\
    \        proximity.sortBy(_._1).reverse.map(_.toString).filter(_.nonEmpty)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3h03qaux.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3h03qaux.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3h03qaux.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3h03qaux.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3h03qaux.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3h03qaux.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3h03qaux.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsBetween = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2)\n        val planetsBetween2 = planets.filter(planet\
    \ => planets.contains(planet) && planet != planet2 && planet != planet1)\n   \
    \     val planetsBetween3 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3)\n        val\
    \ planetsBetween4 = planets.filter(planet => planets.contains(planet) && planet\
    \ != planet1 && planet != planet2 && planet != planet3 && planet != planet4)\n\
    \        val planetsBetween5 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5)\n        val planetsBetween6 = planets.filter(planet\
    \ => planets.contains(planet) && planet != planet1 && planet != planet2 && planet\
    \ != planet3 && planet != planet4 && planet != planet5 && planet != planet6)\n\
    \        val planetsBetween7 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet != planet7)\n  \
    \      val planetsBetween8 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet != planet7 && planet\
    \ != planet8)\n        val planetsBetween9 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet != plan\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1smbg9f.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1smbg9f.scala:18:135\
    \ -----------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetween3\e[0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Not\
    \ found: planet3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1smbg9f.scala:19:135\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetween4\e[0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4)\n\e[31m\e[31m   |\e[0m                                            \
    \                                                                            \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                      Not found: planet3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpu1smbg9f.scala:19:156 -----------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetween4\e[0m = planets.filter(\e\
    [36mplanet\e[0m => planets.contains(planet) && planet != planet1 && planet !=\
    \ planet2 && planet != planet3 && planet != planet4)\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                                                            \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \         Not found: planet4\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planetsBetween = planets.filter(p\
    \ => p.orbit(planet1).isDefined && p.orbit(planet2).isDefined)\n        val planetsBetweenSorted\
    \ = planetsBetween.sortBy(p => p.distance(planet1))\n        val planetsBetweenSorted2\
    \ = planetsBetween.sortBy(p => p.distance(planet2))\n        val planetsBetweenSorted3\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet1))\n        val planetsBetweenSorted4\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet2))\n        val planetsBetweenSorted5\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet1))\n        val planetsBetweenSorted6\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet2))\n        val planetsBetweenSorted7\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet1))\n        val planetsBetweenSorted8\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet2))\n        val planetsBetweenSorted9\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet1))\n        val planetsBetweenSorted10\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet2))\n        val planetsBetweenSorted11\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet1))\n        val planetsBetweenSorted12\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet2))\n        val planetsBetweenSorted13\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet1))\n        val planetsBetweenSorted14\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet2))\n        val planetsBetweenSorted15\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet1))\n        val planetsBetweenSorted16\
    \ = planetsBetweenSorted.sortBy(p => p.distance(planet2))\n        val planetsBetweenSorted17\
    \ = planetsBetweenSor\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bg7dqca.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bg7dqca.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8bg7dqca.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bg7dqca.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bg7dqca.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8bg7dqca.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bg7dqca.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsBetween = planets.filter(planet => planet != planet1 &&\
    \ planet != planet2)\n        val planetsBetweenSun = planets.filter(planet =>\
    \ planet == planet1 || planet == planet2)\n        val planetsBetweenSunAndPlanet1\
    \ = planets.filter(planet => planet == planet1 || planet == planet2)\n       \
    \ val planetsBetweenSunAndPlanet2 = planets.filter(planet => planet == planet1\
    \ || planet == planet2)\n        val planetsBetweenSunAndPlanet3 = planets.filter(planet\
    \ => planet == planet1 || planet == planet2)\n        val planetsBetweenSunAndPlanet4\
    \ = planets.filter(planet => planet == planet1 || planet == planet2)\n       \
    \ val planetsBetweenSunAndPlanet5 = planets.filter(planet => planet == planet1\
    \ || planet == planet2)\n        val planetsBetweenSunAndPlanet6 = planets.filter(planet\
    \ => planet == planet1 || planet == planet2)\n        val planetsBetweenSunAndPlanet7\
    \ = planets.filter(planet => planet == planet1 || planet == planet2)\n       \
    \ val planetsBetweenSunAndPlanet8 = planets.filter(planet => planet == planet1\
    \ || planet == planet2)\n        val planetsBetweenSunAndPlanet9 = planets.filter(planet\
    \ => planet == planet1 || planet == planet2)\n        val planetsBetweenSunAndPlanet10\
    \ = planets.filter(planet => planet == planet1 || planet == planet2)\n       \
    \ val planetsBetweenSunAndPlanet11 = planets.filter(planet => planet == planet1\
    \ || planet == planet2)\n        val planetsBetweenSunAndPlanet12 = planets.filter(planet\
    \ => planet == planet1 || planet == planet2)\n        val planetsBetweenSunAndPlanet13\
    \ = planets.filter(planet => planet == planet1 || planet == planet2)\n       \
    \ val planetsBetweenSunAndPlanet14 = planets.filter(planet => \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0msb3j5e.scala:31:67 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet14\e\
    [0m = planets.filter(\e[36mplanet\e[0m => \n\e[31m\e[31m   |\e[0m            \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0msb3j5e.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0.0, 0.0)),\n            Planet(\"Venus\", Vector(0.0,\
    \ 1.0)),\n            Planet(\"Earth\", Vector(1.0, 0.0)),\n            Planet(\"\
    Mars\", Vector(1.0, 1.0)),\n            Planet(\"Jupiter\", Vector(0.0, 2.0)),\n\
    \            Planet(\"Saturn\", Vector(1.0, 2.0)),\n            Planet(\"Uranus\"\
    , Vector(2.0, 0.0)),\n            Planet(\"Neptune\", Vector(2.0, 1.0))\n    \
    \    )\n        val sun = Planet(\"Sun\", Vector(0.0, 0.0))\n        val sunOrbit\
    \ = Vector(0.0, 0.0)\n        val sunOrbitDistance = Vector(0.0, 0.0)\n      \
    \  val sunOrbitDistanceSquared = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared2\
    \ = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared3 = Vector(0.0, 0.0)\n\
    \        val sunOrbitDistanceSquared4 = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared5\
    \ = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared6 = Vector(0.0, 0.0)\n\
    \        val sunOrbitDistanceSquared7 = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared8\
    \ = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared9 = Vector(0.0, 0.0)\n\
    \        val sunOrbitDistanceSquared10 = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared11\
    \ = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared12 = Vector(0.0, 0.0)\n\
    \        val sunOrbitDistanceSquared13 = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared14\
    \ = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared15 = Vector(0.0, 0.0)\n\
    \        val sunOrbitDistanceSquared16 = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared17\
    \ = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared18 = Vector(0.0, 0.0)\n\
    \        val sunOrbitDistanceSquared19 = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared20\
    \ = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared21 = Vector(0.0, 0.0)\n\
    \        val sunOrbitDistanceSquared22 = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared23\
    \ = Vector(0.0, 0.0)\n        val sunOrbitDistanceSquared24 = Vector(0.0, 0.0)\n\
    \        val sunOrbitDistanceSquared25 = Vector\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3a2h_k9i.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3a2h_k9i.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Vector(\e[31m0.0\e\
    [0m, \e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3a2h_k9i.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Vector(\e[31m1.0\e\
    [0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3a2h_k9i.scala:19:12 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, Vector(\e[31m1.0\e\
    [0m, \e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3a2h_k9i.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, Vector(\e[31m0.0\e\
    [0m, \e[31m2.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3a2h_k9i.scala:21:12 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m, Vector(\e[31m1.0\e\
    [0m, \e[31m2.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            No"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(\n                Vector(\n                   \
    \ Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,0.0),\n           \
    \         Vector(0.0,0.0,0.0))),\n            Planet(\"Venus\", Orbit(\n     \
    \           Vector(\n                    Vector(0.0,0.0,0.0),\n              \
    \      Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,0.0))),\n    \
    \        Planet(\"Earth\", Orbit(\n                Vector(\n                 \
    \   Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,0.0),\n         \
    \           Vector(0.0,0.0,0.0))),\n            Planet(\"Mars\", Orbit(\n    \
    \            Vector(\n                    Vector(0.0,0.0,0.0),\n             \
    \       Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,0.0))),\n   \
    \         Planet(\"Jupiter\", Orbit(\n                Vector(\n              \
    \      Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,0.0),\n      \
    \              Vector(0.0,0.0,0.0))),\n            Planet(\"Saturn\", Orbit(\n\
    \                Vector(\n                    Vector(0.0,0.0,0.0),\n         \
    \           Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,0.0))),\n\
    \            Planet(\"Uranus\", Orbit(\n                Vector(\n            \
    \        Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,0.0),\n    \
    \                Vector(0.0,0.0,0.0))),\n            Planet(\"Neptune\", Orbit(\n\
    \                Vector(\n                    Vector(0.0,0.0,0.0),\n         \
    \           Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,0.0))))\n\
    \        )\n        val planetsBetween = planets.filter( p => p.orbit.between(planet1.orbit,\
    \ planet2.orbit))\n        planetsBetween.sortBy(p => p.orbit.magnitude)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwknmwlme.scala:57:8 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetween\e[0m = planets.filter(\
    \ \e[36mp\e[0m => p.orbit.between(planet1.orbit, planet2.orbit))\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwknmwlme.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwknmwlme.scala:16:30\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                              ^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwknmwlme.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwknmwlme.scala:21:28\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwknmwlme.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006]"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(p => (p.name, p.orbit(sun)))\n        val planetsBetweenSunAndPlanet1\
    \ = orbits.filter(p => p._1 == planet1).map(p => p._2)\n        val planetsBetweenSunAndPlanet2\
    \ = orbits.filter(p => p._1 == planet2).map(p => p._2)\n        val planetsBetweenSunAndPlanet\
    \ = planetsBetweenSunAndPlanet1 ++ planetsBetweenSunAndPlanet2\n        planetsBetweenSunAndPlanet.sortBy(p\
    \ => p.distanceTo(sun))\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_cxodffw.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_cxodffw.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_cxodffw.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_cxodffw.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_cxodffw.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_cxodffw.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_cxodffw.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Planet(\"Venus\"\
    , new Orbit(\n                    new Planet(\"Earth\", new Orbit(\n         \
    \               new Planet(\"Mars\", new Orbit(\n                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                new Planet(\"\
    Saturn\", new Orbit(\n                                    new Planet(\"Uranus\"\
    , new Orbit(\n                                        new Planet(\"Neptune\",\
    \ new Orbit(\n                                            new Planet(\"Mercury\"\
    , new Orbit(\n                                                new Planet(\"Venus\"\
    , new Orbit(\n                                                    new Planet(\"\
    Earth\", new Orbit(\n                                                        new\
    \ Planet(\"Mars\", new Orbit(\n                                              \
    \              new Planet(\"Jupiter\", new Orbit(\n                          \
    \                                      new Planet(\"Saturn\", new Orbit(\n   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                 new Planet(\"Neptune\", new Orbit(\n                       \
    \                                                     new Planet(\"Mercury\",\
    \ new Orbit(\n                                                               \
    \                 new Planet(\"Venus\", new Orbit(\n                         \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                         new Planet(\"Mars\", new Orbit(\n                  \
    \                                                                          new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                                                     new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                 new Planet(\"Uranus\", new Orbit(\n        \
    \                                                                            \
    \                    new Planet(\"Neptune\", new Orbit(\n                    \
    \                                                                            \
    \            new Planet(\"Mercury\", new Orbit(\n                            \
    \                                                                            \
    \        new Planet(\"Venus\", new Orbit(\n                                  \
    \                                                                            \
    \      new Planet(\"Earth\", new Orbit(\n                                    \
    \                                                                            \
    \        new Planet(\"Mars\", new Orbit(\n                                   \
    \                                                                            \
    \             new Planet(\"Jupiter\", new Orbit(\n                           \
    \                                                                            \
    \                         new Planet(\"Saturn\", new Orbit(\n                \
    \                                                                            \
    \                                        new Planet(\"Uranus\", new Orbit(\n \
    \                                                                            \
    \                                                           new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \ new Planet(\"Mercury\", new Orbit(\n                                       \
    \                                                                            \
    \                             new Planet(\"Venus\", new Orbit(\n             \
    \                                                                            \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \             new Planet(\"Mars\", new Orbit(\n                              \
    \                                                                            \
    \                                                  \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo3cbgq1s.scala:51:181 --------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpo3cbgq1s.scala\n\
    exception occurred while compiling /tmp/tmpo3cbgq1s.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <4838..4848>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [4848..5010..5010]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndVenus = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndJupiter = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndNeptune = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus =\
    \ List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n      \
    \  val planetsBetweenSunAndMercuryAndEarth = List(mercury, venus, earth, mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, ne\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9a3r4zxm.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp2yww11l.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp2yww11l.scala:17:22 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp2yww11l.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp2yww11l.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp2yww11l.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp2yww11l.scala:21:22 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0,0,0)),\n            Planet(\"Venus\", Vector(0,0,1)),\n\
    \            Planet(\"Earth\", Vector(1,0,0)),\n            Planet(\"Mars\", Vector(1,1,0)),\n\
    \            Planet(\"Jupiter\", Vector(0,0,-1)),\n            Planet(\"Saturn\"\
    , Vector(0,1,0)),\n            Planet(\"Uranus\", Vector(1,0,1)),\n          \
    \  Planet(\"Neptune\", Vector(-1,0,0))\n        )\n        val sun = Planet(\"\
    Sun\", Vector(0,0,0))\n        val orbits = planets.map(p => (p.name, p.orbit))\n\
    \        val sunOrbits = orbits.filter(_._1 == sun.name).map(_._2)\n        val\
    \ planet1Orbits = orbits.filter(_._1 == planet1).map(_._2)\n        val planet2Orbits\
    \ = orbits.filter(_._1 == planet2).map(_._2)\n        val sunOrbits1 = planet1Orbits.filter(_._2\
    \ <= sunOrbits)\n        val sunOrbits2 = planet2Orbits.filter(_._2 <= sunOrbits)\n\
    \        val planet1Orbits1 = sunOrbits1.filter(_._2 <= planet1Orbits)\n     \
    \   val planet1Orbits2 = sunOrbits2.filter(_._2 <= planet1Orbits)\n        val\
    \ planet2Orbits1 = sunOrbits1.filter(_._2 <= planet2Orbits)\n        val planet2Orbits2\
    \ = sunOrbits2.filter(_._2 <= planet2Orbits)\n        val planet1Orbits1And2 =\
    \ planet1Orbits1.intersect(planet2Orbits2)\n        val planet1Orbits2And2 = planet1Orbits2.intersect(planet2Orbits1)\n\
    \        val planet2Orbits1And1 = planet2Orbits1.intersect(planet1Orbits2)\n \
    \       val planet2Orbits2And1 = planet2Orbits2.intersect(planet1Orbits1)\n  \
    \      val planet1Orbits1And2And1 = planet1Orbits1And2.intersect(planet2Orbits1And1)\n\
    \        val planet1Orbits2And2And1 = planet1Orbits2And2.intersect(planet2\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwn4oksrq.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwn4oksrq.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwn4oksrq.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m)),\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwn4oksrq.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, Vector(\e[31m1\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwn4oksrq.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, Vector(\e[31m1\e[0m,\e[31m1\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwn4oksrq.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m, Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Err"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndVenus = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndJupiter = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndNeptune = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus =\
    \ List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n      \
    \  val planetsBetweenSunAndMercuryAndEarth = List(mercury, venus, earth, mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, ne\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9a3r4zxm.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(p => (p.name, p.orbit(sun)))\n        val orbits1 = orbits.filter(_._1\
    \ == planet1)\n        val orbits2 = orbits.filter(_._1 == planet2)\n        val\
    \ orbits12 = orbits1.zip(orbits2)\n        val orbits12 = orbits12.sortBy(_._2).reverse\n\
    \        val orbits12 = orbits12.filter(_._2 > 0)\n        val orbits12 = orbits12.filter(_._2\
    \ > 0)\n        val orbits12 = orbits12.filter(_._2 > 0)\n        val orbits12\
    \ = orbits12.filter(_._2 > 0)\n        val orbits12 = orbits12.filter(_._2 > 0)\n\
    \        val orbits12 = orbits12.filter(_._2 > 0)\n        val orbits12 = orbits12.filter(_._2\
    \ > 0)\n        val orbits12 = orbits12.filter(_._2 > 0)\n        val orbits12\
    \ = orbits12.filter(_._2 > 0)\n        val orbits12 = orbits12.filter(_._2 > 0)\n\
    \        val orbits12 = orbits12.filter(_._2 > 0)\n        val orbits12 = orbits12.filter(_._2\
    \ > 0)\n        val orbits12 = orbits12.filter(_._2 > 0)\n        val orbits12\
    \ = orbits12.filter(_._2 > 0)\n        val orbits12 = orbits12.filter(_._2 > 0)\n\
    \        val orbits12 = orbits12.filter(_._2 > 0)\n        val orbits12 = orbits12.filter(_._2\
    \ > 0)\n        val orbits12 = orbits12.filter(_._2 > 0)\n        val orbits12\
    \ = orbits12.filter(_._2 > 0)\n        val orbits12 = orbits12.filter(_._2 > 0)\n\
    \        val orbits12 = orbits12.filter(_._2 > 0)\n        val orbits12 = orbits12.filter(_._2\
    \ > 0)\n        val orbits12 = orbits12.filter(_._2 > 0)\n        val orbits12\
    \ = orbits\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgu2gnber.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36morbits12\e[0m = orbits12.sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0morbits12 is already defined as \e[33mvalue\e[0m \e[35morbits12\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgu2gnber.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36morbits12\e[0m = orbits12.filter(_._2\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morbits12 is already defined as \e[33mvalue\e[0m \e[35morbits12\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgu2gnber.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36morbits12\e[0m = orbits12.filter(_._2\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morbits12 is already defined as \e[33mvalue\e[0m \e[35morbits12\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgu2gnber.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36morbits12\e[0m = orbits12.filter(_._2\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morbits12 is already defined as \e[33mvalue\e[0m \e[35morbits12\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgu2gnber.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36morbits12\e[0m = orbits12.filter(_._2\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = Nil\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7q3nyh10.scala:42:55 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndVenusAndJupiter\e\
    [0m = List(\n\e[31m\e[31m   |\e[0m                                           \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7q3nyh10.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7q3nyh10.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmercury\e[0m = Planet(\e[31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7q3nyh10.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mvenus\e[0m = Planet(\e[31m\"Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7q3nyh10.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mearth\e[0m = Planet(\e[31m\"Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7q3nyh10.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmars\e[0m ="
  stdout: ''
  timestamp: 1660009545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n            Planet(\"\
    Venus\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n            Planet(\"Earth\", Vector(0.0,\
    \ 0.0), Vector(0.0, 0.0)),\n            Planet(\"Mars\", Vector(0.0, 0.0), Vector(0.0,\
    \ 0.0)),\n            Planet(\"Jupiter\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n\
    \            Planet(\"Saturn\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n       \
    \     Planet(\"Uranus\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n            Planet(\"\
    Neptune\", Vector(0.0, 0.0), Vector(0.0, 0.0))\n        )\n        val sun = Planet(\"\
    Sun\", Vector(0.0, 0.0), Vector(0.0, 0.0))\n        val planet1orbit = planets.find(_.name\
    \ == planet1).getOrElse(sun)\n        val planet2orbit = planets.find(_.name ==\
    \ planet2).getOrElse(sun)\n        val orbits = planets.filter(_.name != planet1\
    \ && _.name != planet2).map(p => (p.name, p.orbit(planet1orbit, planet2orbit)))\n\
    \        val orbitsBetweenPlanets = orbits.filter(_._1._2 < _._1._1)\n       \
    \ val orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.sortBy(_._2._2)\n    \
    \    val proximity = orbitsBetweenPlanetsSorted.map(p => (p._1, p._2._1 - p._2._2))\n\
    \        proximity.toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkg___rql.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkg___rql.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m, \e\
    [31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkg___rql.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m, Vector(\e[31m0.0\e[0m, \e[31m0.0\e\
    [0m), Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkg___rql.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, Vector(\e[31m0.0\e\
    [0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkg___rql.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m, Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m,\
    \ \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkg___rql.scala:21:12 ---------"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0,0,0)),\n            Planet(\"Venus\", Vector(0,0,1)),\n\
    \            Planet(\"Earth\", Vector(1,0,0)),\n            Planet(\"Mars\", Vector(1,0,1)),\n\
    \            Planet(\"Jupiter\", Vector(2,0,0)),\n            Planet(\"Saturn\"\
    , Vector(2,0,1)),\n            Planet(\"Uranus\", Vector(3,0,0)),\n          \
    \  Planet(\"Neptune\", Vector(3,0,1))\n        )\n        val sun = Planet(\"\
    Sun\", Vector(0,0,0))\n        val orbits = planets.map(_.orbit(sun))\n      \
    \  val planetsBetween = orbits.filter(_.contains(planet1)).filter(_.contains(planet2))\n\
    \        val planetsBetween2 = orbits.filter(_.contains(planet2)).filter(_.contains(planet1))\n\
    \        val planetsBetween3 = orbits.filter(_.contains(planet1)).filter(_.contains(planet2)).filter(_.contains(planet1))\n\
    \        val planetsBetween4 = orbits.filter(_.contains(planet2)).filter(_.contains(planet1)).filter(_.contains(planet2))\n\
    \        val planetsBetween5 = orbits.filter(_.contains(planet1)).filter(_.contains(planet2)).filter(_.contains(planet2)).filter(_.contains(planet1))\n\
    \        val planetsBetween6 = orbits.filter(_.contains(planet2)).filter(_.contains(planet1)).filter(_.contains(planet2)).filter(_.contains(planet2))\n\
    \        val planetsBetween7 = orbits.filter(_.contains(planet1)).filter(_.contains(planet2)).filter(_.contains(planet2)).filter(_.contains(planet2)).filter(_.contains(planet1))\n\
    \        val planetsBetween8 = orbits.filter(_.contains(planet2)).filter(_.contains(planet1)).filter(_.contains(planet2)).filter(_.contains(planet2)).filter(_.contains(planet2)).filter(_.contains(planet1))\n\
    \        val planetsBetween9 = orbits.filter(_.contains(planet1)).filter(_.contains(planet2)).filter(_.contains(planet2)).filter(_.contains(planet2)).filter(_.contains(planet2)).filter(_.contains(planet2)).filter(_.contains(planet1))\n\
    \        val planetsBetween10 = orbits.filter(_.contains(planet2)).filter(_.contains(planet1)).filter(_.contains(planet2)).filter(_.contains(planet2)).filter(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5b0bgzg6.scala:36:157 --------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetween10\e[0m =\
    \ orbits.filter(_.contains(planet2)).filter(_.contains(planet1)).filter(_.contains(planet2)).filter(_.contains(planet2)).filter(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \           expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5b0bgzg6.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5b0bgzg6.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Vector(\e[31m0\e\
    [0m,\e[31m0\e[0m,\e[31m1\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5b0bgzg6.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Vector(\e[31m1\e\
    [0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5b0bgzg6.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, Vector(\e[31m1\e\
    [0m,\e[31m0\e[0m,\e[31m1\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planetsBetween = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetweenWithSun = planetsBetween.filter(_.orbit.distance\
    \ < sunDistance)\n        val planetsBetweenWithSunSorted = planetsBetweenWithSun.sortBy(_.orbit.distance)\n\
    \        val planetsBetweenWithSunSortedWithSun = planetsBetweenWithSunSorted.filter(_.orbit.distance\
    \ == sunDistance)\n        val planetsBetweenWithSunSortedWithSunSorted = planetsBetweenWithSunSortedWithSun.sortBy(_.orbit.distance)\n\
    \        val planetsBetweenWithSunSortedWithSunSortedWithSun = planetsBetweenWithSunSortedWithSunSorted.filter(_.orbit.distance\
    \ == sunDistance)\n        val planetsBetweenWithSunSortedWithSunSortedWithSunSorted\
    \ = planetsBetweenWithSunSortedWithSunSortedWithSun.sortBy(_.orbit.distance)\n\
    \        val planetsBetweenWithSunSortedWithSunSortedWithSunSortedWithSun = planetsBetweenWithSunSortedWithSunSortedWithSunSortedWithSunSorted.filter(_.orbit.distance\
    \ == sunDistance)\n        val planetsBetweenWithSunSortedWithSunSortedWithSunSortedWithSunSorted\
    \ = planetsBetweenWithSunSortedWithSunSortedWithSunSortedWithSun.sortBy(_.orbit.distance)\n\
    \        val planetsBetweenWithSunSortedWithSunSortedWithSunSortedWithSunSortedWithSun\
    \ = planetsBetweenWithSunSortedWithSunSortedWithSunSortedWithSunSortedWithSunSorted.filter(_.orbit.distance\
    \ == sunDistance)\n        val planetsBetweenWithSunSortedWithSunSortedWithSunSortedWithSunSortedWithSunSorted\
    \ = planetsBetweenWithSunSortedWithSunSortedWithSunSortedWithSunSortedWithSun.sortBy(_.orbit.distance)\n\
    \        val planetsBetweenWithSunSortedWithSunSortedWithSunSortedWithSunSortedWithSunSortedWithSun\
    \ = planetsBetweenWithSunSortedWithSunSortedWithSunSortedWithSunSorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj4s_97hi.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj4s_97hi.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj4s_97hi.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj4s_97hi.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj4s_97hi.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj4s_97hi.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj4s_97hi.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars)\n        val planetsBetweenSunAndEarth = List(jupiter, saturn)\n     \
    \   val planetsBetweenSunAndMars = List(uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune, uranus)\n \
    \       val planetsBetweenSunAndNeptune = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars)\n        val planetsBetweenSunAndMercuryAndEarth = List(jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMercuryAndMars = List(uranus, neptune)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n  \
    \      val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n    \
    \    val planetsBetweenSunAndMercuryAndUranus = List(neptune, uranus)\n      \
    \  val planetsBetweenSunAndMercuryAndNeptune = List(uranus, neptune)\n       \
    \ val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndVenusAndJupiter = List(saturn,\
    \ uranus)\n        val planets\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp76w3vp4_.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp76w3vp4_.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp76w3vp4_.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp76w3vp4_.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp76w3vp4_.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp76w3vp4_.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1660009547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars)\n        val planetsBetweenSunAndEarth = List(jupiter, saturn)\n     \
    \   val planetsBetweenSunAndMars = List(uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune, uranus)\n \
    \       val planetsBetweenSunAndNeptune = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune, mercury)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(neptune, uranus, mercury)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus, neptune, mercury)\n        val planetsBetweenSunAndVenusAndEarth\
    \ = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranus, ne\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpga931cnz.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpga931cnz.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpga931cnz.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpga931cnz.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpga931cnz.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpga931cnz.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpg"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit\
    \ = planets.find(_.name == planet2).getOrElse(sun)\n        val planet1OrbitOrbit\
    \ = planet1Orbit.orbit(planet2Orbit)\n        val planet2OrbitOrbit = planet2Orbit.orbit(planet1Orbit)\n\
    \        val planet1OrbitOrbitOrbit = planet1OrbitOrbit.orbit(planet2OrbitOrbit)\n\
    \        val planet2OrbitOrbitOrbit = planet2OrbitOrbit.orbit(planet1OrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbit)\n\
    \        val planet2OrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbit.orbit(planet1OrbitOrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbitOrbit)\n\
    \        val planet2OrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbit.orbit(planet1OrbitOrbitOrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbitOrbit)\n\
    \        val planet2OrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbit.orbit(planet1OrbitOrbitOrbitOrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoefq68u2.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoefq68u2.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoefq68u2.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoefq68u2.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoefq68u2.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoefq68u2.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoefq68u2.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Planet(\"Venus\"\
    , new Orbit(\n                    new Planet(\"Earth\", new Orbit(\n         \
    \               new Planet(\"Mars\", new Orbit(\n                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                new Planet(\"\
    Saturn\", new Orbit(\n                                    new Planet(\"Uranus\"\
    , new Orbit(\n                                        new Planet(\"Neptune\",\
    \ new Orbit(\n                                            new Planet(\"Mercury\"\
    , new Orbit(\n                                                new Planet(\"Venus\"\
    , new Orbit(\n                                                    new Planet(\"\
    Earth\", new Orbit(\n                                                        new\
    \ Planet(\"Mars\", new Orbit(\n                                              \
    \              new Planet(\"Jupiter\", new Orbit(\n                          \
    \                                      new Planet(\"Saturn\", new Orbit(\n   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                 new Planet(\"Neptune\", new Orbit(\n                       \
    \                                                     new Planet(\"Mercury\",\
    \ new Orbit(\n                                                               \
    \                 new Planet(\"Venus\", new Orbit(\n                         \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                         new Planet(\"Mars\", new Orbit(\n                  \
    \                                                                          new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                                                     new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                 new Planet(\"Uranus\", new Orbit(\n        \
    \                                                                            \
    \                    new Planet(\"Neptune\", new Orbit(\n                    \
    \                                                                            \
    \            new Planet(\"Mercury\", new Orbit(\n                            \
    \                                                                            \
    \        new Planet(\"Venus\", new Orbit(\n                                  \
    \                                                                            \
    \      new Planet(\"Earth\", new Orbit(\n                                    \
    \                                                                            \
    \        new Planet(\"Mars\", new Orbit(\n                                   \
    \                                                                            \
    \             new Planet(\"Jupiter\", new Orbit(\n                           \
    \                                                                            \
    \                         new Planet(\"Saturn\", new Orbit(\n                \
    \                                                                            \
    \                                        new Planet(\"Uranus\", new Orbit(\n \
    \                                                                            \
    \                                                           new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \ new Planet(\"Mercury\", new Orbit(\n                                       \
    \                                                                            \
    \                             new Planet(\"Venus\", new Orbit(\n             \
    \                                                                            \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \             new Planet(\"Mars\", new Orbit(\n                              \
    \                                                                            \
    \                                                  \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo3cbgq1s.scala:51:181 --------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpo3cbgq1s.scala\n\
    exception occurred while compiling /tmp/tmpo3cbgq1s.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <4838..4848>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [4848..5010..5010]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsBetween = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2)\n        val planetsBetweenSun =\
    \ planets.filter(planet => planets.contains(planet) && planet != planet1 && planet\
    \ != planet2 && planet != planet1)\n        val planetsBetweenSunAndPlanet1 =\
    \ planets.filter(planet => planets.contains(planet) && planet != planet1 && planet\
    \ != planet2 && planet != planet1 && planet != planet2)\n        val planetsBetweenSunAndPlanet2\
    \ = planets.filter(planet => planets.contains(planet) && planet != planet1 &&\
    \ planet != planet2 && planet != planet1 && planet != planet2)\n        val planetsBetweenSunAndPlanet3\
    \ = planets.filter(planet => planets.contains(planet) && planet != planet1 &&\
    \ planet != planet2 && planet != planet1 && planet != planet2 && planet != planet3)\n\
    \        val planetsBetweenSunAndPlanet4 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet1 && planet !=\
    \ planet2 && planet != planet3 && planet != planet4)\n        val planetsBetweenSunAndPlanet5\
    \ = planets.filter(planet => planets.contains(planet) && planet != planet1 &&\
    \ planet != planet2 && planet != planet1 && planet != planet2 && planet != planet3\
    \ && planet != planet4 && planet != planet5)\n        val planetsBetweenSunAndPlanet6\
    \ = planets.filter(planet => planets.contains(planet) && planet != planet1 &&\
    \ planet != planet2 && planet != planet1 && planet != planet2 && planet != planet3\
    \ && planet != planet4 && planet != planet5 && planet != planet6)\n        val\
    \ planetsBetweenSunAndPlanet7 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjkypogvu.scala:24:136 --------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet7\e\
    [0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet) && planet !=\
    \ planet1 && planet != planet2 && \n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                          expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjkypogvu.scala:20:189 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet3\e\
    [0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet) && planet !=\
    \ planet1 && planet != planet2 && planet != planet1 && planet != planet2 && planet\
    \ != planet3)\n\e[31m\e[31m   |\e[0m                                         \
    \                                                                            \
    \                                                                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Not\
    \ found: planet3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjkypogvu.scala:21:189\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetweenSunAndPlanet4\e[0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet1 && planet !=\
    \ planet2 && planet != planet3 && planet != planet4)\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                                                            \
    \                                   ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                          Not found: planet3\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer "
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Planet(\"Venus\"\
    , new Orbit(\n                    new Planet(\"Earth\", new Orbit(\n         \
    \               new Planet(\"Mars\", new Orbit(\n                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                new Planet(\"\
    Saturn\", new Orbit(\n                                    new Planet(\"Uranus\"\
    , new Orbit(\n                                        new Planet(\"Neptune\",\
    \ new Orbit(\n                                            new Planet(\"Mercury\"\
    , new Orbit(\n                                                new Planet(\"Venus\"\
    , new Orbit(\n                                                    new Planet(\"\
    Earth\", new Orbit(\n                                                        new\
    \ Planet(\"Mars\", new Orbit(\n                                              \
    \              new Planet(\"Jupiter\", new Orbit(\n                          \
    \                                      new Planet(\"Saturn\", new Orbit(\n   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                 new Planet(\"Neptune\", new Orbit(\n                       \
    \                                                     new Planet(\"Mercury\",\
    \ new Orbit(\n                                                               \
    \                 new Planet(\"Venus\", new Orbit(\n                         \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                         new Planet(\"Mars\", new Orbit(\n                  \
    \                                                                          new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                                                     new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                 new Planet(\"Uranus\", new Orbit(\n        \
    \                                                                            \
    \                    new Planet(\"Neptune\", new Orbit(\n                    \
    \                                                                            \
    \            new Planet(\"Mercury\", new Orbit(\n                            \
    \                                                                            \
    \        new Planet(\"Venus\", new Orbit(\n                                  \
    \                                                                            \
    \      new Planet(\"Earth\", new Orbit(\n                                    \
    \                                                                            \
    \        new Planet(\"Mars\", new Orbit(\n                                   \
    \                                                                            \
    \             new Planet(\"Jupiter\", new Orbit(\n                           \
    \                                                                            \
    \                         new Planet(\"Saturn\", new Orbit(\n                \
    \                                                                            \
    \                                        new Planet(\"Uranus\", new Orbit(\n \
    \                                                                            \
    \                                                           new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \ new Planet(\"Mercury\", new Orbit(\n                                       \
    \                                                                            \
    \                             new Planet(\"Venus\", new Orbit(\n             \
    \                                                                            \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \             new Planet(\"Mars\", new Orbit(\n                              \
    \                                                                            \
    \                                                  \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo3cbgq1s.scala:51:181 --------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpo3cbgq1s.scala\n\
    exception occurred while compiling /tmp/tmpo3cbgq1s.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <4838..4848>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [4848..5010..5010]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0))\n \
    \       val sun = Planet(\"Sun\", 0, 0)\n        val planet1 = planets.find(_.name\
    \ == planet1).get\n        val planet2 = planets.find(_.name == planet2).get\n\
    \        val sun1 = planet1.orbit(sun)\n        val sun2 = planet2.orbit(sun)\n\
    \        val distance = sun1.distance(sun2)\n        val planetsBetweenSuns =\
    \ planets.filter(_.orbit(sun).distance < distance)\n        planetsBetweenSuns.sortBy(_.orbit(sun).distance)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1_n7hw73.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1_n7hw73.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1_n7hw73.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1_n7hw73.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1_n7hw73.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1_n7hw73.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsOrbits = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val sunOrbit = planets.indexOf(\"Sun\")\n        val sunOrbits = planetsOrbits.filter(_._2\
    \ == sunOrbit)\n        val planet1Orbit = planetsOrbits.filter(_._1 == planet1).head._2\n\
    \        val planet2Orbit = planetsOrbits.filter(_._1 == planet2).head._2\n  \
    \      val orbits = planetsOrbits.filter(_._2 > planet1Orbit && _._2 < planet2Orbit)\n\
    \        val sunOrbits = planetsOrbits.filter(_._2 == sunOrbit)\n        val planet1Orbits\
    \ = planetsOrbits.filter(_._1 == planet1).map(_._2)\n        val planet2Orbits\
    \ = planetsOrbits.filter(_._1 == planet2).map(_._2)\n        val orbitsBetweenPlanets\
    \ = planet1Orbits ++ planet2Orbits\n        val sunOrbitsBetweenPlanets = planet1Orbits\
    \ ++ planet2Orbits\n        val orbitsBetweenPlanetsOrbits = orbitsBetweenPlanets.map(orbitsBetweenPlanets.indexOf(_))\n\
    \        val sunOrbitsBetweenPlanetsOrbits = sunOrbitsBetweenPlanets.map(sunOrbitsBetweenPlanets.indexOf(_))\n\
    \        val orbitsBetweenPlanetsOrbitsOrbits = orbitsBetweenPlanetsOrbits.map(orbitsBetweenPlanetsOrbits.indexOf(_))\n\
    \        val sunOrbitsBetweenPlanetsOrbitsOrbits = sunOrbitsBetweenPlanetsOrbits.map(sunOrbitsBetweenPlanetsOrbits.indexOf(_))\n\
    \        val orbitsBetweenPlanetsOrbitsOrbitsOrbits = orbitsBetweenPlanetsOrbitsOrbits.map(orbitsBetweenPlanetsOrbitsOrbits.indexOf(_))\n\
    \        val sunOrbitsBetweenPlanetsOrbitsOrbitsOrbits = sunOrbitsBetweenPlanetsOrbitsOrbits.map(sunOrbitsBetweenPlanetsOrbitsOrbits.indexOf(_))\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprdlfl0mt.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = planetsOrbits.filter(_._2\
    \ == sunOrbit)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbits is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmprdlfl0mt.scala:21:44 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planetsOrbits.filter(_._2\
    \ > planet1Orbit && _._2 < planet2Orbit)\n\e[31m\e[31m   |\e[0m              \
    \                            ^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                value _2 is not a member of String\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmprdlfl0mt.scala:34:5 ---------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planetsBetween = planets.filter(_.orbit(planet1)\
    \ < _.orbit(planet2))\n        planetsBetween.sortBy(_.orbit(planet1)).sortBy(_.orbit(planet2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4tz_hvfl.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4tz_hvfl.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4tz_hvfl.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4tz_hvfl.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4tz_hvfl.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4tz_hvfl.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4tz_hvfl.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfi6rpdxh.scala:100:4 ---------------------------\e\
    [0m\e[0m\n\e[31m100 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfi6rpdxh.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfi6rpdxh.scala:16:30 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfi6rpdxh.scala:100:5 --------------------\e[0m\e\
    [0m\n\e[31m100 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m\
    \     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m    |\e\
    [0m\n\e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp2yww11l.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp2yww11l.scala:17:22 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp2yww11l.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp2yww11l.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp2yww11l.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp2yww11l.scala:21:22 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", PlanetType.Mercury),\n            Planet(\"Venus\", PlanetType.Venus),\n\
    \            Planet(\"Earth\", PlanetType.Earth),\n            Planet(\"Mars\"\
    , PlanetType.Mars),\n            Planet(\"Jupiter\", PlanetType.Jupiter),\n  \
    \          Planet(\"Saturn\", PlanetType.Saturn),\n            Planet(\"Uranus\"\
    , PlanetType.Uranus),\n            Planet(\"Neptune\", PlanetType.Neptune)\n \
    \       )\n        val planet1 = planets.find(_.name == planet1).get\n       \
    \ val planet2 = planets.find(_.name == planet2).get\n        val sun = Planet(\"\
    Sun\", PlanetType.Sun)\n        val orbit1 = planet1.orbit(sun)\n        val orbit2\
    \ = planet2.orbit(sun)\n        val orbits = orbit1 #:: orbit2\n        val distances\
    \ = orbits.map(orbit => orbit.distance(sun))\n        val sorted = distances.sortBy(_)\n\
    \        val result = sorted.takeWhile(_ < sun.length).reverse.takeWhile(_ > 0).reverse\n\
    \        result.map(_.name).filter(_.nonEmpty)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08qo86_9.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, PlanetType.Mercury),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08qo86_9.scala:16:30\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, PlanetType.Mercury),\n\e[31m\e[31m   |\e[0m                  \
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not\
    \ found: PlanetType\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08qo86_9.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, PlanetType.Venus),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp08qo86_9.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, PlanetType.Venus),\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            Not found: PlanetType\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp08qo86_9.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, PlanetType.Earth),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp08qo86_9.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, PlanetType.Earth),\n\e[31m\e[31m   |\e[0m                      \
    \      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(_.orbit(sun))\n        val proximities = orbits.map(_.distanceTo(sun))\n\
    \        val sorted = proximities.sortBy(_.abs)\n        val between = sorted.filter(_.isBetween(planet1,\
    \ planet2))\n        val result = between.map(_.name)\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpel_sb9ap.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpel_sb9ap.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpel_sb9ap.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpel_sb9ap.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpel_sb9ap.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpel_sb9ap.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpel_sb9ap.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(planet => \n            planet.orbit(sun).map(orbit =>\
    \ (planet, orbit))\n        ).flatten\n        val proximity = orbits.map(orbit\
    \ => \n            orbit.map(orb => (orb.planet, orb.distance))\n        ).flatten\n\
    \        proximity.sortBy(_._2).reverse.filter(orb => \n            orb._1 ==\
    \ planet1 && orb._2 == planet2\n        ).map(orb => orb._1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4axzft4k.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4axzft4k.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4axzft4k.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4axzft4k.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4axzft4k.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4axzft4k.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4axzft4k.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Vector(0,0,0), \n\
    \                new Vector(0,0,1), \n                new Vector(0,0,-1)), \n\
    \            new Planet(\"Venus\", new Orbit(\n                new Vector(0,0,0),\
    \ \n                new Vector(0,1,0), \n                new Vector(0,-1,0)),\
    \ \n            new Planet(\"Earth\", new Orbit(\n                new Vector(0,0,0),\
    \ \n                new Vector(1,0,0), \n                new Vector(-1,0,0))),\
    \ \n            new Planet(\"Mars\", new Orbit(\n                new Vector(0,0,0),\
    \ \n                new Vector(0,1,0), \n                new Vector(0,-1,0)),\
    \ \n            new Planet(\"Jupiter\", new Orbit(\n                new Vector(0,0,0),\
    \ \n                new Vector(1,1,0), \n                new Vector(1,-1,0)),\
    \ \n            new Planet(\"Saturn\", new Orbit(\n                new Vector(0,0,0),\
    \ \n                new Vector(1,0,0), \n                new Vector(-1,0,0)),\
    \ \n            new Planet(\"Uranus\", new Orbit(\n                new Vector(0,0,0),\
    \ \n                new Vector(0,1,0), \n                new Vector(0,-1,0)),\
    \ \n            new Planet(\"Neptune\", new Orbit(\n                new Vector(0,0,0),\
    \ \n                new Vector(1,1,0), \n                new Vector(1,-1,0))))\n\
    \        val planetsBetweenPlanets = planets.filter(_.name == planet1).filter(_.name\
    \ == planet2)\n        val planetsBetweenPlanetsSorted = planetsBetweenPlanets.sortBy(_.orbit.distanceTo(new\
    \ Vector(0,0,0)))\n        val planetsBetweenPlanetsSortedWithSun = planetsBetweenPlanetsSorted.filter(_.orbit.distanceTo(new\
    \ Vector(0,0,0)) < 1)\n        val planetsBetweenPlanetsSortedWithSunSorted =\
    \ planetsBetweenPlanetsSortedWithSun.sortBy(_.orbit.distanceTo(new Vector(0,0,0)))\n\
    \        val planetsBetweenPlanetsSortedWithSunSortedWithSun = planetsBetweenPlanetsSortedWithSunSorted.filter(_.orbit.distanceTo(new\
    \ Vector(0,0,0)) < 1)\n        val planetsBetweenPlanetsSortedWithSunSortedWithSunSorted\
    \ = planetsBetweenPlanetsSortedWithSunSortedWithSun.sortBy(_.orbit.distanceTo(new\
    \ Vector(0,0,0)))\n        val planet\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0odr4ulr.scala:48:8 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanets\e\
    [0m = planets.filter(_.name == planet1).filter(_.name == planet2)\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0odr4ulr.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mercury\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0odr4ulr.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(p => (p.name, p.orbit(sun)))\n        val planet1 = orbits.find(_._1\
    \ == planet1).get._2\n        val planet2 = orbits.find(_._1 == planet2).get._2\n\
    \        val orbits1 = planets.map(p => (p.name, p.orbit(planet1)))\n        val\
    \ orbits2 = planets.map(p => (p.name, p.orbit(planet2)))\n        val orbits12\
    \ = orbits1.zip(orbits2).filter(p => p._1 == p._2).sortBy(p => p._1 - p._2)\n\
    \        val planetsBetween = orbits12.filter(p => p._2 < p._1).map(p => p._2)\n\
    \        planetsBetween.filter(p => p._1 < p._2).sortBy(p => p._1 - p._2)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ne7zrdd.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ne7zrdd.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6ne7zrdd.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ne7zrdd.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ne7zrdd.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6ne7zrdd.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ne7zrdd.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1smrku9t.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1smrku9t.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1smrku9t.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val sun = Planet(\"Sun\")\n        val planet1 = Planet(planet1)\n\
    \        val planet2 = Planet(planet2)\n        val orbit1 = planet1.orbit(sun)\n\
    \        val orbit2 = planet2.orbit(sun)\n        val orbits = orbit1 ++ orbit2\n\
    \        val proximity = orbits.map(o => o.distance(sun)).sortBy(_.toDouble)\n\
    \        proximity.take(2).map(p => planets.find(_.name == p).get)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa04a7zyo.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpa04a7zyo.scala:17:22 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mplanet1\e[0m = Planet(planet1)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpa04a7zyo.scala:17:29 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mplanet1\e[0m = Planet(planet1)\n\e[31m\e\
    [31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m            \
    \                 Recursive \e[33mvalue\e[0m \e[35mplanet1\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa04a7zyo.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mplanet2\e[0m = Planet(planet2)\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa04a7zyo.scala:18:29 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mplanet2\e[0m = Planet(planet2)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Recursive \e[33mvalue\e[0m \e[35mplanet2\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planet1 = planets.filter(planet => planet.contains(planet1))\n\
    \        val planet2 = planets.filter(planet => planet.contains(planet2))\n  \
    \      val planet1Orbit = planet1.map(planet => (planet, planets.filter(planet\
    \ => planet.contains(planet)).map(planet => (planet, planets.filter(planet =>\
    \ planet.contains(planet)).map(planet => (planet, planets.filter(planet => planet.contains(planet)).map(planet\
    \ => (planet, planets.filter(planet => planet.contains(planet)).map(planet =>\
    \ (planet, planets.filter(planet => planet.contains(planet)).map(planet => (planet,\
    \ planets.filter(planet => planet.contains(planet)).map(planet => (planet, planets.filter(planet\
    \ => planet.contains(planet)).map(planet => (planet, planets.filter(planet =>\
    \ planet.contains(planet)).map(planet => (planet, planets.filter(planet => planet.contains(planet)).map(planet\
    \ => (planet, planets.filter(planet => planet.contains(planet)).map(planet =>\
    \ (planet, planets.filter(planet => planet.contains(planet)).map(planet => (planet,\
    \ planets.filter(planet => planet.contains(planet)).map(planet => (planet, planets.filter(planet\
    \ => planet.contains(planet)).map(planet => (planet, planets.filter(planet =>\
    \ planet.contains(planet)).map(planet => (planet, planets.filter(planet => planet.contains(planet)).map(planet\
    \ => (planet, planets.filter(planet => planet.contains(planet)).map(planet =>\
    \ (planet, planets.filter(planet => planet.contains(planet)).map(planet => (planet,\
    \ planets.filter(planet => planet.contains(planet)).map(planet => (planet, planets.filter(planet\
    \ => planet.contains(planet)).map(planet => (planet, planets.filter(planet =>\
    \ planet.contains(planet)).map(planet => (planet, planets.filter(planet => planet.contains(planet)).map(planet\
    \ => (planet, planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqhwckw2z.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqhwckw2z.scala:16:63\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1\e[0m = planets.filter(\e[36mplanet\e[0m => planet.contains(planet1))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Recursive\
    \ \e[33mvalue\e[0m \e[35mplanet1\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpqhwckw2z.scala:17:63 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mplanet2\e[0m = planets.filter(\e\
    [36mplanet\e[0m => planet.contains(planet2))\n\e[31m\e[31m   |\e[0m          \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                      Recursive \e[33mvalue\e[0m \e[35mplanet2\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqhwckw2z.scala:19:5\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n  \
    \      )\n        val sun = Planet(\"Sun\", 0, 0)\n        val planet1Orbit =\
    \ planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit = planets.find(_.name\
    \ == planet2).getOrElse(sun)\n        val planet1OrbitOrbit = planet1Orbit.orbit(planet2Orbit)\n\
    \        val planet2OrbitOrbit = planet2Orbit.orbit(planet1Orbit)\n        val\
    \ planet1OrbitOrbitOrbit = planet1OrbitOrbit.orbit(planet2OrbitOrbit)\n      \
    \  val planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbitOrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbitOrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbitOrbit)\n\
    \        val planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbitOrbit)\n\
    \        val planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp_8xaa82.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp_8xaa82.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit\e[0m = planet1OrbitOrbitOrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbitOrbit)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit is already defined\
    \ as \e[33mvalue\e[0m \e[35mplanet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpp_8xaa82.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit\e\
    [0m = planet1OrbitOrbitOrbitOrbitOrbit.orbit(planet2OrbitOrbitOrbitOrbit)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit is already defined\
    \ as \e[33mvalue\e[0m \e[35mplanet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpp_8xaa82.scala:16:12 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp_8xaa82.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m"
  stdout: ''
  timestamp: 1660009559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val sun = Planet(\"Sun\"\
    , 8)\n        val orbits = planets.map(_.orbit(sun))\n        val proximity =\
    \ orbits.map(_.distanceTo(sun))\n        proximity.zip(planets).sortBy(_._1).map(_._2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rq7f2dx.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rq7f2dx.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2rq7f2dx.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m2\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rq7f2dx.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2rq7f2dx.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m4\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rq7f2dx.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m5\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tm"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", \"Venus\"),\n            Planet(\"Mercury\", \"Earth\"\
    ),\n            Planet(\"Mercury\", \"Mars\"),\n            Planet(\"Mercury\"\
    , \"Jupiter\"),\n            Planet(\"Mercury\", \"Saturn\"),\n            Planet(\"\
    Mercury\", \"Uranus\"),\n            Planet(\"Mercury\", \"Neptune\"),\n     \
    \       Planet(\"Venus\", \"Earth\"),\n            Planet(\"Venus\", \"Mars\"\
    ),\n            Planet(\"Venus\", \"Jupiter\"),\n            Planet(\"Venus\"\
    , \"Saturn\"),\n            Planet(\"Venus\", \"Uranus\"),\n            Planet(\"\
    Venus\", \"Neptune\"),\n            Planet(\"Earth\", \"Mars\"),\n           \
    \ Planet(\"Earth\", \"Jupiter\"),\n            Planet(\"Earth\", \"Saturn\"),\n\
    \            Planet(\"Earth\", \"Uranus\"),\n            Planet(\"Earth\", \"\
    Neptune\"),\n            Planet(\"Mars\", \"Jupiter\"),\n            Planet(\"\
    Mars\", \"Saturn\"),\n            Planet(\"Mars\", \"Uranus\"),\n            Planet(\"\
    Mars\", \"Neptune\"),\n            Planet(\"Jupiter\", \"Saturn\"),\n        \
    \    Planet(\"Jupiter\", \"Uranus\"),\n            Planet(\"Jupiter\", \"Neptune\"\
    ),\n            Planet(\"Saturn\", \"Uranus\"),\n            Planet(\"Saturn\"\
    , \"Neptune\"),\n            Planet(\"Uranus\", \"Neptune\")\n        )\n    \
    \    val planet1 = planets.find(_.name == planet1).get\n        val planet2 =\
    \ planets.find(_.name == planet2).get\n        val sun = Planet(\"Sun\", \"Earth\"\
    )\n        val orbits = List(\n            Orbit(planet1, planet2, sun),\n   \
    \         Orbit(planet1, planet2, sun),\n            Orbit(planet1, planet2, sun),\n\
    \            Orbit(planet1, planet2, sun),\n            Orbit(planet1, planet2,\
    \ sun),\n            Orbit(planet1, planet2, sun),\n            Orbit(planet1,\
    \ planet2, sun),\n            Orbit(planet1, planet2, sun),\n            Orbit(planet1,\
    \ planet2, sun),\n            Orbit(planet1, planet2, sun\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpudbtrtzj.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudbtrtzj.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpudbtrtzj.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Earth\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudbtrtzj.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Mars\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpudbtrtzj.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Jupiter\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudbtrtzj.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpudbtrtzj.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Mercury\""
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n            \"Uranus\"\
    , \"Neptune\")\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"\
    Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"\
    Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"\
    Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"\
    Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planet1 = planet1.toUpperCase\n\
    \        val planet2 = planet2.toUpperCase\n        val planet1Orbit = orbit(planet1,\
    \ sun)\n        val planet2Orbit = orbit(planet2, sun)\n        val planet1Orbits\
    \ = orbits(planet1, sun)\n        val planet2Orbits = orbits(planet2, sun)\n \
    \       val planet1OrbitWithinOrbit = planet1Orbit.zip(planet2Orbit).map { case\
    \ (planet1Orbit, planet2Orbit) =>\n            planet1Orbit - planet2Orbit\n \
    \       }.max\n        val planet2OrbitWithinOrbit = planet2Orbit.zip(planet1Orbit).map\
    \ { case (planet1Orbit, planet2Orbit) =>\n            planet2Orbit - planet1Orbit\n\
    \        }.max\n        val planet1OrbitWithinOrbits = planet1Orbits.zip(planet2Orbits).map\
    \ { case (planet1Orbit, planet2Orbit) =>\n            planet1Orbit - planet2Orbit\n\
    \        }.max\n        val planet2OrbitWithinOrbits = planet2Orbits.zip(planet1Orbits).map\
    \ { case (planet1Orbit, planet2Orbit) =>\n            planet2Orbit - planet1Orbit\n\
    \        }.max\n        val planet1OrbitWithinOrbitWithinOrbit = planet1OrbitWithinOrbit.zip(planet2OrbitWithinOrbit).map\
    \ { case (plan\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgu4ofwt.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxgu4ofwt.scala:57:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpxgu4ofwt.scala:17:18 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxgu4ofwt.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"Mercury\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxgu4ofwt.scala:19:20 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"Venus\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxgu4ofwt.scala:20:20 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"Earth\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxgu4ofwt.scala:21:19 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"Mars\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1660009560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planet1 = planets.find(_.name ==\
    \ planet1).get\n        val planet2 = planets.find(_.name == planet2).get\n  \
    \      val sun = Planet(\"Sun\")\n        val orbit1 = planet1.orbit(sun)\n  \
    \      val orbit2 = planet2.orbit(sun)\n        val orbits = List(orbit1, orbit2)\n\
    \        val proximity = orbits.map(_.distanceTo(sun))\n        proximity.sortBy(_.abs).takeWhile(_\
    \ < 1).reverse.map(_.name)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpna2jeus_.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpna2jeus_.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpna2jeus_.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpna2jeus_.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpna2jeus_.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpna2jeus_.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpna2jeus_.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", \"Venus\"),\n            Planet(\"Mercury\", \"Earth\"\
    ),\n            Planet(\"Mercury\", \"Mars\"),\n            Planet(\"Mercury\"\
    , \"Jupiter\"),\n            Planet(\"Mercury\", \"Saturn\"),\n            Planet(\"\
    Mercury\", \"Uranus\"),\n            Planet(\"Mercury\", \"Neptune\"),\n     \
    \       Planet(\"Venus\", \"Earth\"),\n            Planet(\"Venus\", \"Mars\"\
    ),\n            Planet(\"Venus\", \"Jupiter\"),\n            Planet(\"Venus\"\
    , \"Saturn\"),\n            Planet(\"Venus\", \"Uranus\"),\n            Planet(\"\
    Venus\", \"Neptune\"),\n            Planet(\"Earth\", \"Mars\"),\n           \
    \ Planet(\"Earth\", \"Jupiter\"),\n            Planet(\"Earth\", \"Saturn\"),\n\
    \            Planet(\"Earth\", \"Uranus\"),\n            Planet(\"Earth\", \"\
    Neptune\"),\n            Planet(\"Mars\", \"Jupiter\"),\n            Planet(\"\
    Mars\", \"Saturn\"),\n            Planet(\"Mars\", \"Uranus\"),\n            Planet(\"\
    Mars\", \"Neptune\"),\n            Planet(\"Jupiter\", \"Saturn\"),\n        \
    \    Planet(\"Jupiter\", \"Uranus\"),\n            Planet(\"Jupiter\", \"Neptune\"\
    ),\n            Planet(\"Saturn\", \"Uranus\"),\n            Planet(\"Saturn\"\
    , \"Neptune\"),\n            Planet(\"Uranus\", \"Neptune\")\n        )\n    \
    \    val planet1 = planets.find(_.name == planet1).get\n        val planet2 =\
    \ planets.find(_.name == planet2).get\n        val sun = Planet(\"Sun\", \"Earth\"\
    )\n        val orbits = planet1.orbits(planet2)\n        val proximity = orbits.map(_.distanceTo(sun))\n\
    \        proximity.sortBy(x => x).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7yxjkh31.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Venus\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7yxjkh31.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7yxjkh31.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Mars\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7yxjkh31.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7yxjkh31.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Saturn\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7yxjkh31.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Uranus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-ex"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", \"Venus\"),\n            Planet(\"Mercury\", \"Earth\"\
    ),\n            Planet(\"Mercury\", \"Mars\"),\n            Planet(\"Mercury\"\
    , \"Jupiter\"),\n            Planet(\"Mercury\", \"Saturn\"),\n            Planet(\"\
    Mercury\", \"Uranus\"),\n            Planet(\"Mercury\", \"Neptune\"),\n     \
    \       Planet(\"Venus\", \"Earth\"),\n            Planet(\"Venus\", \"Mars\"\
    ),\n            Planet(\"Venus\", \"Jupiter\"),\n            Planet(\"Venus\"\
    , \"Saturn\"),\n            Planet(\"Venus\", \"Uranus\"),\n            Planet(\"\
    Venus\", \"Neptune\"),\n            Planet(\"Earth\", \"Mars\"),\n           \
    \ Planet(\"Earth\", \"Jupiter\"),\n            Planet(\"Earth\", \"Saturn\"),\n\
    \            Planet(\"Earth\", \"Uranus\"),\n            Planet(\"Earth\", \"\
    Neptune\"),\n            Planet(\"Mars\", \"Jupiter\"),\n            Planet(\"\
    Mars\", \"Saturn\"),\n            Planet(\"Mars\", \"Uranus\"),\n            Planet(\"\
    Mars\", \"Neptune\"),\n            Planet(\"Jupiter\", \"Saturn\"),\n        \
    \    Planet(\"Jupiter\", \"Uranus\"),\n            Planet(\"Jupiter\", \"Neptune\"\
    ),\n            Planet(\"Saturn\", \"Uranus\"),\n            Planet(\"Saturn\"\
    , \"Neptune\"),\n            Planet(\"Uranus\", \"Neptune\")\n        )\n    \
    \    val planet1 = planets.find(_.name == planet1).get\n        val planet2 =\
    \ planets.find(_.name == planet2).get\n        val sun = Planet(\"Sun\", \"Earth\"\
    )\n        val orbits = planet1.orbits(planet2, sun)\n        val proximity =\
    \ orbits.map(_.distanceTo(sun))\n        proximity.sortBy(_.abs)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rw8pcti.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Venus\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rw8pcti.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9rw8pcti.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Mars\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rw8pcti.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9rw8pcti.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Saturn\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rw8pcti.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Uranus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-ex"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit\
    \ = planets.find(_.name == planet2).getOrElse(sun)\n        val orbits = List(planet1Orbit,\
    \ planet2Orbit)\n        val orbitsBetween = orbits.map(_.orbit)\n        val\
    \ planetsBetween = orbitsBetween.map(_.name)\n        val planetsBetweenSorted\
    \ = planetsBetween.sortBy(_.name)\n        val planetsBetweenSortedWithSun = planetsBetweenSorted.filter(_\
    \ != sun)\n        planetsBetweenSortedWithSun\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprl9g5853.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprl9g5853.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprl9g5853.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprl9g5853.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprl9g5853.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprl9g5853.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprl9g5853.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val planet1Orbit = planets.find(_.name\
    \ == planet1).getOrElse(throw new Exception(\"Planet \" + planet1 + \" not found\"\
    ))\n        val planet2Orbit = planets.find(_.name == planet2).getOrElse(throw\
    \ new Exception(\"Planet \" + planet2 + \" not found\"))\n        val sunOrbit\
    \ = Planet(\"Sun\", 8)\n        val orbits = List(planet1Orbit, planet2Orbit,\
    \ sunOrbit)\n        val orbitsBetweenPlanets = orbits.filter(orbit => orbit.orbit.contains(planet1Orbit.orbit)\
    \ || orbit.orbit.contains(planet2Orbit.orbit))\n        val proximity = orbitsBetweenPlanets.map(orbit\
    \ => orbit.orbit.map(planet => planet.orbit.map(planetOrbit => planetOrbit - planet.orbit).sum).sum).sortBy(_\
    \ / _)\n        proximity.take(2).map(_.toDouble).sortBy(_ / _)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj6no_3in.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj6no_3in.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj6no_3in.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m2\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj6no_3in.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj6no_3in.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m4\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj6no_3in.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m5\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tm"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n            \"Uranus\"\
    , \"Neptune\")\n        val planetsBetween = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2)\n        val planetsBetweenSun =\
    \ planets.filter(planet => planets.contains(planet) && planet != planet1 && planet\
    \ != planet2 && planet != \"Mercury\" && planet != \"Venus\" && planet != \"Earth\"\
    \ && planet != \"Mars\" && planet != \"Jupiter\" && planet != \"Saturn\" && planet\
    \ != \"Uranus\" && planet != \"Neptune\")\n        val planetsBetweenSunAndPlanet1\
    \ = planets.filter(planet => planets.contains(planet) && planet != planet1 &&\
    \ planet != planet2 && planet != \"Mercury\" && planet != \"Venus\" && planet\
    \ != \"Earth\" && planet != \"Mars\" && planet != \"Jupiter\" && planet != \"\
    Saturn\" && planet != \"Uranus\" && planet != \"Neptune\" && planet != planet1)\n\
    \        val planetsBetweenSunAndPlanet2 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != \"Mercury\" && planet\
    \ != \"Venus\" && planet != \"Earth\" && planet != \"Mars\" && planet != \"Jupiter\"\
    \ && planet != \"Saturn\" && planet != \"Uranus\" && planet != \"Neptune\" &&\
    \ planet != planet2 && planet != planet1)\n        val planetsBetweenSunAndPlanet3\
    \ = planets.filter(planet => planets.contains(planet) && planet != planet1 &&\
    \ planet != planet2 && planet != \"Mercury\" && planet != \"Venus\" && planet\
    \ != \"Earth\" && planet != \"Mars\" && planet != \"Jupiter\" && planet != \"\
    Saturn\" && planet != \"Uranus\" && planet != \"Neptune\" && planet != planet2\
    \ && planet != planet1 && planet != planet2)\n        val planetsBetweenSunAndPlanet4\
    \ = planets.filter(planet => planets.contains(planet) && planet != planet1 &&\
    \ planet != planet2 && planet != \"Mercury\" && planet != \"Venus\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplzhsglqg.scala:22:170 ----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet4\e\
    [0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet) && planet !=\
    \ planet1 && planet != planet2 && planet != \e[31m\"Mercury\"\e[0m && planet !=\
    \ \"Venus\n\e[31m\e[31m   |\e[0m                                             \
    \                                                                            \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                             unclosed string literal\n\e[31m\e\
    [31m-- Error: /tmp/tmplzhsglqg.scala:24:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmplzhsglqg.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmplzhsglqg.scala:24:4 -------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m\
    \    Not found: Venusdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val sun = Planet(\"Sun\"\
    , 8)\n        val planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n\
    \        val planet2Orbit = planets.find(_.name == planet2).getOrElse(sun)\n \
    \       val orbits = List(planet1Orbit, planet2Orbit)\n        val distances =\
    \ orbits.map(_.distanceTo(sun))\n        val sortedDistances = distances.sortBy(_)\n\
    \        val closestPlanets = sortedDistances.takeWhile(_ < sun.getDistanceTo(planet2Orbit))\n\
    \        closestPlanets.map(_.name)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfze8ccfu.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfze8ccfu.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfze8ccfu.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m2\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfze8ccfu.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfze8ccfu.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m4\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfze8ccfu.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m5\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tm"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0.6, 1.3),\n            Planet(\"Venus\", 0.7, 1.4),\n\
    \            Planet(\"Earth\", 0.8, 1.5),\n            Planet(\"Mars\", 0.9, 1.6),\n\
    \            Planet(\"Jupiter\", 1.0, 1.7),\n            Planet(\"Saturn\", 1.1,\
    \ 1.2),\n            Planet(\"Uranus\", 1.2, 1.3),\n            Planet(\"Neptune\"\
    , 1.3, 1.4)\n        )\n        val sun = Planet(\"Sun\", 0.6, 1.3)\n        val\
    \ planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit\
    \ = planets.find(_.name == planet2).getOrElse(sun)\n        val orbits = planets.filter(_.name\
    \ < planet1 && _.name > planet2).map(_.orbit)\n        val proximity = orbits.map(x\
    \ => math.abs(x - planet1Orbit.orbit))\n        proximity.sortBy(x => x).reverse.take(8).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rsnhwx1.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0.6\e\
    [0m, \e[31m1.3\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9rsnhwx1.scala:17:12 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0.7\e[0m, \e\
    [31m1.4\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9rsnhwx1.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m0.8\e[0m, \e[31m1.5\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rsnhwx1.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m0.9\e[0m, \e[31m1.6\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rsnhwx1.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m1.0\e\
    [0m, \e[31m1.7\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9rsnhwx1.scala:21:12 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m, \e[31m1.1\e[0m,\
    \ \e[31m1.2\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m long"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsBetween = planets.filter(planet => planet != planet1 &&\
    \ planet != planet2)\n        val planetsBetweenSun = planets.filter(planet =>\
    \ planet == planet1 || planet == planet2)\n        val planetsBetweenSunAndPlanet1\
    \ = planets.filter(planet => planet == planet1 && planet != planet2)\n       \
    \ val planetsBetweenSunAndPlanet2 = planets.filter(planet => planet == planet2\
    \ && planet != planet1)\n        val planetsBetweenSunAndPlanet3 = planets.filter(planet\
    \ => planet == planet1 && planet == planet2)\n        val planetsBetweenSunAndPlanet4\
    \ = planets.filter(planet => planet == planet2 && planet == planet1)\n       \
    \ val planetsBetweenSunAndPlanet5 = planets.filter(planet => planet == planet1\
    \ && planet == planet2)\n        val planetsBetweenSunAndPlanet6 = planets.filter(planet\
    \ => planet == planet2 && planet == planet1)\n        val planetsBetweenSunAndPlanet7\
    \ = planets.filter(planet => planet == planet1 && planet == planet2)\n       \
    \ val planetsBetweenSunAndPlanet8 = planets.filter(planet => planet == planet2\
    \ && planet == planet1)\n        val planetsBetweenSunAndPlanet9 = planets.filter(planet\
    \ => planet == planet1 && planet == planet2)\n        val planetsBetweenSunAndPlanet10\
    \ = planets.filter(planet => planet == planet2 && planet == planet1)\n       \
    \ val planetsBetweenSunAndPlanet11 = planets.filter(planet => planet == planet1\
    \ && planet == planet2)\n        val planetsBetweenSunAndPlanet12 = planets.filter(planet\
    \ => planet == planet2 && planet == planet1)\n        val planetsBetweenSunAndPlanet13\
    \ = planets.filter(planet => planet == planet1 && planet == planet2)\n       \
    \ val planetsBetweenSunAndPlanet14 = planets.filter(planet => \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2mzqilx4.scala:31:67 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet14\e\
    [0m = planets.filter(\e[36mplanet\e[0m => \n\e[31m\e[31m   |\e[0m            \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2mzqilx4.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0.0, 0.0)),\n            Planet(\"Venus\", Vector(0.0,\
    \ 1.0)),\n            Planet(\"Earth\", Vector(1.0, 0.0)),\n            Planet(\"\
    Mars\", Vector(-1.0, 0.0)),\n            Planet(\"Jupiter\", Vector(0.0, -1.0)),\n\
    \            Planet(\"Saturn\", Vector(1.0, -1.0)),\n            Planet(\"Uranus\"\
    , Vector(-1.0, -1.0)),\n            Planet(\"Neptune\", Vector(-1.0, 1.0))\n \
    \       )\n        val sun = Planet(\"Sun\", Vector(0.0, 1.0))\n        val planet1\
    \ = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name\
    \ == planet2).get\n        val sun1 = planet1.orbit(sun)\n        val sun2 = planet2.orbit(sun)\n\
    \        val sun3 = Vector(sun2.x - sun1.x, sun2.y - sun1.y)\n        val sun4\
    \ = Vector(sun1.x - sun3.x, sun1.y - sun3.y)\n        val sun5 = Vector(sun3.x,\
    \ sun3.y)\n        val sun6 = Vector(sun4.x, sun4.y)\n        val sun7 = Vector(sun5.x,\
    \ sun5.y)\n        val sun8 = Vector(sun6.x, sun6.y)\n        val sun9 = Vector(sun7.x,\
    \ sun7.y)\n        val sun10 = Vector(sun8.x, sun8.y)\n        val sun11 = Vector(sun9.x,\
    \ sun9.y)\n        val sun12 = Vector(sun10.x, sun10.y)\n        val sun13 = Vector(sun11.x,\
    \ sun11.y)\n        val sun14 = Vector(sun12.x, sun12.y)\n        val sun15 =\
    \ Vector(sun13.x, sun13.y)\n        val sun16 = Vector(sun14.x, sun14.y)\n   \
    \     val sun17 = Vector(sun15.x, sun15.y)\n        val sun18 = Vector(sun16.x,\
    \ sun16.y)\n        val sun19 = Vector(sun17.x, sun17.y)\n        val sun20 =\
    \ Vector(sun18.x, sun18.y)\n        val sun21 = Vector(sun19.x, sun19.y)\n   \
    \     val sun22 = Vector(sun20.x, sun20.y)\n        val sun23 = Vector(sun21.x,\
    \ sun21.y)\n        val sun24 = Vector(sun22.x, sun22.y)\n        val sun25 =\
    \ Vector(sun23.x, sun23.y)\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpaz7ycxha.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaz7ycxha.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaz7ycxha.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Vector(\e[31m0.0\e\
    [0m, \e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpaz7ycxha.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Vector(\e[31m1.0\e\
    [0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpaz7ycxha.scala:19:12 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, Vector(-\e[31m1.0\e\
    [0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpaz7ycxha.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, Vector(\e[31m0.0\e\
    [0m, -\e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanat"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Orbit(\n        \
    \            new Orbit(\n                        new Orbit(\n                \
    \            new Orbit(\n                                new Orbit(\n        \
    \                            new Orbit(\n                                    \
    \    new Orbit(\n                                            new Orbit(\n    \
    \                                            new Orbit(\n                    \
    \                                new Orbit(\n                                \
    \                        new Orbit(\n                                        \
    \                    new Orbit(\n                                            \
    \                    new Orbit(\n                                            \
    \                        new Orbit(\n                                        \
    \                                new Orbit(\n                                \
    \                                            new Orbit(\n                    \
    \                                                            new Orbit(\n    \
    \                                                                            \
    \    new Orbit(\n                                                            \
    \                            new Orbit(\n                                    \
    \                                                        new Orbit(\n        \
    \                                                                            \
    \            new Orbit(\n                                                    \
    \                                                new Orbit(\n                \
    \                                                                            \
    \            new Orbit(\n                                                    \
    \                                                        new Orbit(\n        \
    \                                                                            \
    \                            new Orbit(\n                                    \
    \                                                                            \
    \    new Orbit(\n                                                            \
    \                                                            new Orbit(\n    \
    \                                                                            \
    \                                            new Orbit(\n                    \
    \                                                                            \
    \                                new Orbit(\n                                \
    \                                                                            \
    \                        new Orbit(\n                                        \
    \                                                                            \
    \                    new Orbit(\n                                            \
    \                                                                            \
    \                    new Orbit(\n                                            \
    \                                                                            \
    \                        new Orbit(\n                                        \
    \                                                                            \
    \                                new Orbit(\n                                \
    \                                                                            \
    \                                            new Orbit(\n                    \
    \                                                                            \
    \                                                            new Orbit(\n    \
    \                                                                            \
    \                                                                            \
    \    new Orbit(\n                                                            \
    \                                                                            \
    \                            new Orbit(\n                                    \
    \                                                                            \
    \                                                        new Orbit(\n        \
    \                                                                            \
    \                                                                            \
    \            new Orbit(\n                                                    \
    \                                                                            \
    \                                                new Orbit(\n                \
    \                                                                            \
    \                                                                            \
    \            new Orbit(\n                                                    \
    \                                                                            \
    \                                                        new Orbit(\n        \
    \                                                                            \
    \                                                                            \
    \                            new Orbit(\n                                    \
    \                                                                            \
    \                                                                            \
    \    new Orbit(\n                                                            \
    \                                                                            \
    \                                                            new Orbit(\n    \
    \                                                                            \
    \                                                                            \
    \                                            new Orbit(\n                    \
    \                                                                            \
    \                                                                            \
    \                                new Orbit(\n                                \
    \                                                                            \
    \                                                                            \
    \                        new Orbit(\n                                        \
    \                                                                            \
    \                                                                            \
    \                    new Orbit(\n                                            \
    \                                                                            \
    \                                                                            \
    \                    new Orbit(\n                                            \
    \                                                                            \
    \                                                                            \
    \                        new Orbit(\n                                        \
    \                                                                            \
    \                                                                            \
    \                                new Orbit(\n                                \
    \                                                                            \
    \                                                                            \
    \                                            new Orbit(\n                    \
    \                                                                            \
    \                                                                            \
    \                                                            new Orbit(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    new Orbit(\n                                                            \
    \                                                                            \
    \                                                                            \
    \                            new Orbit(\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                        new Orbit(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            new Orbit(\n                                                    \
    \                                                                            \
    \                                                                            \
    \                                                new Orbit(\n                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            new Orbit(\n                                                    \
    \                                                                            \
    \                                                                            \
    \                                                        new Orbit(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            new Orbit(\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    new Orbit(\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp01wkzn29.scala:80:278 --------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                \e[33mnew\e[0m\
    \ \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\nexception occurred\
    \ while parser /tmp/tmp01wkzn29.scala\nexception occurred while compiling /tmp/tmp01wkzn29.scala\n\
    Exception in thread \"main\" java.lang.AssertionError: assertion failed: position\
    \ error, parent span does not contain child span\nparent      = \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[31mnull\e[0m) # -1,\nparent span = <10578..10588>,\nchild  \
    \     = \e[31mnull\e[0m # -1,\nchild span  = [10588..10594..10594]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat s"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\n\
    error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e\
    [0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n\
    \  )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n\
    \  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n      \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\n    \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n     \
    \   \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n      )\n    )\n  )\n\
    )\nerror while checking \e[3"
  timestamp: 1660009557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", 0, 0),\n            new Planet(\"Venus\", 0, 0),\n\
    \            new Planet(\"Earth\", 0, 0),\n            new Planet(\"Mars\", 0,\
    \ 0),\n            new Planet(\"Jupiter\", 0, 0),\n            new Planet(\"Saturn\"\
    , 0, 0),\n            new Planet(\"Uranus\", 0, 0),\n            new Planet(\"\
    Neptune\", 0, 0)\n        )\n        val sun = new Planet(\"Sun\", 0, Math.sqrt(Math.pow(Math.cos(Math.toRadians(planets.head.orbit)),\
    \ 2) + Math.pow(Math.sin(Math.toRadians(planets.head.orbit)), 2)), Math.sqrt(Math.pow(Math.cos(Math.toRadians(planets.head.orbit)),\
    \ 2) + Math.pow(Math.sin(Math.toRadians(planets.head.orbit)), 2)))\n        val\
    \ planet1 = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name\
    \ == planet2).get\n        val orbit1 = planet1.orbit\n        val orbit2 = planet2.orbit\n\
    \        val distance1 = planet1.distance\n        val distance2 = planet2.distance\n\
    \        val distance3 = sun.distance\n        val distance4 = planet1.distance\n\
    \        val distance5 = planet2.distance\n        val distance6 = sun.distance\n\
    \        val distance7 = planet1.distance\n        val distance8 = planet2.distance\n\
    \        val distance9 = sun.distance\n        val distance10 = planet1.distance\n\
    \        val distance11 = planet2.distance\n        val distance12 = sun.distance\n\
    \        val distance13 = planet1.distance\n        val distance14 = planet2.distance\n\
    \        val distance15 = sun.distance\n        val distance16 = planet1.distance\n\
    \        val distance17 = planet2.distance\n        val distance18 = sun.distance\n\
    \        val distance19 = planet1.distance\n        val distance20 = planet2.distance\n\
    \        val distance21 = sun.distance\n        val distance22 = planet1.distance\n\
    \        val distance23 = planet2.distance\n        val distance24 = sun.distance\n\
    \        val distance25 = planet1.distance\n        val distance26 = planet2.distance\n\
    \        val distance27 = sun.distance\n        val distance28 = planet1.distance\n\
    \        val distance29 = planet2.distance\n        val distance30 = sun.distance\n\
    \        val distance31 = planet1.distance\n        val distance32 = plan\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv3by1wv.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mercury\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type Planet\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv3by1wv.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv3by1wv.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv3by1wv.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv3by1wv.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv3by1wv.scala:21:16\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mnew\e[0m\
    \ \e[3"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1smrku9t.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1smrku9t.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1smrku9t.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", Vector(0.0, 0.0), Vector(0.0, 1.0), Vector(0.0, -1.0)),\n\
    \            new Planet(\"Venus\", Vector(0.0, 0.0), Vector(1.0, 0.0), Vector(-1.0,\
    \ 0.0)),\n            new Planet(\"Earth\", Vector(0.0, 1.0), Vector(0.0, 1.0),\
    \ Vector(0.0, -1.0)),\n            new Planet(\"Mars\", Vector(0.0, 1.0), Vector(0.0,\
    \ -1.0), Vector(0.0, -1.0)),\n            new Planet(\"Jupiter\", Vector(0.0,\
    \ 1.0), Vector(0.0, -1.0), Vector(1.0, 0.0)),\n            new Planet(\"Saturn\"\
    , Vector(0.0, 1.0), Vector(1.0, 0.0), Vector(-1.0, 0.0)),\n            new Planet(\"\
    Uranus\", Vector(0.0, 1.0), Vector(-1.0, 0.0), Vector(1.0, 0.0)),\n          \
    \  new Planet(\"Neptune\", Vector(0.0, 1.0), Vector(1.0, 0.0), Vector(-1.0, 0.0))\n\
    \        )\n        val sun = new Planet(\"Sun\", Vector(0.0, 1.0), Vector(0.0,\
    \ 1.0), Vector(0.0, 1.0))\n        val planet1 = planets.find(_.name == planet1).get\n\
    \        val planet2 = planets.find(_.name == planet2).get\n        val sun1 =\
    \ planets.find(_.name == sun).get\n        val sun2 = planets.find(_.name == sun).get\n\
    \        val planet1Orbit = planet1.orbit(sun1)\n        val planet2Orbit = planet2.orbit(sun2)\n\
    \        val orbits = planet1Orbit.zip(planet2Orbit).filter(_._1.distance(sun1)\
    \ < _._1.distance(sun2)).sortBy(_._1.distance(sun1))\n        val result = orbits.map(_._1.name).filter(_\
    \ != planet1).filter(_ != planet2).map(_ + \", \" + _)\n        val result = result.filter(_\
    \ != sun).filter(_ != sun1).filter(_ != sun2).map(_ + \", \" + _)\n        val\
    \ result = result.filter(_ != planet1).filter(_ != planet2).map(_ + \", \" + _)\n\
    \        val result = result.filter(_ != sun).filter(_ != sun1).filter(_ != sun2).map(_\
    \ + \", \" + _)\n        val result = result.filter(_ != planet1).filter(_ !=\
    \ planet2).map(_ + \", \" + _)\n        val result = result.filter(_ != sun).filter(_\
    \ != sun1).filter(_ != sun2).map(_\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4j7xjlxw.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4j7xjlxw.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = result.filter(_ != sun).filter(_ != sun1).filter(_ != sun2).map(_\
    \ + \e[31m\", \"\e[0m + _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4j7xjlxw.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.filter(_ != planet1).filter(_\
    \ != planet2).map(_ + \e[31m\", \"\e[0m + _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4j7xjlxw.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.filter(_ != sun).filter(_\
    \ != sun1).filter(_ != sun2).map(_ + \e[31m\", \"\e[0m + _)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4j7xjlxw.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.filter(_ != planet1).filter(_\
    \ != planet2).map(_ + \e[31m\", \"\e[0m + _)\n\e["
  stdout: ''
  timestamp: 1660009566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(0.0, 0.0)),\n            new Planet(\"\
    Venus\", new Orbit(0.0, 1.0)),\n            new Planet(\"Earth\", new Orbit(1.0,\
    \ 0.0)),\n            new Planet(\"Mars\", new Orbit(1.0, 1.0)),\n           \
    \ new Planet(\"Jupiter\", new Orbit(0.0, 2.0)),\n            new Planet(\"Saturn\"\
    , new Orbit(1.0, 2.0)),\n            new Planet(\"Uranus\", new Orbit(2.0, 0.0)),\n\
    \            new Planet(\"Neptune\", new Orbit(2.0, 1.0))\n        )\n       \
    \ val planet1 = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name\
    \ == planet2).get\n        val sun = new Orbit(0.0, 1.0)\n        val orbits =\
    \ planet1.orbits.toList ++ planet2.orbits.toList\n        val proximity = orbits.map(o\
    \ => o.distance(sun))\n        proximity.sortBy(-_)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0sgo6iy6.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mercury\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\e[31m0.0\e[0m, \e[31m0.0\e[0m)),\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0sgo6iy6.scala:17:16 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Venus\"\e[0m, \e[33mnew\e\
    [0m \e[35mOrbit\e[0m(\e[31m0.0\e[0m, \e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0sgo6iy6.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Earth\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\e[31m1.0\e\
    [0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0sgo6iy6.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mars\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\e[31m1.0\e[0m, \e[31m1.0\e[0m)),\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0sgo6iy6.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Jupiter\"\e[0m, \e[33mnew\e\
    [0m \e[35mOrbit\e[0m(\e[31m0.0\e[0m, \e[31m2.0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when c"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars)\n        val planetsBetweenSunAndEarth = List(jupiter, saturn)\n     \
    \   val planetsBetweenSunAndMars = List(uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune, uranus)\n \
    \       val planetsBetweenSunAndNeptune = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3y8kiiut.scala:43:54 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndVenusAndSaturn\e\
    [0m = List(\n\e[31m\e[31m   |\e[0m                                           \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3y8kiiut.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmercury\e[0m = Planet(\e[31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mvenus\e[0m = Planet(\e[31m\"Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mearth\e[0m = Planet(\e[31m\"Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmars\e[0m = P"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", PlanetType.Mercury),\n            Planet(\"Venus\", PlanetType.Venus),\n\
    \            Planet(\"Earth\", PlanetType.Earth),\n            Planet(\"Mars\"\
    , PlanetType.Mars),\n            Planet(\"Jupiter\", PlanetType.Jupiter),\n  \
    \          Planet(\"Saturn\", PlanetType.Saturn),\n            Planet(\"Uranus\"\
    , PlanetType.Uranus),\n            Planet(\"Neptune\", PlanetType.Neptune)\n \
    \       )\n        val planet1 = planets.find(_.name == planet1).get\n       \
    \ val planet2 = planets.find(_.name == planet2).get\n        val planet1Orbit\
    \ = planet1.orbit(planet2)\n        val planet2Orbit = planet2.orbit(planet1)\n\
    \        val planet1Orbits = planet1Orbit.orbits\n        val planet2Orbits =\
    \ planet2Orbit.orbits\n        val planet1Orbits = planet1Orbit.orbits\n     \
    \   val planet2Orbits = planet2Orbit.orbits\n        val planet1Orbits = planet1Orbit.orbits\n\
    \        val planet2Orbits = planet2Orbit.orbits\n        val planet1Orbits =\
    \ planet1Orbit.orbits\n        val planet2Orbits = planet2Orbit.orbits\n     \
    \   val planet1Orbits = planet1Orbit.orbits\n        val planet2Orbits = planet2Orbit.orbits\n\
    \        val planet1Orbits = planet1Orbit.orbits\n        val planet2Orbits =\
    \ planet2Orbit.orbits\n        val planet1Orbits = planet1Orbit.orbits\n     \
    \   val planet2Orbits = planet2Orbit.orbits\n        val planet1Orbits = planet1Orbit.orbits\n\
    \        val planet2Orbits = planet2Orbit.orbits\n        val planet1Orbits =\
    \ planet1Orbit.orbits\n        val planet2Orbits = planet2Orbit.orbits\n     \
    \   val planet1Orbits = planet1Orbit.orbits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp74yulwic.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mplanet1Orbits\e[0m = planet1Orbit.orbits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mplanet1Orbits is already defined as \e[33mvalue\e[0m \e[35mplanet1Orbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp74yulwic.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mplanet2Orbits\e[0m = planet2Orbit.orbits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mplanet2Orbits is already defined as \e[33mvalue\e[0m \e[35mplanet2Orbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp74yulwic.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mplanet1Orbits\e[0m = planet1Orbit.orbits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mplanet1Orbits is already defined as \e[33mvalue\e[0m \e[35mplanet1Orbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp74yulwic.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mplanet2Orbits\e[0m = planet2Orbit.orbits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mplanet2Orbits is already defined as \e[33mvalue\e[0m \e[35mplanet2Orbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp74yulwic.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mplanet1Orbits\e[0m = planet1Orbit.orbits\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndVenus = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndJupiter = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndNeptune = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus =\
    \ List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n      \
    \  val planetsBetweenSunAndMercuryAndEarth = List(mercury, venus, earth, mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, ne\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9a3r4zxm.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val sun = Planet(\"Sun\"\
    , 8)\n        val orbits = planets.map(p => (p.name, p.orbit)).toMap\n       \
    \ val orbit1 = orbits(planet1)\n        val orbit2 = orbits(planet2)\n       \
    \ val distance = Vector.minus(orbit1, orbit2).magnitude\n        val proximity\
    \ = distance / sun.orbit\n        val proximityList = proximity.toList.sortBy(_\
    \ * -1)\n        proximityList.take(2).map { p => planets.find(_.name == p).map(_.name)\
    \ }.toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobdwl2oa.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobdwl2oa.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpobdwl2oa.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m2\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobdwl2oa.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpobdwl2oa.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m4\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobdwl2oa.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m5\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tm"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0.0, 0.0)),\n            Planet(\"Venus\", Vector(0.0,\
    \ 1.0)),\n            Planet(\"Earth\", Vector(1.0, 0.0)),\n            Planet(\"\
    Mars\", Vector(0.0, -1.0)),\n            Planet(\"Jupiter\", Vector(0.0, 1.0)),\n\
    \            Planet(\"Saturn\", Vector(1.0, 0.0)),\n            Planet(\"Uranus\"\
    , Vector(1.0, 1.0)),\n            Planet(\"Neptune\", Vector(-1.0, 1.0))\n   \
    \     )\n        val sun = Planet(\"Sun\", Vector(0.0, 1.0))\n        val planet1Orbit\
    \ = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit =\
    \ planets.find(_.name == planet2).getOrElse(sun)\n        val orbits = planets.filter(_.name\
    \ < planet2 && _.name > planet1).map(_.orbit)\n        val distances = orbits.map(x\
    \ => x.map(y => math.pow(y.x - planet1Orbit.x, 2) + math.pow(y.y - planet1Orbit.y,\
    \ 2)).sum)\n        val sorted = distances.sortBy(x => math.abs(x))\n        val\
    \ result = sorted.takeWhile(x => x < 1.0).reverse\n        result.map(_.name).filter(x\
    \ => x != planet1 && x != planet2).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm7rvaqfn.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm7rvaqfn.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Vector(\e[31m0.0\e\
    [0m, \e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm7rvaqfn.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Vector(\e[31m1.0\e\
    [0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm7rvaqfn.scala:19:12 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, Vector(\e[31m0.0\e\
    [0m, -\e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm7rvaqfn.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, Vector(\e[31m0.0\e\
    [0m, \e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm7rvaqfn.scala:21:12 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m, Vector(\e[31m1.0\e\
    [0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            N"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", 0.33),\n            new Planet(\"Venus\", 0.33),\n\
    \            new Planet(\"Earth\", 0.33),\n            new Planet(\"Mars\", 0.33),\n\
    \            new Planet(\"Jupiter\", 0.33),\n            new Planet(\"Saturn\"\
    , 0.33),\n            new Planet(\"Uranus\", 0.33),\n            new Planet(\"\
    Neptune\", 0.33)\n        )\n        val planet1 = planets.find(_.name == planet1).get\n\
    \        val planet2 = planets.find(_.name == planet2).get\n        val sun =\
    \ new Planet(\"Sun\", 0.33)\n        val sunOrbit = sun.orbit(planet1)\n     \
    \   val sunOrbit2 = sun.orbit(planet2)\n        val sunOrbits = List(sunOrbit,\
    \ sunOrbit2)\n        val planetsBetweenSunAndPlanet1 = planets.filter(_.orbit(planet1)\
    \ < sunOrbit)\n        val planetsBetweenSunAndPlanet2 = planets.filter(_.orbit(planet2)\
    \ < sunOrbit)\n        val planetsBetweenSunAndPlanet1And2 = planetsBetweenSunAndPlanet1\
    \ ++ planetsBetweenSunAndPlanet2\n        val planetsBetweenSunAndPlanet1And2Sorted\
    \ = planetsBetweenSunAndPlanet1And2.sortBy(_.orbit(sun))\n        val planetsBetweenSunAndPlanet1And2SortedSortedByProximity\
    \ = planetsBetweenSunAndPlanet1And2Sorted.sortBy(_.orbit(sun).abs)\n        val\
    \ planetsBetweenSunAndPlanet1And2SortedSortedByProximityReversed = planetsBetweenSunAndPlanet1And2SortedSortedByProximity.sortBy(_.orbit(sun).abs)\n\
    \        val planetsBetweenSunAndPlanet1And2SortedSortedByProximityReversedReversed\
    \ = planetsBetweenSunAndPlanet1And2SortedSortedByProximityReversed.reverse\n \
    \       val planetsBetweenSunAndPlanet1And2SortedSortedByProximityReversedReversedSorted\
    \ = planetsBetweenSunAndPlanet1And2SortedSortedByProximityReversedReversed.sortBy(_.orbit(sun).abs)\n\
    \        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmper6xc6lo.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmper6xc6lo.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Mercury\"\e[0m, \e[31m0.33\e[0m),\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmper6xc6lo.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Venus\"\e[0m, \e[31m0.33\e[0m),\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmper6xc6lo.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Earth\"\e[0m, \e[31m0.33\e[0m),\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmper6xc6lo.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m, \e[31m0.33\e[0m),\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmper6xc6lo.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Jupiter\"\e[0m, \e[31m0.33\e[0m),\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-exp"
  stdout: ''
  timestamp: 1660009574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit\
    \ = planets.find(_.name == planet2).getOrElse(sun)\n        val orbits = List(planet1Orbit,\
    \ planet2Orbit)\n        val distances = orbits.map(planet => planet.orbit.distanceTo(sun))\n\
    \        val sortedDistances = distances.sortBy(_)\n        val closestPlanets\
    \ = sortedDistances.takeWhile(_ < sun.getDistanceTo(planet1Orbit))\n        val\
    \ closestPlanets2 = sortedDistances.takeWhile(_ < sun.getDistanceTo(planet2Orbit))\n\
    \        val closestPlanets3 = closestPlanets.takeWhile(_ < sun.getDistanceTo(planet1))\n\
    \        val closestPlanets4 = closestPlanets2.takeWhile(_ < sun.getDistanceTo(planet2))\n\
    \        val closestPlanets5 = closestPlanets3.takeWhile(_ < sun.getDistanceTo(planet1))\n\
    \        val closestPlanets6 = closestPlanets4.takeWhile(_ < sun.getDistanceTo(planet2))\n\
    \        val closestPlanets7 = closestPlanets5.takeWhile(_ < sun.getDistanceTo(planet1))\n\
    \        val closestPlanets8 = closestPlanets6.takeWhile(_ < sun.getDistanceTo(planet2))\n\
    \        val closestPlanets9 = closestPlanets7.takeWhile(_ < sun.getDistanceTo(planet1))\n\
    \        val closestPlanets10 = closestPlanets8.takeWhile(_ < sun.getDistanceTo(planet2))\n\
    \        val closestPlanets11 = closestPlanets9.takeWhile(_ < sun.getDistanceTo(planet1))\n\
    \        val closestPlanets12 = closestPlanets10.takeWhile(_ < sun.getDistanceTo(planet2))\n\
    \        val closestPlanets13 = closestPlanets11.takeWhile(_ < sun.getDistanceTo(planet1))\n\
    \        val closestPlanets14 = closestPlanets12.takeWhile(_ < sun\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmqz4m2h7.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmqz4m2h7.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmqz4m2h7.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmqz4m2h7.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmqz4m2h7.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmqz4m2h7.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmqz4m2h7.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planet1 = planets.find(planet => planet.toLowerCase() == planet1)\n\
    \        val planet2 = planets.find(planet => planet.toLowerCase() == planet2)\n\
    \        val planet1Orbit = planet1.toUpperCase\n        val planet2Orbit = planet2.toUpperCase\n\
    \        val sunOrbit = \"SUN\".toUpperCase\n        val orbits = planets.filter(planet\
    \ => planet.toLowerCase() == planet1Orbit).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet2Orbit).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == sunOrbit).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase() == planet).map(planet => (planet, planets.filter(planet\
    \ => planet.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptdyz7qrn.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptdyz7qrn.scala:16:69\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1\e[0m = planets.find(\e[36mplanet\e[0m => planet.toLowerCase()\
    \ == planet1)\n\e[31m\e[31m   |\e[0m                                         \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \             Recursive \e[33mvalue\e[0m \e[35mplanet1\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptdyz7qrn.scala:17:69 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mplanet2\e[0m = planets.find(\e\
    [36mplanet\e[0m => planet.toLowerCase() == planet2)\n\e[31m\e[31m   |\e[0m   \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                      Recursive \e[33mvalue\e[0m\
    \ \e[35mplanet2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmptdyz7qrn.scala:18:35 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mplanet1Orbit\e[0m = planet1.toUpperCase\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     value toUpperCase is not a member of Option[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmptdyz7qrn.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mplanet2Orbit\e[0m = planet2.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     value toUpperCase is not a member of Option[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdyz7qrn.scala:21:1500 ------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planets.filter(\e\
    [36mplanet\e[0m => plan"
  stdout: ''
  timestamp: 1660009575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val orbits = planets.map(planet => planet -> planet.orbit(planets))\n\
    \        val sun = planets.map(planet => planet.orbit(planets).map(_.distanceTo(sun)))\n\
    \        val proximity = sun zip orbits\n        proximity.sortBy(_._1).map(_._2).filter(_._2.nonEmpty)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7defl9_f.scala:16:60 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e\
    [36mplanet\e[0m => planet -> planet.orbit(planets))\n\e[31m\e[31m   |\e[0m   \
    \                                                  ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m      value orbit is not a member of String - did you mean planet.split?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7defl9_f.scala:17:47 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = planets.map(\e\
    [36mplanet\e[0m => planet.orbit(planets).map(_.distanceTo(sun)))\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m      value orbit is not a member of String - did you mean planet.split?\n\
    \e[31m\e[31m-- Error: /tmp/tmp7defl9_f.scala:19:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        proximity.sortBy(_._1).map(_._2).filter(_._2.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mShort\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planet1 = planets.find(_.name ==\
    \ planet1).get\n        val planet2 = planets.find(_.name == planet2).get\n  \
    \      val sun = Planet(\"Sun\")\n        val orbit1 = planet1.orbit(sun)\n  \
    \      val orbit2 = planet2.orbit(sun)\n        val orbits = List(orbit1, orbit2)\n\
    \        val proximity = orbits.map(o => o.distanceTo(sun))\n        proximity.sortBy(_.abs)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6aw0e9rr.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6aw0e9rr.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6aw0e9rr.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6aw0e9rr.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6aw0e9rr.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6aw0e9rr.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6aw0e9rr.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planet1 = planets.find(_.name ==\
    \ planet1).getOrElse(throw new IllegalArgumentException(\"Planet \" + planet1\
    \ + \" does not exist\"))\n        val planet2 = planets.find(_.name == planet2).getOrElse(throw\
    \ new IllegalArgumentException(\"Planet \" + planet2 + \" does not exist\"))\n\
    \        val sun = Planet(\"Sun\")\n        val orbit1 = planet1.orbit(sun)\n\
    \        val orbit2 = planet2.orbit(sun)\n        val orbits = List(orbit1, orbit2)\n\
    \        val proximity = orbits.map(o => o.distanceTo(sun))\n        proximity.sortWith(_.compare(_.abs)\
    \ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgz7lxjc.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgz7lxjc.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdgz7lxjc.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgz7lxjc.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgz7lxjc.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdgz7lxjc.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgz7lxjc.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndVenus = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndJupiter = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndNeptune = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus =\
    \ List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n      \
    \  val planetsBetweenSunAndMercuryAndEarth = List(mercury, venus, earth, mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, ne\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9a3r4zxm.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\"\
    )\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\"\
    )\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndVenus = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndJupiter = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndNeptune = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus =\
    \ List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n      \
    \  val planetsBetweenSunAndMercuryAndEarth = List(mercury, venus, earth, mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppgczmrxl.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppgczmrxl.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppgczmrxl.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppgczmrxl.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppgczmrxl.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppgczmrxl.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp"
  stdout: ''
  timestamp: 1660009574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ),\n            Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp14ja6nad.scala:32:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \"Venus\n\e\
    [31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m     \
    \                         unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmp14ja6nad.scala:34:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp14ja6nad.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Venus\"\
    \e[0m, \e[31m\"Earth\"\e[0m, \e[31m\"Mars\"\e[0m, \e[31m\"Jupiter\"\e[0m, \e[31m\"\
    Saturn\"\e[0m, \e[31m\"Uranus\"\e[0m, \e[31m\"Neptune\"\e[0m),\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14ja6nad.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Venus\"\e[0m, \e[31m\"Earth\"\e[0m, \e[31m\"Mars\"\e[0m,\
    \ \e[31m\"Jupiter\"\e[0m, \e[31m\"Saturn\"\e[0m, \e[31m\"Uranus\"\e[0m, \e[31m\"\
    Neptune\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp14ja6nad.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Venus\"\e[0m, \e[31m\"Earth\"\
    \e[0m, \e[31m\"Mars\"\e[0m, \e[31m\"Jupiter\"\e[0m, \e[31m\"Saturn\"\e[0m, \e\
    [31m\"Uranus\"\e[0m, \e[31m\"Neptune\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp14ja6nad.scala:19:12"
  stdout: ''
  timestamp: 1660009573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(planet => (planet, planet.orbit(sun)))\n        val orbitsBetweenPlanets\
    \ = orbits.filter(orbit => orbit._1.name == planet1 && orbit._2.name == planet2)\n\
    \        val proximity = orbitsBetweenPlanets.map(orbit => (orbit._1.name, orbit._2.name,\
    \ orbit._1.distance(orbit._2.name)))\n        proximity.sortBy(x => x._3).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx614iciv.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx614iciv.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpx614iciv.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpx614iciv.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx614iciv.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpx614iciv.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpx614iciv.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(planet => planet.orbit(sun))\n        val proximity = orbits.map(orbit\
    \ => orbit.proximity(sun))\n        proximity.sortBy(proximity => proximity)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpun1b04k_.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpun1b04k_.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpun1b04k_.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpun1b04k_.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpun1b04k_.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpun1b04k_.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpun1b04k_.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planet1 = planets.find(planets.contains(planet1))\n        val\
    \ planet2 = planets.find(planets.contains(planet2))\n        if (planet1 == null\
    \ || planet2 == null) {\n            List()\n        } else {\n            val\
    \ orbit1 = planet1.toString.toDouble\n            val orbit2 = planet2.toString.toDouble\n\
    \            val sun = 6.97219\n            val distance = (orbit1 - orbit2) *\
    \ Math.cos(sun)\n            val distance2 = distance * distance\n           \
    \ val distance3 = distance2 * distance\n            val distance4 = distance3\
    \ * distance\n            val distance5 = distance4 * distance\n            val\
    \ distance6 = distance5 * distance\n            val distance7 = distance6 * distance\n\
    \            val distance8 = distance7 * distance\n            val distance9 =\
    \ distance8 * distance\n            val distance10 = distance9 * distance\n  \
    \          val distance11 = distance10 * distance\n            val distance12\
    \ = distance11 * distance\n            val distance13 = distance12 * distance\n\
    \            val distance14 = distance13 * distance\n            val distance15\
    \ = distance14 * distance\n            val distance16 = distance15 * distance\n\
    \            val distance17 = distance16 * distance\n            val distance18\
    \ = distance17 * distance\n            val distance19 = distance18 * distance\n\
    \            val distance20 = distance19 * distance\n            val distance21\
    \ = distance20 * distance\n            val distance22 = distance21 * distance\n\
    \            val distance23 = distance22 * distance\n            val distance24\
    \ = distance23 * distance\n            val distance25 = distance24 * distance\n\
    \            val distance26 = distance25 * distance\n            val distance27\
    \ = distance26 * distance\n            val distance28 = distance27 * distance\n\
    \            val distance29 = distance28 * distance\n            val distance30\
    \ = distance29 * distance\n            val distance31 = distance30 * distance\n\
    \            val distance32 = distance31 * distance\n            val distance33\
    \ = distance32 * distance\n            val distance34 = distance33 * distance\n\
    \            val distance35 = distance34 * distance\n            val distance36\
    \ = distance35 * distance\n            val distance37 = distance36 * distance\n\
    \            val distance38 = distance37 * distance\n            val distance39\
    \ = distance38 * distance\n            val distance40 = distance39 * distance\n\
    \            val distance41 = distance40 * distance\n            \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsurhuko8.scala:78:0 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsurhuko8.scala:16:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1\e[0m = planets.find(planets.contains(planet1))\n\e[31m\e[31m \
    \  |\e[0m                                                    ^\e[0m\n\e[31m  \
    \ |\e[0m                                      Recursive \e[33mvalue\e[0m \e[35mplanet1\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsurhuko8.scala:17:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet2\e[0m = planets.find(planets.contains(planet2))\n\e[31m\e[31m \
    \  |\e[0m                                                    ^\e[0m\n\e[31m  \
    \ |\e[0m                                      Recursive \e[33mvalue\e[0m \e[35mplanet2\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsurhuko8.scala:77:1\
    \ ---------------------\e[0m\e[0m\n\e[31m77 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpsurhuko8.scala:67:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m67 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val orbits = planets.map(planet => PlanetOrbit(planet))\n        val\
    \ sun = PlanetOrbit(\"Sun\")\n        val sunOrbit = orbits.find(_.planet == \"\
    Sun\").get\n        val sunOrbits = orbits.filter(_.planet == \"Sun\")\n     \
    \   val sunOrbitDistance = sunOrbits.map(_.distanceTo(sun))\n        val sunOrbitDistanceSum\
    \ = sunOrbitDistance.sum\n        val sunOrbitDistanceDiff = sunOrbitDistanceSum\
    \ - sunOrbitDistance.head\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOrbitDistanceDiff\
    \ / sunOrbitDistanceSum\n        val sunOrbitDistanceDiffToSun = sunOr\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppf3yno1_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36msunOrbitDistanceDiffToSun\e\
    [0m = sunOrbitDistanceDiff / sunOrbitDistanceSum\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbitDistanceDiffToSun is already defined as \e[33mvalue\e\
    [0m \e[35msunOrbitDistanceDiffToSun\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppf3yno1_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msunOrbitDistanceDiffToSun\e\
    [0m = sunOrbitDistanceDiff / sunOrbitDistanceSum\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbitDistanceDiffToSun is already defined as \e[33mvalue\e\
    [0m \e[35msunOrbitDistanceDiffToSun\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppf3yno1_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msunOrbitDistanceDiffToSun\e\
    [0m = sunOrbitDistanceDiff / sunOrbitDistanceSum\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbitDistanceDiffToSun is already defined as \e[33mvalue\e\
    [0m \e[35msunOrbitDistanceDiffToSun\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppf3yno1_.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msunOrbitDistanceDiffToSun\e\
    [0m = sunOrbitDistanceDiff / sunOrbitDistanceSum\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbitDistanceDiffToSun is already defined as \e[33mvalue\e\
    [0m \e[35msunOrbit"
  stdout: ''
  timestamp: 1660009578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(_.orbit(sun))\n        val planet1Orbit = orbits.find(_.name\
    \ == planet1)\n        val planet2Orbit = orbits.find(_.name == planet2)\n   \
    \     val planet1OrbitOrbit = planet1Orbit.orbit(planet2Orbit)\n        val planet1OrbitOrbitOrbit\
    \ = planet1OrbitOrbit.orbit(planet2Orbit)\n        val planet1OrbitOrbitOrbitOrbit\
    \ = planet1OrbitOrbitOrbit.orbit(planet2Orbit)\n        val planet1OrbitOrbitOrbitOrbitOrbit\
    \ = planet1OrbitOrbitOrbitOrbit.orbit(planet2Orbit)\n        val planet1OrbitOrbitOrbitOrbitOrbit\
    \ = planet1OrbitOrbitOrbitOrbit.orbit(planet2Orbit)\n        val planet1OrbitOrbitOrbitOrbitOrbit\
    \ = planet1OrbitOrbitOrbitOrbit.orbit(planet2Orbit)\n        val planet1OrbitOrbitOrbitOrbitOrbitOrbit\
    \ = planet1OrbitOrbitOrbitOrbitOrbit.orbit(planet2Orbit)\n        val planet1OrbitOrbitOrbitOrbitOrbitOrbit\
    \ = planet1OrbitOrbitOrbitOrbitOrbit.orbit(planet2Orbit)\n        val planet1OrbitOrbitOrbitOrbitOrbitOrbit\
    \ = planet1OrbitOrbitOrbitOrbitOrbit.orbit(planet2Orbit)\n        val planet1OrbitOrbitOrbitOrbitOrbitOrbit\
    \ = planet1OrbitOrbitOrbitOrbitOrbit.orbit(planet2Orbit)\n        val planet1OrbitOrbitOrbitOrbitOrbit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplipgardb.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplipgardb.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1OrbitOrbitOrbitOrbitOrbit\e[0m = planet1OrbitOrbitOrbitOrbit.orbit(planet2Orbit)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitOrbitOrbitOrbitOrbit is already defined as \e\
    [33mvalue\e[0m \e[35mplanet1OrbitOrbitOrbitOrbitOrbit\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplipgardb.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1OrbitOrbitOrbitOrbitOrbit\e[0m = planet1OrbitOrbitOrbitOrbit.orbit(planet2Orbit)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitOrbitOrbitOrbitOrbit is already defined as \e\
    [33mvalue\e[0m \e[35mplanet1OrbitOrbitOrbitOrbitOrbit\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplipgardb.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1OrbitOrbitOrbitOrbitOrbitOrbit\e[0m = planet1OrbitOrbitOrbitOrbitOrbit.orbit(planet2Orbit)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitOrbitOrbitOrbitOrbitOrbit is already defined as\
    \ \e[33mvalue\e[0m \e[35mplanet1OrbitOrbitOrbitOrbitOrbitOrbit\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplipgardb.scala:37:12\
    \ ---------"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit\
    \ = planets.find(_.name == planet2).getOrElse(sun)\n        val orbits = List(planet1Orbit,\
    \ planet2Orbit)\n        val orbitsBetweenPlanets = orbits.filter(_.orbit.between(planet1Orbit,\
    \ planet2Orbit))\n        val planetsBetweenPlanets = orbitsBetweenPlanets.map(_.orbit)\n\
    \        val planetsBetweenPlanetsSorted = planetsBetweenPlanets.sortBy(_.distanceTo(sun))\n\
    \        planetsBetweenPlanetsSorted.map(_.name)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_vtrny9x.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_vtrny9x.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_vtrny9x.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_vtrny9x.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_vtrny9x.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_vtrny9x.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_vtrny9x.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", 0, 0),\n            new Planet(\"Venus\", 0, 0),\n\
    \            new Planet(\"Earth\", 0, 0),\n            new Planet(\"Mars\", 0,\
    \ 0),\n            new Planet(\"Jupiter\", 0, 0),\n            new Planet(\"Saturn\"\
    , 0, 0),\n            new Planet(\"Uranus\", 0, 0),\n            new Planet(\"\
    Neptune\", 0, 0),\n            new Planet(\"Mercury\", 1, 0),\n            new\
    \ Planet(\"Venus\", 1, 0),\n            new Planet(\"Earth\", 1, 0),\n       \
    \     new Planet(\"Mars\", 1, 0),\n            new Planet(\"Jupiter\", 1, 0),\n\
    \            new Planet(\"Saturn\", 1, 0),\n            new Planet(\"Uranus\"\
    , 1, 0),\n            new Planet(\"Neptune\", 1, 0),\n            new Planet(\"\
    Mercury\", 2, 0),\n            new Planet(\"Venus\", 2, 0),\n            new Planet(\"\
    Earth\", 2, 0),\n            new Planet(\"Mars\", 2, 0),\n            new Planet(\"\
    Jupiter\", 2, 0),\n            new Planet(\"Saturn\", 2, 0),\n            new\
    \ Planet(\"Uranus\", 2, 0),\n            new Planet(\"Neptune\", 2, 0),\n    \
    \        new Planet(\"Mercury\", 3, 0),\n            new Planet(\"Venus\", 3,\
    \ 0),\n            new Planet(\"Earth\", 3, 0),\n            new Planet(\"Mars\"\
    , 3, 0),\n            new Planet(\"Jupiter\", 3, 0),\n            new Planet(\"\
    Saturn\", 3, 0),\n            new Planet(\"Uranus\", 3, 0),\n            new Planet(\"\
    Neptune\", 3, 0),\n            new Planet(\"Mercury\", 4, 0),\n            new\
    \ Planet(\"Venus\", 4, 0),\n            new Planet(\"Earth\", 4, 0),\n       \
    \     new Planet(\"Mars\", 4, 0),\n            new Planet(\"Jupiter\", 4, 0),\n\
    \            new Planet(\"Saturn\", 4, 0),\n            new Planet(\"Uranus\"\
    , 4, 0),\n            new Planet(\"Neptune\", 4, 0),\n            new Planet(\"\
    Mercury\", 5, 0),\n            new Planet(\"Venus\", 5, 0),\n            new Planet(\"\
    Earth\", 5, 0),\n            new Planet(\"Mars\", 5, 0),\n            new Planet(\"\
    Jupiter\", 5, 0),\n            \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw1l0ynfj.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1l0ynfj.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Mercury\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1l0ynfj.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1l0ynfj.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1l0ynfj.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1l0ynfj.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0.0, 0.0)),\n            Planet(\"Venus\", Vector(0.0,\
    \ 1.0)),\n            Planet(\"Earth\", Vector(1.0, 0.0)),\n            Planet(\"\
    Mars\", Vector(-1.0, 0.0)),\n            Planet(\"Jupiter\", Vector(0.0, -1.0)),\n\
    \            Planet(\"Saturn\", Vector(1.0, -1.0)),\n            Planet(\"Uranus\"\
    , Vector(-1.0, -1.0)),\n            Planet(\"Neptune\", Vector(-1.0, 1.0))\n \
    \       )\n        val sun = Planet(\"Sun\", Vector(0.0, 1.0))\n        val orbits\
    \ = planets.map(p => (p.name, p.orbit))\n        val sunOrbit = orbits.find(_._1\
    \ == sun._1).get._2\n        val planet1Orbit = orbits.find(_._1 == planet1._1).get._2\n\
    \        val planet2Orbit = orbits.find(_._1 == planet2._1).get._2\n        val\
    \ planet1OrbitToSun = planet1Orbit - sunOrbit\n        val planet2OrbitToSun =\
    \ planet2Orbit - sunOrbit\n        val planet1OrbitToPlanet2 = planet1Orbit -\
    \ planet2Orbit\n        val planet2OrbitToPlanet2 = planet2Orbit - planet1Orbit\n\
    \        val planet1OrbitToPlanet1 = planet1Orbit - sunOrbit\n        val planet2OrbitToPlanet1\
    \ = planet2Orbit - sunOrbit\n        val planet1OrbitToPlanet2 = planet1Orbit\
    \ - planet2Orbit\n        val planet2OrbitToPlanet1 = planet2Orbit - planet1Orbit\n\
    \        val planet1OrbitToPlanet1 = planet1Orbit - sunOrbit\n        val planet2OrbitToPlanet2\
    \ = planet2Orbit - sunOrbit\n        val planet1OrbitToPlanet2 = planet1Orbit\
    \ - planet2Orbit\n        val planet2OrbitToPlanet1 = planet2Orbit - planet1Orbit\n\
    \        val planet1OrbitToPlanet1 = planet1Orbit - sunOrbit\n        val planet2OrbitToPlanet2\
    \ = planet2Orbit - sun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdloccfaz.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitToPlanet2\e\
    [0m = planet1Orbit - planet2Orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitToPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitToPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdloccfaz.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitToPlanet1\e\
    [0m = planet2Orbit - planet1Orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2OrbitToPlanet1 is already defined as \e[33mvalue\e\
    [0m \e[35mplanet2OrbitToPlanet1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdloccfaz.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitToPlanet1\e\
    [0m = planet1Orbit - sunOrbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitToPlanet1 is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitToPlanet1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdloccfaz.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitToPlanet2\e\
    [0m = planet2Orbit - sunOrbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2OrbitToPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanet2OrbitToPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdloccfaz.scala:40:"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ),\n            Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp14ja6nad.scala:32:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \"Venus\n\e\
    [31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m     \
    \                         unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmp14ja6nad.scala:34:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp14ja6nad.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Venus\"\
    \e[0m, \e[31m\"Earth\"\e[0m, \e[31m\"Mars\"\e[0m, \e[31m\"Jupiter\"\e[0m, \e[31m\"\
    Saturn\"\e[0m, \e[31m\"Uranus\"\e[0m, \e[31m\"Neptune\"\e[0m),\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14ja6nad.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Venus\"\e[0m, \e[31m\"Earth\"\e[0m, \e[31m\"Mars\"\e[0m,\
    \ \e[31m\"Jupiter\"\e[0m, \e[31m\"Saturn\"\e[0m, \e[31m\"Uranus\"\e[0m, \e[31m\"\
    Neptune\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp14ja6nad.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Venus\"\e[0m, \e[31m\"Earth\"\
    \e[0m, \e[31m\"Mars\"\e[0m, \e[31m\"Jupiter\"\e[0m, \e[31m\"Saturn\"\e[0m, \e\
    [31m\"Uranus\"\e[0m, \e[31m\"Neptune\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp14ja6nad.scala:19:12"
  stdout: ''
  timestamp: 1660009573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n  \
    \      )\n        val sun = Planet(\"Sun\", 0, 0)\n        val orbits = planets.map(_.orbit(sun))\n\
    \        val proximity = orbits.map(_.distanceTo(sun))\n        proximity.sortBy(_.abs).takeWhile(_\
    \ > 0).map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo495yh8.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpeo495yh8.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo495yh8.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeo495yh8.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpeo495yh8.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo495yh8.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available"
  stdout: ''
  timestamp: 1660009581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Planet(\"Venus\"\
    , new Orbit(\n                    new Planet(\"Earth\", new Orbit(\n         \
    \               new Planet(\"Mars\", new Orbit(\n                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                new Planet(\"\
    Saturn\", new Orbit(\n                                    new Planet(\"Uranus\"\
    , new Orbit(\n                                        new Planet(\"Neptune\",\
    \ new Orbit(\n                                            new Planet(\"Mercury\"\
    , new Orbit(\n                                                new Planet(\"Venus\"\
    , new Orbit(\n                                                    new Planet(\"\
    Earth\", new Orbit(\n                                                        new\
    \ Planet(\"Mars\", new Orbit(\n                                              \
    \              new Planet(\"Jupiter\", new Orbit(\n                          \
    \                                      new Planet(\"Saturn\", new Orbit(\n   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                 new Planet(\"Neptune\", new Orbit(\n                       \
    \                                                     new Planet(\"Mercury\",\
    \ new Orbit(\n                                                               \
    \                 new Planet(\"Venus\", new Orbit(\n                         \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                         new Planet(\"Mars\", new Orbit(\n                  \
    \                                                                          new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                                                     new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                 new Planet(\"Uranus\", new Orbit(\n        \
    \                                                                            \
    \                    new Planet(\"Neptune\", new Orbit(\n                    \
    \                                                                            \
    \            new Planet(\"Mercury\", new Orbit(\n                            \
    \                                                                            \
    \        new Planet(\"Venus\", new Orbit(\n                                  \
    \                                                                            \
    \      new Planet(\"Earth\", new Orbit(\n                                    \
    \                                                                            \
    \        new Planet(\"Mars\", new Orbit(\n                                   \
    \                                                                            \
    \             new Planet(\"Jupiter\", new Orbit(\n                           \
    \                                                                            \
    \                         new Planet(\"Saturn\", new Orbit(\n                \
    \                                                                            \
    \                                        new Planet(\"Uranus\", new Orbit(\n \
    \                                                                            \
    \                                                           new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \ new Planet(\"Mercury\", new Orbit(\n                                       \
    \                                                                            \
    \                             new Planet(\"Venus\", new Orbit(\n             \
    \                                                                            \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \             new Planet(\"Mars\", new Orbit(\n                              \
    \                                                                            \
    \                                                  \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo3cbgq1s.scala:51:181 --------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpo3cbgq1s.scala\n\
    exception occurred while compiling /tmp/tmpo3cbgq1s.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <4838..4848>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [4848..5010..5010]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(\n                Vector(\n                   \
    \ Vector(-0.75, -0.75, 0.25), \n                    Vector(0.75, -0.75, 0.25),\
    \ \n                    Vector(0.25, 0.75, 0.25), \n                    Vector(0.25,\
    \ 0.25, 0.75), \n                    Vector(0.75, 0.25, 0.75), \n            \
    \        Vector(0.75, 0.75, 0.25), \n                    Vector(0.25, 0.75, 0.75),\
    \ \n                    Vector(-0.75, 0.75, 0.25), \n                    Vector(-0.75,\
    \ -0.75, 0.25), \n                    Vector(-0.75, -0.75, -0.25), \n        \
    \            Vector(0.75, -0.75, -0.25), \n                    Vector(0.75, -0.75,\
    \ 0.25), \n                    Vector(0.25, 0.75, 0.75), \n                  \
    \  Vector(0.25, 0.25, 0.75), \n                    Vector(0.75, 0.25, 0.75), \n\
    \                    Vector(0.75, 0.75, 0.25), \n                    Vector(0.25,\
    \ 0.75, 0.75), \n                    Vector(-0.75, 0.75, 0.25), \n           \
    \         Vector(-0.75, -0.75, 0.25), \n                    Vector(-0.75, -0.75,\
    \ -0.25), \n                    Vector(0.75, -0.75, -0.25), \n               \
    \     Vector(0.75, -0.75, 0.25), \n                    Vector(0.25, 0.75, 0.75),\
    \ \n                    Vector(0.25, 0.25, 0.75), \n                    Vector(0.75,\
    \ 0.25, 0.75), \n                    Vector(0.75, 0.75, 0.25), \n            \
    \        Vector(0.25, 0.75, 0.75), \n                    Vector(-0.75, 0.75, 0.25),\
    \ \n                    Vector(-0.75, -0.75, 0.25), \n                    Vector(-0.75,\
    \ -0.75, -0.25), \n                    Vector(0.75, -0.75, -0.25), \n        \
    \            Vector(0.75, -0.75, 0.25), \n                    Vector(0.25, 0.75,\
    \ 0.75), \n                    Vector(0.25, 0.25, 0.75), \n                  \
    \  Vector(0.75, 0.25, 0.75), \n                    Vector(0.75, 0.75, 0.25), \n\
    \                    Vector(0.25, 0.75, 0.75), \n                    Vector(-0.75,\
    \ 0.75, 0.25), \n                    Vector(-0.75, -0.75, 0.25), \n          \
    \          Vector(-0.75, -0.75, -0.25), \n                    Vector(0.75, -0.75,\
    \ -0.25), \n                    Vector(0.75, -0.75, 0.25), \n                \
    \    Vector(0.25, 0.75, 0.75), \n                    Vector(0.25, 0.25, 0.75),\
    \ \n                    Vector(0.75, 0.25, 0.75), \n                    Vector(0.75,\
    \ 0.75, 0.25), \n                    Vector(0.25, 0.75, 0.75), \n            \
    \        Vector(-0.75, 0.75, 0.25), \n                    Vector(-0.75, -0.75,\
    \ 0.25), \n                    Vector(-0.75, -0.75, -0.25), \n               \
    \     Vector(0.75, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8pf10149.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8pf10149.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8pf10149.scala:16:30 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8pf10149.scala:69:5 ---------------------\e[0m\e\
    [0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n            \"Uranus\"\
    , \"Neptune\")\n        val planetsBetween = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2)\n        val planetsBetween2 = planets.filter(planet\
    \ => planets.contains(planet) && planet != planet2 && planet != planet1)\n   \
    \     val planetsBetween3 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3)\n        val\
    \ planetsBetween4 = planets.filter(planet => planets.contains(planet) && planet\
    \ != planet1 && planet != planet2 && planet != planet3 && planet != planet4)\n\
    \        val planetsBetween5 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5)\n        val planetsBetween6 = planets.filter(planet\
    \ => planets.contains(planet) && planet != planet1 && planet != planet2 && planet\
    \ != planet3 && planet != planet4 && planet != planet5 && planet != planet6)\n\
    \        val planetsBetween7 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet != planet7)\n  \
    \      val planetsBetween8 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet != planet7 && planet\
    \ != planet8)\n        val planetsBetween9 = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4 && planet != planet5 && planet != planet6 && planet \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4xs1naop.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xs1naop.scala:19:135\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetween3\e[0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Not\
    \ found: planet3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xs1naop.scala:20:135\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetween4\e[0m = planets.filter(\e[36mplanet\e[0m => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2 && planet != planet3 && planet !=\
    \ planet4)\n\e[31m\e[31m   |\e[0m                                            \
    \                                                                            \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                      Not found: planet3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4xs1naop.scala:20:156 -----------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetween4\e[0m = planets.filter(\e\
    [36mplanet\e[0m => planets.contains(planet) && planet != planet1 && planet !=\
    \ planet2 && planet != planet3 && planet != planet4)\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                                                            \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \         Not found: planet4\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1660009582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(planet => planet.orbit(sun))\n        val proximity = orbits.map(orbit\
    \ => (planets.indexOf(orbit.planet), orbit.distanceTo(sun)))\n        proximity.sortBy(_._1).map(_.map(_.planet))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqemw9qa.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqemw9qa.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpeqemw9qa.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqemw9qa.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqemw9qa.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpeqemw9qa.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpeqemw9qa.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planet1Orbit = planets.find(_.name\
    \ == planet1).getOrElse(throw new Exception(\"Planet \" + planet1 + \" not found\"\
    ))\n        val planet2Orbit = planets.find(_.name == planet2).getOrElse(throw\
    \ new Exception(\"Planet \" + planet2 + \" not found\"))\n        val sunOrbit\
    \ = Planet(\"Sun\")\n        val orbits = List(planet1Orbit, planet2Orbit, sunOrbit)\n\
    \        val orbitsBetweenPlanets = orbits.filter(_.orbit.between(planet1Orbit.orbit,\
    \ planet2Orbit.orbit))\n        val proximity = orbitsBetweenPlanets.map(_.orbit.distance(sunOrbit.orbit))\n\
    \        proximity.sortBy(-_)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3k_4k_bo.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3k_4k_bo.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3k_4k_bo.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3k_4k_bo.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3k_4k_bo.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3k_4k_bo.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3k_4k_bo.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ),\n            Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  \
    \          Planet(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"),\n            Planet(\"Mercury\", \"Venus\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp14ja6nad.scala:32:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \"Venus\n\e\
    [31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m     \
    \                         unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmp14ja6nad.scala:34:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp14ja6nad.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Venus\"\
    \e[0m, \e[31m\"Earth\"\e[0m, \e[31m\"Mars\"\e[0m, \e[31m\"Jupiter\"\e[0m, \e[31m\"\
    Saturn\"\e[0m, \e[31m\"Uranus\"\e[0m, \e[31m\"Neptune\"\e[0m),\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14ja6nad.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Venus\"\e[0m, \e[31m\"Earth\"\e[0m, \e[31m\"Mars\"\e[0m,\
    \ \e[31m\"Jupiter\"\e[0m, \e[31m\"Saturn\"\e[0m, \e[31m\"Uranus\"\e[0m, \e[31m\"\
    Neptune\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp14ja6nad.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Venus\"\e[0m, \e[31m\"Earth\"\
    \e[0m, \e[31m\"Mars\"\e[0m, \e[31m\"Jupiter\"\e[0m, \e[31m\"Saturn\"\e[0m, \e\
    [31m\"Uranus\"\e[0m, \e[31m\"Neptune\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp14ja6nad.scala:19:12"
  stdout: ''
  timestamp: 1660009573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(\n                Vector(\n                   \
    \ Vector(\n                        Vector(\n                            Vector(0,0,0),\n\
    \                            Vector(0,0,0),\n                            Vector(0,0,0)\n\
    \                        ),\n                        Vector(\n               \
    \             Vector(0,0,0),\n                            Vector(0,0,0),\n   \
    \                         Vector(0,0,0)\n                        ),\n        \
    \                Vector(\n                            Vector(0,0,0),\n       \
    \                     Vector(0,0,0),\n                            Vector(0,0,0)\n\
    \                        )\n                    ),\n                    Vector(\n\
    \                        Vector(0,0,0),\n                        Vector(0,0,0),\n\
    \                        Vector(0,0,0)\n                    ),\n             \
    \       Vector(\n                        Vector(0,0,0),\n                    \
    \    Vector(0,0,0),\n                        Vector(0,0,0)\n                 \
    \   )\n                )\n            )),\n            Planet(\"Venus\", Orbit(\n\
    \                Vector(\n                    Vector(\n                      \
    \  Vector(\n                            Vector(0,0,0),\n                     \
    \       Vector(0,0,0),\n                            Vector(0,0,0)\n          \
    \              ),\n                        Vector(\n                         \
    \   Vector(0,0,0),\n                            Vector(0,0,0),\n             \
    \               Vector(0,0,0)\n                        ),\n                  \
    \      Vector(\n                            Vector(0,0,0),\n                 \
    \           Vector(0,0,0),\n                            Vector(0,0,0)\n      \
    \                  )\n                    ),\n                    Vector(\n  \
    \                      Vector(0,0,0),\n                        Vector(0,0,0),\n\
    \                        Vector(0,0,0)\n                    ),\n             \
    \       Vector(\n                        Vector(0,0,0),\n                    \
    \    Vector(0,0,0),\n                        Vector(0,0,0)\n                 \
    \   )\n                )\n            )),\n            Planet(\"Earth\", Orbit(\n\
    \                Vector(\n                    Vector(\n                      \
    \  Vector(0,0,0),\n                        Vector(0,0,0),\n                  \
    \      Vector(0,0,0)\n                    ),\n                    Vector(\n  \
    \                      Vector(0,0,0),\n                        Vector(0,0,0),\n\
    \                        Vector(0,0,0)\n                    ),\n             \
    \       Vector(\n                        Vector(0,0,0),\n                    \
    \    Vector(0,0,0),\n                        Vector(0,0,0)\n                 \
    \   )\n                )\n            )),\n            Planet(\"Mars\", Orbit(\n\
    \                Vector(\n                    Vector(\n                      \
    \  Vector(0,0,0),\n                        Vector(0,0,0),\n                  \
    \      Vector(0,0,0)\n                    ),\n                    Vector(\n  \
    \                      Vector(0,0,0),\n                        Vector(0,0,0),\n\
    \                        Vector(0,0,0)\n                    ),\n             \
    \       Vector(\n                        Vector(0,0,0),\n                    \
    \    Vector(0,0,0),\n                        Vector(0,0,0)\n                 \
    \   )\n                )\n            )),\n            Planet(\"Jupiter\", Orbit(\n\
    \                Vector(\n                    Vector(\n                      \
    \  Vector(0,0,0),\n                        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbye574bk.scala:121:4 ---------------------------\e\
    [0m\e[0m\n\e[31m121 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbye574bk.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbye574bk.scala:16:30 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbye574bk.scala:47:12 ------------------------\e[0m\e\
    [0m\n\e[31m47 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbye574bk.scala:47:28\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbye574bk.scala:78:12 ------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbye574bk.scala:78:28\
    \ ------------------------\e[0m\e[0m\n\e[31m78 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars)\n        val planetsBetweenSunAndEarth = List(jupiter, saturn)\n     \
    \   val planetsBetweenSunAndMars = List(uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune, uranus)\n \
    \       val planetsBetweenSunAndNeptune = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3y8kiiut.scala:43:54 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndVenusAndSaturn\e\
    [0m = List(\n\e[31m\e[31m   |\e[0m                                           \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3y8kiiut.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmercury\e[0m = Planet(\e[31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mvenus\e[0m = Planet(\e[31m\"Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mearth\e[0m = Planet(\e[31m\"Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmars\e[0m = P"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit\
    \ = planets.find(_.name == planet2).getOrElse(sun)\n        val orbits = List(planet1Orbit,\
    \ planet2Orbit)\n        val orbitsBetweenPlanets = orbits.map(_.orbit)\n    \
    \    val proximity = orbitsBetweenPlanets.map(_.distanceTo(sun))\n        proximity.sortBy(_.abs).take(2).map(_.getOrElse(planet1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8o9s5iu.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8o9s5iu.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn8o9s5iu.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8o9s5iu.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8o9s5iu.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn8o9s5iu.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8o9s5iu.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit\
    \ = planets.find(_.name == planet2).getOrElse(sun)\n        val orbits = planets.filter(_.orbit(planet1Orbit,\
    \ planet2Orbit))\n        val proximity = orbits.map(_.proximity(sun))\n     \
    \   proximity.sortBy(_.toDouble).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2c1t_m2k.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2c1t_m2k.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2c1t_m2k.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2c1t_m2k.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2c1t_m2k.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2c1t_m2k.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2c1t_m2k.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsBetween = planets.filter(planet => planet != planet1 &&\
    \ planet != planet2)\n        val planetsBetweenSun = planetsBetween.filter(planet\
    \ => planet == \"Mercury\" || planet == \"Venus\" || planet == \"Earth\" || planet\
    \ == \"Mars\" || planet == \"Jupiter\" || planet == \"Saturn\" || planet == \"\
    Uranus\" || planet == \"Neptune\")\n        val planetsBetweenSunAndPlanet1 =\
    \ planetsBetweenSun.filter(planet => planet != planet1 && planet != planet2)\n\
    \        val planetsBetweenSunAndPlanet2 = planetsBetweenSun.filter(planet =>\
    \ planet != planet1 && planet != planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2\
    \ = planetsBetweenSunAndPlanet1.filter(planet => planet != planet1 && planet !=\
    \ planet2)\n        val planetsBetweenSunAndPlanet2AndPlanet1 = planetsBetweenSunAndPlanet2.filter(planet\
    \ => planet != planet1 && planet != planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2\
    \ = planetsBetweenSunAndPlanet1.filter(planet => planet != planet1 && planet !=\
    \ planet2)\n        val planetsBetweenSunAndPlanet2AndPlanet1 = planetsBetweenSunAndPlanet2.filter(planet\
    \ => planet != planet1 && planet != planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2\
    \ = planetsBetweenSunAndPlanet1.filter(planet => planet != planet1 && planet !=\
    \ planet2)\n        val planetsBetweenSunAndPlanet2AndPlanet1 = planetsBetweenSunAndPlanet2.filter(planet\
    \ => planet != planet1 && planet != planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2\
    \ = planetsBetweenSunAndPlanet1.filter(planet => planet != planet1 && planet !=\
    \ planet2)\n        val planetsBetweenSunAndPlanet2AndPlanet1 = planetsBetweenSunAndPlanet2.filter(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6elz1oai.scala:27:87 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet2AndPlanet1\e\
    [0m = planetsBetweenSunAndPlanet2.filter(\n\e[31m\e[31m   |\e[0m             \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6elz1oai.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m\
    \ = planetsBetweenSunAndPlanet1.filter(\e[36mplanet\e[0m => planet != planet1\
    \ && planet != planet2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenSunAndPlanet1AndPlanet2 is already defined as\
    \ \e[33mvalue\e[0m \e[35mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6elz1oai.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenSunAndPlanet2AndPlanet1\e[0m = planetsBetweenSunAndPlanet2.filter(\e\
    [36mplanet\e[0m => planet != planet1 && planet != planet2)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenSunAndPlanet2AndPlanet1 is already defined as\
    \ \e[33mvalue\e[0m \e[35mplanetsBetweenSunAndPlanet2AndPlanet1\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6elz1oai.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenSunAndPl"
  stdout: ''
  timestamp: 1660009587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit\
    \ = planets.find(_.name == planet2).getOrElse(sun)\n        val orbits = List(planet1Orbit,\
    \ planet2Orbit)\n        val orbitsBetweenPlanets = orbits.filter(_.orbit.between(planet1Orbit,\
    \ planet2Orbit))\n        val proximity = orbitsBetweenPlanets.map(_.orbit.distanceTo(sun))\n\
    \        proximity.sortBy(_.toDouble)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxbssvum.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxbssvum.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfxbssvum.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxbssvum.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxbssvum.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfxbssvum.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxbssvum.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0.0, 0.0)),\n            Planet(\"Venus\", Vector(0.0,\
    \ 1.0)),\n            Planet(\"Earth\", Vector(1.0, 0.0)),\n            Planet(\"\
    Mars\", Vector(0.0, -1.0)),\n            Planet(\"Jupiter\", Vector(0.0, 2.0)),\n\
    \            Planet(\"Saturn\", Vector(1.0, 1.0)),\n            Planet(\"Uranus\"\
    , Vector(-1.0, 0.0)),\n            Planet(\"Neptune\", Vector(-2.0, 0.0))\n  \
    \      )\n        val sun = Planet(\"Sun\", Vector(0.0, 1.0))\n        val planet1\
    \ = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name\
    \ == planet2).get\n        val sun1 = planet1.orbit(sun)\n        val sun2 = planet2.orbit(sun)\n\
    \        val planet1orbit = planet1.orbit(planet2)\n        val planet2orbit =\
    \ planet2.orbit(planet1)\n        val sun1orbit = sun1.orbit(sun2)\n        val\
    \ sun2orbit = sun2.orbit(sun1)\n        val orbits = List(sun1orbit, sun2orbit,\
    \ planet1orbit, planet2orbit)\n        val sun1orbits = orbits.filter(_.mag <\
    \ sun1orbit.mag)\n        val sun2orbits = orbits.filter(_.mag < sun2orbit.mag)\n\
    \        val planet1orbits = orbits.filter(_.mag < planet1orbit.mag)\n       \
    \ val planet2orbits = orbits.filter(_.mag < planet2orbit.mag)\n        val orbits\
    \ = List(sun1orbits, sun2orbits, planet1orbits, planet2orbits)\n        val sun1orbits\
    \ = orbits.filter(_.mag < sun1orbit.mag)\n        val sun2orbits = orbits.filter(_.mag\
    \ < sun2orbit.mag)\n        val planet1orbits = orbits.filter(_.mag < planet1orbit.mag)\n\
    \        val planet2orbits = orbits.filter(_.mag < planet2orbit.mag)\n       \
    \ val orbits = List(sun1orbits, sun2orbits, planet1orbits, planet2orbits)\n  \
    \      val sun1orbits = orbits.filter(_.mag < sun1orbit.mag)\n        val sun2orbits\
    \ = orbits.filter(_.mag < sun2orbit.mag\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5xyva2h9.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xyva2h9.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36morbits\e[0m = List(sun1orbits, sun2orbits, planet1orbits, planet2orbits)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morbits is already defined as \e[33mvalue\e[0m \e[35morbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5xyva2h9.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36msun1orbits\e[0m = orbits.filter(_.mag\
    \ < sun1orbit.mag)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msun1orbits is already defined as \e[33mvalue\e[0m \e[35msun1orbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5xyva2h9.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36msun2orbits\e[0m = orbits.filter(_.mag\
    \ < sun2orbit.mag)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msun2orbits is already defined as \e[33mvalue\e[0m \e[35msun2orbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5xyva2h9.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mval\e[0m \e[36mplanet1orbits\e[0m = orbits.filter(_.mag\
    \ < planet1orbit.mag)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1orbits is already defined as \e[33mvalue\e[0m \e[35mplanet1orbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNo"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsOrbits = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planetsOrbits2\
    \ = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n        val planetsOrbits3 = List(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsOrbits4 = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planetsOrbits5\
    \ = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n        val planetsOrbits6 = List(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsOrbits7 = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planetsOrbits8\
    \ = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n        val planetsOrbits9 = List(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsOrbits10 = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planetsOrbits11\
    \ = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n        val planetsOrbits12 = List(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsOrbits13 = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jup\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmhoodvv9.scala:28:72 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mplanetsOrbits13\e[0m = List(\e\
    [31m\"Mercury\"\e[0m, \e[31m\"Venus\"\e[0m, \e[31m\"Earth\"\e[0m, \e[31m\"Mars\"\
    \e[0m, \"Jup\n\e[31m\e[31m   |\e[0m                                          \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                          unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpmhoodvv9.scala:30:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmhoodvv9.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmhoodvv9.scala:30:4 -------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: Jupdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(p => (p.name, p.orbit(sun)))\n        val orbits1 = orbits.filter(_._2\
    \ > 0)\n        val orbits2 = orbits.filter(_._2 < 0)\n        val orbits12 =\
    \ orbits1.zip(orbits2)\n        val orbits121 = orbits12.filter(_._1 < _._2)\n\
    \        val orbits122 = orbits12.filter(_._1 > _._2)\n        val orbits123 =\
    \ orbits12.filter(_._1 == _._2)\n        val orbits1232 = orbits12.filter(_._2\
    \ == _._2)\n        val orbits12321 = orbits1232.filter(_._1 < _._2)\n       \
    \ val orbits12322 = orbits1232.filter(_._1 > _._2)\n        val orbits12323 =\
    \ orbits1232.filter(_._1 == _._2)\n        val orbits123213 = orbits1232.filter(_._2\
    \ == _._2)\n        val orbits1232131 = orbits123213.filter(_._1 < _._2)\n   \
    \     val orbits1232132 = orbits123213.filter(_._1 > _._2)\n        val orbits1232133\
    \ = orbits123213.filter(_._1 == _._2)\n        val orbits12321332 = orbits123213.filter(_._2\
    \ == _._2)\n        val orbits123213321 = orbits12321332.filter(_._1 < _._2)\n\
    \        val orbits123213322 = orbits12321332.filter(_._1 > _._2)\n        val\
    \ orbits123213323 = orbits12321332.filter(_._1 == _._2)\n        val orbits1232133213\
    \ = orbits12321332.filter(_._2 == _._2)\n        val orbits12321332131 = orbits1232133213.filter(_._1\
    \ < _._2)\n        val orbits12321332132 = orbits1232133213.filter(_._1 > \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoovc8tv3.scala:47:62 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36morbits12321332132\e[0m =\
    \ orbits1232133213.filter(_._1 > \n\e[31m\e[31m   |\e[0m                     \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                           expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoovc8tv3.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoovc8tv3.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoovc8tv3.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoovc8tv3.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoovc8tv3.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available whe"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndVenus = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndJupiter = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndNeptune = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus =\
    \ List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n      \
    \  val planetsBetweenSunAndMercuryAndEarth = List(mercury, venus, earth, mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, ne\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9a3r4zxm.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Planet(\"Venus\"\
    , new Orbit(\n                    new Planet(\"Earth\", new Orbit(\n         \
    \               new Planet(\"Mars\", new Orbit(\n                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                new Planet(\"\
    Saturn\", new Orbit(\n                                    new Planet(\"Uranus\"\
    , new Orbit(\n                                        new Planet(\"Neptune\",\
    \ new Orbit(\n                                            new Planet(\"Mercury\"\
    , new Orbit(\n                                                new Planet(\"Venus\"\
    , new Orbit(\n                                                    new Planet(\"\
    Earth\", new Orbit(\n                                                        new\
    \ Planet(\"Mars\", new Orbit(\n                                              \
    \              new Planet(\"Jupiter\", new Orbit(\n                          \
    \                                      new Planet(\"Saturn\", new Orbit(\n   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                 new Planet(\"Neptune\", new Orbit(\n                       \
    \                                                     new Planet(\"Mercury\",\
    \ new Orbit(\n                                                               \
    \                 new Planet(\"Venus\", new Orbit(\n                         \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                         new Planet(\"Mars\", new Orbit(\n                  \
    \                                                                          new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                                                     new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                 new Planet(\"Uranus\", new Orbit(\n        \
    \                                                                            \
    \                    new Planet(\"Neptune\", new Orbit(\n                    \
    \                                                                            \
    \            new Planet(\"Mercury\", new Orbit(\n                            \
    \                                                                            \
    \        new Planet(\"Venus\", new Orbit(\n                                  \
    \                                                                            \
    \      new Planet(\"Earth\", new Orbit(\n                                    \
    \                                                                            \
    \        new Planet(\"Mars\", new Orbit(\n                                   \
    \                                                                            \
    \             new Planet(\"Jupiter\", new Orbit(\n                           \
    \                                                                            \
    \                         new Planet(\"Saturn\", new Orbit(\n                \
    \                                                                            \
    \                                        new Planet(\"Uranus\", new Orbit(\n \
    \                                                                            \
    \                                                           new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \ new Planet(\"Mercury\", new Orbit(\n                                       \
    \                                                                            \
    \                             new Planet(\"Venus\", new Orbit(\n             \
    \                                                                            \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \             new Planet(\"Mars\", new Orbit(\n                              \
    \                                                                            \
    \                                                  \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo3cbgq1s.scala:51:181 --------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpo3cbgq1s.scala\n\
    exception occurred while compiling /tmp/tmpo3cbgq1s.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <4838..4848>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [4848..5010..5010]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(p => (p, p.orbit(sun)))\n        val proximity = orbits.map(p\
    \ => (p._1, p._2))\n        proximity.sortBy(p => p._1.distance(p._2))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_25ixn0.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_25ixn0.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6_25ixn0.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_25ixn0.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_25ixn0.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6_25ixn0.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6_25ixn0.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(\n                Vector(\n                   \
    \ Vector(0.0, 0.0), \n                    Vector(0.0, 1.0), \n               \
    \     Vector(1.0, 0.0), \n                    Vector(1.0, 1.0)), \n          \
    \      Vector(\n                    Vector(0.0, 0.0), \n                    Vector(0.0,\
    \ 1.0), \n                    Vector(1.0, 0.0), \n                    Vector(1.0,\
    \ 1.0)), \n                Vector(\n                    Vector(0.0, 0.0), \n \
    \                   Vector(0.0, 1.0), \n                    Vector(1.0, 0.0),\
    \ \n                    Vector(1.0, 1.0)), \n                Vector(\n       \
    \             Vector(0.0, 0.0), \n                    Vector(0.0, 1.0), \n   \
    \                 Vector(1.0, 0.0), \n                    Vector(1.0, 1.0)), \n\
    \                Vector(\n                    Vector(0.0, 0.0), \n           \
    \         Vector(0.0, 1.0), \n                    Vector(1.0, 0.0), \n       \
    \             Vector(1.0, 1.0)), \n                Vector(\n                 \
    \   Vector(0.0, 0.0), \n                    Vector(0.0, 1.0), \n             \
    \       Vector(1.0, 0.0), \n                    Vector(1.0, 1.0)), \n        \
    \        Vector(\n                    Vector(0.0, 0.0), \n                   \
    \ Vector(0.0, 1.0), \n                    Vector(1.0, 0.0), \n               \
    \     Vector(1.0, 1.0)), \n                Vector(\n                    Vector(0.0,\
    \ 0.0), \n                    Vector(0.0, 1.0), \n                    Vector(1.0,\
    \ 0.0), \n                    Vector(1.0, 1.0)), \n                Vector(\n \
    \                   Vector(0.0, 0.0), \n                    Vector(0.0, 1.0),\
    \ \n                    Vector(1.0, 0.0), \n                    Vector(1.0, 1.0)),\
    \ \n                Vector(\n                    Vector(0.0, 0.0), \n        \
    \            Vector(0.0, 1.0), \n                    Vector(1.0, 0.0), \n    \
    \                Vector(1.0, 1.0)), \n                Vector(\n              \
    \      Vector(0.0, 0.0), \n                    Vector(0.0, 1.0), \n          \
    \          Vector(1.0, 0.0), \n                    Vector(1.0, 1.0)), \n     \
    \           Vector(\n                    Vector(0.0, 0.0), \n                \
    \    Vector(0.0, 1.0), \n                    Vector(1.0, 0.0), \n            \
    \        Vector(1.0, 1.0)), \n                Vector(\n                    Vector(0.0,\
    \ 0.0), \n                    Vector(0.0, 1.0), \n                    Vector(1.0,\
    \ 0.0), \n                    Vector(1.0, 1.0)), \n                Vector(\n \
    \                   Vector(0.0, 0.0), \n                    Vector(0.0, 1.0),\
    \ \n                    Vector(1.0, 0.0), \n                    Vector(1.0, 1.0)),\
    \ \n                Vector(\n                    Vector(0.0, 0.0), \n        \
    \            Vector(0.0, 1.0), \n                    Vector(1.0, 0.0), \n    \
    \                Vector(1.0, 1.0)), \n                Vector(\n              \
    \      Vector(0.0, 0.0), \n                    Vector(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjqpxypxd.scala:94:27 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m                    Vector(\n\e[31m\e[31m   |\e[0m  \
    \                         ^\e[0m\n\e[31m   |\e[0m                           expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjqpxypxd.scala:16:12 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjqpxypxd.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjqpxypxd.scala:95:5 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0,0,0)),\n            Planet(\"Venus\", Vector(0,0,1)),\n\
    \            Planet(\"Earth\", Vector(1,0,0)),\n            Planet(\"Mars\", Vector(1,0,1)),\n\
    \            Planet(\"Jupiter\", Vector(2,0,0)),\n            Planet(\"Saturn\"\
    , Vector(2,0,1)),\n            Planet(\"Uranus\", Vector(3,0,0)),\n          \
    \  Planet(\"Neptune\", Vector(3,0,1))\n        )\n        val sun = Planet(\"\
    Sun\", Vector(0,0,0))\n        val orbits = planets.map(p => (p.name, p.orbit))\n\
    \        val sunOrbit = orbits.find(_._1 == sun.name).get._2\n        val planet1Orbit\
    \ = orbits.find(_._1 == planet1.name).get._2\n        val planet2Orbit = orbits.find(_._1\
    \ == planet2.name).get._2\n        val planet1OrbitToSun = planet1Orbit - sunOrbit\n\
    \        val planet2OrbitToSun = planet2Orbit - sunOrbit\n        val planet1OrbitToPlanet2\
    \ = planet1Orbit - planet2Orbit\n        val planet2OrbitToPlanet1 = planet2Orbit\
    \ - planet1Orbit\n        val planet1OrbitToPlanet1AndPlanet2 = planet1OrbitToPlanet2\
    \ + planet2OrbitToPlanet1\n        val planet2OrbitToPlanet1AndPlanet2 = planet2OrbitToPlanet1\
    \ + planet1OrbitToPlanet2\n        val planet1OrbitToPlanet1AndPlanet2AndSun =\
    \ planet1OrbitToPlanet2AndSun + planet2OrbitToPlanet1AndSun\n        val planet2OrbitToPlanet1AndPlanet2AndSun\
    \ = planet2OrbitToPlanet1AndSun + planet1OrbitToPlanet2AndSun\n        val planet1OrbitToPlanet1AndPlanet2AndSunAndPlanet2\
    \ = planet1OrbitToPlanet2AndSunAndPlanet2 + planet2OrbitToPlanet1AndPlanet2\n\
    \        val planet2OrbitToPlanet1AndPlanet2AndSunAndPlan\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwhs97kjp.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhs97kjp.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhs97kjp.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m)),\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhs97kjp.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, Vector(\e[31m1\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhs97kjp.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, Vector(\e[31m1\e[0m,\e[31m0\e[0m,\e[31m1\e[0m)),\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwhs97kjp.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m, Vector(\e[31m2\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Erro"
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val planetsBetween = planets.filter(p\
    \ => p.name < planet1 && p.name > planet2)\n        val planetsBetweenSorted =\
    \ planetsBetween.sortBy(p => p.distanceToSun)\n        val planetsBetweenSortedWithSun\
    \ = planetsBetweenSorted.filter(p => p.distanceToSun > 0)\n        planetsBetweenSortedWithSun.map(p\
    \ => p.name)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1v7_x9az.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1v7_x9az.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1v7_x9az.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m2\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1v7_x9az.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1v7_x9az.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m4\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1v7_x9az.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m5\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tm"
  stdout: ''
  timestamp: 1660009591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0))\n \
    \       val planet1 = planets.find(_.name == planet1).get\n        val planet2\
    \ = planets.find(_.name == planet2).get\n        val sun = Planet(\"Sun\", 0,\
    \ 0)\n        val orbit1 = planet1.orbit(sun)\n        val orbit2 = planet2.orbit(sun)\n\
    \        val distance1 = orbit1.distanceTo(sun)\n        val distance2 = orbit2.distanceTo(sun)\n\
    \        if (distance1 < distance2) {\n            val result = List(planet1.name,\
    \ planet2.name)\n            result.sortWith((x, y) => distance1 < distance2)\n\
    \        } else {\n            val result = List(planet2.name, planet1.name)\n\
    \            result.sortWith((x, y) => distance2 < distance1)\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfhlrgst5.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfhlrgst5.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfhlrgst5.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfhlrgst5.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfhlrgst5.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfhlrgst5.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available"
  stdout: ''
  timestamp: 1660009593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n            Planet(\"\
    Venus\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n            Planet(\"Earth\", Vector(0.0,\
    \ 0.0), Vector(0.0, 0.0)),\n            Planet(\"Mars\", Vector(0.0, 0.0), Vector(0.0,\
    \ 0.0)),\n            Planet(\"Jupiter\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n\
    \            Planet(\"Saturn\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n       \
    \     Planet(\"Uranus\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n            Planet(\"\
    Neptune\", Vector(0.0, 0.0), Vector(0.0, 0.0))\n        )\n        val planet1\
    \ = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name\
    \ == planet2).get\n        val sun = Planet(\"Sun\", Vector(0.0, 0.0), Vector(0.0,\
    \ 0.0))\n        val orbit1 = planet1.orbit(sun)\n        val orbit2 = planet2.orbit(sun)\n\
    \        val orbits = orbit1 ++ orbit2\n        val proximity = orbits.map(o =>\
    \ o.distance(sun))\n        proximity.sortBy(_.toDouble)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyv2vhiw9.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyv2vhiw9.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m, \e\
    [31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyv2vhiw9.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m, Vector(\e[31m0.0\e[0m, \e[31m0.0\e\
    [0m), Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyv2vhiw9.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, Vector(\e[31m0.0\e\
    [0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyv2vhiw9.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m, Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m,\
    \ \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyv2vhiw9.scala:21:12 ---------"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(\n                Vector(0,0,0), \n           \
    \     Vector(0,0,1), \n                Vector(0,1,0), \n                Vector(0,1,1),\
    \ \n                Vector(1,0,0), \n                Vector(1,0,1), \n       \
    \         Vector(1,1,0), \n                Vector(1,1,1))),\n            Planet(\"\
    Venus\", Orbit(\n                Vector(0,0,0), \n                Vector(0,0,1),\
    \ \n                Vector(0,1,0), \n                Vector(0,1,1), \n       \
    \         Vector(1,0,0), \n                Vector(1,0,1), \n                Vector(1,1,0),\
    \ \n                Vector(1,1,1))),\n            Planet(\"Earth\", Orbit(\n \
    \               Vector(0,0,0), \n                Vector(0,0,1), \n           \
    \     Vector(0,1,0), \n                Vector(0,1,1), \n                Vector(1,0,0),\
    \ \n                Vector(1,0,1), \n                Vector(1,1,0), \n       \
    \         Vector(1,1,1))),\n            Planet(\"Mars\", Orbit(\n            \
    \    Vector(0,0,0), \n                Vector(0,0,1), \n                Vector(0,1,0),\
    \ \n                Vector(0,1,1), \n                Vector(1,0,0), \n       \
    \         Vector(1,0,1), \n                Vector(1,1,0), \n                Vector(1,1,1))),\n\
    \            Planet(\"Jupiter\", Orbit(\n                Vector(0,0,0), \n   \
    \             Vector(0,0,1), \n                Vector(0,1,0), \n             \
    \   Vector(0,1,1), \n                Vector(1,0,0), \n                Vector(1,0,1),\
    \ \n                Vector(1,1,0), \n                Vector(1,1,1))),\n      \
    \      Planet(\"Saturn\", Orbit(\n                Vector(0,0,0), \n          \
    \      Vector(0,0,1), \n                Vector(0,1,0), \n                Vector(0,1,1),\
    \ \n                Vector(1,0,0), \n                Vector(1,0,1), \n       \
    \         Vector(1,1,0), \n                Vector(1,1,1))),\n            Planet(\"\
    Uranus\", Orbit(\n                Vector(0,0,0), \n                Vector(0,0,1),\
    \ \n                Vector(0,1,0), \n                Vector(0,1,1), \n       \
    \         Vector(1,0,0), \n                Vector(1,0,1), \n                Vector(1,1,0),\
    \ \n                Vector(1,1,1))),\n            Planet(\"Neptune\", Orbit(\n\
    \                Vector(0,0,0), \n                Vector(0,0,1), \n          \
    \      Vector(0,1,0), \n                Vector(0,1,1), \n                Vector(1,0,0),\
    \ \n                Vector(1,0,1), \n                Vector(1,1,0), \n       \
    \         Vector(1,1,1))))\n        val planet1 = planets.find(_.name == planet1)\n\
    \        val planet2 = planets.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe9ln47n2.scala:90:4 ----------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpe9ln47n2.scala:16:12 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe9ln47n2.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpe9ln47n2.scala:25:12 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe9ln47n2.scala:25:28\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe9ln47n2.scala:34:12 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe9ln47n2.scala:34:28\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            Planet(\e[31m\"\
    Ea"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val planetsBetween = planets.filter(p\
    \ => p.orbit(planet1) < p.orbit(planet2))\n        val planetsBetweenSorted =\
    \ planetsBetween.sortBy(p => p.distance(planet1))\n        val planetsBetweenSortedReversed\
    \ = planetsBetweenSorted.reverse\n        val planetsBetweenSortedReversedSorted\
    \ = planetsBetweenSortedReversed.sortBy(p => p.distance(planet2))\n        val\
    \ planetsBetweenSortedReversedSortedReversed = planetsBetweenSortedReversedSorted.reverse\n\
    \        val planetsBetweenSortedReversedSortedReversedSorted = planetsBetweenSortedReversedSortedReversed.sortBy(p\
    \ => p.distance(planet1))\n        val planetsBetweenSortedReversedSortedReversedSortedReversed\
    \ = planetsBetweenSortedReversedSortedReversedSorted.reverse\n        val planetsBetweenSortedReversedSortedReversedSortedReversedSorted\
    \ = planetsBetweenSortedReversedSortedReversedSortedReversed.sortBy(p => p.distance(planet2))\n\
    \        val planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversed.sortBy(p\
    \ => p.distance(planet1))\n        val planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed.sortBy(p\
    \ => p.distance(planet2))\n        val planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = planetsBetweenSortedReversedSortedReversedSortedReversedSorted\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuxe4aei9.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted\e\
    [0m = planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpuxe4aei9.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuxe4aei9.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpuxe4aei9.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m2\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuxe4aei9.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m            "
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(planet => (planet, planet.orbit(sun)))\n        val orbitsBetweenPlanets\
    \ = orbits.filter(orbit => orbit._1.name == planet1 && orbit._2.name == planet2)\n\
    \        val sortedOrbits = orbitsBetweenPlanets.sortBy(orbit => orbit._1.distance(sun))\n\
    \        val sortedOrbitsBetweenPlanets = sortedOrbits.filter(orbit => orbit._1.name\
    \ == planet1 && orbit._2.name == planet2)\n        sortedOrbitsBetweenPlanets.map(orbit\
    \ => orbit._1.name).toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi7wgcb93.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi7wgcb93.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi7wgcb93.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi7wgcb93.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi7wgcb93.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi7wgcb93.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi7wgcb93.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(\n                Vector(\n                   \
    \ Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n           \
    \         Vector(0.0,0.0,1.0)\n                )\n            )),\n          \
    \  Planet(\"Venus\", Orbit(\n                Vector(\n                    Vector(0.0,0.0,0.0),\n\
    \                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n\
    \                )\n            )),\n            Planet(\"Earth\", Orbit(\n  \
    \              Vector(\n                    Vector(0.0,0.0,0.0),\n           \
    \         Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n    \
    \            )\n            )),\n            Planet(\"Mars\", Orbit(\n       \
    \         Vector(\n                    Vector(0.0,0.0,0.0),\n                \
    \    Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n         \
    \       )\n            )),\n            Planet(\"Jupiter\", Orbit(\n         \
    \       Vector(\n                    Vector(0.0,0.0,0.0),\n                  \
    \  Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n           \
    \     )\n            )),\n            Planet(\"Saturn\", Orbit(\n            \
    \    Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n\
    \                    Vector(0.0,0.0,1.0)\n                )\n            )),\n\
    \            Planet(\"Uranus\", Orbit(\n                Vector(\n            \
    \        Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n    \
    \                Vector(0.0,0.0,1.0)\n                )\n            )),\n   \
    \         Planet(\"Neptune\", Orbit(\n                Vector(\n              \
    \      Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n      \
    \              Vector(0.0,0.0,1.0)\n                )\n            ))\n      \
    \  )\n        val planet1 = planets.find(_.name == planet1).get\n        val planet2\
    \ = planets.find(_.name == planet2).get\n        val orbit1 = planet1.orbit\n\
    \        val orbit2 = planet2.orbit\n        val sun = Orbit(Vector(Vector(0.0,0.0,0.0),\
    \ Vector(0.0,1.0,0.0), Vector(0.0,0.0,1.0)))\n        val orbits = orbit1 ++ orbit2\
    \ ++ sun\n        val distances = orbits.map(o => Vector(o.x - sun.x, o.y - sun.y,\
    \ o.z - sun.z))\n        val sortedDistances = distances.sortWith((x,y) => x.x\
    \ * x.x + x.y * x.y + x.z * x.z < y.x * y.x + y.y * y.y + y.z * y.z)\n       \
    \ val sortedPlanets = planets.sortWith((x,y) => x.distance \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr7gz8ae4.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7gz8ae4.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr7gz8ae4.scala:16:30 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr7gz8ae4.scala:23:12 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7gz8ae4.scala:23:28\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7gz8ae4.scala:30:12 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7gz8ae4.scala:30:28\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, "
  stdout: ''
  timestamp: 1660009597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0,0,0)),\n            Planet(\"Venus\", Vector(0,0,1)),\n\
    \            Planet(\"Earth\", Vector(1,0,0)),\n            Planet(\"Mars\", Vector(1,1,0)),\n\
    \            Planet(\"Jupiter\", Vector(0,0,-1)),\n            Planet(\"Saturn\"\
    , Vector(0,1,0)),\n            Planet(\"Uranus\", Vector(1,0,1)),\n          \
    \  Planet(\"Neptune\", Vector(-1,0,0))\n        )\n        val sun = Planet(\"\
    Sun\", Vector(0,0,0))\n        val orbits = planets.map(_.orbit(sun))\n      \
    \  val proximity = orbits.map(_.map(_.dist(sun)))\n        proximity.zip(planets).filter(p\
    \ => p._1.name == planet1 && p._2.name == planet2).sortBy(p => p._1).map(p =>\
    \ p._2.name)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3mxswa_t.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3mxswa_t.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Vector(\e[31m0\e\
    [0m,\e[31m0\e[0m,\e[31m1\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3mxswa_t.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Vector(\e[31m1\e\
    [0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3mxswa_t.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, Vector(\e[31m1\e\
    [0m,\e[31m1\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3mxswa_t.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3mxswa_t.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m, Vector(\e[31m0\e\
    [0m,\e[31m1\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^"
  stdout: ''
  timestamp: 1660009598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n            \"Uranus\"\
    , \"Neptune\")\n        val planetsBetween = planets.filter(planet => planets.contains(planet)\
    \ && planet != planet1 && planet != planet2)\n        val planetsBetweenSun =\
    \ planetsBetween.filter(planet => planet == \"Mercury\" || planet == \"Venus\"\
    \ || planet == \"Earth\" || planet == \"Mars\" || planet == \"Jupiter\" || planet\
    \ == \"Saturn\" || planet == \"Uranus\" || planet == \"Neptune\")\n        val\
    \ planetsBetweenSunAndPlanet1 = planetsBetweenSun.filter(planet => planet == planet1)\n\
    \        val planetsBetweenSunAndPlanet2 = planetsBetweenSun.filter(planet =>\
    \ planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet1)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet1)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet1)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet1)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_1cxwrqs.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet1AndPlanet2\e\
    [0m = planetsBetweenSunAndPlanet1.filter(\e[36mplanet\e[0m => planet == planet1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenSunAndPlanet1AndPlanet2 is already defined as\
    \ \e[33mvalue\e[0m \e[35mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_1cxwrqs.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m = planetsBetweenSunAndPlanet1.filter(\e\
    [36mplanet\e[0m => planet == planet2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenSunAndPlanet1AndPlanet2 is already defined as\
    \ \e[33mvalue\e[0m \e[35mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_1cxwrqs.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m = planetsBetweenSunAndPlanet1.filter(\e\
    [36mplanet\e[0m => planet == planet1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenSunAndPlanet1AndPlanet2 is already defined as\
    \ \e[33mvalue\e[0m \e[35mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_1cxwrqs.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e["
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1 = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name\
    \ == planet2).get\n        val orbit1 = planet1.orbit(sun)\n        val orbit2\
    \ = planet2.orbit(sun)\n        val distance1 = orbit1.distance(sun)\n       \
    \ val distance2 = orbit2.distance(sun)\n        val proximity = distance1.min(distance2)\n\
    \        val planetsBetween = planets.filter(_.orbit(sun).distance(sun).min <=\
    \ proximity)\n        planetsBetween.sortBy(_.orbit(sun).distance(sun).min).map(_.name)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphonxhcvc.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphonxhcvc.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphonxhcvc.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphonxhcvc.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphonxhcvc.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphonxhcvc.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmphonxhcvc.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsBetween = planets.filter(planet => planet != planet1 &&\
    \ planet != planet2)\n        val planetsBetweenSun = planets.filter(planet =>\
    \ planet != planet1 && planet != planet2 && planet != planets.last)\n        val\
    \ planetsBetweenSunAndPlanet1 = planets.filter(planet => planet != planet1 &&\
    \ planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet2\
    \ = planets.filter(planet => planet != planet1 && planet != planet2 && planet\
    \ != planets.last)\n        val planetsBetweenSunAndPlanet3 = planets.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenSunAndPlanet4 = planets.filter(planet => planet != planet1\
    \ && planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet5\
    \ = planets.filter(planet => planet != planet1 && planet != planet2 && planet\
    \ != planets.last)\n        val planetsBetweenSunAndPlanet6 = planets.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenSunAndPlanet7 = planets.filter(planet => planet != planet1\
    \ && planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet8\
    \ = planets.filter(planet => planet != planet1 && planet != planet2 && planet\
    \ != planets.last)\n        val planetsBetweenSunAndPlanet9 = planets.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenSunAndPlanet10 = planets.filter(planet => planet != planet1\
    \ && planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet11\
    \ = planets.filter(planet => planet != planet1 && plan\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpog82_3up.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpog82_3up.scala:28:89\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetweenSunAndPlanet11\e[0m = planets.filter(\e[36mplanet\e[0m => planet\
    \ != planet1 && plan\n\e[31m\e[31m   |\e[0m                                  \
    \                                                       ^^^^\e[0m\n\e[31m   |\e\
    [0m                                                         Not found: plan\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpog82_3up.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(_.orbit(sun))\n        val proximity = orbits.map(_.distanceTo(sun))\n\
    \        proximity.sortBy(_.abs).takeWhile(_.abs < 1.0).reverse.map(_.planet)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8i8demq.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8i8demq.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi8i8demq.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8i8demq.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8i8demq.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi8i8demq.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8i8demq.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val sun = Planet(\"Sun\"\
    , 8)\n        val orbits = planets.map(p => (p.name, p.orbit))\n        val orbits1\
    \ = orbits.filter(_._1 == planet1)\n        val orbits2 = orbits.filter(_._1 ==\
    \ planet2)\n        val sun1 = orbits1.filter(_._2 == sun)\n        val sun2 =\
    \ orbits2.filter(_._2 == sun)\n        val sun1Orbits = sun1.map(_._2)\n     \
    \   val sun2Orbits = sun2.map(_._2)\n        val sun1Orbits2 = sun1Orbits.filter(_._2\
    \ < sun2Orbits)\n        val sun2Orbits2 = sun2Orbits.filter(_._2 < sun1Orbits)\n\
    \        val sun1Orbits3 = sun1Orbits2.filter(_._3 < sun2Orbits)\n        val\
    \ sun2Orbits3 = sun2Orbits2.filter(_._3 < sun1Orbits2)\n        val sun1Orbits4\
    \ = sun1Orbits3.filter(_._4 < sun2Orbits3)\n        val sun2Orbits4 = sun2Orbits3.filter(_._4\
    \ < sun1Orbits3)\n        val sun1Orbits5 = sun1Orbits4.filter(_._5 < sun2Orbits4)\n\
    \        val sun2Orbits5 = sun2Orbits4.filter(_._5 < sun1Orbits4)\n        val\
    \ sun1Orbits6 = sun1Orbits5.filter(_._6 < sun2Orbits5)\n        val sun2Orbits6\
    \ = sun2Orbits5.filter(_._6 < sun1Orbits5)\n        val sun1Orbits7 = sun1Orbits6.filter(_._7\
    \ < sun2Orbits6)\n        val sun2Orbits7 = sun2Orbits6.filter(_._7 < sun1Orbits6)\n\
    \        val sun1Orbits8 = sun1Orbits7.filter(_._8 < sun2Orbits7)\n        val\
    \ sun2Orbits8 = sun2Orbits7.filter(_._8 < sun1Orbits7)\n        val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpbwthy8bs.scala:47:11 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbwthy8bs.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbwthy8bs.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbwthy8bs.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m2\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbwthy8bs.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbwthy8bs.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m4\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbwthy8bs.scala:21:12\
    \ -----------"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsOrbits = planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, planets.map(planet => (planet, planets.map(planet => (planet, planets.map(planet\
    \ => (planet, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmg_8g3o0.scala:17:4 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmg_8g3o0.scala:17:5 ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", \"Venus\"),\n            Planet(\"Mercury\", \"Earth\"\
    ),\n            Planet(\"Venus\", \"Earth\"),\n            Planet(\"Venus\", \"\
    Mars\"),\n            Planet(\"Earth\", \"Mars\"),\n            Planet(\"Earth\"\
    , \"Saturn\"),\n            Planet(\"Mars\", \"Jupiter\"),\n            Planet(\"\
    Mars\", \"Saturn\"),\n            Planet(\"Jupiter\", \"Saturn\"),\n         \
    \   Planet(\"Jupiter\", \"Uranus\"),\n            Planet(\"Saturn\", \"Uranus\"\
    ),\n            Planet(\"Saturn\", \"Neptune\"),\n            Planet(\"Uranus\"\
    , \"Neptune\")\n        )\n        val sun = Planet(\"Sun\", \"Earth\")\n    \
    \    val planet1 = planets.find(_.name == planet1).get\n        val planet2 =\
    \ planets.find(_.name == planet2).get\n        val orbit1 = planet1.orbit(sun)\n\
    \        val orbit2 = planet2.orbit(sun)\n        val orbits = orbit1 #:: orbit2\n\
    \        val sunOrbit = orbits.find(_.name == \"Sun\").get\n        val planet1Orbit\
    \ = orbits.find(_.name == planet1.name)\n        val planet2Orbit = orbits.find(_.name\
    \ == planet2.name)\n        val planet1OrbitOrbits = planet1Orbit.orbit(sunOrbit)\n\
    \        val planet2OrbitOrbits = planet2Orbit.orbit(sunOrbit)\n        val planet1OrbitOrbitsOrbits\
    \ = planet1OrbitOrbits #:: planet2OrbitOrbits\n        val planet1OrbitsOrbitsOrbits\
    \ = planet1OrbitsOrbitsOrbits.sortBy(_.distance(sunOrbit))\n        val planet1OrbitsOrbitsOrbitsOrbits\
    \ = planet1OrbitsOrbitsOrbitsOrbits.filter(_.distance(sunOrbit) < planet1.distance(sunOrbit))\n\
    \        val planet1OrbitsOrbitsOrbitsOrbits = planet1OrbitsOrbitsOrbitsOrbits.filter(_.distance(sunOrbit)\
    \ < planet2.distance(sunOrbit))\n        val planet1OrbitsOrbitsOrbitsOrbits =\
    \ planet1OrbitsOrbitsOrbitsOrbits.filter(_.distance(sunOrbit) < planet1.\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw2vh96pu.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw2vh96pu.scala:44:12 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitsOrbitsOrbitsOrbits\e[0m = planet1OrbitsOrbitsOrbitsOrbits.filter(_.distance(sunOrbit)\
    \ < planet2.distance(sunOrbit))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitsOrbitsOrbitsOrbits is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitsOrbitsOrbitsOrbits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw2vh96pu.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1OrbitsOrbitsOrbitsOrbits\e[0m = planet1OrbitsOrbitsOrbitsOrbits.filter(_.distance(sunOrbit)\
    \ < planet1.\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitsOrbitsOrbitsOrbits is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitsOrbitsOrbitsOrbits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2vh96pu.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m\"Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw2vh96pu.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Earth\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e["
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(_.orbit(sun))\n        val planetsBetween = orbits.filter(_.contains(planet1)\
    \ || _.contains(planet2))\n        planetsBetween.sortBy(_.distance(sun))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvajbcvt.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvajbcvt.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprvajbcvt.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprvajbcvt.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvajbcvt.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprvajbcvt.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprvajbcvt.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(\n                Vector(\n                   \
    \ Vector(\n                        Vector(\n                            Vector(\n\
    \                                Vector(\n                                   \
    \ Vector(\n                                        Vector(\n                 \
    \                           Vector(\n                                        \
    \        Vector(\n                                                    Vector(\n\
    \                                                        Vector(\n           \
    \                                                 Vector(\n                  \
    \                                              Vector(\n                     \
    \                                               Vector(\n                    \
    \                                                    Vector(\n               \
    \                                                             Vector(\n      \
    \                                                                          Vector(\n\
    \                                                                            \
    \        Vector(\n                                                           \
    \                             Vector(\n                                      \
    \                                                      Vector(\n             \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                        Vector(\n                           \
    \                                                                            \
    \ Vector(\n                                                                  \
    \                                          Vector(\n                         \
    \                                                                            \
    \           Vector(\n                                                        \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                  Vector(\n                                                 \
    \                                                                            \
    \   Vector(\n                                                                \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                                         Vector(\n          \
    \                                                                            \
    \                                                          Vector(\n         \
    \                                                                            \
    \                                                               Vector(\n    \
    \                                                                            \
    \                                                                        Vector(\n\
    \                                                                            \
    \                                                                            \
    \    Vector(\n                                                               \
    \                                                                            \
    \                     Vector(\n                                              \
    \                                                                            \
    \                                          Vector(\n                         \
    \                                                                            \
    \                                                                   Vector(\n\
    \                                                                            \
    \                                                                            \
    \                    Vector(\n                                               \
    \                                                                            \
    \                                                     Vector(\n              \
    \                                                                            \
    \                                                                            \
    \              Vector(\n                                                     \
    \                                                                            \
    \                                                       Vector(\n            \
    \                                                                            \
    \                                                                            \
    \                        Vector(\n                                           \
    \                                                                            \
    \                                                                         Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                            Vector(\n                       \
    \                                                                            \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                            \
    \                                                                            \
    \          Vector(\n                                                         \
    \                                                                            \
    \                                                                       Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbs1a4xbq.scala:99:211 --------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m                                                    \
    \                                                                            \
    \                                                                            Vector(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbs1a4xbq.scala:16:12 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs1a4xbq.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbs1a4xbq.scala:101:5 --------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m   \
    \ |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0)))\n\
    \        )\n        val sun = Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))\n\
    \        val orbits = planets.map(_.orbit).flatten\n        val planet1Orbit =\
    \ orbits.find(_.name == planet1)\n        val planet2Orbit = orbits.find(_.name\
    \ == planet2)\n        val planet1OrbitIndex = planets.indexOf(planet1Orbit)\n\
    \        val planet2OrbitIndex = planets.indexOf(planet2Orbit)\n        val planet1OrbitDistance\
    \ = planet1Orbit.distanceTo(sun)\n        val planet2OrbitDistance = planet2Orbit.distanceTo(sun)\n\
    \        val planet1OrbitDistanceIndex = planets.indexOf(planet1OrbitDistance)\n\
    \        val planet2OrbitDistanceIndex = planets.indexOf(planet2OrbitDistance)\n\
    \        val proximity = planet1OrbitDistance + planet2OrbitDistance\n       \
    \ val proximityIndex = planets.indexOf(proximity)\n        val proximityOrbits\
    \ = planets.take(planet1OrbitIndex).zip(planets.drop(planet1OrbitIndex)).map {\n\
    \            case (planet1, planet2) => planet1.orbit.distanceTo(planet2.orbit)\n\
    \        }\n        val proximityOrbitIndex = planets.indexOf(proximityOrbits.max)\n\
    \        val proximityOrbits = planets.take(plan\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzoc8vvkj.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzoc8vvkj.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mproximityOrbits\e[0m = planets.take(plan\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mproximityOrbits\
    \ is already defined as \e[33mvalue\e[0m \e[35mproximityOrbits\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzoc8vvkj.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e\
    [0m))),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzoc8vvkj.scala:16:30\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e\
    [0m))),\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: Orbit\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzoc8vvkj.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m))),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explai"
  stdout: ''
  timestamp: 1660009606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp2yww11l.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp2yww11l.scala:17:22 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp2yww11l.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp2yww11l.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp2yww11l.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp2yww11l.scala:21:22 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planetsBetween = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween2 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween3 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2).filter(_.name == planet3)\n        val\
    \ planetsBetween4 = planets.filter(_.name == planet1).filter(_.name == planet2).filter(_.name\
    \ == planet4).filter(_.name == planet5)\n        val planetsBetween5 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2).filter(_.name == planet4).filter(_.name\
    \ == planet5).filter(_.name == planet6)\n        val planetsBetween6 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2).filter(_.name == planet4).filter(_.name\
    \ == planet5).filter(_.name == planet6).filter(_.name == planet7)\n        val\
    \ planetsBetween7 = planets.filter(_.name == planet1).filter(_.name == planet2).filter(_.name\
    \ == planet4).filter(_.name == planet5).filter(_.name == planet6).filter(_.name\
    \ == planet7).filter(_.name == planet8)\n        val planetsBetween8 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2).filter(_.name == planet4).filter(_.name\
    \ == planet5).filter(_.name == planet6).filter(_.name == planet7).filter(_.name\
    \ == planet8).filter(_.name == planet9)\n        val planetsBetween9 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2).filter(_.name == planet4).filter(_.name\
    \ == planet5).filter(_.name == planet6).filter(_.name == planet7).filter(_.name\
    \ == planet8).filter(_.name == planet9).filter(_.name == planet10)\n        val\
    \ planetsBetween10 = planets.filter(_.name == planet1).filter(_.name == planet2).filter(_.name\
    \ == planet4).filter(_.name == planet5).filter(_.name == \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4y1of9xv.scala:34:159 --------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetween10\e[0m =\
    \ planets.filter(_.name == planet1).filter(_.name == planet2).filter(_.name ==\
    \ planet4).filter(_.name == planet5).filter(_.name == \n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4y1of9xv.scala:16:12 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y1of9xv.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y1of9xv.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4y1of9xv.scala:19:12 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4y1of9xv.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0,0,0)),\n            Planet(\"Venus\", Vector(0,0,1)),\n\
    \            Planet(\"Earth\", Vector(0,0,2)),\n            Planet(\"Mars\", Vector(0,0,3)),\n\
    \            Planet(\"Jupiter\", Vector(0,0,4)),\n            Planet(\"Saturn\"\
    , Vector(0,0,5)),\n            Planet(\"Uranus\", Vector(0,0,6)),\n          \
    \  Planet(\"Neptune\", Vector(0,0,7)))\n        val sun = Planet(\"Sun\", Vector(0,0,0))\n\
    \        val planet1 = planets.find(_.name == planet1).get\n        val planet2\
    \ = planets.find(_.name == planet2).get\n        val sun1 = planet1.orbit(sun)\n\
    \        val sun2 = planet2.orbit(sun)\n        val sun3 = Vector.cross(sun1,\
    \ sun2)\n        val sun4 = Vector.cross(sun2, sun3)\n        val sun5 = Vector.cross(sun3,\
    \ sun4)\n        val sun6 = Vector.cross(sun4, sun5)\n        val sun7 = Vector.cross(sun5,\
    \ sun6)\n        val sun8 = Vector.cross(sun6, sun7)\n        val sun9 = Vector.cross(sun7,\
    \ sun8)\n        val sun10 = Vector.cross(sun8, sun9)\n        val sun11 = Vector.cross(sun9,\
    \ sun10)\n        val sun12 = Vector.cross(sun10, sun11)\n        val sun13 =\
    \ Vector.cross(sun11, sun12)\n        val sun14 = Vector.cross(sun12, sun13)\n\
    \        val sun15 = Vector.cross(sun13, sun14)\n        val sun16 = Vector.cross(sun14,\
    \ sun15)\n        val sun17 = Vector.cross(sun15, sun16)\n        val sun18 =\
    \ Vector.cross(sun16, sun17)\n        val sun19 = Vector.cross(sun17, sun18)\n\
    \        val sun20 = Vector.cross(sun18, sun19)\n        val sun21 = Vector.cross(sun19,\
    \ sun20)\n        val sun22 = Vector.cross(sun20, sun21)\n        val sun23 =\
    \ Vector.cross(sun21, sun22)\n        val sun24 = Vector.cross(sun22, sun23)\n\
    \        val sun25 = Vector.cross(sun23, sun24)\n        val sun26 = Vector.cross(sun24,\
    \ sun25)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp_rdyj14_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_rdyj14_.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_rdyj14_.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Vector(\e[31m0\e\
    [0m,\e[31m0\e[0m,\e[31m1\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_rdyj14_.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Vector(\e[31m0\e\
    [0m,\e[31m0\e[0m,\e[31m2\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_rdyj14_.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, Vector(\e[31m0\e\
    [0m,\e[31m0\e[0m,\e[31m3\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_rdyj14_.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m4\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1660009609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Orbit(\n        \
    \            new Orbit(\n                        new Orbit(\n                \
    \            new Orbit(\n                                new Orbit(\n        \
    \                            new Orbit(\n                                    \
    \    new Orbit(\n                                            new Orbit(\n    \
    \                                            new Orbit(\n                    \
    \                                new Orbit(\n                                \
    \                        new Orbit(\n                                        \
    \                    new Orbit(\n                                            \
    \                    new Orbit(\n                                            \
    \                        new Orbit(\n                                        \
    \                                new Orbit(\n                                \
    \                                            new Orbit(\n                    \
    \                                                            new Orbit(\n    \
    \                                                                            \
    \    new Orbit(\n                                                            \
    \                            new Orbit(\n                                    \
    \                                                        new Orbit(\n        \
    \                                                                            \
    \            new Orbit(\n                                                    \
    \                                                new Orbit(\n                \
    \                                                                            \
    \            new Orbit(\n                                                    \
    \                                                        new Orbit(\n        \
    \                                                                            \
    \                            new Orbit(\n                                    \
    \                                                                            \
    \    new Orbit(\n                                                            \
    \                                                            new Orbit(\n    \
    \                                                                            \
    \                                            new Orbit(\n                    \
    \                                                                            \
    \                                                new Orbit(\n                \
    \                                                                            \
    \                                        new Orbit(\n                        \
    \                                                                            \
    \                                    new Orbit(\n                            \
    \                                                                            \
    \                                    new Orbit(\n                            \
    \                                                                            \
    \                                        new Orbit(\n                        \
    \                                                                            \
    \                                                new Orbit(\n                \
    \                                                                            \
    \                                                            new Orbit(\n    \
    \                                                                            \
    \                                                                            new\
    \ Orbit(\n                                                                   \
    \                                                                            \
    \                 new Orbit(\n                                               \
    \                                                                            \
    \                                         new Orbit(\n                       \
    \                                                                            \
    \                                                                     new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \                    new Orbit(\n                                            \
    \                                                                            \
    \                                                        new Orbit(\n        \
    \                                                                            \
    \                                                                            \
    \                    new Orbit(\n                                            \
    \                                                                            \
    \                                                                new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \                                    new Orbit(\n                            \
    \                                                                            \
    \                                                                            \
    \            new Orbit(\n                                                    \
    \                                                                            \
    \                                                                    new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \                                                new Orbit(\n                \
    \                                                                            \
    \                                                                            \
    \                                    new Orbit(\n                            \
    \                                                                            \
    \                                                                            \
    \                            new Orbit(\n                                    \
    \                                                                            \
    \                                                                            \
    \                        new Orbit(\n                                        \
    \                                                                            \
    \                                                                            \
    \                        new Orbit(\n                                        \
    \                                                                            \
    \                                                                            \
    \                            new Orbit(\n                                    \
    \                                                                            \
    \                                                                            \
    \                                    new Orbit(\n                            \
    \                                                                            \
    \                                                                            \
    \                                                new Orbit(\n                \
    \                                                                            \
    \                                                                            \
    \                                                                new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        new Orbit(\n                                                        \
    \                                                                            \
    \                                                                            \
    \                                new Orbit(\n                                \
    \                                                                            \
    \                                                                            \
    \                                                            new Orbit(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                new Orbit(\n                                                \
    \                                                                            \
    \                                                                            \
    \                                                    new Orbit(\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                new Orbit(\n                                                \
    \                                                                            \
    \                                                                            \
    \                                                            new Orbit(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                new Orbit(\n                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        new Orbit(\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmr547irk.scala:80:278 --------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                \e[33mnew\e[0m\
    \ \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\nexception occurred\
    \ while parser /tmp/tmpmr547irk.scala\nexception occurred while compiling /tmp/tmpmr547irk.scala\n\
    Exception in thread \"main\" java.lang.AssertionError: assertion failed: position\
    \ error, parent span does not contain child span\nparent      = \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[31mnull\e[0m) # -1,\nparent span = <10594..10604>,\nchild  \
    \     = \e[31mnull\e[0m # -1,\nchild span  = [10604..10609..10609]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat s"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\n\
    error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e\
    [0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n\
    \  )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n\
    \  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n      \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\n    \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n     \
    \   \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))))\n      )\n    )\n  )\n\
    )\nerror while checking \e[3"
  timestamp: 1660009598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", \"Venus\"),\n            Planet(\"Earth\", \"Mars\"),\n\
    \            Planet(\"Jupiter\", \"Saturn\"),\n            Planet(\"Uranus\",\
    \ \"Neptune\")\n        )\n        val planet1Orbit = planets.find(_.name == planet1).getOrElse(throw\
    \ new IllegalArgumentException(\"Planet \" + planet1 + \" does not exist\"))\n\
    \        val planet2Orbit = planets.find(_.name == planet2).getOrElse(throw new\
    \ IllegalArgumentException(\"Planet \" + planet2 + \" does not exist\"))\n   \
    \     val sunOrbit = Planet(\"Sun\", \"Earth\")\n        val sunOrbitDistance\
    \ = planet1Orbit.orbit(sunOrbit).distanceTo(planet2Orbit.orbit(sunOrbit))\n  \
    \      val planet1OrbitDistance = planet1Orbit.orbit(planet2Orbit).distanceTo(sunOrbit)\n\
    \        val planet2OrbitDistance = planet2Orbit.orbit(sunOrbit).distanceTo(planet1Orbit.orbit(sunOrbit))\n\
    \        val planet1OrbitDistanceAndPlanet2OrbitDistance = planet1OrbitDistance\
    \ + planet2OrbitDistance\n        val planet1OrbitDistanceAndSunOrbitDistance\
    \ = planet1OrbitDistance + sunOrbitDistance\n        val planet2OrbitDistanceAndSunOrbitDistance\
    \ = planet2OrbitDistance + sunOrbitDistance\n        val planet1OrbitDistanceAndSunOrbitDistanceAndPlanet2OrbitDistance\
    \ = planet1OrbitDistanceAndSunOrbitDistance + planet2OrbitDistanceAndSunOrbitDistance\n\
    \        val planet1OrbitDistanceAndSunOrbitDistanceAndPlanet2OrbitDistanceAndPlanet1OrbitDistanceAndPlanet2OrbitDistance\
    \ = planet1OrbitDistanceAndSunOrbitDistanceAndPlanet2OrbitDistance + planet1OrbitDistanceAndPlanet2OrbitDistanceAndPlanet1OrbitDistanceAndPlanet2OrbitDistance\n\
    \        val planet1OrbitDistanceAndSunOrbitDistanceAndPlanet2OrbitDistanceAndPlanet1OrbitDistanceAndPlanet2OrbitDistanceAndSunOrbitDistance\
    \ = planet1OrbitDistanceAndSunOrbitDistanceAndPlanet2OrbitDistanceAndPlanet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprwrv9o6n.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Venus\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprwrv9o6n.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m\"Mars\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprwrv9o6n.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m\"Saturn\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprwrv9o6n.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Uranus\"\e[0m, \e[31m\"Neptune\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmprwrv9o6n.scala:21:42 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mplanet1Orbit\e[0m = planets.find(_.name\
    \ == planet1).getOrElse(\e[33mthrow\e[0m \e[33mnew\e[0m \e[35mIllegalArgumentException\e\
    [0m(\e[31m\"Planet \"\e[0m + planet1 + \e[31m\" does not exist\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   value name is not a member of Nothing\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmprwrv9o6n.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mplanet2Orbit\e[0m = planets.find(_.name\
    \ == planet2).getOrElse(\e[33mth"
  stdout: ''
  timestamp: 1660009605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n  \
    \      )\n        val sun = Planet(\"Sun\", 0, 0)\n        val planet1Orbit =\
    \ planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit = planets.find(_.name\
    \ == planet2).getOrElse(sun)\n        val orbits = planets.filter(_.name < planet2\
    \ && _.name > planet1).map(_.orbit)\n        val proximity = orbits.map(x => math.abs(x\
    \ - planet1Orbit.orbit))\n        proximity.sortBy(x => x).reverse\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrasill_.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmrasill_.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrasill_.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmrasill_.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmrasill_.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrasill_.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available"
  stdout: ''
  timestamp: 1660009609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndVenus = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndJupiter = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndNeptune = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus =\
    \ List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n      \
    \  val planetsBetweenSunAndMercuryAndEarth = List(mercury, venus, earth, mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, ne\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9a3r4zxm.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector(0,0,0),\n                Vector(0,0,0),\n\
    \                Vector(0,0,0),\n                Vector(0,0,0),\n            \
    \    Vector(0,0,0),\n                Vector\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfi6rpdxh.scala:100:4 ---------------------------\e\
    [0m\e[0m\n\e[31m100 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfi6rpdxh.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfi6rpdxh.scala:16:30 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfi6rpdxh.scala:100:5 --------------------\e[0m\e\
    [0m\n\e[31m100 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m\
    \     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m    |\e\
    [0m\n\e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", 0, 0),\n            new Planet(\"Venus\", 0, 0),\n\
    \            new Planet(\"Earth\", 0, 0),\n            new Planet(\"Mars\", 0,\
    \ 0),\n            new Planet(\"Jupiter\", 0, 0),\n            new Planet(\"Saturn\"\
    , 0, 0),\n            new Planet(\"Uranus\", 0, 0),\n            new Planet(\"\
    Neptune\", 0, 0)\n        )\n        val sun = new Planet(\"Sun\", 0, Math.sqrt(Math.pow(Math.PI,\
    \ 2) / 6))\n        val planet1Orbit = planets.find(_.name == planet1).getOrElse(throw\
    \ new Exception(\"Planet \" + planet1 + \" not found\"))\n        val planet2Orbit\
    \ = planets.find(_.name == planet2).getOrElse(throw new Exception(\"Planet \"\
    \ + planet2 + \" not found\"))\n        val sunOrbit = planets.find(_.name ==\
    \ \"Sun\").getOrElse(throw new Exception(\"Planet \" + sun + \" not found\"))\n\
    \        val orbits = planets.filter(_.name != \"Sun\").map(p => p.orbit(sunOrbit))\n\
    \        val proximity = orbits.map(o => o.distance(planet1Orbit)).zip(orbits.map(o\
    \ => o.distance(planet2Orbit))).map(x => x._1 - x._2)\n        proximity.sortWith((x,\
    \ y) => x < y)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_kaey4w.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mercury\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type Planet\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_kaey4w.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_kaey4w.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_kaey4w.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_kaey4w.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_kaey4w.scala:21:16\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mnew\e[0m\
    \ \e[3"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planet1 = planets.find(_.toLowerCase == planet1.toLowerCase)\n\
    \        val planet2 = planets.find(_.toLowerCase == planet2.toLowerCase)\n  \
    \      if (planet1 == null || planet2 == null) {\n            return Nil\n   \
    \     }\n        val planet1Orbit = planets.find(_.toLowerCase == planet1.toLowerCase)\n\
    \        val planet2Orbit = planets.find(_.toLowerCase == planet2.toLowerCase)\n\
    \        if (planet1Orbit == null || planet2Orbit == null) {\n            return\
    \ Nil\n        }\n        val planet1OrbitOrbit = planets.find(_.toLowerCase ==\
    \ planet1.toLowerCase)\n        val planet2OrbitOrbit = planets.find(_.toLowerCase\
    \ == planet2.toLowerCase)\n        if (planet1OrbitOrbit == null || planet2OrbitOrbit\
    \ == null) {\n            return Nil\n        }\n        val planet1OrbitOrbitOrbit\
    \ = planets.find(_.toLowerCase == planet1.toLowerCase)\n        val planet2OrbitOrbitOrbit\
    \ = planets.find(_.toLowerCase == planet2.toLowerCase)\n        if (planet1OrbitOrbitOrbit\
    \ == null || planet2OrbitOrbitOrbit == null) {\n            return Nil\n     \
    \   }\n        val planet1OrbitOrbitOrbitOrbit = planets.find(_.toLowerCase ==\
    \ planet1.toLowerCase)\n        val planet2OrbitOrbitOrbitOrbit = planets.find(_.toLowerCase\
    \ == planet2.toLowerCase)\n        if (planet1OrbitOrbitOrbitOrbit == null ||\
    \ planet2OrbitOrbitOrbitOrbit == null) {\n            return Nil\n        }\n\
    \        val planet1OrbitOrbitOrbitOrbitOrbit = planets.find(_.toLowerCase ==\
    \ planet1.toLowerCase)\n        val planet2OrbitOrbitOrbitOrbit = planets.find(_.toLowerCase\
    \ == planet2.toLowerCase)\n        if (planet1OrbitOrbitOrbitOrbitOrbit == null\
    \ || planet2OrbitOrbitOrbitOrbitOrbit == null) {\n            return Nil\n   \
    \     }\n        val planet\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5yx0vq4g.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5yx0vq4g.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet2OrbitOrbitOrbitOrbit\e[0m = planets.find(_.toLowerCase == planet2.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2OrbitOrbitOrbitOrbit is already defined as \e[33mvalue\e\
    [0m \e[35mplanet2OrbitOrbitOrbitOrbit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5yx0vq4g.scala:16:52 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mplanet1\e[0m = planets.find(_.toLowerCase\
    \ == planet1.toLowerCase)\n\e[31m\e[31m   |\e[0m                             \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \        Recursive \e[33mvalue\e[0m \e[35mplanet1\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5yx0vq4g.scala:17:52 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mplanet2\e[0m = planets.find(_.toLowerCase\
    \ == planet2.toLowerCase)\n\e[31m\e[31m   |\e[0m                             \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \        Recursive \e[33mvalue\e[0m \e[35mplanet2\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5yx0vq4g.scala:21:65 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mplanet1Orbit\e[0m = planets.find(_.toLowerCase\
    \ == planet1.toLowerCase)\n\e[31m\e[31m   |\e[0m                             \
    \                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \              val"
  stdout: ''
  timestamp: 1660009609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Position(new Vector(0,0,0),\
    \ new Vector(0,0,0))),\n                new Position(new Vector(0,0,0), new Vector(0,0,0))),\n\
    \            new Planet(\"Venus\", new Orbit(\n                new Position(new\
    \ Vector(0,0,0), new Vector(0,0,0))),\n                new Position(new Vector(0,0,0),\
    \ new Vector(0,0,0))),\n            new Planet(\"Earth\", new Orbit(\n       \
    \         new Position(new Vector(0,0,0), new Vector(0,0,0))),\n             \
    \   new Position(new Vector(0,0,0), new Vector(0,0,0))),\n            new Planet(\"\
    Mars\", new Orbit(\n                new Position(new Vector(0,0,0), new Vector(0,0,0))),\n\
    \                new Position(new Vector(0,0,0), new Vector(0,0,0))),\n      \
    \      new Planet(\"Jupiter\", new Orbit(\n                new Position(new Vector(0,0,0),\
    \ new Vector(0,0,0))),\n                new Position(new Vector(0,0,0), new Vector(0,0,0))),\n\
    \            new Planet(\"Saturn\", new Orbit(\n                new Position(new\
    \ Vector(0,0,0), new Vector(0,0,0))),\n                new Position(new Vector(0,0,0),\
    \ new Vector(0,0,0))),\n            new Planet(\"Uranus\", new Orbit(\n      \
    \          new Position(new Vector(0,0,0), new Vector(0,0,0))),\n            \
    \    new Position(new Vector(0,0,0), new Vector(0,0,0))),\n            new Planet(\"\
    Neptune\", new Orbit(\n                new Position(new Vector(0,0,0), new Vector(0,0,0))),\n\
    \                new Position(new Vector(0,0,0), new Vector(0,0,0)))\n       \
    \ )\n        val planetsBetweenPlanets = planets.filter(_.name == planet1).filter(_.name\
    \ == planet2)\n        val planetsBetweenPlanetsSortedByProximity = planetsBetweenPlanets.sortBy(_.orbit.orbit.position.distanceTo(new\
    \ Vector(0,0,0)))\n        val planetsBetweenPlanetsSortedByProximityAndPlanetName\
    \ = planetsBetweenPlanetsSortedByProximity.map(_.name).filterNot(_.equals(planet1)).filterNot(_.equals(planet2))\n\
    \        planetsBetweenPlanetsSortedByProximityAndPlanetName\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph44h6m1a.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mercury\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph44h6m1a.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Venus\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \  Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph44h6m1a.scala:22:16 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Earth\"\e[0m, \e[33mnew\e\
    [0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmph44h6m1a.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mars\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: type Planet\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph44h6m1a.scala:28:16\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Jupiter\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph44h6m1a.scala:31:16 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        "
  stdout: ''
  timestamp: 1660009609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0.6, 6378137.0, 6356752.3142),\n            Planet(\"\
    Venus\", 0.6, 6378206.0, 6356752.3142),\n            Planet(\"Earth\", 1.0, 6378388.0,\
    \ 6356752.3142),\n            Planet(\"Mars\", 0.6, 6378206.0, 6356863.3972),\n\
    \            Planet(\"Jupiter\", 1.0, 6378245.0, 6356863.3972),\n            Planet(\"\
    Saturn\", 0.6, 6378165.0, 6356752.3142),\n            Planet(\"Uranus\", 0.6,\
    \ 6378158.0, 6356752.3142),\n            Planet(\"Neptune\", 0.6, 6378145.0, 6356752.3142)\n\
    \        )\n        val sun = Planet(\"Sun\", 0.0, 6371000., 6356752.3142)\n \
    \       val orbits = planets.map(p => (p.name, p.orbit))\n        val sunOrbit\
    \ = orbits.find(_._1 == sun._1).get._2\n        val sunOrbits = orbits.filter(p\
    \ => p._2 > sunOrbit).map(p => (p._1, p._2))\n        val planet1Orbit = orbits.find(_._1\
    \ == planet1._1).get._2\n        val planet2Orbit = orbits.find(_._1 == planet2._1).get._2\n\
    \        val planet1Orbits = orbits.filter(p => p._2 > planet1Orbit).map(p =>\
    \ (p._1, p._2))\n        val planet2Orbits = orbits.filter(p => p._2 > planet2Orbit).map(p\
    \ => (p._1, p._2))\n        val planet1OrbitsAndPlanet2Orbits = planet1Orbits.zip(planet2Orbits)\n\
    \        val planet1OrbitsAndPlanet2OrbitsAndSun = planet1OrbitsAndPlanet2Orbits.find(_._1\
    \ == sun._1).get._2\n        val planet1OrbitsAndPlanet2OrbitsAndSunAndPlanet1OrbitsAndPlanet2Orbits\
    \ = planet1OrbitsAndPlanet2Orbits.filter(p => p._2 > sunOrbit).map(p => (p._1,\
    \ p._2))\n        val planet\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq4co2g0.scala:25:45 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m, \e[31m0.0\e[0m, \e[31m6371000\e[0m., \e[31m6356752.3142\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                   an identifier expected, but ',' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq4co2g0.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq4co2g0.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m0.6\e[0m, \e[31m6378137.0\e[0m, \e[31m6356752.3142\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq4co2g0.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m0.6\e[0m, \e[31m6378206.0\e[0m, \e[31m6356752.3142\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq4co2g0.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m1.0\e[0m, \e[31m6378388.0\e[0m, \e[31m6356752.3142\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq4co2g0.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m0.6\e[0m, \e[31m6378206.0\e[0m, \e[31m6356863.3972\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planetsBetween = planets.filter(_.name\
    \ < planet2.name).filter(_.name > planet1.name)\n        val planetsBetweenSorted\
    \ = planetsBetween.sortWith((a, b) => a.distanceTo(planet2) < b.distanceTo(planet2))\n\
    \        val planetsBetweenSortedWithSun = planetsBetweenSorted.filter(_.distanceTo(Planet(\"\
    Sun\")) < Planet(\"Sun\").distanceTo(planet2))\n        planetsBetweenSortedWithSun.map(_.name).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvup8fd5v.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvup8fd5v.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpvup8fd5v.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvup8fd5v.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvup8fd5v.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpvup8fd5v.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpvup8fd5v.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars)\n        val planetsBetweenSunAndEarth = List(jupiter, saturn)\n     \
    \   val planetsBetweenSunAndMars = List(uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune, uranus)\n \
    \       val planetsBetweenSunAndNeptune = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune, mercury)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(neptune, mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus, mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth\
    \ = List(mars, jupiter, saturn)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranus)\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpofgdhwt4.scala:42:11 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpofgdhwt4.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpofgdhwt4.scala:17:22 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpofgdhwt4.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpofgdhwt4.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpofgdhwt4.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planetsBetween = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween2 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween3 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween4 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween5 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween6 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween7 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween8 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween9 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween10 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween11 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween12 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween13 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween14 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween15 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween16 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween17 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween18 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween19 = planets.filter(_.name\
    \ == plan\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsg3sgqa6.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsg3sgqa6.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsg3sgqa6.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(\n                Vector(\n                   \
    \ Vector(0.0, -1.0),\n                    Vector(0.0, 1.0)),\n               \
    \ Vector(0.0, 1.0)),\n            Planet(\"Venus\", Orbit(\n                Vector(\n\
    \                    Vector(0.0, 1.0),\n                    Vector(0.0, -1.0)),\n\
    \                Vector(0.0, 1.0)),\n            Planet(\"Earth\", Orbit(\n  \
    \              Vector(\n                    Vector(1.0, 0.0),\n              \
    \      Vector(0.0, 1.0)),\n                Vector(0.0, 1.0)),\n            Planet(\"\
    Mars\", Orbit(\n                Vector(\n                    Vector(-1.0, 0.0),\n\
    \                    Vector(0.0, 1.0)),\n                Vector(0.0, 1.0)),\n\
    \            Planet(\"Jupiter\", Orbit(\n                Vector(\n           \
    \         Vector(0.0, -1.0),\n                    Vector(1.0, 0.0)),\n       \
    \         Vector(0.0, 1.0)),\n            Planet(\"Saturn\", Orbit(\n        \
    \        Vector(\n                    Vector(0.0, 1.0),\n                    Vector(1.0,\
    \ 0.0)),\n                Vector(0.0, 1.0)),\n            Planet(\"Uranus\", Orbit(\n\
    \                Vector(\n                    Vector(1.0, 0.0),\n            \
    \        Vector(-1.0, 0.0)),\n                Vector(0.0, 1.0)),\n           \
    \ Planet(\"Neptune\", Orbit(\n                Vector(\n                    Vector(-1.0,\
    \ 0.0),\n                    Vector(0.0, -1.0)),\n                Vector(0.0,\
    \ 1.0))\n        )\n        val planetsBetween = planets.filter(_.name == planet1).filter(_.name\
    \ == planet2)\n        val planetsBetween2 = planets.filter(_.name == planet2).filter(_.name\
    \ == planet1)\n        val planetsBetween3 = planets.filter(_.name == planet1).filter(_.name\
    \ == planet2)\n        val planetsBetween4 = planets.filter(_.name == planet2).filter(_.name\
    \ == planet1)\n        val planetsBetween5 = planets.filter(_.name == planet1).filter(_.name\
    \ == planet2)\n        val planetsBetween6 = planets.filter(_.name == planet2).filter(_.name\
    \ == planet1)\n        val planetsBetween7 = planets.filter(_.name == planet1).filter(_.name\
    \ == planet2)\n        val planetsBetween8 = planets.filter(_.name == planet2).filter(_.name\
    \ == planet1)\n        val planetsBetween = planetsBetween.filter(_.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.orbit.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_uwl9qva.scala:57:8 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetween\e[0m = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\
    \e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp_uwl9qva.scala:16:12 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_uwl9qva.scala:16:30\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                              ^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_uwl9qva.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_uwl9qva.scala:21:28\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_uwl9qva.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Position(\n     \
    \               new Vector(\n                        new Vector(\n           \
    \                 new Vector(\n                                new Vector(\n \
    \                                   new Vector(\n                            \
    \            new Vector(\n                                            new Vector(\n\
    \                                                new Vector(\n               \
    \                                     new Vector(\n                          \
    \                              new Vector(\n                                 \
    \                           new Vector(\n                                    \
    \                            new Vector(\n                                   \
    \                                 new Vector(\n                              \
    \                                          new Vector(\n                     \
    \                                                       new Vector(\n        \
    \                                                                        new Vector(\n\
    \                                                                            \
    \        new Vector(\n                                                       \
    \                                 new Vector(\n                              \
    \                                                              new Vector(\n \
    \                                                                            \
    \                   new Vector(\n                                            \
    \                                                        new Vector(\n       \
    \                                                                            \
    \                     new Vector(\n                                          \
    \                                                                  new Vector(\n\
    \                                                                            \
    \                                    new Vector(\n                           \
    \                                                                            \
    \             new Vector(\n                                                  \
    \                                                                      new Vector(\n\
    \                                                                            \
    \                                                new Vector(\n               \
    \                                                                            \
    \                                     new Vector(\n                          \
    \                                                                            \
    \                              new Vector(\n                                 \
    \                                                                            \
    \                           new Vector(\n                                    \
    \                                                                            \
    \                            new Vector(\n                                   \
    \                                                                            \
    \                                 new Vector(\n                              \
    \                                                                            \
    \                                          new Vector(\n                     \
    \                                                                            \
    \                                                       new Vector(\n        \
    \                                                                            \
    \                                                                        new Vector(\n\
    \                                                                            \
    \                                                                            \
    \        new Vector(\n                                                       \
    \                                                                            \
    \                                 new Vector(\n                              \
    \                                                                            \
    \                                                              new Vector(\n \
    \                                                                            \
    \                                                                            \
    \                   new Vector(\n                                            \
    \                                                                            \
    \                                                        new Vector(\n       \
    \                                                                            \
    \                                                                            \
    \                     new Vector(\n                                          \
    \                                                                            \
    \                                                                  new Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                    new Vector(\n                           \
    \                                                                            \
    \                                                                            \
    \             new Vector(\n                                                  \
    \                                                                            \
    \                                                                      new Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                new Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     new Vector(\n                          \
    \                                                                            \
    \                                                                            \
    \                              new Vector(\n                                 \
    \                                                                            \
    \                                                                            \
    \                           new Vector(\n                                    \
    \                                                                            \
    \                                                                            \
    \                            new Vector(\n                                   \
    \                                                                            \
    \                                                                            \
    \                                 new Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                          new Vector(\n                     \
    \                                                                            \
    \                                                                            \
    \                                                       new Vector(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                        new Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        new Vector(\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                 new Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                                              new Vector(\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                   new Vector(\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                        new Vector(\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     new Vector(\n                                          \
    \                                                                            \
    \                                                                            \
    \                                                                  new Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    new Vector(\n                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             new Vector(\n                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                      new Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                new Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     new Vector(\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                              new Vector(\n                                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                           new Vector(\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            new Vector(\n                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 new Vector(\n                              \
    \                                                                            \
    \                      \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9jmjipfi.scala:87:307 --------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                \e[33mnew\e[0m \e[35mVector\e[0m(\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmp9jmjipfi.scala\n\
    exception occurred while compiling /tmp/tmp9jmjipfi.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mVector\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <12715..12726>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [12726..12860..12860]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.ru"
  stdout: "error while checking \e[33mnew \e[0m\e[35mVector\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e\
    [0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew \e[0m\e[35mVector\e[0m(\e\
    [33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[31mnull\e[0m)))\n\
    error while checking \e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e\
    [0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[31mnull\e\
    [0m))))\nerror while checking \e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e\
    [35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e\
    [0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[31mnull\e[0m)))))\nerror while checking\
    \ \e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew\
    \ \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e\
    [0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[31mnull\e[0m))))))\nerror while checking\
    \ \e[33mnew \e[0m\e[35mVector\e[0m(\n  \e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew\
    \ \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e\
    [0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[31mnull\e\
    [0m))))))\n)\nerror while checking \e[33mnew \e[0m\e[35mVector\e[0m(\n  \e[33mnew\
    \ \e[0m\e[35mVector\e[0m(\n    \e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e\
    [35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e\
    [0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[31mnull\e\
    [0m))))))\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mVector\e[0m(\n  \e\
    [33mnew \e[0m\e[35mVector\e[0m(\n    \e[33mnew \e[0m\e[35mVector\e[0m(\n     \
    \ \e[33mnew \e[0m\e[35mVector\e[0m(\n        \e[33mnew \e[0m\e[35mVector\e[0m(\e\
    [33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e\
    [35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[31mnull\e[0m)))))\n      )\n\
    \    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mVector\e[0m(\n  \e[33mnew\
    \ \e[0m\e[35mVector\e[0m(\n    \e[33mnew \e[0m\e[35mVector\e[0m(\n      \e[33mnew\
    \ \e[0m\e[35mVector\e[0m(\n        \e[33mnew \e[0m\e[35mVector\e[0m(\n       \
    \   \e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew\
    \ \e[0m\e[35mVector\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(\e[33mnew \e"
  timestamp: 1660009605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n  \
    \      )\n        val sun = Planet(\"Sun\", 0, 0)\n        val orbits = planets.map(p\
    \ => (p.name, p.orbit(sun)))\n        val orbits1 = orbits.filter(_._1 > 0)\n\
    \        val orbits2 = orbits.filter(_._1 < 0)\n        val orbits12 = orbits1.zip(orbits2)\n\
    \        val orbits121 = orbits12.filter(_._1 == _._2)\n        val orbits122\
    \ = orbits12.filter(_._2 == _._1)\n        val orbits123 = orbits12.filter(_._1\
    \ == _._2).filter(_._2 == _._1)\n        val orbits124 = orbits12.filter(_._1\
    \ == _._2).filter(_._2 == _._1).filter(_._3 == _._1)\n        val orbits125 =\
    \ orbits12.filter(_._1 == _._2).filter(_._2 == _._1).filter(_._3 == _._1).filter(_._4\
    \ == _._1)\n        val orbits126 = orbits12.filter(_._1 == _._2).filter(_._2\
    \ == _._1).filter(_._3 == _._1).filter(_._4 == _._1).filter(_._5 == _._1)\n  \
    \      val orbits127 = orbits12.filter(_._1 == _._2).filter(_._2 == _._1).filter(_._3\
    \ == _._1).filter(_._4 == _._1).filter(_._5 == _._1).filter(_._6 == _._1)\n  \
    \      val orbits128 = orbits12.filter(_._1 == _._2).filter(_._2 == _._1).filter(_._3\
    \ == _._1).filter(_._4 == _._1).filter(_._5 == _._1).filter(_._6 == _._1).filter(_._7\
    \ == _._1)\n        val orbits129 = orbits12.filter(_._1 == _._2).filter(_._2\
    \ == _._1).filter(_._3 == _._1).filter(_._4 == _._1).filter(_._5 == _._1).filter(_._6\
    \ == _._1).filter(_._7 == _._1).filter(_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpli6ljilv.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpli6ljilv.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpli6ljilv.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpli6ljilv.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpli6ljilv.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpli6ljilv.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpli6ljilv.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            "
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0.0, 0.0)),\n            Planet(\"Venus\", Vector(0.0,\
    \ 1.0)),\n            Planet(\"Earth\", Vector(1.0, 0.0)),\n            Planet(\"\
    Mars\", Vector(0.0, -1.0)),\n            Planet(\"Jupiter\", Vector(-1.0, 0.0)),\n\
    \            Planet(\"Saturn\", Vector(0.0, -1.0)),\n            Planet(\"Uranus\"\
    , Vector(1.0, 0.0)),\n            Planet(\"Neptune\", Vector(-1.0, 0.0))\n   \
    \     )\n        val sun = Planet(\"Sun\", Vector(0.0, 1.0))\n        val orbits\
    \ = planets.map(_.orbit(sun))\n        val planetsBetweenSunAndPlanet = orbits.filter(_.distance\
    \ < 1.0)\n        val planetsBetweenSunAndPlanetSorted = planetsBetweenSunAndPlanet.sortBy(_.distance)\n\
    \        val planetsBetweenSunAndPlanetSortedWithSun = planetsBetweenSunAndPlanetSorted.filter(_.distance\
    \ < 1.0)\n        val planetsBetweenSunAndPlanetSortedWithSunSorted = planetsBetweenSunAndPlanetSortedWithSun.sortBy(_.distance)\n\
    \        val planetsBetweenSunAndPlanetSortedWithSunSortedWithSun = planetsBetweenSunAndPlanetSortedWithSunSorted.filter(_.distance\
    \ < 1.0)\n        val planetsBetweenSunAndPlanetSortedWithSunSortedWithSunSorted\
    \ = planetsBetweenSunAndPlanetSortedWithSunSortedWithSun.sortBy(_.distance)\n\
    \        val planetsBetweenSunAndPlanetSortedWithSunSortedWithSunSortedWithSun\
    \ = planetsBetweenSunAndPlanetSortedWithSunSortedWithSunSorted.filter(_.distance\
    \ < 1.0)\n        val planetsBetweenSunAndPlanetSortedWithSunSortedWithSunSortedWithSunSorted\
    \ = planetsBetweenSunAndPlanetSortedWithSunSortedWithSunSorted.sortBy(_.distance)\n\
    \        val planetsBetweenSunAndPlanetSortedWithSunSortedWithSunSortedWithSunSortedWithSun\
    \ = planetsBetweenSunAndPlanetSortedWithSunSortedWithSunSortedWithSunSorted.filter(_.distance\
    \ < 1.0)\n        val planetsBetweenSunAndPlanetSortedWithSunSortedWithSunSortedWithSunSortedWithSunSorted\
    \ = planetsBetweenSunAndPlanetSortedWithSunSortedWithSunSortedWithSunSortedWithSun.sortBy(_.distance)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkpfn75l.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfkpfn75l.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Vector(\e[31m0.0\e\
    [0m, \e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfkpfn75l.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Vector(\e[31m1.0\e\
    [0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfkpfn75l.scala:19:12 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, Vector(\e[31m0.0\e\
    [0m, -\e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfkpfn75l.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, Vector(-\e[31m1.0\e\
    [0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfkpfn75l.scala:21:12 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m, Vector(\e[31m0.0\e\
    [0m, -\e[31m1.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m           "
  stdout: ''
  timestamp: 1660009613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1Orbit = orbit(planets, sun)\n        val planet2Orbit = orbit(planets,\
    \ sun)\n        val planet1OrbitToPlanet2 = planet1Orbit.zip(planet2Orbit).map\
    \ {\n            case (planet1Orbit, planet2Orbit) =>\n                val distance\
    \ = planet1Orbit.distance(planet2Orbit)\n                val planet1OrbitToPlanet2\
    \ = distance / planet1Orbit.radius\n                val planet1OrbitToPlanet1\
    \ = distance / planet2Orbit.radius\n                (planet1OrbitToPlanet1, planet1OrbitToPlanet2)\n\
    \        }\n        planet1OrbitToPlanet2.sortBy(_._1).reverse.map {\n       \
    \     case (planet1OrbitToPlanet1, planet1OrbitToPlanet2) =>\n               \
    \ planets.find(_.name == planet1).getOrElse(sun).orbit.find(_.name == planet2).getOrElse(sun).orbit\n\
    \        }.filter(_.name != sun).sortBy(_.name).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprm365q0v.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprm365q0v.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprm365q0v.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprm365q0v.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprm365q0v.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprm365q0v.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprm365q0v.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n  \
    \      )\n        val sun = Planet(\"Sun\", 0, 0)\n        val mercury = planets.find(_.name\
    \ == planet1).get\n        val venus = planets.find(_.name == planet2).get\n \
    \       val earth = planets.find(_.name == \"Earth\").get\n        val mars =\
    \ planets.find(_.name == \"Mars\").get\n        val jupiter = planets.find(_.name\
    \ == \"Jupiter\").get\n        val saturn = planets.find(_.name == \"Saturn\"\
    ).get\n        val uranus = planets.find(_.name == \"Uranus\").get\n        val\
    \ neptune = planets.find(_.name == \"Neptune\").get\n        val planet1Orbit\
    \ = mercury.orbit(sun)\n        val planet2Orbit = venus.orbit(sun)\n        val\
    \ planet1Orbit = earth.orbit(sun)\n        val planet2Orbit = mars.orbit(sun)\n\
    \        val planet1Orbit = jupiter.orbit(sun)\n        val planet2Orbit = saturn.orbit(sun)\n\
    \        val planet1Orbit = uranus.orbit(sun)\n        val planet2Orbit = neptune.orbit(sun)\n\
    \        val planet1Orbit = planet1Orbit.sortBy(_.distanceTo(sun))\n        val\
    \ planet2Orbit = planet2Orbit.sortBy(_.distanceTo(sun))\n        val planet1Orbit\
    \ = planet1Orbit.sortBy(_.distanceTo(sun))\n        val planet2Orbit = planet2Orbit.sortBy(_.distanceTo(sun))\n\
    \        val planet1Orbit = planet1Orbit.sortBy(_.distanceTo(sun))\n        val\
    \ planet2Orbit = planet2Orbit.sortBy(_.distanceTo(sun))\n        val planet1Orbit\
    \ = planet1Orbit.sortBy(_.distanceTo(sun))\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp_zq3cij.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mplanet1Orbit\e[0m = earth.orbit(sun)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mplanet1Orbit is already defined as \e[33mvalue\e[0m \e[35mplanet1Orbit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp_zq3cij.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mplanet2Orbit\e[0m = mars.orbit(sun)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mplanet2Orbit is already defined as \e[33mvalue\e[0m \e[35mplanet2Orbit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp_zq3cij.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mplanet1Orbit\e[0m = jupiter.orbit(sun)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mplanet1Orbit is already defined as \e[33mvalue\e[0m \e[35mplanet1Orbit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp_zq3cij.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mplanet2Orbit\e[0m = saturn.orbit(sun)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mplanet2Orbit is already defined as \e[33mvalue\e[0m \e[35mplanet2Orbit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp_zq3cij.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mplanet1Orbit\e[0m = uranus.orbit(sun)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mplanet1Orbit is a"
  stdout: ''
  timestamp: 1660009617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(planet => (planet, planet.orbit(sun)))\n        val orbitsBetweenPlanets\
    \ = orbits.filter(orbit => orbit._2._1.name == planet1 && orbit._2._2.name ==\
    \ planet2)\n        val proximity = orbitsBetweenPlanets.map(orbit => (orbit._2._1.name,\
    \ orbit._2._2.name, orbit._2._1.distance(orbit._2._2.name)))\n        proximity.sortBy(_._3).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5zjqfah.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5zjqfah.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj5zjqfah.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5zjqfah.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5zjqfah.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj5zjqfah.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5zjqfah.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planet1 = planets.find(_.toUpperCase == planet1.toUpperCase).getOrElse(\"\
    \")\n        val planet2 = planets.find(_.toUpperCase == planet2.toUpperCase).getOrElse(\"\
    \")\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\"\
    )\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\"\
    )\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetween = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetween2\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetween3 = List(mercury, venus, earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetween4 = List(mercury, venus, earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetween5 = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetween6\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetween7 = List(mercury, venus, earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetween8 = List(mercury, venus, earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetween9 = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetween10\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetween11 = List(mercur\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm_xmmp1c.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm_xmmp1c.scala:16:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1\e[0m = planets.find(_.toUpperCase == planet1.toUpperCase).getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \            ^\e[0m\n\e[31m   |\e[0m                                      Recursive\
    \ \e[33mvalue\e[0m \e[35mplanet1\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpm_xmmp1c.scala:17:52 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mplanet2\e[0m = planets.find(_.toUpperCase\
    \ == planet2.toUpperCase).getOrElse(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \                                   Recursive \e[33mvalue\e[0m \e[35mplanet2\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_xmmp1c.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_xmmp1c.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpm_xmmp1c.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvenus"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Planet(\"Venus\"\
    , new Orbit(\n                    new Planet(\"Earth\", new Orbit(\n         \
    \               new Planet(\"Mars\", new Orbit(\n                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                new Planet(\"\
    Saturn\", new Orbit(\n                                    new Planet(\"Uranus\"\
    , new Orbit(\n                                        new Planet(\"Neptune\",\
    \ new Orbit(\n                                            new Planet(\"Mercury\"\
    , new Orbit(\n                                                new Planet(\"Venus\"\
    , new Orbit(\n                                                    new Planet(\"\
    Earth\", new Orbit(\n                                                        new\
    \ Planet(\"Mars\", new Orbit(\n                                              \
    \              new Planet(\"Jupiter\", new Orbit(\n                          \
    \                                      new Planet(\"Saturn\", new Orbit(\n   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                 new Planet(\"Neptune\", new Orbit(\n                       \
    \                                                     new Planet(\"Mercury\",\
    \ new Orbit(\n                                                               \
    \                 new Planet(\"Venus\", new Orbit(\n                         \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                         new Planet(\"Mars\", new Orbit(\n                  \
    \                                                                          new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                                                     new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                 new Planet(\"Uranus\", new Orbit(\n        \
    \                                                                            \
    \                    new Planet(\"Neptune\", new Orbit(\n                    \
    \                                                                            \
    \            new Planet(\"Mercury\", new Orbit(\n                            \
    \                                                                            \
    \        new Planet(\"Venus\", new Orbit(\n                                  \
    \                                                                            \
    \      new Planet(\"Earth\", new Orbit(\n                                    \
    \                                                                            \
    \        new Planet(\"Mars\", new Orbit(\n                                   \
    \                                                                            \
    \             new Planet(\"Jupiter\", new Orbit(\n                           \
    \                                                                            \
    \                         new Planet(\"Saturn\", new Orbit(\n                \
    \                                                                            \
    \                                        new Planet(\"Uranus\", new Orbit(\n \
    \                                                                            \
    \                                                           new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \ new Planet(\"Mercury\", new Orbit(\n                                       \
    \                                                                            \
    \                             new Planet(\"Venus\", new Orbit(\n             \
    \                                                                            \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \             new Planet(\"Mars\", new Orbit(\n                              \
    \                                                                            \
    \                                                  \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo3cbgq1s.scala:51:181 --------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpo3cbgq1s.scala\n\
    exception occurred while compiling /tmp/tmpo3cbgq1s.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <4838..4848>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [4848..5010..5010]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0))),\n\
    \            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,0), Vector(0,0,0)))\n\
    \        )\n        val sun = Planet(\"Sun\", Orbit(Vector(0,0,0), Vector(0,0,0),\
    \ Vector(0,0,0)))\n        val orbits = planets.map(_.orbit)\n        val sunOrbit\
    \ = sun.orbit\n        val sunOrbits = orbits.map(_.orbit)\n        val planet1Orbit\
    \ = planets.find(_.name == planet1).map(_.orbit).getOrElse(sunOrbit)\n       \
    \ val planet2Orbit = planets.find(_.name == planet2).map(_.orbit).getOrElse(sunOrbit)\n\
    \        val planet1Orbits = orbits.filter(_.orbit == planet1Orbit)\n        val\
    \ planet2Orbits = orbits.filter(_.orbit == planet2Orbit)\n        val planet1OrbitsAndPlanet2Orbits\
    \ = planet1Orbits.zip(planet2Orbits)\n        val planet1OrbitsAndPlanet2OrbitsAndSunOrbits\
    \ = planet1OrbitsAndPlanet2Orbits.filter(_.orbit == sunOrbit)\n        val planet1OrbitsAndPlanet2OrbitsAndSunOrbitsAndPlanet1OrbitsAndPlanet2OrbitsAndSunOrbits\
    \ = planet1OrbitsAndPlanet2OrbitsAndSunOrbits.filter(_.orbit == planet1Orbit)\n\
    \        val planet1OrbitsAndPlanet2OrbitsAndSunOrbit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0wm77mgg.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wm77mgg.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e\
    [0m))),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wm77mgg.scala:16:30\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e\
    [0m))),\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: Orbit\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wm77mgg.scala:17:12 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m))),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wm77mgg.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m))),\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available "
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1 = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name\
    \ == planet2).get\n        val orbit1 = planet1.orbit(sun)\n        val orbit2\
    \ = planet2.orbit(sun)\n        val orbits = List(orbit1, orbit2)\n        val\
    \ proximities = orbits.map(_.distance(sun))\n        proximities.sortBy(_.toDouble).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k97l9wr.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k97l9wr.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2k97l9wr.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k97l9wr.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k97l9wr.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2k97l9wr.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2k97l9wr.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Planet(\"Venus\"\
    , new Orbit(\n                    new Planet(\"Earth\", new Orbit(\n         \
    \               new Planet(\"Mars\", new Orbit(\n                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                new Planet(\"\
    Saturn\", new Orbit(\n                                    new Planet(\"Uranus\"\
    , new Orbit(\n                                        new Planet(\"Neptune\",\
    \ new Orbit(\n                                            new Planet(\"Mercury\"\
    , new Orbit(\n                                                new Planet(\"Venus\"\
    , new Orbit(\n                                                    new Planet(\"\
    Earth\", new Orbit(\n                                                        new\
    \ Planet(\"Mars\", new Orbit(\n                                              \
    \              new Planet(\"Jupiter\", new Orbit(\n                          \
    \                                      new Planet(\"Saturn\", new Orbit(\n   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                 new Planet(\"Neptune\", new Orbit(\n                       \
    \                                                     new Planet(\"Mercury\",\
    \ new Orbit(\n                                                               \
    \                 new Planet(\"Venus\", new Orbit(\n                         \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                         new Planet(\"Mars\", new Orbit(\n                  \
    \                                                                          new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                                                     new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                 new Planet(\"Uranus\", new Orbit(\n        \
    \                                                                            \
    \                    new Planet(\"Neptune\", new Orbit(\n                    \
    \                                                                            \
    \            new Planet(\"Mercury\", new Orbit(\n                            \
    \                                                                            \
    \        new Planet(\"Venus\", new Orbit(\n                                  \
    \                                                                            \
    \      new Planet(\"Earth\", new Orbit(\n                                    \
    \                                                                            \
    \        new Planet(\"Mars\", new Orbit(\n                                   \
    \                                                                            \
    \             new Planet(\"Jupiter\", new Orbit(\n                           \
    \                                                                            \
    \                         new Planet(\"Saturn\", new Orbit(\n                \
    \                                                                            \
    \                                        new Planet(\"Uranus\", new Orbit(\n \
    \                                                                            \
    \                                                           new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \ new Planet(\"Mercury\", new Orbit(\n                                       \
    \                                                                            \
    \                             new Planet(\"Venus\", new Orbit(\n             \
    \                                                                            \
    \                                                           new Planet(\"Earth\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \             new Planet(\"Mars\", new Orbit(\n                              \
    \                                                                            \
    \                                                  \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo3cbgq1s.scala:51:181 --------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpo3cbgq1s.scala\n\
    exception occurred while compiling /tmp/tmpo3cbgq1s.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <4838..4848>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [4848..5010..5010]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsOrbits = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits1 = planetsOrbits.filter(x => x._1 == planet1)\n   \
    \     val planetsOrbits2 = planetsOrbits.filter(x => x._1 == planet2)\n      \
    \  val planetsOrbits12 = planetsOrbits1 ++ planetsOrbits2\n        val planetsOrbits121\
    \ = planetsOrbits12 ++ planetsOrbits12\n        val planetsOrbits1212 = planetsOrbits121\
    \ ++ planetsOrbits121\n        val planetsOrbits12121 = planetsOrbits1212 ++ planetsOrbits12121\n\
    \        val planetsOrbits121212 = planetsOrbits12121 ++ planetsOrbits12121\n\
    \        val planetsOrbits1212121 = planetsOrbits121212 ++ planetsOrbits1212121\n\
    \        val planetsOrbits12121212 = planetsOrbits1212121 ++ planetsOrbits1212121\n\
    \        val planetsOrbits121212121 = planetsOrbits12121212 ++ planetsOrbits1212121\n\
    \        val planetsOrbits1212121212 = planetsOrbits121212121 ++ planetsOrbits121212121\n\
    \        val planetsOrbits12121212121 = planetsOrbits1212121212 ++ planetsOrbits121212121\n\
    \        val planetsOrbits12121212121 = planetsOrbits1212121212 ++ planetsOrbits121212121\n\
    \        val planetsOrbits121212121212 = planetsOrbits12121212121 ++ planetsOrbits12121212121\n\
    \        val planetsOrbits1212121212121 = planetsOrbits121212121212 ++ planetsOrbits12121212121\n\
    \        val planetsOrbits\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdex_v5nr.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdex_v5nr.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsOrbits12121212121\e[0m = planetsOrbits1212121212 ++ planetsOrbits121212121\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsOrbits12121212121 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsOrbits12121212121\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdex_v5nr.scala:22:54 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mplanetsOrbits12121\e[0m\
    \ = planetsOrbits1212 ++ planetsOrbits12121\n\e[31m\e[31m   |\e[0m           \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                 Recursive \e[33mvalue\e[0m \e[35mplanetsOrbits12121\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdex_v5nr.scala:24:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsOrbits1212121\e[0m = planetsOrbits121212 ++ planetsOrbits1212121\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m\
    \ \e[35mplanetsOrbits1212121\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdex_v5nr.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n            \"Uranus\"\
    , \"Neptune\")\n        val planet1 = planets.find(planet => planet.equals(planet1))\n\
    \        val planet2 = planets.find(planet => planet.equals(planet2))\n      \
    \  val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n    \
    \    val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n  \
    \      val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n\
    \        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planet1Orbit = Orbit(mercury,\
    \ sun)\n        val planet2Orbit = Orbit(venus, sun)\n        val planet1Orbit2\
    \ = Orbit(mars, sun)\n        val planet2Orbit2 = Orbit(jupiter, sun)\n      \
    \  val planet1Orbit3 = Orbit(saturn, sun)\n        val planet2Orbit3 = Orbit(uranus,\
    \ sun)\n        val planet1Orbit4 = Orbit(neptune, sun)\n        val planet2Orbit4\
    \ = Orbit(earth, sun)\n        val planet1Orbit5 = Orbit(mercury, venus)\n   \
    \     val planet2Orbit5 = Orbit(mars, jupiter)\n        val planet1Orbit6 = Orbit(venus,\
    \ earth)\n        val planet2Orbit6 = Orbit(jupiter, mars)\n        val planet1Orbit7\
    \ = Orbit(mars, saturn)\n        val planet2Orbit7 = Orbit(jupiter, uranus)\n\
    \        val planet1Orbit8 = Orbit(saturn, neptune)\n        val planet2Orbit8\
    \ = Orbit(uranus, earth)\n        val planet1Orbit9 = Orbit(neptune, mercury)\n\
    \        val planet2Orbit9 = Orbit(earth, mars)\n        val planet1Orbit10 =\
    \ Orbit(venus, mars)\n        val planet2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptymkhpx9.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptymkhpx9.scala:17:59\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1\e[0m = planets.find(\e[36mplanet\e[0m => planet.equals(planet1))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^\e[0m\n\e[31m   |\e[0m                                      Recursive \e\
    [33mvalue\e[0m \e[35mplanet1\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmptymkhpx9.scala:18:59 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mplanet2\e[0m = planets.find(\e\
    [36mplanet\e[0m => planet.equals(planet2))\n\e[31m\e[31m   |\e[0m            \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                Recursive \e[33mvalue\e[0m \e[35mplanet2\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptymkhpx9.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptymkhpx9.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptymkhpx9.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Ve"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars)\n        val planetsBetweenSunAndEarth = List(jupiter, saturn)\n     \
    \   val planetsBetweenSunAndMars = List(uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune, uranus)\n \
    \       val planetsBetweenSunAndNeptune = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3y8kiiut.scala:43:54 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndVenusAndSaturn\e\
    [0m = List(\n\e[31m\e[31m   |\e[0m                                           \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3y8kiiut.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmercury\e[0m = Planet(\e[31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mvenus\e[0m = Planet(\e[31m\"Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mearth\e[0m = Planet(\e[31m\"Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmars\e[0m = P"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1 = planets.find(_.name == planet1).getOrElse(throw new Exception(\"Planet\
    \ \" + planet1 + \" not found\"))\n        val planet2 = planets.find(_.name ==\
    \ planet2).getOrElse(throw new Exception(\"Planet \" + planet2 + \" not found\"\
    ))\n        val sunOrbit = Planet(\"Sun\").orbit(planet1)\n        val planet1Orbit\
    \ = planet1.orbit(planet2)\n        val planet2Orbit = planet2.orbit(planet1)\n\
    \        val planet1OrbitToSun = planet1Orbit.minus(sunOrbit)\n        val planet2OrbitToSun\
    \ = planet2Orbit.minus(sunOrbit)\n        val planet1OrbitToPlanet2 = planet1Orbit.minus(planet2Orbit)\n\
    \        val planet2OrbitToPlanet2 = planet2Orbit.minus(planet1Orbit)\n      \
    \  val planet1OrbitToPlanet1 = planet1Orbit.minus(planet2OrbitToSun)\n       \
    \ val planet2OrbitToPlanet1 = planet2Orbit.minus(planet1OrbitToSun)\n        val\
    \ planet1OrbitToPlanet2 = planet1Orbit.minus(planet2OrbitToPlanet1)\n        val\
    \ planet2OrbitToPlanet1 = planet2Orbit.minus(planet1OrbitToPlanet2)\n        val\
    \ planet1OrbitToPlanet1 = planet1Orbit.minus(planet2OrbitToPlanet2)\n        val\
    \ planet2OrbitToPlanet1 = planet2Orbit.minus(planet1OrbitToPlanet1)\n        val\
    \ planet1OrbitToPlanet2 = planet1Orbit.minus(planet2OrbitToPlanet1)\n        val\
    \ planet2OrbitToPlanet2 = planet2Or\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgj698f3g.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitToPlanet2\e\
    [0m = planet1Orbit.minus(planet2OrbitToPlanet1)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mplanet1OrbitToPlanet2 is already defined as \e[33mvalue\e[0m \e\
    [35mplanet1OrbitToPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgj698f3g.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitToPlanet1\e\
    [0m = planet2Orbit.minus(planet1OrbitToPlanet2)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mplanet2OrbitToPlanet1 is already defined as \e[33mvalue\e[0m \e\
    [35mplanet2OrbitToPlanet1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgj698f3g.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitToPlanet1\e\
    [0m = planet1Orbit.minus(planet2OrbitToPlanet2)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mplanet1OrbitToPlanet1 is already defined as \e[33mvalue\e[0m \e\
    [35mplanet1OrbitToPlanet1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgj698f3g.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitToPlanet1\e\
    [0m = planet2Orbit.minus(planet1OrbitToPlanet1)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mplanet2OrbitToPlanet1 is already defined as \e[33mvalue\e[0m \e\
    [35mplanet2OrbitToPlanet1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ me"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n            \"Uranus\"\
    , \"Neptune\")\n        val planetsOrbits = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits2 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits3 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits4 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits5 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits6 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits7 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits8 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits9 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits10 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits11 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits12 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits13 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits14 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits15 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits16 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits17 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val planetsOrbits18 = planets.map(planet => (planet, planets.indexOf(planet)))\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpn8co3m75.scala:35:11 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn8co3m75.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(0.0, 0.0)),\n            new Planet(\"\
    Venus\", new Orbit(0.0, 1.0)),\n            new Planet(\"Earth\", new Orbit(1.0,\
    \ 0.0)),\n            new Planet(\"Mars\", new Orbit(1.0, 1.0)),\n           \
    \ new Planet(\"Jupiter\", new Orbit(2.0, 0.0)),\n            new Planet(\"Saturn\"\
    , new Orbit(2.0, 1.0)),\n            new Planet(\"Uranus\", new Orbit(3.0, 0.0)),\n\
    \            new Planet(\"Neptune\", new Orbit(3.0, 1.0))\n        )\n       \
    \ val planet1Orbit = planets.find(_.name == planet1).getOrElse(throw new IllegalArgumentException(\"\
    Planet \" + planet1 + \" not found\")).orbit\n        val planet2Orbit = planets.find(_.name\
    \ == planet2).getOrElse(throw new IllegalArgumentException(\"Planet \" + planet2\
    \ + \" not found\")).orbit\n        val sunOrbit = planets.find(_.name == \"Sun\"\
    ).getOrElse(throw new IllegalArgumentException(\"Planet Sun not found\")).orbit\n\
    \        val orbits = planets.map(_.orbit)\n        val sunOrbits = orbits.filter(_.name\
    \ == \"Sun\")\n        val planet1Orbits = orbits.filter(_.name == planet1)\n\
    \        val planet2Orbits = orbits.filter(_.name == planet2)\n        val sunOrbits\
    \ = orbits.filter(_.name == \"Sun\")\n        val planet1Orbits = orbits.filter(_.name\
    \ == planet1)\n        val planet2Orbits = orbits.filter(_.name == planet2)\n\
    \        val sunOrbits = orbits.filter(_.name == \"Sun\")\n        val planet1Orbits\
    \ = orbits.filter(_.name == planet1)\n        val planet2Orbits = orbits.filter(_.name\
    \ == planet2)\n        val sunOrbits = orbits.filter(_.name == \"Sun\")\n    \
    \    val planet1Orbits = orbits.filter(_.name == planet1)\n        val planet2Orbits\
    \ = orbits.filter(_.name == planet2)\n        val sunOrbits = orbits.filter(_.name\
    \ == \"Sun\")\n        val planet1Orbits = orbits.filter(_.name == planet1)\n\
    \        val planet2Orbits = orbits.filter(_.name == planet2)\n        val sunOrbits\
    \ = orbits.filter(_.name == \"Sun\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp__ilii23.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = orbits.filter(_.name\
    \ == \e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbits is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp__ilii23.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mplanet1Orbits\e[0m = orbits.filter(_.name\
    \ == planet1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1Orbits is already defined as \e[33mvalue\e[0m \e[35mplanet1Orbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp__ilii23.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mplanet2Orbits\e[0m = orbits.filter(_.name\
    \ == planet2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2Orbits is already defined as \e[33mvalue\e[0m \e[35mplanet2Orbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp__ilii23.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = orbits.filter(_.name\
    \ == \e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbits is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp__ilii23.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mplanet1Orbits\e[0"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n            Planet(\"\
    Venus\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n            Planet(\"Earth\", Vector(0.0,\
    \ 0.0), Vector(0.0, 0.0)),\n            Planet(\"Mars\", Vector(0.0, 0.0), Vector(0.0,\
    \ 0.0)),\n            Planet(\"Jupiter\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n\
    \            Planet(\"Saturn\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n       \
    \     Planet(\"Uranus\", Vector(0.0, 0.0), Vector(0.0, 0.0)),\n            Planet(\"\
    Neptune\", Vector(0.0, 0.0), Vector(0.0, 0.0))\n        )\n        val sun = Planet(\"\
    Sun\", Vector(0.0, 0.0), Vector(0.0, 0.0))\n        val orbits = planets.map(_.orbit(sun))\n\
    \        val proximity = orbits.map(_.map(_.distanceTo(sun))).sum\n        val\
    \ planetsBetween = proximity / orbits.map(_.length).sum\n        planets.filter(_.orbit(sun).contains(planet1)\
    \ && \n            _.orbit(sun).contains(planet2)).sortBy(_.orbit(sun).map(_.distanceTo(sun))).take(planetsBetween)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_r02keda.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Vector(\e\
    [31m0.0\e[0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_r02keda.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m, \e\
    [31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_r02keda.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m, Vector(\e[31m0.0\e[0m, \e[31m0.0\e\
    [0m), Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_r02keda.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, Vector(\e[31m0.0\e\
    [0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m)),\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_r02keda.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m, Vector(\e[31m0.0\e[0m, \e[31m0.0\e[0m), Vector(\e[31m0.0\e[0m,\
    \ \e[31m0.0\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_r02keda.scala:21:12 ---------"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planet1Orbit = planets.find(_.name\
    \ == planet1).getOrElse(throw new Exception(\"Planet \" + planet1 + \" not found\"\
    ))\n        val planet2Orbit = planets.find(_.name == planet2).getOrElse(throw\
    \ new Exception(\"Planet \" + planet2 + \" not found\"))\n        val sunOrbit\
    \ = Planet(\"Sun\")\n        val orbits = planets.map(p => (p, p.orbit(planet1Orbit,\
    \ planet2Orbit)))\n        val sunOrbits = orbits.filter(_.name == sunOrbit.name)\n\
    \        val sunOrbitDistances = sunOrbits.map(o => o.distanceTo(sunOrbit))\n\
    \        val sunOrbitDistance = sunOrbitDistances.min\n        val planet1OrbitDistances\
    \ = orbits.filter(_.name == planet1Orbit.name)\n        val planet1OrbitDistance\
    \ = planet1OrbitDistances.map(o => o.distanceTo(planet1Orbit))\n        val planet2OrbitDistances\
    \ = orbits.filter(_.name == planet2Orbit.name)\n        val planet2OrbitDistance\
    \ = planet2OrbitDistances.map(o => o.distanceTo(planet2Orbit))\n        val planet1OrbitDistance\
    \ = planet1OrbitDistance.min\n        val planet2OrbitDistance = planet2OrbitDistance.min\n\
    \        val planet1OrbitDistanceToSun = planet1OrbitDistance - sunOrbitDistance\n\
    \        val planet2OrbitDistanceToSun = planet2OrbitDistance - sunOrbitDistance\n\
    \        val planet1OrbitDistanceToPlanet2 = planet1OrbitDistance - planet2OrbitDistance\n\
    \        val planet2OrbitDistanceToPlanet2 = planet2OrbitDistance - planet1OrbitDistance\n\
    \        val planet1OrbitDistanceToPlanet1 = planet1OrbitDistance - planet1OrbitDistanceToSun\n\
    \        val planet2OrbitDistanceToPlanet1 = plan\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00go88o2.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitDistance\e[0m\
    \ = planet1OrbitDistance.min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitDistance is already defined as \e[33mvalue\e[0m\
    \ \e[35mplanet1OrbitDistance\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp00go88o2.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitDistance\e[0m\
    \ = planet2OrbitDistance.min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2OrbitDistance is already defined as \e[33mvalue\e[0m\
    \ \e[35mplanet2OrbitDistance\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp00go88o2.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp00go88o2.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp00go88o2.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp00go88o2.scala:19:12 ------------------------\e\
    [0m\e[0m"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n  \
    \      )\n        val sun = Planet(\"Sun\", 0, 0) \n        val mercury = planets.find(_.name\
    \ == planet1).get\n        val venus = planets.find(_.name == planet2).get\n \
    \       val earth = planets.find(_.name == \"Earth\").get\n        val mars =\
    \ planets.find(_.name == \"Mars\").get\n        val jupiter = planets.find(_.name\
    \ == \"Jupiter\").get\n        val saturn = planets.find(_.name == \"Saturn\"\
    ).get\n        val uranus = planets.find(_.name == \"Uranus\").get\n        val\
    \ neptune = planets.find(_.name == \"Neptune\").get\n        val planet1Orbit\
    \ = sun.orbit(mercury)\n        val planet2Orbit = sun.orbit(venus)\n        val\
    \ planet1OrbitDistance = planet1Orbit.distanceTo(sun)\n        val planet2OrbitDistance\
    \ = planet2Orbit.distanceTo(sun)\n        val planet1OrbitDistance2 = planet1Orbit.distanceTo(earth)\n\
    \        val planet2OrbitDistance2 = planet2Orbit.distanceTo(earth)\n        val\
    \ planet1OrbitDistance3 = planet1Orbit.distanceTo(mars)\n        val planet2OrbitDistance3\
    \ = planet2Orbit.distanceTo(mars)\n        val planet1OrbitDistance4 = planet1Orbit.distanceTo(jupiter)\n\
    \        val planet2OrbitDistance4 = planet2Orbit.distanceTo(jupiter)\n      \
    \  val planet1OrbitDistance5 = planet1Orbit.distanceTo(saturn)\n        val planet2OrbitDistance5\
    \ = planet2Orbit.distanceTo(saturn)\n        val planet1OrbitDistance6 = planet1Orbit.distanceTo(uranus)\n\
    \        val planet2OrbitDistance6 = planet2Orbit.distanceTo(uranus)\n       \
    \ val \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppqgm08lf.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppqgm08lf.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppqgm08lf.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppqgm08lf.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppqgm08lf.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppqgm08lf.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E00"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", 0),\n            new Planet(\"Venus\", 1),\n    \
    \        new Planet(\"Earth\", 2),\n            new Planet(\"Mars\", 3),\n   \
    \         new Planet(\"Jupiter\", 4),\n            new Planet(\"Saturn\", 5),\n\
    \            new Planet(\"Uranus\", 6),\n            new Planet(\"Neptune\", 7)\n\
    \        )\n        val sun = new Planet(\"Sun\", 8)\n        val orbits = planets.map(_.orbit(sun))\n\
    \        val proximity = orbits.map(_.distanceTo(sun))\n        proximity.sortBy(_.abs)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi1o54olx.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mercury\"\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: type Planet\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi1o54olx.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: type Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpi1o54olx.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Earth\"\e[0m, \e[31m2\e[0m),\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: type Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpi1o54olx.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: type Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpi1o54olx.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Jupiter\"\e[0m, \e[31m4\e[0m),\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: type Planet\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi1o54olx.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Saturn\"\e[0m, \e[31m5\e[0m),\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1660009623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ planet1Orbit = orbit(planet1, sun)\n        val planet2Orbit = orbit(planet2,\
    \ sun)\n        val planet1OrbitAndPlanet2Orbit = planet1Orbit + planet2Orbit\n\
    \        val planet1OrbitAndPlanet2OrbitSorted = planet1OrbitAndPlanet2Orbit.sortBy(x\
    \ => x.distanceTo(sun))\n        val planet1OrbitAndPlanet2OrbitSortedWithPlanet1\
    \ = planet1OrbitAndPlanet2OrbitSorted.filter(x => x.name == planet1)\n       \
    \ val planet1OrbitAndPlanet2OrbitSortedWithPlanet2 = planet1OrbitAndPlanet2OrbitSorted.filter(x\
    \ => x.name == planet2)\n        val planet1OrbitAndPlanet2OrbitSortedWithPlanet1AndPlanet2\
    \ = planet1OrbitAndPlanet2OrbitSorted.filter(x => x.name == planet1 && x.name\
    \ == planet2)\n        val planet1OrbitAndPlanet2OrbitSortedWithPlanet1AndPlanet2AndPlanet1\
    \ = planet1OrbitAndPlanet2OrbitSorted.filter(x => x.name == planet1 && x.name\
    \ == planet2 && x.name == planet1)\n        val planet1OrbitAndPlanet2OrbitSortedWithPlanet1AndPlanet2AndPlanet1AndPlanet2\
    \ = planet1OrbitAndPlanet2OrbitSorted.filter(x => x.name == planet1 && x.name\
    \ == planet2 && x.name == planet1 && x.name == planet2)\n        val planet1OrbitAndPlanet2OrbitSortedWithPlanet1AndPlanet2AndPlanet1AndPlanet2AndPlanet1\
    \ = planet1OrbitAndPlanet2OrbitSorted.filter(x => x.name == planet1 && x.name\
    \ == planet2 && x.name == planet1 && x.name == planet2 && x.name == planet1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsu5ndtt8.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsu5ndtt8.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsu5ndtt8.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsu5ndtt8.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsu5ndtt8.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsu5ndtt8.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsu5ndtt8.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars)\n        val planetsBetweenSunAndEarth = List(jupiter, saturn)\n     \
    \   val planetsBetweenSunAndMars = List(uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune, uranus)\n \
    \       val planetsBetweenSunAndNeptune = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3y8kiiut.scala:43:54 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndVenusAndSaturn\e\
    [0m = List(\n\e[31m\e[31m   |\e[0m                                           \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3y8kiiut.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmercury\e[0m = Planet(\e[31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mvenus\e[0m = Planet(\e[31m\"Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mearth\e[0m = Planet(\e[31m\"Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmars\e[0m = P"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n  \
    \      )\n        val sun = Planet(\"Sun\", 0, 0) // the sun is located at position\
    \ 0,0\n        val sunOrbit = Orbit(sun)\n        val planet1Orbit = Orbit(planets.find(_.name\
    \ == planet1).get)\n        val planet2Orbit = Orbit(planets.find(_.name == planet2).get)\n\
    \        val orbits = List(sunOrbit, planet1Orbit, planet2Orbit)\n        val\
    \ proximity = orbits.map(orbit => orbit - sunOrbit)\n        proximity.sortBy(proximity\
    \ => proximity.mag)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvf0_dfe.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdvf0_dfe.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvf0_dfe.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdvf0_dfe.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdvf0_dfe.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvf0_dfe.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val sun = Planet(\"Sun\"\
    , 8)\n        val orbits = planets.map(_.orbit(sun))\n        val proximity =\
    \ orbits.map(_.distanceTo(sun))\n        proximity.sortBy(_.abs).takeWhile(_.abs\
    \ < 1.0).map(_.planet)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ozvvnyu.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ozvvnyu.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_ozvvnyu.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m2\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ozvvnyu.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_ozvvnyu.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m4\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ozvvnyu.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m5\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tm"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", \"Venus\"),\n            Planet(\"Venus\", \"Earth\"\
    ),\n            Planet(\"Earth\", \"Mars\"),\n            Planet(\"Mars\", \"\
    Jupiter\"),\n            Planet(\"Jupiter\", \"Saturn\"),\n            Planet(\"\
    Saturn\", \"Uranus\"),\n            Planet(\"Uranus\", \"Neptune\")\n        )\n\
    \        val planet1 = planets.find(_.name == planet1).get\n        val planet2\
    \ = planets.find(_.name == planet2).get\n        val sun = Planet(\"Sun\", \"\
    Earth\")\n        val orbits = planet1.orbits(planet2)\n        val proximity\
    \ = orbits.map(_.distanceTo(sun))\n        proximity.sortBy(_.abs).takeWhile(_\
    \ < 1.0).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfd9ndrwt.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m\"Venus\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfd9ndrwt.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfd9ndrwt.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m\"Mars\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfd9ndrwt.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m\"Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfd9ndrwt.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m\"Saturn\"\
    \e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfd9ndrwt.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m\"Uranus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n            \"Uranus\"\
    , \"Neptune\")\n        val planet1 = planets.find(planet => planet == planet1).getOrElse(\"\
    \")\n        val planet2 = planets.find(planet => planet == planet2).getOrElse(\"\
    \")\n        val planet1Orbit = planets.find(planet => planet == planet1).getOrElse(\"\
    \")\n        val planet2Orbit = planets.find(planet => planet == planet2).getOrElse(\"\
    \")\n        val sunOrbit = planets.find(planet => planet == \"Sun\").getOrElse(\"\
    \")\n        val orbits = List(planet1Orbit, planet2Orbit, sunOrbit)\n       \
    \ val orbitsBetweenPlanets = orbits.filter(orbit => orbit.contains(planet1) ||\
    \ orbit.contains(planet2))\n        val orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.sortWith(orbitsBetweenPlanets\
    \ => orbitsBetweenPlanets.indexOf(orbitsBetweenPlanets.last) - orbitsBetweenPlanets.indexOf(orbitsBetweenPlanets.first))\n\
    \        val proximity = orbitsBetweenPlanetsSorted.map(orbit => orbit.indexOf(sunOrbit)).sum\n\
    \        val planetsBetweenPlanets = orbitsBetweenPlanetsSorted.filter(orbit =>\
    \ orbit.contains(planet1) || orbit.contains(planet2))\n        val planetsBetweenPlanetsSorted\
    \ = planetsBetweenPlanets.sortWith(planetsBetweenPlanets => planetsBetweenPlanets.indexOf(planetsBetweenPlanets.last)\
    \ - planetsBetweenPlanets.indexOf(planetsBetweenPlanets.first))\n        val planetsBetweenPlanetsSortedWithProximity\
    \ = planetsBetweenPlanetsSorted.filter(planetsBetweenPlanets => planetsBetweenPlanets.indexOf(planetsBetweenPlanets.last)\
    \ - planetsBetweenPlanets.indexOf(planetsBetweenPlanets.first) == proximity)\n\
    \        planetsBetweenPlanetsSortedWithProximity.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp02htjh0_.scala:17:55 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mplanet1\e[0m = planets.find(\e\
    [36mplanet\e[0m => planet == planet1).getOrElse(\e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                       ^\e[0m\n\e[31m\
    \   |\e[0m                                      Recursive \e[33mvalue\e[0m \e\
    [35mplanet1\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp02htjh0_.scala:18:55 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mplanet2\e[0m = planets.find(\e[36mplanet\e\
    [0m => planet == planet2).getOrElse(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                      Recursive \e[33mvalue\e[0m \e[35mplanet2\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp02htjh0_.scala:24:92\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36morbitsBetweenPlanetsSorted\e[0m = orbitsBetweenPlanets.sortWith(\e[36morbitsBetweenPlanets\e\
    [0m => orbitsBetweenPlanets.indexOf(orbitsBetweenPlanets.last) - orbitsBetweenPlanets.indexOf(orbitsBetweenPlanets.first))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp02htjh0_.scala:27:95\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanetsSorted\e[0m = planetsBetweenPlanets.sortWith(\e[36mplanetsBetweenPlanets\e\
    [0m => planetsBetweenPlanets.indexOf(planetsBetweenPlanets.last) - planetsBetweenPlanets.indexOf(planetsBetweenPlanets.first))\n\
    \e[31m\e[31m   |\e[0m           "
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(planet => (planet, planet.orbit(sun)))\n        val planet1Orbit\
    \ = orbits.find(_._1 == planet1).get._2\n        val planet2Orbit = orbits.find(_._1\
    \ == planet2).get._2\n        val orbitsBetween = planet1Orbit.orbit(planet2Orbit)\n\
    \        val proximity = orbitsBetween.map(planet => planet.distanceTo(sun))\n\
    \        proximity.sortBy(_._1).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hdmedg8.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hdmedg8.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4hdmedg8.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hdmedg8.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hdmedg8.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4hdmedg8.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4hdmedg8.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(_.orbit(sun))\n        val proximity = orbits.map(_.map(_.distanceTo(sun))).flatten\n\
    \        proximity.sortBy(_.abs).takeWhile(_.abs < 1.0).reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptckya1_f.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptckya1_f.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptckya1_f.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptckya1_f.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptckya1_f.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptckya1_f.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptckya1_f.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars)\n        val planetsBetweenSunAndEarth = List(jupiter, saturn)\n     \
    \   val planetsBetweenSunAndMars = List(uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune, uranus)\n \
    \       val planetsBetweenSunAndNeptune = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3y8kiiut.scala:43:54 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndVenusAndSaturn\e\
    [0m = List(\n\e[31m\e[31m   |\e[0m                                           \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3y8kiiut.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmercury\e[0m = Planet(\e[31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mvenus\e[0m = Planet(\e[31m\"Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mearth\e[0m = Planet(\e[31m\"Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmars\e[0m = P"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars)\n        val planetsBetweenSunAndEarth = List(jupiter, saturn)\n     \
    \   val planetsBetweenSunAndMars = List(uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune, uranus)\n \
    \       val planetsBetweenSunAndNeptune = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3y8kiiut.scala:43:54 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndVenusAndSaturn\e\
    [0m = List(\n\e[31m\e[31m   |\e[0m                                           \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3y8kiiut.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmercury\e[0m = Planet(\e[31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mvenus\e[0m = Planet(\e[31m\"Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mearth\e[0m = Planet(\e[31m\"Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y8kiiut.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmars\e[0m = P"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n  \
    \      )\n        val sun = Planet(\"Sun\", 0, 0) // the sun is the only planet\
    \ with 0 distance from the sun\n        val planet1 = planets.find(_.name == planet1).get\n\
    \        val planet2 = planets.find(_.name == planet2).get\n        val sun1 =\
    \ planets.find(_.name == sun).get\n        val sun2 = planets.find(_.name == sun).get\n\
    \        val orbit1 = planet1.orbit(sun1)\n        val orbit2 = planet2.orbit(sun2)\n\
    \        val distance1 = orbit1.distanceTo(sun1)\n        val distance2 = orbit2.distanceTo(sun2)\n\
    \        val proximity1 = distance1.toDouble / distance2.toDouble\n        val\
    \ proximity2 = distance2.toDouble / distance1.toDouble\n        val proximity\
    \ = proximity1.compareTo(proximity2)\n        if (proximity == 0) {\n        \
    \    List()\n        } else {\n            planets.filter(_.orbit(sun).distanceTo(sun)\
    \ < proximity).sortBy(_.orbit(sun).distanceTo(sun)).map(_.name)\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5y27zw6p.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5y27zw6p.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5y27zw6p.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5y27zw6p.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m, \e[31m0\e[0m,\
    \ \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5y27zw6p.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5y27zw6p.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val sun = Planet(\"Sun\"\
    , 8)\n        val orbits = planets.map(_.orbit(sun))\n        val planet1Orbit\
    \ = orbits.find(_.name == planet1).get\n        val planet2Orbit = orbits.find(_.name\
    \ == planet2).get\n        val planet1OrbitToSun = planet1Orbit.orbit(sun)\n \
    \       val planet2OrbitToSun = planet2Orbit.orbit(sun)\n        val planet1OrbitToPlanet2\
    \ = planet1Orbit.orbit(planet2)\n        val planet2OrbitToPlanet2 = planet2Orbit.orbit(planet2)\n\
    \        val planet1OrbitToPlanet1 = planet1Orbit.orbit(planet1)\n        val\
    \ planet2OrbitToPlanet1 = planet2Orbit.orbit(planet1)\n        val planet1OrbitToPlanet1ToSun\
    \ = planet1OrbitToSun.orbit(planet1)\n        val planet2OrbitToPlanet1ToSun =\
    \ planet2OrbitToSun.orbit(planet1)\n        val planet1OrbitToPlanet2ToSun = planet1OrbitToSun.orbit(planet2)\n\
    \        val planet2OrbitToPlanet2ToSun = planet2OrbitToSun.orbit(planet2)\n \
    \       val planet1OrbitToPlanet1ToPlanet2 = planet1OrbitToPlanet2.orbit(planet1)\n\
    \        val planet2OrbitToPlanet1ToPlanet2 = planet2OrbitToPlanet2.orbit(planet1)\n\
    \        val planet1OrbitToPlanet2ToPlanet1 = planet1OrbitToPlanet2.orbit(planet2)\n\
    \        val planet2OrbitToPlanet2ToPlanet1 = planet2OrbitToPlanet2.orbit(planet2)\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppeoy9z09.scala:43:11 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppeoy9z09.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppeoy9z09.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmppeoy9z09.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m2\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppeoy9z09.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmppeoy9z09.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m4\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppeoy9z09.scala:21:12\
    \ -----------"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(planet => (planet, planet.orbit(sun)))\n        val orbitsBetweenPlanets\
    \ = orbits.filter(orbit => orbit._1.name == planet1 && orbit._2.name == planet2)\n\
    \        val planetsBetweenPlanets = orbitsBetweenPlanets.map(orbit => orbit._1.name)\n\
    \        planetsBetweenPlanets.sortBy(planet => planet.distance(sun))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpicyampjm.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpicyampjm.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpicyampjm.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpicyampjm.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpicyampjm.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpicyampjm.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpicyampjm.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val sun = Planet(\"Sun\")\n        val\
    \ orbits = planets.map(planet => planet.orbit(sun))\n        val proximity = orbits.map(orbit\
    \ => orbit.proximity(sun))\n        proximity.sortBy(proximity => proximity)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpun1b04k_.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpun1b04k_.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpun1b04k_.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpun1b04k_.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpun1b04k_.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpun1b04k_.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpun1b04k_.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsBetween = planets.filter(planet => planet != planet1 &&\
    \ planet != planet2)\n        val planetsBetweenSun = planets.filter(planet =>\
    \ planet != planet1 && planet != planet2 && planet != planets.last)\n        val\
    \ planetsBetweenSunAndPlanet1 = planets.filter(planet => planet != planet1 &&\
    \ planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet2\
    \ = planets.filter(planet => planet != planet1 && planet != planet2 && planet\
    \ != planets.last)\n        val planetsBetweenSunAndPlanet3 = planets.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenSunAndPlanet4 = planets.filter(planet => planet != planet1\
    \ && planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet5\
    \ = planets.filter(planet => planet != planet1 && planet != planet2 && planet\
    \ != planets.last)\n        val planetsBetweenSunAndPlanet6 = planets.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenSunAndPlanet7 = planets.filter(planet => planet != planet1\
    \ && planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet8\
    \ = planets.filter(planet => planet != planet1 && planet != planet2 && planet\
    \ != planets.last)\n        val planetsBetweenSunAndPlanet9 = planets.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenSunAndPlanet10 = planets.filter(planet => planet != planet1\
    \ && planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet11\
    \ = planets.filter(planet => planet != planet1 && plan\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpog82_3up.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpog82_3up.scala:28:89\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetweenSunAndPlanet11\e[0m = planets.filter(\e[36mplanet\e[0m => planet\
    \ != planet1 && plan\n\e[31m\e[31m   |\e[0m                                  \
    \                                                       ^^^^\e[0m\n\e[31m   |\e\
    [0m                                                         Not found: plan\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpog82_3up.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", Orbit(\n                Vector(\n                   \
    \ Vector(\n                        Vector(\n                            Vector(\n\
    \                                Vector(\n                                   \
    \ Vector(\n                                        Vector(\n                 \
    \                           Vector(\n                                        \
    \        Vector(\n                                                    Vector(\n\
    \                                                        Vector(\n           \
    \                                                 Vector(\n                  \
    \                                              Vector(\n                     \
    \                                               Vector(\n                    \
    \                                                    Vector(\n               \
    \                                                             Vector(\n      \
    \                                                                          Vector(\n\
    \                                                                            \
    \        Vector(\n                                                           \
    \                             Vector(\n                                      \
    \                                                      Vector(\n             \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                        Vector(\n                           \
    \                                                                            \
    \ Vector(\n                                                                  \
    \                                          Vector(\n                         \
    \                                                                            \
    \           Vector(\n                                                        \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                  Vector(\n                                                 \
    \                                                                            \
    \   Vector(\n                                                                \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                                         Vector(\n          \
    \                                                                            \
    \                                                          Vector(\n         \
    \                                                                            \
    \                                                               Vector(\n    \
    \                                                                            \
    \                                                                        Vector(\n\
    \                                                                            \
    \                                                                            \
    \    Vector(\n                                                               \
    \                                                                            \
    \                     Vector(\n                                              \
    \                                                                            \
    \                                          Vector(\n                         \
    \                                                                            \
    \                                                                   Vector(\n\
    \                                                                            \
    \                                                                            \
    \                    Vector(\n                                               \
    \                                                                            \
    \                                                     Vector(\n              \
    \                                                                            \
    \                                                                            \
    \              Vector(\n                                                     \
    \                                                                            \
    \                                                       Vector(\n            \
    \                                                                            \
    \                                                                            \
    \                        Vector(\n                                           \
    \                                                                            \
    \                                                                         Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                            Vector(\n                       \
    \                                                                            \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                            \
    \                                                                            \
    \          Vector(\n                                                         \
    \                                                                            \
    \                                                                       Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n                                                            \
    \                                                                            \
    \                                                                    Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                      Vector(\n                                             \
    \                                                                            \
    \                                                                            \
    \       Vector(\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbs1a4xbq.scala:99:211 --------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m                                                    \
    \                                                                            \
    \                                                                            Vector(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbs1a4xbq.scala:16:12 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbs1a4xbq.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbs1a4xbq.scala:101:5 --------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m   \
    \ |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planet1 = planets.find(_.name ==\
    \ planet1).getOrElse(throw new Exception(\"Planet not found\"))\n        val planet2\
    \ = planets.find(_.name == planet2).getOrElse(throw new Exception(\"Planet not\
    \ found\"))\n        val sun = Planet(\"Sun\")\n        val orbits = planet1.orbits(planet2)\n\
    \        val proximity = orbits.map(_.distanceTo(sun))\n        proximity.sortBy(_.abs)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpxivfr4.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpxivfr4.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnpxivfr4.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpxivfr4.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpxivfr4.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnpxivfr4.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpxivfr4.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1smrku9t.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1smrku9t.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1smrku9t.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1smrku9t.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0),\n            Planet(\"Venus\", 1),\n            Planet(\"\
    Earth\", 2),\n            Planet(\"Mars\", 3),\n            Planet(\"Jupiter\"\
    , 4),\n            Planet(\"Saturn\", 5),\n            Planet(\"Uranus\", 6),\n\
    \            Planet(\"Neptune\", 7)\n        )\n        val sun = Planet(\"Sun\"\
    , 8)\n        val orbits = planets.map(_.orbits(planet1, planet2))\n        val\
    \ proximity = orbits.map(_.map(_.distanceTo(sun))).flatten\n        proximity.sortBy(_.abs)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi__680w_.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi__680w_.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, \e[31m1\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpi__680w_.scala:18:12 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, \e[31m2\e[0m),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi__680w_.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m, \e[31m3\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpi__680w_.scala:20:12 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Jupiter\"\e[0m, \e[31m4\e[0m),\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi__680w_.scala:21:12\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"\
    Saturn\"\e[0m, \e[31m5\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e\
    [31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tm"
  stdout: ''
  timestamp: 1660009630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0.33),\n            Planet(\"Venus\", 0.33),\n      \
    \      Planet(\"Earth\", 0.33),\n            Planet(\"Mars\", 0.33),\n       \
    \     Planet(\"Jupiter\", 0.33),\n            Planet(\"Saturn\", 0.33),\n    \
    \        Planet(\"Uranus\", 0.33),\n            Planet(\"Neptune\", 0.33)\n  \
    \      )\n        val sun = Planet(\"Sun\", 0)\n        val orbits = planets.map(p\
    \ => (p.name, p.orbit))\n        val sunOrbit = orbits.find(_._1 == sun._1).get._2\n\
    \        val planet1Orbit = orbits.find(_._1 == planet1._1).get._2\n        val\
    \ planet2Orbit = orbits.find(_._1 == planet2._1).get._2\n        val planet1OrbitToSun\
    \ = planet1Orbit - sunOrbit\n        val planet2OrbitToSun = planet2Orbit - sunOrbit\n\
    \        val planet1OrbitToPlanet2 = planet1Orbit - planet2Orbit\n        val\
    \ planet2OrbitToPlanet2 = planet2Orbit - planet1Orbit\n        val planet1OrbitToPlanet1\
    \ = planet1Orbit - sunOrbit\n        val planet2OrbitToPlanet1 = planet2Orbit\
    \ - sunOrbit\n        val planet1OrbitToPlanet2 = planet1Orbit - planet2Orbit\n\
    \        val planet2OrbitToPlanet1 = planet2Orbit - planet1Orbit\n        val\
    \ planet1OrbitToPlanet1 = planet1Orbit - sunOrbit\n        val planet2OrbitToPlanet2\
    \ = planet2Orbit - sunOrbit\n        val planet1OrbitToPlanet2 = planet1Orbit\
    \ - planet2Orbit\n        val planet2OrbitToPlanet1 = planet2Orbit - planet1Orbit\n\
    \        val planet1OrbitToPlanet1 = planet1Orbit - sunOrbit\n        val planet2OrbitToPlanet2\
    \ = planet2Orbit - sunOrbit\n        val planet1OrbitToPlanet2 = planet1Orbit\
    \ - \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpow5fh664.scala:44:50 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitToPlanet2\e\
    [0m = planet1Orbit - \n\e[31m\e[31m   |\e[0m                                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpow5fh664.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitToPlanet2\e\
    [0m = planet1Orbit - planet2Orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitToPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitToPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpow5fh664.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitToPlanet1\e\
    [0m = planet2Orbit - planet1Orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2OrbitToPlanet1 is already defined as \e[33mvalue\e\
    [0m \e[35mplanet2OrbitToPlanet1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpow5fh664.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitToPlanet1\e\
    [0m = planet1Orbit - sunOrbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitToPlanet1 is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitToPlanet1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpow5fh664.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m  "
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planetsOrbits = planets.map(planet => (planet, planets.map(planets.indexOf(_)).filter(i\
    \ => i != planets.indexOf(planet)).map(planets.indexOf(_)).sum))\n        val\
    \ planetsOrbits1 = planetsOrbits.filter(x => x._1 == planet1)\n        val planetsOrbits2\
    \ = planetsOrbits.filter(x => x._1 == planet2)\n        val planetsOrbits12 =\
    \ planetsOrbits1.zip(planetsOrbits2)\n        val planetsOrbits122 = planetsOrbits12.filter(x\
    \ => x._2 > x._1)\n        val planetsOrbits123 = planetsOrbits12.filter(x =>\
    \ x._2 < x._1)\n        val planetsOrbits124 = planetsOrbits12.filter(x => x._2\
    \ <= x._1)\n        val planetsOrbits125 = planetsOrbits12.filter(x => x._2 >=\
    \ x._1)\n        val planetsOrbits126 = planetsOrbits12.filter(x => x._2 > x._1)\n\
    \        val planetsOrbits127 = planetsOrbits12.filter(x => x._2 < x._1)\n   \
    \     val planetsOrbits128 = planetsOrbits12.filter(x => x._2 <= x._1)\n     \
    \   val planetsOrbits129 = planetsOrbits12.filter(x => x._2 >= x._1)\n       \
    \ val planetsOrbits130 = planetsOrbits12.filter(x => x._2 > x._1)\n        val\
    \ planetsOrbits131 = planetsOrbits12.filter(x => x._2 < x._1)\n        val planetsOrbits132\
    \ = planetsOrbits12.filter(x => x._2 <= x._1)\n        val planetsOrbits133 =\
    \ planetsOrbits12.filter(x => x._2 >= x._1)\n        val planetsOrbits134 = planetsOrbits12.filter(x\
    \ => x._2 > x._1)\n        val planetsOrbits135 = planetsOrbits12.filter(x =>\
    \ x._2 < x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9xmhykht.scala:20:64 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mplanetsOrbits122\e[0m =\
    \ planetsOrbits12.filter(\e[36mx\e[0m => x._2 > x._1)\n\e[31m\e[31m   |\e[0m \
    \                                                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue > is not a member of (String, Int), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9xmhykht.scala:21:64 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mplanetsOrbits123\e[0m =\
    \ planetsOrbits12.filter(\e[36mx\e[0m => x._2 < x._1)\n\e[31m\e[31m   |\e[0m \
    \                                                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue < is not a member of (String, Int), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9xmhykht.scala:22:64 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mplanetsOrbits124\e[0m =\
    \ planetsOrbits12.filter(\e[36mx\e[0m => x._2 <= x._1)\n\e[31m\e[31m   |\e[0m\
    \                                                           ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue <= is not a member of (String, Int), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9xmhykht.scala:23:64 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mplanetsOrbits125\e[0m"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n      \
    \      Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n       \
    \     Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n    \
    \        Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0))\n \
    \       val planetsBetween = planets.filter(p => p.orbit(planet1) < p.orbit(planet2))\n\
    \        val planetsBetweenSorted = planetsBetween.sortBy(p => p.distance(planet1))\n\
    \        val planetsBetweenSortedReversed = planetsBetweenSorted.reverse\n   \
    \     val planetsBetweenSortedReversedSorted = planetsBetweenSortedReversed.sortBy(p\
    \ => p.distance(planet2))\n        val planetsBetweenSortedReversedSortedReversed\
    \ = planetsBetweenSortedReversedSorted.reverse\n        val planetsBetweenSortedReversedSortedReversedSorted\
    \ = planetsBetweenSortedReversedSortedReversed.sortBy(p => p.distance(planet1))\n\
    \        val planetsBetweenSortedReversedSortedReversedSortedReversed = planetsBetweenSortedReversedSortedReversedSorted.reverse\n\
    \        val planetsBetweenSortedReversedSortedReversedSortedReversedSorted =\
    \ planetsBetweenSortedReversedSortedReversedSortedReversed.sortBy(p => p.distance(planet2))\n\
    \        val planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversed.reverse\n\
    \        val planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversed.sortBy(p\
    \ => p.distance(planet1))\n        val planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted.reverse\n\
    \        val planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted.reverse\n\
    \        val planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = planetsBetweenSortedReversedSortedReversedSortedReverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwkpw8hoa.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted\e\
    [0m = planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  planetsBetweenSortedReversedSortedReversedSortedReversedSortedReversedSorted\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwkpw8hoa.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, \e[31m0\e\
    [0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwkpw8hoa.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkpw8hoa.scala:18:12\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, \e[31m0\e[0m, \e[31m0\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwkpw8hoa.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e"
  stdout: ''
  timestamp: 1660009630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndVenus = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndJupiter = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ venus, earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndNeptune = List(mercury, venus, earth, mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus =\
    \ List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n      \
    \  val planetsBetweenSunAndMercuryAndEarth = List(mercury, venus, earth, mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, ne\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9a3r4zxm.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9a3r4zxm.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n\
    \        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n\
    \        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n\
    \        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\"\
    )\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\"\
    )\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars)\n        val planetsBetweenSunAndEarth = List(jupiter, saturn)\n     \
    \   val planetsBetweenSunAndMars = List(uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune, uranus)\n \
    \       val planetsBetweenSunAndNeptune = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune, mercury)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(neptune, uranus, mercury)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus, neptune, mercury)\n        val planetsBetweenSunAndVenusAndEarth\
    \ = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranus, ne\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpga931cnz.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpga931cnz.scala:16:18\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpga931cnz.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpga931cnz.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpga931cnz.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpga931cnz.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpg"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planet1Orbit = planets.find(_.name\
    \ == planet1).getOrElse(throw new Exception(\"Planet \" + planet1 + \" does not\
    \ exist\"))\n        val planet2Orbit = planets.find(_.name == planet2).getOrElse(throw\
    \ new Exception(\"Planet \" + planet2 + \" does not exist\"))\n        val sunOrbit\
    \ = Planet(\"Sun\")\n        val orbits = List(planet1Orbit, planet2Orbit, sunOrbit)\n\
    \        val orbitsBetweenPlanets = orbits.filter(_.orbit.between(planet1Orbit.orbit,\
    \ planet2Orbit.orbit))\n        val planetsBetweenPlanets = orbitsBetweenPlanets.map(_.orbit).distinct\n\
    \        val planetsBetweenPlanetsSorted = planetsBetweenPlanets.sortBy(_.distanceTo(sunOrbit))\n\
    \        val planetsBetweenPlanetsSortedWithSun = planetsBetweenPlanetsSorted.takeWhile(_.distanceTo(sunOrbit)\
    \ < planetsBetweenPlanetsSorted.last.distanceTo(sunOrbit))\n        planetsBetweenPlanetsSortedWithSun.map(_.name)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3icd8pj.scala:16:12 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3icd8pj.scala:17:12\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpv3icd8pj.scala:18:12 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3icd8pj.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mars\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3icd8pj.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpv3icd8pj.scala:21:12 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpv3icd8pj.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planetsBetween = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween2 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween3 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween4 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween5 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween6 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween7 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween8 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween9 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween10 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween11 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween12 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween13 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween14 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween15 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween16 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween17 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween18 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween19 = planets.filter(_.name\
    \ == plan\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsg3sgqa6.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsg3sgqa6.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsg3sgqa6.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    Planet(\"Mercury\"),\n            Planet(\"Venus\"),\n            Planet(\"\
    Earth\"),\n            Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n \
    \           Planet(\"Saturn\"),\n            Planet(\"Uranus\"),\n           \
    \ Planet(\"Neptune\")\n        )\n        val planetsBetween = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween2 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween3 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween4 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween5 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween6 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween7 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween8 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween9 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween10 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween11 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween12 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween13 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween14 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween15 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween16 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween17 = planets.filter(_.name\
    \ == planet1).filter(_.name == planet2)\n        val planetsBetween18 = planets.filter(_.name\
    \ == planet2).filter(_.name == planet1)\n        val planetsBetween19 = planets.filter(_.name\
    \ == plan\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsg3sgqa6.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:16:12\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsg3sgqa6.scala:17:12 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:18:12 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsg3sgqa6.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsg3sgqa6.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    def bf(planet1 : String,\
    \ planet2 : String) : List[String] = {\n        val planets = List(\n        \
    \    new Planet(\"Mercury\", new Orbit(\n                new Vector(0,0,0), \n\
    \                new Vector(0,0,1), \n                new Vector(0,1,0), \n  \
    \              new Vector(0,1,1), \n                new Vector(1,0,0), \n    \
    \            new Vector(1,0,1), \n                new Vector(1,1,0), \n      \
    \          new Vector(1,1,1))),\n            new Planet(\"Venus\", new Orbit(\n\
    \                new Vector(0,0,0), \n                new Vector(0,0,1), \n  \
    \              new Vector(0,1,0), \n                new Vector(0,1,1), \n    \
    \            new Vector(1,0,0), \n                new Vector(1,0,1), \n      \
    \          new Vector(1,1,0), \n                new Vector(1,1,1))),\n       \
    \     new Planet(\"Earth\", new Orbit(\n                new Vector(0,0,0), \n\
    \                new Vector(0,0,1), \n                new Vector(0,1,0), \n  \
    \              new Vector(0,1,1), \n                new Vector(1,0,0), \n    \
    \            new Vector(1,0,1), \n                new Vector(1,1,0), \n      \
    \          new Vector(1,1,1))),\n            new Planet(\"Mars\", new Orbit(\n\
    \                new Vector(0,0,0), \n                new Vector(0,0,1), \n  \
    \              new Vector(0,1,0), \n                new Vector(0,1,1), \n    \
    \            new Vector(1,0,0), \n                new Vector(1,0,1), \n      \
    \          new Vector(1,1,0), \n                new Vector(1,1,1))),\n       \
    \     new Planet(\"Jupiter\", new Orbit(\n                new Vector(0,0,0), \n\
    \                new Vector(0,0,1), \n                new Vector(0,1,0), \n  \
    \              new Vector(0,1,1), \n                new Vector(1,0,0), \n    \
    \            new Vector(1,0,1), \n                new Vector(1,1,0), \n      \
    \          new Vector(1,1,1))),\n            new Planet(\"Saturn\", new Orbit(\n\
    \                new Vector(0,0,0), \n                new Vector(0,0,1), \n  \
    \              new Vector(0,1,0), \n                new Vector(0,1,1), \n    \
    \            new Vector(1,0,0), \n                new Vector(1,0,1), \n      \
    \          new Vector(1,1,0), \n                new Vector(1,1,1))),\n       \
    \     new Planet(\"Uranus\", new Orbit(\n                new Vector(0,0,0), \n\
    \                new Vector(0,0,1), \n                new Vector(0,1,0), \n  \
    \              new Vector(0,1,1), \n                new Vector(1,0,0), \n    \
    \            new Vector(1,0,1), \n                new Vector(1,1,0), \n      \
    \          new Vector(1,1,1))),\n            new Planet(\"Neptune\", new Orbit(\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9se8yjli.scala:79:44 ---------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Neptune\"\e[0m, \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m      \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                        expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    exception occurred while parser /tmp/tmp9se8yjli.scala\nexception occurred while\
    \ compiling /tmp/tmp9se8yjli.scala\nException in thread \"main\" java.lang.AssertionError:\
    \ assertion failed: position error, parent span does not contain child span\n\
    parent      = \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m) # -1,\nparent span\
    \ = <3115..3125>,\nchild       = \e[31mnull\e[0m # -1,\nchild span  = [3125..3131..3131]\n\
    \tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JPro"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Neptune\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking List(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(0, 0, 0), \e[33mnew \e[0m\e\
    [35mVector\e[0m(0, 0, 1), \e[33mnew \e[0m\e[35mVector\e[0m(0, 1, 0), \n      \e\
    [33mnew \e[0m\e[35mVector\e[0m(0, 1, 1)\n    , \e[33mnew \e[0m\e[35mVector\e[0m(1,\
    \ 0, 0), \e[33mnew \e[0m\e[35mVector\e[0m(1, 0, 1), \e[33mnew \e[0m\e[35mVector\e\
    [0m(1, 1, 0), \n      \e[33mnew \e[0m\e[35mVector\e[0m(1, 1, 1)\n    )\n  )\n\
    , \n  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(0, 0, 0), \e[33mnew \e[0m\e\
    [35mVector\e[0m(0, 0, 1), \e[33mnew \e[0m\e[35mVector\e[0m(0, 1, 0), \n      \e\
    [33mnew \e[0m\e[35mVector\e[0m(0, 1, 1)\n    , \e[33mnew \e[0m\e[35mVector\e[0m(1,\
    \ 0, 0), \e[33mnew \e[0m\e[35mVector\e[0m(1, 0, 1), \e[33mnew \e[0m\e[35mVector\e\
    [0m(1, 1, 0), \n      \e[33mnew \e[0m\e[35mVector\e[0m(1, 1, 1)\n    )\n  )\n\
    , \n  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(0, 0, 0), \e[33mnew \e[0m\e\
    [35mVector\e[0m(0, 0, 1), \e[33mnew \e[0m\e[35mVector\e[0m(0, 1, 0), \n      \e\
    [33mnew \e[0m\e[35mVector\e[0m(0, 1, 1)\n    , \e[33mnew \e[0m\e[35mVector\e[0m(1,\
    \ 0, 0), \e[33mnew \e[0m\e[35mVector\e[0m(1, 0, 1), \e[33mnew \e[0m\e[35mVector\e\
    [0m(1, 1, 0), \n      \e[33mnew \e[0m\e[35mVector\e[0m(1, 1, 1)\n    )\n  )\n\
    , \n  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(0, 0, 0), \e[33mnew \e[0m\e\
    [35mVector\e[0m(0, 0, 1), \e[33mnew \e[0m\e[35mVector\e[0m(0, 1, 0), \n      \e\
    [33mnew \e[0m\e[35mVector\e[0m(0, 1, 1)\n    , \e[33mnew \e[0m\e[35mVector\e[0m(1,\
    \ 0, 0), \e[33mnew \e[0m\e[35mVector\e[0m(1, 0, 1), \e[33mnew \e[0m\e[35mVector\e\
    [0m(1, 1, 0), \n      \e[33mnew \e[0m\e[35mVector\e[0m(1, 1, 1)\n    )\n  )\n\
    , \n  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Jupiter\"\e[0m, \n    \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mVector\e[0m(0, 0, 0), \e[33mnew \e\
    [0m\e[35mV"
  timestamp: 1660009626
