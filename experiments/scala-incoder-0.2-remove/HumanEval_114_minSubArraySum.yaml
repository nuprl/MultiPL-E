name: HumanEval_114_minSubArraySum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of integers nums, find the minimum sum of any non-empty sub-array\n\
  \    // of nums.\n    // Example\n    def minSubArraySum(nums : List[Long]) : Long\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
  \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong,\
  \ 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n   \
  \ assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
  \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n  \
  \  assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
  \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n\
  \    }\n\n}\n"
completions: ["        val numsArray = nums.toArray\n        val minSum = numsArray.foldLeft(0L)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0L){ (sum, num) =>\n      \
    \      val newSum = sum + num\n            if (numsSet.contains(newSum)) {\n \
    \               newSum\n            } else {\n                sum\n          \
    \  }\n        }\n        minSum", "        val numsSorted = nums.sortWith(_ <\
    \ _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n        sums.min", " \
    \       val minSum = math.min(nums.sum, math.max(nums.tail.sum))\n        val\
    \ subArray = nums.filter(_ > minSum)\n        minSubArraySum(subArray)", "   \
    \     val numsSet = nums.toSet\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorNext = numsSetIterator.next\n        val numsSetIteratorNextNext\
    \ = numsSetIteratorNext.next\n        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNext", "        val numsCopy = nums.toList\n\
    \        var minSum = numsCopy.head\n        var minSumIndex = 0\n        for\
    \ (i <- 0 until numsCopy.size) {\n            val currentSum = numsCopy(i) + minSum\n\
    \            if (currentSum < minSum) {\n                minSum = currentSum\n\
    \                minSumIndex = i\n            }\n        }\n        minSum", " \
    \       val n = nums.size\n        val m = nums.max\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        var sum = 0L\n        var i = 0\n        while (i < n) {\n          \
    \  val j = i + 1\n            while (j < n) {\n                val k = j + 1\n\
    \                while (k < n) {\n                    val l = k + 1\n        \
    \            val sum = nums(i) + nums(j) + nums(k) + nums(l)\n               \
    \     sums += sum\n                    k += 1\n                }\n           \
    \     j += 1\n            }\n            i += 1\n        }\n        val min =\
    \ sums.min\n        val max = sums.max\n        if (min == max) {\n          \
    \  min\n        } else {\n            val mid = (min + max) / 2\n            val\
    \ midSum = sums.find(_ == mid).getOrElse(-1L)\n            if (midSum < 0)\n \
    \               minSubArraySum(nums)\n            else\n                minSubArraySum(nums.filter(_\
    \ != mid))\n        }", "        val numsCopy = nums.toList\n        val minSum\
    \ = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val sums = mutable.ArrayBuffer.empty[Long]\n        val numsCopy = nums.toList\n\
    \        val minSum = Long.MaxValue\n        for(i <- 0 until numsCopy.size) {\n\
    \            val subArray = numsCopy.slice(i+1, numsCopy.size)\n            val\
    \ sum = subArray.sum\n            sums += sum\n            if(sum < minSum) {\n\
    \                minSum = sum\n            }\n        }\n        minSum", "  \
    \      val numsArray = nums.toArray\n        val numsArrayLen = numsArray.length\n\
    \        val minSum = numsArray(0)\n        val minSumArray = numsArray.toArray\n\
    \        val minSumArrayLen = minSumArray.length\n        val minSumArrayLen2\
    \ = minSumArrayLen * minSumArrayLen\n        val minSumArrayLen3 = minSumArrayLen2\
    \ * minSumArrayLen\n        val minSumArrayLen4 = minSumArrayLen3 * minSumArrayLen\n\
    \        val minSumArrayLen5 = minSumArrayLen4 * minSumArrayLen\n        val minSumArrayLen6\
    \ = minSumArrayLen5 * minSumArrayLen\n        val minSumArrayLen7 = minSumArrayLen6\
    \ * minSumArrayLen\n        val minSumArrayLen8 = minSumArrayLen7 * minSumArrayLen\n\
    \        val minSumArrayLen9 = minSumArrayLen8 * minSumArrayLen\n        val minSumArrayLen10\
    \ = minSumArrayLen9 * minSumArrayLen\n        val minSumArrayLen11 = minSumArrayLen10\
    \ * minSumArrayLen\n        val minSumArrayLen12 = minSumArrayLen11 * minSumArrayLen\n\
    \        val minSumArrayLen13 = minSumArrayLen12 * minSumArrayLen\n        val\
    \ minSumArrayLen14 = minSumArrayLen13 * minSumArrayLen\n        val minSumArrayLen15\
    \ = minSumArrayLen14 * minSumArrayLen\n        val minSumArrayLen16 = minSumArrayLen15\
    \ * minSumArrayLen\n        val minSumArrayLen17 = minSumArrayLen16 * minSumArrayLen\n\
    \        val minSumArrayLen18 = minSumArrayLen17 * minSumArrayLen\n        val\
    \ minSumArrayLen19 = minSumArrayLen18 * minSumArrayLen\n        val minSumArrayLen20\
    \ = minSumArrayLen19 * minSumArrayLen\n        val minSumArrayLen21 = minSumArrayLen20\
    \ * minSumArrayLen\n        val minSumArrayLen22 = minSumArrayLen21 * minSumArrayLen\n\
    \        val minSumArrayLen23 = minSumArrayLen22 * minSumArrayLen\n        val\
    \ minSumArrayLen24 = minSumArrayLen23 * minSumArrayLen\n        val minSumArrayLen25\
    \ = minSumArrayLen24 * minSumArrayLen\n        val minSumArrayLen26 = minSumArrayLen25\
    \ * minSumArray", "        val minSum = math.min(nums.sum, math.max(nums.sum))\n\
    \        val subArray = nums.filter(x => x >= minSum)\n        minSubArraySum(subArray)",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L){\
    \ (sum, num) =>\n            val newSum = sum + num\n            if (newSum <\
    \ minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(numsCopy(0)) { (sum, num)\
    \ =>\n            if (numsCopy.contains(sum + num)) {\n                sum + num\n\
    \            } else {\n                sum\n            }\n        }\n       \
    \ minSum", "        val numsSorted = nums.sortWith(_ < _)\n        val sums =\
    \ numsSorted.scanLeft(0)(_ + _)\n        sums.min", "        val minSum = nums.foldLeft(0L)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0L){ (sum, num) =>\n \
    \           val newSum = sum + num\n            if(newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val sums = mutable.ArrayBuffer.empty[Long]\n      \
    \  val numsCopy = nums.toList\n        val minSum = math.min(numsCopy.head, numsCopy.last)\n\
    \        sums += minSum\n        val numsCopy2 = numsCopy.tail\n        val minSum2\
    \ = math.min(numsCopy2.head, numsCopy2.last)\n        sums += minSum2\n      \
    \  val numsCopy3 = numsCopy2.tail\n        val minSum3 = math.min(numsCopy3.head,\
    \ numsCopy3.last)\n        sums += minSum3\n        val numsCopy4 = numsCopy3.tail\n\
    \        val minSum4 = math.min(numsCopy4.head, numsCopy4.last)\n        sums\
    \ += minSum4\n        val numsCopy5 = numsCopy4.tail\n        val minSum5 = math.min(numsCopy5.head,\
    \ numsCopy5.last)\n        sums += minSum5\n        val numsCopy6 = numsCopy5.tail\n\
    \        val minSum6 = math.min(numsCopy6.head, numsCopy6.last)\n        sums\
    \ += minSum6\n        val numsCopy7 = numsCopy6.tail\n        val minSum7 = math.min(numsCopy7.head,\
    \ numsCopy7.last)\n        sums += minSum7\n        val numsCopy8 = numsCopy7.tail\n\
    \        val minSum8 = math.min(numsCopy8.head, numsCopy8.last)\n        sums\
    \ += minSum8\n        val numsCopy9 = numsCopy8.tail\n        val minSum9 = math.min(numsCopy9.head,\
    \ numsCopy9.last)\n        sums += minSum9\n        val numsCopy10 = numsCopy9.tail\n\
    \        val minSum10 = math.min(numsCopy10.head, numsCopy10.last)\n        sums\
    \ += minSum10\n        val numsCopy11 = numsCopy10.tail\n        val minSum11\
    \ = math.min(numsCopy11.head, numsCopy11.last)\n        sums += minSum11\n   \
    \     val numsCopy12 = numsCopy11.tail\n        val minSum12 = math.min(numsCopy12.head,\
    \ numsCopy12.last)\n        sums += minSum12\n        val numsCopy13 = numsCopy12.tail\n\
    \        val minSum13 = math.min(numsCopy13.head, numsCopy13.last)\n        sums\
    \ += minSum13\n        val numsCopy", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0L)((sum, num) => sum + num)\n        val\
    \ subArray = numsCopy.filter(num => num > minSum)\n        minSubArraySum(subArray)",
  "        val minSum = nums.foldLeft(0L){ (sum, num) =>\n            val newSum =\
    \ sum + num\n            if(newSum < minSum) newSum else minSum\n        }\n \
    \       minSum", "        val n = nums.length\n        val m = math.max(nums.head,\
    \ nums.last)\n        val sums = mutable.ArrayBuffer.empty[Long]\n        val\
    \ minSum = math.min(m, n)\n        for (i <- 0 until minSum) {\n            val\
    \ sum = 0L\n            val j = i\n            while (j < n && nums(j) < m) {\n\
    \                sum += nums(j)\n                j += 1\n            }\n     \
    \       sums += sum\n        }\n        sums.min", "        val minSum = nums.foldLeft(0L){\
    \ (sum, num) =>\n            val newSum = sum + num\n            if (newSum <\
    \ minSum) newSum else minSum\n        }\n        minSum", "        val minSum\
    \ = nums.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n  \
    \          if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsSorted = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0)(_\
    \ + _)\n        val minSum = sums.min\n        minSum", "        val numsArray\
    \ = nums.toArray\n        val numsArrayLen = numsArray.length\n        val numsArraySum\
    \ = numsArray.foldLeft(0L)((sum, elem) => sum + elem)\n        val minSum = numsArraySum\
    \ - numsArraySum.max\n        minSum", "        val numsSet = nums.toSet\n   \
    \     val minSum = nums.foldLeft(0L)((sum, num) => sum + num)\n        val subArray\
    \ = nums.filterNot(numsSet.contains)\n        minSum + minSubArraySum(subArray)",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L){\
    \ (sum, num) =>\n            val newSum = sum + num\n            if (newSum <\
    \ minSum) newSum else minSum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0L)((sum, num) => sum\
    \ + num)\n        val minSumList = numsCopy.filter(num => num < minSum).map(num\
    \ => num - minSum).sorted\n        minSumList.foldLeft(0L)((sum, num) => sum +\
    \ num)", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L){\
    \ (sum, num) =>\n            val newSum = sum + num\n            if (newSum <\
    \ minSum) newSum else minSum\n        }\n        minSum", "        val minSum\
    \ = nums.foldLeft(0L) { (sum, elem) => sum + elem }\n        val maxSum = nums.foldRight(0L)\
    \ { (sum, elem) => sum + elem }\n        minSum + maxSum", "        val numsSorted\
    \ = nums.sort\n        val sums = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumsSum = mutable.ArrayBuffer.empty[Long]\n        val numsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        var sum = 0L\n        var sumOfSum = 0L\n        var sumOfNumsSum = 0L\n\
    \        var numsSumOfNumsSum = 0L\n        var numsSumOfSum = 0L\n        var\
    \ numsSumOfNumsSumOfNumsSum = 0L\n        var numsSumOfNumsSumOfSum = 0L\n   \
    \     var numsSumOfNumsSumOfNumsSumOfSum = 0L\n        var numsSumOfNumsSumOfNumsSumOfNumsSum\
    \ = 0L\n        var numsSumOfNumsSumOfNumsSumOfNumsSumOfSum = 0L\n        var\
    \ numsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSum = 0L\n        var numsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfSum\
    \ = 0L\n        var numsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSum = 0L\n\
    \        var numsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfSum = 0L\n\
    \        var numsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSum = 0L\n\
    \        var numsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfSum\
    \ = 0L\n        var numsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSum\
    \ = 0L\n        var numsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfSum\
    \ = 0L\n        var numsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSum\
    \ = 0L\n        var numsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfNumsSumOfSum\
    \ = 0L\n        var numsSumOfNumsSumOfNumsSumOf", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   val numsCopy = nums.toList\n        val numsCopySize = numsCopy.size\n   \
    \     val numsCopyIterator = numsCopy.iterator\n        val numsCopyIteratorSize\
    \ = numsCopyIterator.size\n        val numsCopyIteratorIterator = numsCopyIterator.iterator\n\
    \        val numsCopyIteratorIteratorSize = numsCopyIteratorIterator.size\n  \
    \      val numsCopyIteratorIteratorIterator = numsCopyIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorSize = numsCopyIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIterator = numsCopyIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorSize = numsCopyIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIterator = numsCopyIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorSize = numsCopyIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIterator = numsCopyIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorSize = numsCopyIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIterator = numsCopyIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorSize = numsCopyIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIterator", "        val minSum = math.max(nums.sum, 0)\n        val\
    \ subArray = nums.sliding(2).filter(_(0) != 0).map(_(1) + _(1)).toList\n     \
    \   val subArraySum = subArray.sum\n        if (subArraySum < minSum) minSum\n\
    \        else subArraySum", "        val minSum = math.max(nums.sum, 0)\n    \
    \    val numsCopy = nums.toList\n        var sum = 0L\n        var i = 0\n   \
    \     while (i < numsCopy.size) {\n            sum += numsCopy(i)\n          \
    \  if (sum < minSum) {\n                minSum = sum\n            }\n        \
    \    i += 1\n        }\n        minSum", "        val minSum = math.max(nums.sum,\
    \ 0)\n        val subArray = nums.filter(_ > minSum)\n        subArray.foldLeft(minSum)\
    \ { (sum, elem) => sum + elem }", "        val numsCopy = nums.toList\n      \
    \  val minSum = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val minSum = nums.foldLeft(0L)((sum, num) => sum +\
    \ num)\n        val maxSum = nums.foldRight(0L)((sum, num) => sum + num)\n   \
    \     minSum + maxSum", "        val minSum = nums.foldLeft(0L) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val n = nums.length\n        val\
    \ m = nums.max\n        val sums = mutable.ArrayBuffer.empty[Long]\n        val\
    \ minSum = math.Long.MaxValue\n        for(i <- 0 until n) {\n            val\
    \ sum = 0L\n            for(j <- 0 until i) {\n                sum += nums(j)\n\
    \            }\n            sums += sum\n            if(sum < minSum) {\n    \
    \            minSum = sum\n            }\n        }\n        minSum", "      \
    \  val numsSorted = nums.sortBy(_)\n        val sums = numsSorted.scanLeft(0){\
    \ (sum, elem) => sum + elem }\n        val minSum = sums.min\n        minSum",
  "        val numsSorted = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0)(_\
    \ + _)\n        val minSum = sums.min\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(numsCopy(0)) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < minSum)\n \
    \               newSum\n            else\n                minSum\n        }\n\
    \        minSum", "        val minSum = math.min(nums.sum, nums.tail.sum)\n  \
    \      val subArray = nums.filter(_ > minSum)\n        minSubArraySum(subArray)",
  "        val sums = mutable.HashMap.empty[Long, Long]\n        for (i <- 0 until\
    \ nums.size) {\n            val sum = nums(i) + sums.getOrElse(nums(i), 0)\n \
    \           sums += (sum -> sum)\n        }\n        sums.values.min", "     \
    \   val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n       \
    \ val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSet", "        val numsSorted = nums.sortBy(_)\n        val sums\
    \ = numsSorted.scanLeft(0)(_ + _)\n        sums.min", "        val numsSet = nums.toSet\n\
    \        val minSum = nums.foldLeft(0L){ (sum, elem) =>\n            if (numsSet.contains(elem))\
    \ sum + elem\n            else sum\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0L){ (sum, num) =>\n \
    \           val newSum = sum + num\n            if(newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsSorted = nums.sort\n  \
    \      val minSum = numsSorted.head\n        val minSumIndex = numsSorted.indexOf(minSum)\n\
    \        val minSumIndexes = numsSorted.take(minSumIndex + 1)\n        val minSumIndexesSum\
    \ = minSumIndexes.sum\n        val minSumIndexesSumIndex = numsSorted.indexOf(minSumIndexesSum)\n\
    \        val minSumIndexesSumIndexes = numsSorted.take(minSumIndexesSumIndex +\
    \ 1)\n        val minSumIndexesSumIndexesSum = minSumIndexesSumIndexes.sum\n \
    \       val minSumIndexesSumIndexesSumIndex = numsSorted.indexOf(minSumIndexesSumIndexesSum)\n\
    \        val minSumIndexesSumIndexesSumIndexes = numsSorted.take(minSumIndexesSumIndexesSumIndex\
    \ + 1)\n        val minSumIndexesSumIndexesSumIndexesSum = minSumIndexesSumIndexesSumIndexes.sum\n\
    \        val minSumIndexesSumIndexesSumIndexesSumIndex = numsSorted.indexOf(minSumIndexesSumIndexesSumIndexesSum)\n\
    \        val minSumIndexesSumIndexesSumIndexesSumIndexes = numsSorted.take(minSumIndexesSumIndexesSumIndexesSumIndex\
    \ + 1)\n        val minSumIndexesSumIndexesSumIndexesSumIndexesSum = minSumIndexesSumIndexesSumIndexesSumIndexes.sum\n\
    \        val minSumIndexesSumIndexesSumIndexesSumIndexesSumIndex = numsSorted.indexOf(minSumIndexesSumIndexesSumIndexesSumIndexesSum)\n\
    \        val minSumIndexesSumIndexesSumIndexesSumIndexesSumIndexes = numsSorted.take(minSumIndexesSumIndexesSumIndexesSumIndexesSumIndex\
    \ + 1)\n        val minSumIndexesSumIndexesSumIndexesSumIndexesSumIndexesSum =\
    \ minSumIndexesSumIndexesSumIndexesSumIndexesSumIndexesSum.sum\n        val minSumIndexesSumIndexesSumIndexesSumIndexesSumIndexesSumIndexesSum\
    \ = numsSorted.indexOf(minSumIndexesSumIndexesSumIndexesSumIndexesSumIndexesSumIndexesSum)\n\
    \        val minSumIndexesSumIndexesSumIndexesSumIndexesSumIndexesSumIndexesSumIndexes\
    \ = numsSorted.take(minSumIndexesSumIndexesSumIndexes", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0L) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val minSum = nums.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n        val subArray = nums.filter(_ > minSum)\n\
    \        minSubArraySum(subArray)", "        val numsArray = nums.toArray\n  \
    \      val numsArrayLen = numsArray.length\n        val minSum = numsArray(0)\n\
    \        val minSumArray = numsArray.toArray\n        val minSumArrayLen = minSumArray.length\n\
    \        val minSumArrayLen2 = minSumArrayLen * minSumArrayLen\n        val minSumArrayLen3\
    \ = minSumArrayLen2 * minSumArrayLen\n        val minSumArrayLen4 = minSumArrayLen3\
    \ * minSumArrayLen\n        val minSumArrayLen5 = minSumArrayLen4 * minSumArrayLen\n\
    \        val minSumArrayLen6 = minSumArrayLen5 * minSumArrayLen\n        val minSumArrayLen7\
    \ = minSumArrayLen6 * minSumArrayLen\n        val minSumArrayLen8 = minSumArrayLen7\
    \ * minSumArrayLen\n        val minSumArrayLen9 = minSumArrayLen8 * minSumArrayLen\n\
    \        val minSumArrayLen10 = minSumArrayLen9 * minSumArrayLen\n        val\
    \ minSumArrayLen11 = minSumArrayLen10 * minSumArrayLen\n        val minSumArrayLen12\
    \ = minSumArrayLen11 * minSumArrayLen\n        val minSumArrayLen13 = minSumArrayLen12\
    \ * minSumArrayLen\n        val minSumArrayLen14 = minSumArrayLen13 * minSumArrayLen\n\
    \        val minSumArrayLen15 = minSumArrayLen14 * minSumArrayLen\n        val\
    \ minSumArrayLen16 = minSumArrayLen15 * minSumArrayLen\n        val minSumArrayLen17\
    \ = minSumArrayLen16 * minSumArrayLen\n        val minSumArrayLen18 = minSumArrayLen17\
    \ * minSumArrayLen\n        val minSumArrayLen19 = minSumArrayLen18 * minSumArrayLen\n\
    \        val minSumArrayLen20 = minSumArrayLen19 * minSumArrayLen\n        val\
    \ minSumArrayLen21 = minSumArrayLen20 * minSumArrayLen\n        val minSumArrayLen22\
    \ = minSumArrayLen21 * minSumArrayLen\n        val minSumArrayLen23 = minSumArrayLen22\
    \ * minSumArrayLen\n        val minSumArrayLen24 = minSumArrayLen23 * minSumArrayLen\n\
    \        val minSumArrayLen25 = minSumArrayLen24 * minSumArrayLen\n        val\
    \ minSumArrayLen26 = minSumArrayLen25 * minSumArray", "        val n = nums.size\n\
    \        val minSum = math.max(nums.sum, 0)\n        val subArrays = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val subArray = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until\
    \ n) {\n            if (nums(i) < 0) {\n                subArray.append(nums(i))\n\
    \            } else {\n                val subArraySum = subArray.sum\n      \
    \          if (subArraySum < minSum) {\n                    minSum = subArraySum\n\
    \                    subArrays = subArray\n                    subArray = mutable.ArrayBuffer.empty[Long]\n\
    \                }\n                subArray.append(nums(i))\n            }\n\
    \        }\n        minSum", "        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        var sum = 0L\n        var i = 0\n        while(i < nums.size) {\n   \
    \         sum += nums(i)\n            sums += sum\n            i += 1\n      \
    \  }\n        sums.min", "        val numsSet = nums.toSet\n        val sums =\
    \ mutable.HashSet[Long]()\n        val minSum = Long.MaxValue\n        for(i <-\
    \ 0 until nums.size) {\n            val sum = nums.filterNot(numsSet).sum\n  \
    \          sums += sum\n            if(sum < minSum) {\n                minSum\
    \ = sum\n            }\n        }\n        minSum", "        val sums = mutable.HashMap[List[Long],\
    \ Long]()\n        for(i <- 0 until nums.size) {\n            val subList = nums.slice(i+1,\
    \ nums.size).filter(_ > 0)\n            val sum = subList.foldLeft(0)(_ + _)\n\
    \            sums += (subList -> sum)\n        }\n        sums.minBy(_._2)._2",
  "        val numsArray = nums.toArray\n        val numsArrayLen = numsArray.length\n\
    \        val minSum = numsArray(0)\n        val minSumIndex = 0\n        val minSumArray\
    \ = new Array[Long](numsArrayLen)\n        val minSumArrayLen = minSumArray.length\n\
    \        val minSumArrayIndex = 0\n        val minSumArrayLenIndex = minSumArrayIndex\n\
    \        val minSumArraySum = numsArray(0)\n        val minSumArraySumIndex =\
    \ minSumArrayIndex\n        val minSumArraySumIndex = minSumArrayIndex\n     \
    \   val minSumArraySum = numsArray(0)\n        val minSumArraySumIndex = minSumArrayIndex\n\
    \        val minSumArraySumIndex = minSumArrayIndex\n        val minSumArraySum\
    \ = numsArray(0)\n        val minSumArraySumIndex = minSumArrayIndex\n       \
    \ val minSumArraySumIndex = minSumArrayIndex\n        val minSumArraySum = numsArray(0)\n\
    \        val minSumArraySumIndex = minSumArrayIndex\n        val minSumArraySumIndex\
    \ = minSumArrayIndex\n        val minSumArraySum = numsArray(0)\n        val minSumArraySumIndex\
    \ = minSumArrayIndex\n        val minSumArraySumIndex = minSumArrayIndex\n   \
    \     val minSumArraySum = numsArray(0)\n        val minSumArraySumIndex = minSumArrayIndex\n\
    \        val minSumArraySumIndex = minSumArrayIndex\n        val minSumArraySum\
    \ = numsArray(0)\n        val minSumArraySumIndex = minSumArrayIndex\n       \
    \ val minSumArraySumIndex = minSumArrayIndex\n        val minSumArraySum = numsArray(0)\n\
    \        val minSumArraySumIndex = minSumArrayIndex\n        val minSumArraySumIndex\
    \ = minSumArrayIndex\n        val minSumArraySum = numsArray(0)\n        val minSumArraySumIndex\
    \ = minSumArrayIndex\n        val minSumArraySumIndex = minSumArrayIndex\n   \
    \     val minSumArraySum = numsArray(0)\n        val minSumArraySumIndex = minSumArrayIndex\n\
    \        val minSumArraySumIndex = minSumArrayIndex\n        val minSumArraySum\
    \ = numsArray(0)\n        val minSumArraySumIndex = minSumArrayIndex\n       \
    \ val minSumArraySumIndex = minSumArrayIndex\n        val minSumArraySum = numsArray(0)\n\
    \        val minSumArraySumIndex = minSumArrayIndex\n        val minSum", "  \
    \      val numsSet = nums.toSet\n        val minSum = nums.foldLeft(0L)((sum,\
    \ num) => sum + num)\n        val subArray = nums.filter(num => numsSet.contains(num))\n\
    \        minSum + minSubArraySum(subArray)", "        val minSum = math.min(nums.sum,\
    \ math.max(nums.sum))\n        val subArray = nums.filter(n => n > minSum)\n \
    \       minSubArraySum(subArray)", "        val numsCopy = nums.toList\n     \
    \   val minSum = numsCopy.foldLeft(0L)((sum, num) => sum + num)\n        val subArray\
    \ = numsCopy.filter(_ > minSum)\n        minSubArraySum(subArray)", "        val\
    \ numsSet = nums.toSet\n        val minSum = nums.foldLeft(0L)((sum, num) => sum\
    \ + num)\n        val subArray = nums.filter(num => numsSet.contains(num))\n \
    \       minSum + minSubArraySum(subArray)", "        val minSum = math.min(nums.sum)\n\
    \        val subArray = nums.filter(x => x >= minSum)\n        subArray.foldLeft(minSum)((acc,\
    \ x) => acc + x)", "        val minSum = math.max(nums.sum, 0)\n        val maxSum\
    \ = math.min(nums.sum, 0)\n        val subArray = nums.filter(_ > minSum).filter(_\
    \ < maxSum)\n        minSubArraySum(subArray)", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0L){ (sum, elem) => sum + elem}\n    \
    \    val minSumList = numsCopy.foldLeft(List[Long]()){ (sumList, elem) => sumList\
    \ :+ sum + elem}\n        val minSumListCopy = minSumList.toList\n        val\
    \ minSumListCopy.min", "        val minSum = math.min(nums.sum, math.max(nums.sum))\n\
    \        val subArray = nums.filter(_ > minSum)\n        minSum + minSubArraySum(subArray)",
  "        val numsArray = nums.toArray\n        val numsArrayLength = numsArray.length\n\
    \        val numsArraySum = numsArray.reduceLeft(_ + _)\n        val numsArraySumLength\
    \ = numsArraySum.length\n        val numsArraySumTot = numsArraySum.foldLeft(0L){\
    \ (sum, elem) => sum + elem}\n        val numsArraySumTotLength = numsArraySumTot.length\n\
    \        val numsArraySumTotTot = numsArraySumTot.foldLeft(0L){ (sum, elem) =>\
    \ sum + elem}\n        val numsArraySumTotTotLength = numsArraySumTotTot.length\n\
    \        val numsArraySumTotTotTot = numsArraySumTotTot.foldLeft(0L){ (sum, elem)\
    \ => sum + elem}\n        val numsArraySumTotTotTotLength = numsArraySumTotTotTot.length\n\
    \        val numsArraySumTotTotTotTot = numsArraySumTotTotTot.foldLeft(0L){ (sum,\
    \ elem) => sum + elem}\n        val numsArraySumTotTotTotTotLength = numsArraySumTotTotTotTot.length\n\
    \        val numsArraySumTotTotTotTotTot = numsArraySumTotTotTotTot.foldLeft(0L){\
    \ (sum, elem) => sum + elem}\n        val numsArraySumTotTotTotTotTotLength =\
    \ numsArraySumTotTotTotTotTot.length\n        val numsArraySumTotTotTotTotTotTot\
    \ = numsArraySumTotTotTotTotTot.foldLeft(0L){ (sum, elem) => sum + elem}\n   \
    \     val numsArraySumTotTotTotTotTotTotLength = numsArraySumTotTotTotTotTotTot.length\n\
    \        val numsArraySumTotTotTotTotTotTotTot = numsArraySumTotTotTotTotTotTot.foldLeft(0L){\
    \ (sum, elem) => sum + elem}\n        val numsArraySumTo", "        val minSum\
    \ = nums.foldLeft(0L)((sum, num) => sum + num)\n        val maxSum = nums.foldRight(0L)((sum,\
    \ num) => sum + num)\n        minSum + maxSum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0L)((sum, num) => sum + num)\n       \
    \ val maxSum = numsCopy.foldRight(0L)((sum, num) => sum + num)\n        minSum\
    \ + maxSum", "        val minSum = math.min(nums.sum)\n        val subArray =\
    \ nums.filter(_ > minSum)\n        minSubArraySum(subArray)", "        val minSum\
    \ = nums.foldLeft(0L) { (sum, elem) => sum + elem }\n        val maxSum = nums.foldRight(0L)\
    \ { (sum, elem) => sum + elem }\n        minSum + maxSum", "        val minSum\
    \ = math.max(nums.sum, 0)\n        val subArray = nums.sliding(2).map {\n    \
    \        x => if (x.sum < minSum) x.sum\n            else minSum\n        }.toList\n\
    \        subArray.sum", "        val minSum = nums.foldLeft(0L)((sum, num) =>\
    \ sum + num)\n        val subArray = nums.filter(_ > minSum)\n        minSubArraySum(subArray)",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val minSum\
    \ = math.min(nums.sum, math.max(nums.sum, 0))\n        val subArray = nums.filter(_\
    \ > minSum)\n        if (subArray.nonEmpty) {\n            val subArraySum = subArray.sum\n\
    \            if (subArraySum < minSum) {\n                minSum\n           \
    \ } else {\n                minSubArraySum(subArray)\n            }\n        }\
    \ else {\n            minSum\n        }", "        val minSum = nums.foldLeft(0L){\
    \ (sum, elem) => sum + elem}\n        val subArray = nums.filter(elem => sum >\
    \ 0)\n        minSum + minSubArraySum(subArray)", "        val numsSet = nums.toSet\n\
    \        val numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator",
  "        val numsSet = nums.toSet\n        val minSum = nums.foldLeft(0L)((sum,\
    \ num) => sum + num)\n        val minSumSet = minSum.toSet\n        val minSumSetSize\
    \ = minSumSet.size\n        val minSumSetIterator = minSumSet.iterator\n     \
    \   val minSumSetIteratorSize = minSumSetIterator.size\n        val minSumSetIteratorIterator\
    \ = minSumSetIterator.iterator\n        val minSumSetIteratorIteratorSize = minSumSetIteratorIterator.size\n\
    \        val minSumSetIteratorIteratorIterator = minSumSetIteratorIterator.iterator\n\
    \        val minSumSetIteratorIteratorIteratorSize = minSumSetIteratorIteratorIterator.size\n\
    \        val minSumSetIteratorIteratorIteratorIterator = minSumSetIteratorIteratorIterator.iterator\n\
    \        val minSumSetIteratorIteratorIteratorIteratorSize = minSumSetIteratorIteratorIteratorIterator.size\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIterator = minSumSetIteratorIteratorIteratorIterator.iterator\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIteratorSize = minSumSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIteratorIterator = minSumSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIteratorIteratorSize = minSumSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = minSumSetIteratorIteratorIteratorIteratorIteratorIteratorIterator", "    \
    \    val n = nums.length\n        val m = nums.reduce((a, b) => a + b)\n     \
    \   val maxSum = math.max(nums.reduce((a, b) => a + b), m)\n        val minSum\
    \ = math.min(nums.reduce((a, b) => a + b), m)\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val minSums = mutable.ArrayBuffer.empty[Long]\n        val maxSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val minSumsIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxSumsIndex = mutable.ArrayBuffer.empty[Int]\n        val minSumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxSumsIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val minSumsIndex = mutable.ArrayBuffer.empty[Int]\n        val maxSumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minSumsIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxSumsIndex = mutable.ArrayBuffer.empty[Int]\n        val minSumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxSumsIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val minSumsIndex = mutable.ArrayBuffer.empty[Int]\n        val maxSumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minSumsIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxSumsIndex = mutable.ArrayBuffer.empty[Int]\n        val minSumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxSumsIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val minSumsIndex = mutable.ArrayBuffer.empty[Int]\n        val maxSumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minSumsIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxSumsIndex = mutable.ArrayBuffer.empty[Int]\n        val minSumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxSumsIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val minSumsIndex = mutable.ArrayBuffer.empty[Int]\n        val maxSumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val minSumsIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val maxSumsIndex = mutable.ArrayBuffer.empty[Int]\n        val minSumsIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val maxSumsIndex = mutable.ArrayBuffer.empty[",
  "        val minSum = math.min(nums.sum, math.max(nums.sum - nums.head, 0))\n  \
    \      val subArray = nums.filter(_ > minSum)\n        minSubArraySum(subArray)",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val minSum\
    \ = math.max(nums.sum, 0)\n        val subArray = nums.sliding(2).map(_.sum).filter(_.nonEmpty)\n\
    \        subArray.foldLeft(minSum)((sum, arr) => sum + arr)", "        val minSum\
    \ = nums.reduceLeft(_ + _)\n        val subArray = nums.filter(x => x >= minSum)\n\
    \        minSum + minSubArraySum(subArray)", "        val numsSet = nums.toSet\n\
    \        val minSum = nums.foldLeft(0L) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (numsSet.contains(newSum)) {\n                newSum\n\
    \            } else {\n                sum\n            }\n        }\n       \
    \ minSum", "        val minSum = nums.foldLeft(0L) { (sum, num) =>\n         \
    \   val newSum = sum + num\n            if (newSum < minSum) newSum else minSum\n\
    \        }\n        minSum", "        val minSum = nums.foldLeft(0L) { (sum, num)\
    \ => sum + num }\n        val maxSum = nums.foldRight(0L) { (sum, num) => sum\
    \ + num }\n        minSum + maxSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val minSum = numsSorted.foldLeft(0L) { (sum, elem) =>\n      \
    \      val newSum = sum + elem\n            if (newSum < minSum) newSum else minSum\n\
    \        }\n        minSum", "        val minSum = math.min(nums.sum, math.max(nums.sum))\n\
    \        val subArray = nums.filter(x => x >= minSum)\n        subArray.foldLeft(math.min(nums.sum,\
    \ math.max(nums.sum))) { case (acc, x) => math.min(acc, x) }", "        val minSum\
    \ = nums.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n  \
    \          if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val minSum = nums.foldLeft(0L){ (sum, elem) => sum + elem}\n        val\
    \ maxSum = nums.foldRight(0L){ (sum, elem) => sum + elem}\n        minSum + maxSum",
  "        val sums = mutable.ArrayBuffer.empty[Long]\n        var sum = 0L\n    \
    \    var i = 0\n        var j = 0\n        var k = 0\n        while(i < nums.size)\
    \ {\n            sum = 0L\n            sums += sum\n            while(j < nums.size)\
    \ {\n                if(nums(j) < nums(j+1)) {\n                    sum += nums(j)\n\
    \                    j++\n                } else {\n                    sum +=\
    \ nums(j+1)\n                    k++\n                }\n            }\n     \
    \       sum -= nums(i)\n            i += 1\n        }\n        sums.min", "  \
    \      val numsSorted = nums.sortWith(_ < _)\n        val sums = numsSorted.foldLeft(List[Long]())((sums,\
    \ num) => {\n            val sum = sums.head + num\n            sums.tail.head\
    \ < sum ? sums.tail.head : sum\n        })\n        sums.head", "        val minSum\
    \ = nums.foldLeft(0L) { (sum, elem) => sum + elem }\n        val maxSum = nums.foldRight(0L)\
    \ { (sum, elem) => sum + elem }\n        minSum + maxSum", "        val minSum\
    \ = math.min(nums.sum, math.max(nums.sum))\n        val subArray = nums.filter(_\
    \ > minSum)\n        minSum + minSubArraySum(subArray)", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0L) { (sum, elem) =>\n\
    \            val newSum = sum + elem\n            if (newSum < minSum) newSum\
    \ else minSum\n        }\n        minSum", "        val minSum = nums.foldLeft(0L)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0L)((sum, num) => {\n     \
    \       val newSum = sum + num\n            if (numsSet.contains(newSum)) {\n\
    \                newSum\n            } else {\n                sum\n         \
    \   }\n        })\n        minSum", "        val numsCopy = nums.toList\n    \
    \    val minSum = numsCopy.foldLeft(0L){ (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val minSum = math.min(nums.sum, math.max(nums.sum))\n\
    \        val subArray = nums.filter(_ > minSum)\n        minSubArraySum(subArray)",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L){\
    \ (sum, num) => sum + num }\n        val subArray = numsCopy.filter(num => sum\
    \ >= minSum)\n        minSubArraySum(subArray)", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0L){ (sum, elem) => sum + elem }\n   \
    \     val maxSum = numsCopy.foldRight(0L){ (sum, elem) => sum + elem }\n     \
    \   val minSumIndexes = numsCopy.zipWithIndex.filter(_._2 <= minSum).map(_._1)\n\
    \        val maxSumIndexes = numsCopy.zipWithIndex.filter(_._2 >= maxSum).map(_._1)\n\
    \        val minSumSubArray = numsCopy.slice(minSumIndexes.head, minSumIndexes.last)\n\
    \        val maxSumSubArray = numsCopy.slice(maxSumIndexes.head, maxSumIndexes.last)\n\
    \        minSumSubArray.foldLeft(0L){ (sum, elem) => sum + elem }", "        val\
    \ sums = mutable.ArrayBuffer.empty[Long]\n        val minSum = math.Long.MaxValue\n\
    \        for(i <- 0 until nums.length)\n            sums += nums(i)\n        for(i\
    \ <- 0 until sums.length)\n            minSum = min(minSum, sums(i))\n       \
    \ minSum", "        val numsArray = nums.toArray\n        val numsArrayLen = numsArray.length\n\
    \        val minSum = numsArray(0)\n        val minSumIndex = 0\n        val minSumArray\
    \ = numsArray.filter(_ != minSum).map(x => x - minSum).toArray\n        val minSumArrayLen\
    \ = minSumArray.length\n        val minSumArraySum = minSumArray.sum\n       \
    \ val minSumArraySumIndex = 0\n        val minSumArraySumArray = minSumArray.filter(_\
    \ != minSumArraySum).map(x => x - minSumArraySum).toArray\n        val minSumArraySumArrayLen\
    \ = minSumArraySumArray.length\n        val minSumArraySumArraySum = minSumArraySumArray.sum\n\
    \        val minSumArraySumArraySumIndex = 0\n        val minSumArraySumArraySumArray\
    \ = minSumArraySumArray.filter(_ != minSumArraySumArray).map(x => x - minSumArraySumArray).toArray\n\
    \        val minSumArraySumArraySumArrayLen = minSumArraySumArraySumArray.length\n\
    \        val minSumArraySumArraySumArraySum = minSumArraySumArraySumArray.sum\n\
    \        val minSumArraySumArraySumArraySumIndex = 0\n        val minSumArraySumArraySumArraySumArray\
    \ = minSumArraySumArraySumArray.filter(_ != minSumArraySumArraySumArray).map(x\
    \ => x - minSumArraySumArraySumArray).toArray\n        val minSumArraySumArraySumArrayLen\
    \ = minSumArraySumArraySumArrayLen.sum\n        val minSumArraySumArraySumArraySum\
    \ = minSumArraySumArraySumArraySum.sum\n        val minSumArraySumArraySumArraySumIndex\
    \ = 0\n        val minSumArraySumArraySumArraySumArray = minSumArraySumArraySumArraySumArray.filter(_\
    \ != minSumArraySumArraySumArray).map(x => x - minSumArraySumArraySumArray).toArray\n\
    \        val minSumArraySumArraySumArrayLen = minSumArraySumArraySumArrayLen.sum\n\
    \        val minSumArraySumArraySumArraySum = minSumArraySumArraySumArraySum.sum\n\
    \        val minSumArraySumArraySumArraySumIndex = 0\n        val minSumArraySumArraySumArraySumArray\
    \ = minSumArraySumArraySumArraySumArray.filter(_ != minSumArraySumArraySumArray).map(x\
    \ => x - minSumArraySumArraySumArray).toArray\n        val min", "        val\
    \ numsSet = nums.toSet\n        val minSum = nums.foldLeft(0L) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (numsSet.contains(newSum))\n\
    \                newSum\n            else\n                sum\n        }\n  \
    \      minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val numsSortedSet = nums.sort\n        val numsSortedSetSet\
    \ = numsSortedSet.toSet\n        val numsSortedSetSetSet = numsSortedSetSet.toSet\n\
    \        val numsSortedSetSetSetSet = numsSortedSetSetSet.toSet\n        val numsSortedSetSetSetSetSet\
    \ = numsSortedSetSetSetSet.toSet\n        val numsSortedSetSetSetSetSetSet = numsSortedSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet", "        val minSum = nums.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n        val subArray = nums.filter(elem => sum\
    \ >= elem)\n        minSum + minSubArraySum(subArray)", "        val minSum =\
    \ nums.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n    \
    \        if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val numsArray = nums.toArray\n        val numsArrayLen = numsArray.length\n\
    \        val numsArraySum = numsArray.sum\n        val numsArraySumMin = numsArraySum\
    \ - numsArray\n        val numsArraySumMax = numsArraySum + numsArray\n      \
    \  val numsArraySumMinMinus1 = numsArraySumMin - 1\n        val numsArraySumMinMinus2\
    \ = numsArraySumMin - 2\n        val numsArraySumMinMinus3 = numsArraySumMin -\
    \ 3\n        val numsArraySumMinMinus4 = numsArraySumMin - 4\n        val numsArraySumMinMinus5\
    \ = numsArraySumMin - 5\n        val numsArraySumMinMinus6 = numsArraySumMin -\
    \ 6\n        val numsArraySumMinMinus7 = numsArraySumMin - 7\n        val numsArraySumMinMinus8\
    \ = numsArraySumMin - 8\n        val numsArraySumMinMinus9 = numsArraySumMin -\
    \ 9\n        val numsArraySumMinMinus10 = numsArraySumMin - 10\n        val numsArraySumMinMinus11\
    \ = numsArraySumMin - 11\n        val numsArraySumMinMinus12 = numsArraySumMin\
    \ - 12\n        val numsArraySumMinMinus13 = numsArraySumMin - 13\n        val\
    \ numsArraySumMinMinus14 = numsArraySumMin - 14\n        val numsArraySumMinMinus15\
    \ = numsArraySumMin - 15\n        val numsArraySumMinMinus16 = numsArraySumMin\
    \ - 16\n        val numsArraySumMinMinus17 = numsArraySumMin - 17\n        val\
    \ numsArraySumMinMinus18 = numsArraySumMin - 18\n        val numsArraySumMinMinus19\
    \ = numsArraySumMin - 19\n        val numsArraySumMinMinus20 = numsArraySumMin\
    \ - 20\n        val numsArraySumMinMinus21 = numsArraySumMin - 21\n        val\
    \ numsArraySumMinMinus22 = numsArraySumMin - 22\n        val numsArraySumMinMinus23\
    \ = numsArraySumMin - 23\n        val numsArraySumMinMinus24 = numsArraySumMin\
    \ - 24\n", "        val numsArray = nums.toArray\n        val numsArrayLen = numsArray.length\n\
    \        val minSum = numsArray(0)\n        val minSumIndex = 0\n        val minSumSubArray\
    \ = numsArray.drop(1)\n        for (i <- 1 to numsArrayLen) {\n            val\
    \ currentSum = numsArray(i) + minSum\n            if (currentSum < minSum) {\n\
    \                minSum = currentSum\n                minSumIndex = i\n      \
    \          minSumSubArray = numsArray.drop(i)\n            }\n        }\n    \
    \    minSum", "        val minSum = math.min(nums.sum, math.max(nums.tail.sum))\n\
    \        val subArray = nums.filter(_ >= minSum)\n        minSubArraySum(subArray)",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val minSum\
    \ = math.min(nums.sum)\n        val subArray = nums.filter(x => x >= minSum)\n\
    \        subArray.sum", "        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n  \
    \          if (numsSet.contains(newSum))\n                newSum\n           \
    \ else\n                sum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0L)((sum, num) => {\n     \
    \       val newSum = sum + num\n            if(numsSet.contains(newSum)) {\n \
    \               newSum\n            } else {\n                sum\n          \
    \  }\n        })\n        minSum", "        val numsSet = nums.toSet\n       \
    \ val sums = mutable.HashMap[Long, Long]()\n        var minSum = Long.MaxValue\n\
    \        var minSumIndex = 0\n        for (i <- 0 until nums.size) {\n       \
    \     val curSum = nums(i) + sums.getOrElse(nums(i), 0L)\n            sums.put(nums(i),\
    \ curSum)\n            if (curSum < minSum) {\n                minSum = curSum\n\
    \                minSumIndex = i\n            }\n        }\n        minSum", " \
    \       val result = new mutable.HashMap[List[Long], Long]()\n        var minSum\
    \ = Long.MaxValue\n        var minSubArray = List[Long]()\n        for (i <- 0\
    \ until nums.size) {\n            val subArray = nums.slice(i+1, nums.size).filter(_\
    \ > 0)\n            val sum = subArray.foldLeft(0)(_ + _)\n            if (sum\
    \ < minSum) {\n                minSum = sum\n                minSubArray = subArray\n\
    \            }\n            val key = subArray.toList\n            if (!result.contains(key))\
    \ {\n                result.put(key, sum)\n            }\n        }\n        minSum",
  "        val numsSet = nums.toSet\n        val minSum = nums.foldLeft(0L){ (sum,\
    \ elem) => sum + elem }\n        val subArray = nums.filter(elem => numsSet.contains(elem))\n\
    \        minSum + minSubArraySum(subArray)", "        val minSum = math.min(nums.sum,\
    \ math.max(nums.sum))\n        val subArray = nums.filter(x => x >= minSum)\n\
    \        minSum + minSubArraySum(subArray)", "        val sums = mutable.HashMap[Long,\
    \ Long]()\n        val minSum = Long.MaxValue\n        for(i <- 0 until nums.size)\
    \ {\n            val sum = nums(i) + sums.getOrElse(nums(i), 0L)\n           \
    \ sums.put(sum, sum)\n            if(sum < minSum) minSum = sum\n        }\n \
    \       minSum", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val n = nums.size\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        var minSum = Long.MaxValue\n\
    \        var minIndex = 0\n        var sum = 0L\n        for (i <- 0 until n)\
    \ {\n            sum += nums(i)\n            if (sum < minSum) {\n           \
    \     minSum = sum\n                minIndex = i\n            }\n            sums\
    \ += sum\n        }\n        minSum", "        val minSum = nums.foldLeft(0L){\
    \ (sum, elem) => sum + elem}\n        val subArray = nums.filter(_ > minSum)\n\
    \        minSubArraySum(subArray)", "        val numsSet = nums.toSet\n      \
    \  val minSum = nums.foldLeft(0L)((sum, num) => {\n            val newSum = sum\
    \ + num\n            if (numsSet.contains(newSum))\n                newSum\n \
    \           else\n                sum\n        })\n        minSum", "        val\
    \ numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L){ (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < minSum) newSum\
    \ else minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n\
    \        var minSum = Long.MaxValue\n        var minSumIndex = 0\n        var\
    \ minSumSubArray = List[Long]()\n        for (i <- 0 until numsCopy.size) {\n\
    \            val currentSum = numsCopy(i) + minSum\n            if (currentSum\
    \ < minSum) {\n                minSum = currentSum\n                minSumIndex\
    \ = i\n                minSumSubArray = numsCopy.slice(i).filter(_ != minSum).toList\n\
    \            }\n        }\n        minSum", "        val n = nums.length\n   \
    \     val sums = mutable.ArrayBuffer.empty[Long]\n        val minSum = Long.MaxValue\n\
    \        for(i <- 0 until n) {\n            val subSum = nums.filter(_ != i).sum\n\
    \            sums += subSum\n            if(subSum < minSum) {\n             \
    \   minSum = subSum\n            }\n        }\n        minSum", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        val minSum = sums.min\n        minSum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0L) { (sum, num) =>\n            if (numsCopy.contains(num))\
    \ {\n                val newSum = sum + num\n                if (newSum < minSum)\
    \ newSum else minSum\n            } else {\n                sum\n            }\n\
    \        }\n        minSum", "        val numsSet = nums.toSet\n        val minSum\
    \ = nums.foldLeft(0L)((sum, num) => sum + num)\n        val subArray = nums.filter(num\
    \ => numsSet.contains(num))\n        minSum + minSubArraySum(subArray)", "   \
    \     val numsSorted = nums.sortBy(_)\n        val sums = numsSorted.scanLeft(0)(_\
    \ + _)\n        sums.min", "        val result = new mutable.HashMap[Long, Long]()\n\
    \        val numsCopy = nums.toList\n        val numsCopySize = numsCopy.size\n\
    \        val numsCopyIterator = numsCopy.iterator\n        val numsCopyIteratorSize\
    \ = numsCopyIterator.size\n        val numsCopyIteratorIterator = numsCopyIterator.iterator\n\
    \        val numsCopyIteratorIteratorSize = numsCopyIteratorIterator.size\n  \
    \      val numsCopyIteratorIteratorIterator = numsCopyIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorSize = numsCopyIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIterator = numsCopyIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorSize = numsCopyIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIterator = numsCopyIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorSize = numsCopyIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIterator = numsCopyIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorSize = numsCopyIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIterator = numsCopyIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorSize = numsCopyIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n  \
    \      val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopy", "        val minSum = nums.foldLeft(0L) { (sum, num) =>\n     \
    \       val newSum = sum + num\n            if (newSum < minSum) newSum else minSum\n\
    \        }\n        minSum", "        val minSum = nums.foldLeft(0L)((sum, num)\
    \ => {\n            val newSum = sum + num\n            if (newSum < minSum) newSum\
    \ else minSum\n        })\n        minSum", "        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val minSum = Long.MaxValue\n        for(i <- 0 until nums.size) {\n \
    \           val subSum = nums.slice(i).sum\n            sums += subSum\n     \
    \       if(subSum < minSum) {\n                minSum = subSum\n            }\n\
    \        }\n        minSum", "        val numsCopy = nums.toList\n        val\
    \ minSum = numsCopy.foldLeft(0L) { (sum, elem) => sum + elem }\n        val numsCopy2\
    \ = numsCopy.filter(_ > minSum)\n        minSubArraySum(numsCopy2)", "       \
    \ val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(numsCopy.head)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val minSum = numsSorted.foldLeft(0L) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum < minSum)\
    \ newSum else minSum\n        }\n        minSum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0L) { (sum, elem) => sum + elem }\n  \
    \      val subArraySum = numsCopy.foldLeft(0L) { (sum, elem) => sum + elem - minSum\
    \ }\n        minSum", "        val minSum = nums.foldLeft(0L) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val minSum = nums.foldLeft(0L)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0L) { (sum, num) =>\n     \
    \       val newSum = sum + num\n            if (numsSet.contains(newSum))\n  \
    \              newSum\n            else\n                sum\n        }\n    \
    \    minSum", "        val minSum = nums.reduceLeft((a, b) => math.min(a + b,\
    \ a))\n        val maxSum = nums.reduceRight((a, b) => math.max(a + b, a))\n \
    \       minSum + maxSum", "        val result = new mutable.HashMap[List[Long],\
    \ Long]()\n        val numsSorted = nums.sortWith(_ < _)\n        val minSum =\
    \ numsSorted.head\n        val minSumIndex = numsSorted.length\n        val minSumSubArray\
    \ = numsSorted.tail\n        val minSumSubArrayIndex = minSumSubArray.length\n\
    \        val minSumSubArraySum = minSumSubArray.sum\n        val minSumSubArraySumIndex\
    \ = minSumSubArraySum.length\n        val minSumSubArraySum = minSumSubArraySum.sum\n\
    \        val minSumSubArraySumIndex = minSumSubArraySum.length\n        val minSumSubArraySum\
    \ = minSumSubArraySum.sum\n        val minSumSubArraySumIndex = minSumSubArraySum.length\n\
    \        val minSumSubArraySum = minSumSubArraySum.sum\n        val minSumSubArraySumIndex\
    \ = minSumSubArraySum.length\n        val minSumSubArraySum = minSumSubArraySum.sum\n\
    \        val minSumSubArraySumIndex = minSumSubArraySum.length\n        val minSumSubArraySum\
    \ = minSumSubArraySum.sum\n        val minSumSubArraySumIndex = minSumSubArraySum.length\n\
    \        val minSumSubArraySum = minSumSubArraySum.sum\n        val minSumSubArraySumIndex\
    \ = minSumSubArraySum.length\n        val minSumSubArraySum = minSumSubArraySum.sum\n\
    \        val minSumSubArraySumIndex = minSumSubArraySum.length\n        val minSumSubArraySum\
    \ = minSumSubArraySum.sum\n        val minSumSubArraySumIndex = minSumSubArraySum.length\n\
    \        val minSumSubArraySum = minSumSubArraySum.sum\n        val minSumSubArraySumIndex\
    \ = minSumSubArraySum.length\n        val minSumSubArraySum = minSumSubArraySum.sum\n\
    \        val minSumSubArraySumIndex = minSumSubArraySum.length\n        val minSumSubArraySum\
    \ = minSumSubArraySum.sum\n        val minSumSubArraySumIndex = minSumSubArraySum.length\n\
    \        val minSumSubArraySum = minSumSubArraySum.sum\n        val minSumSubArraySumIndex\
    \ = minSumSubArraySum.length\n        val minSumSubArraySum = minSumSubArraySum.sum\n\
    \        val minSumSubArraySumIndex = minSumSubArraySum.length\n        val ",
  "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < minSum) newSum else minSum\n        }\n        minSum", "        val minSum\
    \ = nums.foldLeft(0L)((sum, elem) => sum + elem)\n        val maxSum = nums.foldRight(0L)((sum,\
    \ elem) => sum + elem)\n        minSum + maxSum", "        val numsCopy = nums.toList\n\
    \        val minSum = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val minSum = nums.foldLeft(0L)((sum, num) => sum +\
    \ num)\n        val subArray = nums.filter(num => num != minSum)\n        minSum\
    \ + minSubArraySum(subArray)", "        val minSum = math.max(nums.sum, 0)\n \
    \       val subArray = nums.filter(n => n > 0).map(n => n - minSum)\n        val\
    \ subArraySum = subArray.sum\n        if (subArraySum == 0) minSum\n        else\
    \ minSum + minSubArraySum(subArray)", "        val numsCopy = nums.toList\n  \
    \      val minSum = numsCopy.foldLeft(0L) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val n = nums.size\n        val m = nums.max\n     \
    \   val sums = mutable.ArrayBuffer.empty[Long]\n        val minSum = math.Long.MaxValue\n\
    \        for(i <- 0 until n) {\n            val subSum = nums(i) + minSum\n  \
    \          sums += subSum\n            if(subSum < minSum) {\n               \
    \ minSum = subSum\n            }\n        }\n        minSum", "        val numsArray\
    \ = nums.toArray\n        val minSum = numsArray.foldLeft(0L){ (sum, elem) =>\
    \ sum + elem }\n        val subArray = numsArray.filter(elem => elem > minSum)\n\
    \        minSubArraySum(subArray)", "        val numsArray = nums.toArray\n  \
    \      val numsArrayLength = numsArray.length\n        val numsArraySum = numsArray.reduceLeft(_\
    \ + _)\n        val numsArraySumLength = numsArraySum.length\n        val numsArraySumArray\
    \ = numsArraySum.toArray\n        val numsArraySumArrayLength = numsArraySumArray.length\n\
    \        val numsArraySumArraySum = numsArraySumArray.reduceLeft(_ + _)\n    \
    \    val numsArraySumArraySumLength = numsArraySumArraySum.length\n        val\
    \ numsArraySumArraySumArray = numsArraySumArraySum.toArray\n        val numsArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArray.length\n        val numsArraySumArraySumArraySum\
    \ = numsArraySumArraySumArray.reduceLeft(_ + _)\n        val numsArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArray.length\n        val numsArraySumArraySumArraySum\
    \ = numsArraySumArraySumArray.reduceLeft(_ + _)\n        val numsArraySumArraySumArraySumLength\
    \ = numsArraySumArraySumArraySum.length\n        val numsArraySumArraySumArraySumArray\
    \ = numsArraySumArraySumArraySum.toArray\n        val numsArraySumArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArraySumArray.length\n        val numsArraySumArraySumArraySumArraySum\
    \ = numsArraySumArraySumArraySumArray.reduceLeft(_ + _)\n        val numsArraySumArraySumArraySumArrayLength\
    \ = numsArraySumArraySumArraySumArray.length\n        val numsArraySumArraySumArraySumArraySum\
    \ = numsArraySumArraySumArraySumArray.reduceLeft(_ + _)\n        val numsArraySumArraySumArraySumArraySumLength\
    \ = numsArraySumArraySumArraySumArraySum.length\n        val numsArraySumArraySumArraySumArraySumArray\
    \ = numsArraySumArraySumArraySumArraySum.toArray\n        val numsArraySumArraySumArraySumArrayLengthLength\
    \ = numsArraySumArraySumArraySumArraySumArray.length\n        val numsArraySumArraySumArraySumArraySumArraySum\
    \ = numsArraySumArraySumArraySumArraySumArray.reduceLeft(_ + _)\n        val numsArray",
  "        val numsSet = nums.toSet\n        val minSum = nums.foldLeft(0L) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (numsSet.contains(newSum))\n\
    \                newSum\n            else\n                sum\n        }\n  \
    \      minSum", "        val minSum = nums.foldLeft(0L) { (sum, num) =>\n    \
    \        val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val minSum = nums.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n        val subArray = nums.filter(elem => sum\
    \ > 0)\n        minSum + minSubArraySum(subArray)", "        val numsSorted =\
    \ nums.sort\n        val sums = mutable.ArrayBuffer.empty[Long]\n        var sum\
    \ = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n        while(i\
    \ < numsSorted.length) {\n            while(j < numsSorted.length && numsSorted(j)\
    \ < numsSorted(i)) {\n                j += 1\n            }\n            while(k\
    \ <= j && numsSorted(k) < numsSorted(j)) {\n                sums += numsSorted(k)\n\
    \                k += 1\n            }\n            sum += numsSorted(j)\n   \
    \         i += 1\n            j += 1\n        }\n        sums.min", "        val\
    \ minSum = nums.foldLeft(0L) { (sum, num) =>\n            if (sum > num) sum\n\
    \            else sum + num\n        }\n        minSum", "        val numsArray\
    \ = nums.toArray\n        val sums = mutable.ArrayBuffer.empty[Long]\n       \
    \ var minSum = Long.MaxValue\n        var minIndex = 0\n        var currentSum\
    \ = 0\n        var currentIndex = 0\n        for (i <- 0 until numsArray.length)\
    \ {\n            currentSum += numsArray(i)\n            if (currentSum < minSum)\
    \ {\n                minSum = currentSum\n                minIndex = currentIndex\n\
    \            }\n            currentIndex += 1\n        }\n        minSum", " \
    \       val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L)((sum,\
    \ num) => {\n            val newSum = sum + num\n            if (newSum < minSum)\
    \ newSum else minSum\n        })\n        minSum", "        val minSum = math.min(nums.sum)\n\
    \        val subArray = nums.filter(_ < minSum)\n        minSum + minSubArraySum(subArray)",
  "        val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n    \
    \    val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize =\
    \ numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0)(_ + _)\n \
    \       sums.min", "        val numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n        val subArrays = numsCopy.sliding(2).filter(_\
    \ != numsCopy.last)\n        subArrays.foldLeft(minSum) { (sum, arr) => sum +\
    \ arr.sum }", "        val numsArray = nums.toArray\n        val minSum = numsArray.foldLeft(numsArray(0))\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ < sum) newSum else sum\n        }\n        minSum", "        val numsCopy =\
    \ nums.toList\n        val minSum = numsCopy.foldLeft(0L){ (sum, elem) => sum\
    \ + elem }\n        val subArray = numsCopy.filter(elem => sum >= minSum)\n  \
    \      minSubArraySum(subArray)", "        val minSum = math.min(nums.sum)\n \
    \       val subArray = nums.filter(_ > minSum)\n        minSubArraySum(subArray)",
  "        val minSum = math.min(nums.sum)\n        val subArray = nums.filter(_ >\
    \ minSum)\n        subArray.foldLeft(minSum) { (sum, elem) => sum + elem }", " \
    \       val minSum = math.max(nums.reduceLeft((a, b) => math.min(a, b)))\n   \
    \     val maxSum = math.min(nums.reduceLeft((a, b) => math.max(a, b)))\n     \
    \   val subArray = nums.filter(x => x >= minSum && x <= maxSum)\n        minSubArraySum(subArray)",
  "        val minSum = nums.foldLeft(0L) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) newSum else minSum\n        }\n\
    \        minSum", "        val numsSorted = nums.sortWith(_ < _)\n        val\
    \ sums = numsSorted.scanLeft(0)(_ + _)\n        sums.min", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        var sum = 0L\n        var minSum = Long.MaxValue\n\
    \        var minIndex = 0L\n        var i = 0L\n        var j = 0L\n        while(i\
    \ < numsSorted.length) {\n            val currentSum = numsSorted(i) + numsSorted(j)\n\
    \            sum += currentSum\n            if(sum < minSum) {\n             \
    \   minSum = sum\n                minIndex = i\n            }\n            i +=\
    \ 1\n            j += 1\n        }\n        minSum", "        val result = new\
    \ mutable.HashMap[Long, Long]()\n        val numsMap = nums.toMap\n        val\
    \ numsSet = nums.toSet\n        val numsIter = nums.iterator\n        val numsIterIter\
    \ = numsIter.iterator\n        val numsIterIterIter = numsIterIter.iterator\n\
    \        val numsIterIterIterIter = numsIterIterIter.iterator\n        val numsIterIterIterIterIter\
    \ = numsIterIterIterIter.iterator\n        val numsIterIterIterIterIterIter =\
    \ numsIterIterIterIterIter.iterator\n        val numsIterIterIterIterIterIter\
    \ = numsIterIterIterIterIterIter.iterator\n        val numsIterIterIterIterIterIterIter\
    \ = numsIterIterIterIterIterIterIter.iterator\n        val numsIterIterIterIterIterIterIterIter\
    \ = numsIterIterIterIterIterIterIterIter.iterator\n        val numsIterIterIterIterIterIterIterIterIter\
    \ = numsIterIterIterIterIterIterIterIter.iterator\n        val numsIterIterIterIterIterIterIterIter\
    \ = numsIterIterIterIterIterIterIterIterIter.iterator\n        val numsIterIterIterIterIterIterIterIterIter\
    \ = numsIterIterIterIterIterIterIterIterIterIter.iterator\n        val numsIterIterIterIterIterIterIterIterIterIter\
    \ = numsIterIterIterIterIterIterIterIterIterIter.iterator\n        val numsIterIterIterIterIterIterIterIterIterIter\
    \ = numsIterIterIterIterIterIterIterIterIterIter.iterator\n        val numsIterIterIterIterIterIterIterIterIterIter\
    \ = numsIterIterIterIterIterIterIterIterIterIterIter.iterator\n        val numsIterIterIterIterIterIterIterIterIterIterIter\
    \ = numsIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n        val\
    \ numsIterIterIterIterIterIterIterIterIterIterIter = numsIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val numsIterIterIterIterIterIterIterIterIterIterIter = numsIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val numsIterIterIterIterIterIterIterIterIterIterIter = numsIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val nums", "        val numsSet = nums.toSet\n        val sums = mutable.HashSet[Long]()\n\
    \        val minSum = Long.MaxValue\n        for(i <- 0 until nums.size) {\n \
    \           val subSum = nums.filter(_ != i).sum\n            sums += subSum\n\
    \            if(subSum < minSum) {\n                minSum = subSum\n        \
    \    }\n        }\n        minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val sums = numsSorted.scanLeft(0)(_ + _)\n        val min = sums.min\n\
    \        val max = sums.max\n        val sumOfMin = sums.find(_ == min).head\n\
    \        val sumOfMax = sums.find(_ == max).head\n        val sumOfMinAndMax =\
    \ sums.find(_ == min || _ == max).head\n        sumOfMinAndMax", "        val\
    \ numsCopy = nums.toList\n        val minSum = numsCopy.foldLeft(0L) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < minSum) newSum\
    \ else minSum\n        }\n        minSum", "        val numsSet = nums.toSet\n\
    \        val sums = mutable.HashMap[Long, Long]()\n        for(i <- 0 until nums.size)\
    \ {\n            val subArray = nums.slice(i+1, nums.size).filter(_ != nums(i))\n\
    \            val sum = subArray.foldLeft(0L)(_ + _)\n            sums += (sum\
    \ -> sum)\n        }\n        val minSum = sums.minBy(_._1)._2\n        minSum",
  "        val sums = mutable.ArrayBuffer.empty[Long]\n        val minSum = Long.MaxValue\n\
    \        for(i <- 0 until nums.size) {\n            val subSum = nums.slice(i).sum\n\
    \            sums += subSum\n            if(subSum < minSum) {\n             \
    \   minSum = subSum\n            }\n        }\n        minSum", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0L){ (sum, num) =>\n \
    \           val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val numsSet = nums.toSet\n    \
    \    val minSum = nums.foldLeft(0L) { (sum, num) =>\n            val newSum =\
    \ sum + num\n            if (numsSet.contains(newSum))\n                newSum\n\
    \            else\n                sum\n        }\n        minSum", "        val\
    \ numsSet = nums.toSet\n        val sums = mutable.HashMap[Long, Long]()\n   \
    \     val minSum = Long.MaxValue\n        for(i <- 0 until nums.size) {\n    \
    \        val currentSum = nums.filter(_ != i).sum\n            sums += (currentSum\
    \ to currentSum)\n            if(sums.values.min < minSum) {\n               \
    \ minSum = sums.values.min\n            }\n        }\n        minSum", "     \
    \   val numsSet = nums.toSet\n        val numsSetSize = numsSet.size\n       \
    \ val numsSetIterator = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator", "        val numsCopy =\
    \ nums.toList\n        var minSum = Long.MaxValue\n        var minSumIndex = 0\n\
    \        var minSumSubArray = List[Long]()\n        for (i <- 0 until numsCopy.size)\
    \ {\n            var sum = 0\n            var index = i\n            while (index\
    \ >= 0) {\n                sum += numsCopy(index)\n                index -= 1\n\
    \            }\n            if (sum < minSum) {\n                minSum = sum\n\
    \                minSumIndex = i\n                minSumSubArray = numsCopy.slice(i,\
    \ i + numsCopy.size)\n            }\n        }\n        minSum", "        val\
    \ minSum = nums.foldLeft(0L) { (sum, num) =>\n            val newSum = sum + num\n\
    \            if (newSum < minSum) newSum else minSum\n        }\n        minSum",
  "        val minSum = nums.foldLeft(0L)((sum, num) => sum + num)\n        val maxSum\
    \ = nums.foldRight(0L)((sum, num) => sum + num)\n        val minSumOfSubArray\
    \ = nums.foldLeft(0L)((sum, num) => sum + num - minSum)\n        val maxSumOfSubArray\
    \ = nums.foldRight(0L)((sum, num) => sum + num - maxSum)\n        minSumOfSubArray\
    \ < maxSumOfSubArray ? minSumOfSubArray : maxSumOfSubArray", "        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0L) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum", "        val minSum = nums.foldLeft(0L){\
    \ (sum, num) =>\n            val newSum = sum + num\n            if(newSum < minSum)\
    \ newSum else minSum\n        }\n        minSum", "        val numsSorted = nums.sortWith(_\
    \ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n        val minSum\
    \ = sums.min\n        val minSumIndex = sums.indexOf(minSum)\n        sums(minSumIndex)",
  "        val numsSorted = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0)(_\
    \ + _)\n        val minSum = sums.min\n        val maxSum = sums.max\n       \
    \ minSum + maxSum", "        val minSum = math.min(nums.sum, math.max(nums.sum))\n\
    \        val subArray = nums.filter(_ >= minSum)\n        minSum + minSubArraySum(subArray)",
  "        val numsSorted = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_\
    \ + _)\n        val minSum = sums.min\n        sums.last", "        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator", "        val minSum = math.min(nums.sum,\
    \ math.max(nums.sum, 0))\n        val subArray = nums.filter(x => x >= minSum)\n\
    \        subArray.foldLeft(minSum)((sum, num) => sum + num)", "        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0L) { (sum, num) =>\n     \
    \       val newSum = sum + num\n            if (numsSet.contains(newSum))\n  \
    \              newSum\n            else\n                sum\n        }\n    \
    \    minSum", "        val n = nums.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val minSum = Long.MaxValue\n        for(i <- 0 until n) {\n         \
    \   val subSum = nums.take(i).sum\n            sums += subSum\n            if(subSum\
    \ < minSum) {\n                minSum = subSum\n            }\n        }\n   \
    \     minSum", "        val minSum = math.min(nums.sum, math.max(nums.tail.sum,\
    \ 0))\n        val subArray = nums.filter(_ > minSum)\n        if (subArray.nonEmpty)\
    \ {\n            minSubArraySum(subArray)\n        } else {\n            minSum\n\
    \        }", "        val sums = mutable.HashMap[Int, Long]()\n        val numsLen\
    \ = nums.length\n        for(i <- 0 until numsLen) {\n            val subArray\
    \ = nums.slice(i+1, numsLen)\n            val sum = subArray.sum\n           \
    \ sums += (i -> sum)\n        }\n        val minSum = sums.minBy(_._2)._2\n  \
    \      minSum", "        val numsSorted = nums.sortWith(_ < _)\n        val sums\
    \ = numsSorted.scanLeft(0L)(_ + _)\n        sums.min", "        val numsArray\
    \ = nums.toArray\n        val numsArrayLen = numsArray.length\n        val minSum\
    \ = numsArray(0)\n        val minSumArray = numsArray.toArray\n        val minSumArrayLen\
    \ = minSumArray.length\n        val minSumArrayLen2 = minSumArrayLen * minSumArrayLen\n\
    \        val minSumArrayLen3 = minSumArrayLen2 * minSumArrayLen\n        val minSumArrayLen4\
    \ = minSumArrayLen3 * minSumArrayLen\n        val minSumArrayLen5 = minSumArrayLen4\
    \ * minSumArrayLen\n        val minSumArrayLen6 = minSumArrayLen5 * minSumArrayLen\n\
    \        val minSumArrayLen7 = minSumArrayLen6 * minSumArrayLen\n        val minSumArrayLen8\
    \ = minSumArrayLen7 * minSumArrayLen\n        val minSumArrayLen9 = minSumArrayLen8\
    \ * minSumArrayLen\n        val minSumArrayLen10 = minSumArrayLen9 * minSumArrayLen\n\
    \        val minSumArrayLen11 = minSumArrayLen10 * minSumArrayLen\n        val\
    \ minSumArrayLen12 = minSumArrayLen11 * minSumArrayLen\n        val minSumArrayLen13\
    \ = minSumArrayLen12 * minSumArrayLen\n        val minSumArrayLen14 = minSumArrayLen13\
    \ * minSumArrayLen\n        val minSumArrayLen15 = minSumArrayLen14 * minSumArrayLen\n\
    \        val minSumArrayLen16 = minSumArrayLen15 * minSumArrayLen\n        val\
    \ minSumArrayLen17 = minSumArrayLen16 * minSumArrayLen\n        val minSumArrayLen18\
    \ = minSumArrayLen17 * minSumArrayLen\n        val minSumArrayLen19 = minSumArrayLen18\
    \ * minSumArrayLen\n        val minSumArrayLen20 = minSumArrayLen19 * minSumArrayLen\n\
    \        val minSumArrayLen21 = minSumArrayLen20 * minSumArrayLen\n        val\
    \ minSumArrayLen22 = minSumArrayLen21 * minSumArrayLen\n        val minSumArrayLen23\
    \ = minSumArrayLen22 * minSumArrayLen\n        val minSumArrayLen24 = minSumArrayLen23\
    \ * minSumArrayLen\n        val minSumArrayLen25 = minSumArrayLen24 * minSumArrayLen\n\
    \        val minSumArrayLen26 = minSumArrayLen25 * minSumArray", "        val\
    \ sums = mutable.ArrayBuffer.empty[Long]\n        val numsLen = nums.size\n  \
    \      for(i <- 0 until numsLen) {\n            val subSum = nums.slice(i+1, numsLen).sum\n\
    \            sums += subSum\n        }\n        sums.min"]
stop_tokens:
- "\n    }\n"
