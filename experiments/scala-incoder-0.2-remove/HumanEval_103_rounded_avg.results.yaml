language: scala
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n <= m) Right(roundToNearestInt(m))\n\
    \        else Left(s\"$n must be greater than $m\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplgm1ernn.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (n <= m) Right(roundToNearestInt(m))\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          Not found: roundToNearestInt\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg) {\n            Right(binary)\n        } else {\n\
    \            Left(s\"$n / $m is $avg, not $rounded\")\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo2m9h5hf.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpo2m9h5hf.scala:14:18 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            Right(binary)\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (binary\
    \ : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n == 0 || m == 0)\
    \ Right(-1)\n        if (n > m) Right(-1)\n        val avg = n / m\n        val\
    \ rounded = math.round(avg)\n        val binary = binary(rounded)\n        Right(binary)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxlv3rvlm.scala:14:21 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m by -1\n\
    \        val avg = sum.sum / sum.count\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == 0) Right(bin) else Left(s\"$bin is not a valid\
    \ binary number\")\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmptvaown4z.scala:11:26 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum.sum / sum.count\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35m/\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((Long => Boolean)\
    \ => Int)\n1 error found\n"
  stdout: ''
  timestamp: 1660009445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(binary)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnfqz60tq.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg).toBinaryString\n\
    \        if (rounded == 0) {\n            Right(rounded)\n        } else {\n \
    \           Left(s\"${rounded}: ${sum.size - sum.indexWhere(x => x == rounded)}\"\
    )\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbs5ymilv.scala:13:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (rounded == \e[31m0\e[0m) {\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values\
    \ of types String and Int cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbs5ymilv.scala:14:18 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m            Right(rounded)\n\e[31m\e[31m   |\e[0m        \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (rounded :\
    \ String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpbs5ymilv.scala:16:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            Left(\e[31ms\"\e[0m${rounded}\e[31m: \e[0m${sum.size\
    \ - sum.indexWhere(\e[36mx\e[0m => x == rounded)}\e[31m\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Long and String cannot be compared\
    \ with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1660009449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum : Long = n to\
    \ m by -1\n        val sumOfSquares : Long = sum.map(x => x * x).sum\n       \
    \ val avg : Long = sumOfSquares / sum.length\n        val roundedAvg = math.round(avg)\n\
    \        val binaryAvg = math.pow(2,roundedAvg)\n        val result = Right(binaryAvg)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpck6avh5l.scala:10:25\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m : \e[35mLong\e[0m = n to m by -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found: \
    \   scala.collection.immutable.NumericRange[Long]\n\e[31m   |\e[0m           \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpck6avh5l.scala:11:38\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36msumOfSquares\e[0m : \e[35mLong\e[0m = sum.map(\e[36mx\e[0m => x * x).sum\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                  value map is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpck6avh5l.scala:12:44 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m : \e[35mLong\e\
    [0m = sumOfSquares / sum.length\n\e[31m\e[31m   |\e[0m                       \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         value length is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpck6avh5l.scala:16:8 ---------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Right[Nothing, Double])\n\e[31m   |\e[0m      \
    \  Required: Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == m) Right(binary) else Left(s\"$rounded is not\
    \ an average of $n through $m\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6vl44pwt.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = (n to m).sum\n\
    \        val avg = sum / m\n        val rounded = math.round(avg)\n        val\
    \ binary = binary(rounded)\n        val result = if (rounded == 0) Right(binary)\
    \ else Left(s\"$rounded is not an integer\")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdhi8g5wg.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009445
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n == 0 || m == 0)\
    \ Right(-1)\n        else if (n > m) Right(-1)\n        else if (n == m) Right(n\
    \ / 2)\n        else Left(s\"$n to $m is too large\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpijxh6ahc.scala:16)\n\tat Problem.main(tmpijxh6ahc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg).toBinaryString\n\
    \        val result = if (rounded == avg) Right(rounded) else Left(s\"$rounded\
    \ is not an average\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuejh4zo1.scala:13:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (rounded == avg) Right(rounded) \e[33melse\e[0m Left(\e[31ms\"\e[0m$rounded\e\
    [31m is not an average\"\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Long\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpuejh4zo1.scala:14:8 ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e\
    [31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e[0m]\e[1m\e[31m)\e\
    [0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e[32mLong\e[0m]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(s\"$rounded is not an integer.\")\n        result match {\n      \
    \      case Right(rounded) => Right(rounded)\n            case Left(msg) => Left(msg)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpui2sp370.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / avg.length\n    \
    \    val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfzcjtyu8.scala:50:11 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpfzcjtyu8.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzcjtyu8.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = \e[33mif\e[0m (bin.length == \e[31m1\e[0m) \e[31m\"0\"\e\
    [0m \e[33melse\e[0m bin\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzcjtyu8.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e[0m (bin.length\
    \ == \e[31m1\e[0m) \e[31m\"0\"\e[0m \e[33melse\e[0m bin\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzcjtyu8.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = \e[33mif\e[0m (bin.length == \e[31m1\e[0m) \e[31m\"0\"\e\
    [0m \e[33melse\e[0m bin\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e["
  stdout: ''
  timestamp: 1660009447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) Right(-1)\n\
    \        else {\n            val sum = (n to m).foldLeft(0)(_ + _)\n         \
    \   val avg = sum / m\n            val rounded = math.round(avg)\n           \
    \ val binary = Integer.toBinaryString(rounded)\n            Right(binary)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4sd0ux0z.scala:12:43\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e\
    [36msum\e[0m = (n to m).foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m \
    \                                          ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                    Found:    Long\n\e[31m   |\e[0m         \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4sd0ux0z.scala:15:48 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mbinary\e[0m = Integer.toBinaryString(rounded)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    (rounded\
    \ : Long)\n\e[31m   |\e[0m                                              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4sd0ux0z.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Right(binary)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      Found:    (binary : String)\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = Integer.toBinaryString(rounded)\n        val result = if (rounded\
    \ == 0) Right(binary) else Left(s\"$rounded is not an integer.\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg4i4161y.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg4i4161y.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m by -1\n\
    \        val avg = sum.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n\
    \        val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 1)\n \
    \       val left = if (bin.size == 0) -1 else bin.charAt(0)\n        val result\
    \ = if (right == '1') left else right\n        Right(result)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphqilj6e4.scala:16:14\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        Right(result)\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^\e[0m\n\e[31m   |\e[0m              Found:  \
    \  (result : AnyVal)\n\e[31m   |\e[0m              Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val n = math.max(math.min(n,\
    \ m), -1)\n        val m = math.max(math.min(m, n), -1)\n        val sum = n +\
    \ m\n        val avg = sum / 2\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == \"\") Right(bin) else Left(s\"$bin is not an\
    \ integer.\")\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu25ys1wo.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.max(math.min(n,\
    \ m), -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpu25ys1wo.scala:11:34 ---------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.max(math.min(m, n), -\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  Recursive \e[33mvalue\e[0m \e[35mm\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu25ys1wo.scala:11:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.max(math.min(m, n), -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                     Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0L\n        val count = 0L\n        avg.foreach(x => sum +=\
    \ x)\n        avg.foreach(x => count += 1)\n        val avg = sum / count\n  \
    \      val bin = math.round(avg).toBinaryString\n        val result = if (bin\
    \ == \"\") -1 else bin.charAt(0)\n        Left(result)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsk_n05xl.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg is\
    \ already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk_n05xl.scala:13:29\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        avg.foreach(\e[36mx\e\
    [0m => sum += x)\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                 value += is not a member of Long - did you mean\
    \ sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk_n05xl.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        avg.foreach(\e[36mx\e\
    [0m => count += \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value += is not a member of Long - did you\
    \ mean count.!=?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpsk_n05xl.scala:16:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpsk_n05xl.scala:18:13 --------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        Left(result)\n\e[31m\e[31m   |\e[0m             ^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    (result : Int)\n\e[31m   |\e[0m   \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum : Long = n to\
    \ m by -1\n        val sumOfSquares : Long = sum.map(x => x * x).sum\n       \
    \ val avg : Long = sumOfSquares / sum.length\n        val roundedAvg : Long =\
    \ math.round(avg)\n        val binaryAvg : Long = math.pow(10, math.ceil(math.log10(roundedAvg)))\n\
    \        val result : Either[String, Long] = if (roundedAvg == binaryAvg) Right(roundedAvg)\
    \ else Left(s\"$roundedAvg does not equal $binaryAvg\")\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprjcdb077.scala:10:25\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m : \e[35mLong\e[0m = n to m by -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found: \
    \   scala.collection.immutable.NumericRange[Long]\n\e[31m   |\e[0m           \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprjcdb077.scala:11:38\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36msumOfSquares\e[0m : \e[35mLong\e[0m = sum.map(\e[36mx\e[0m => x * x).sum\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                  value map is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmprjcdb077.scala:12:44 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m : \e[35mLong\e\
    [0m = sumOfSquares / sum.length\n\e[31m\e[31m   |\e[0m                       \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \         value length is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprjcdb077.scala:14:39 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mbinaryAvg\e[0m : \e[35mLong\e[0m = math.pow(\e\
    [31m10\e[0m, math.ceil(math.log10(roundedAvg)))\n\e[31m\e[31m   |\e[0m       \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Double\n\e[31m   |\e[0m\
    \                               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / sum.size\n      \
    \  val bin = Integer.toBinaryString(avg)\n        val res = if (bin.length ==\
    \ 1) Right(bin) else Left(s\"${bin.length} bit average\")\n        res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphp4vohml.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphp4vohml.scala:13:41\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m         Found:    (avg : scala.collection.immutable.NumericRange[Long])\n\
    \e[31m   |\e[0m         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmphp4vohml.scala:15:8 ---------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mres\e[0m\e[1m\e[31m \e\
    [0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e[0m]\e\
    [1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by 1\n        val avg = avg.sum / sum.size\n       \
    \ val bin = math.round(avg).toBinaryString\n        val result = if (bin.size\
    \ == 0) -1 else bin.charAt(bin.length - 1)\n        val right = if (bin.size ==\
    \ 0) -1 else bin.charAt(bin.length - 2)\n        val left = if (bin.size == 0)\
    \ -1 else bin.charAt(bin.length - 3)\n        val right = if (bin.size == 0) -1\
    \ else bin.charAt(bin.length - 4)\n        val left = if (bin.size == 0) -1 else\
    \ bin.charAt(bin.length - 5)\n        val right = if (bin.size == 0) -1 else bin.charAt(bin.length\
    \ - 6)\n        val left = if (bin.size == 0) -1 else bin.charAt(bin.length -\
    \ 7)\n        val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 8)\n\
    \        val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 9)\n  \
    \      val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 10)\n  \
    \      val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 11)\n   \
    \     val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 12)\n   \
    \     val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 13)\n    \
    \    val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 14)\n    \
    \    val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 15)\n     \
    \   val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 16)\n     \
    \   val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 17)\n      \
    \  val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 18)\n      \
    \  val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 19)\n       \
    \ val right = if (bin.size == 0) -1 else bin.charAt(bin.length - 20)\n       \
    \ val left = if (bin.size == 0) -1 else bin.charAt(bin.length - 21)\n        val\
    \ right = if (bin.size == 0) -1 else bin.charAt(bin.length - 22)\n        val\
    \ left = if (bin.size == 0) -1 else bin.charAt(bin.length - 23)\n        val right\
    \ = if (bin.size == 0) -1 else bin.charAt(bin.length - 24)\n        val left =\
    \ if (bin.size == 0) -1 else bin.charAt(bin.length - 25)\n        val right =\
    \ if (bin.size == 0) -1 else bin.charAt(bin.length - 26)\n        val left = if\
    \ (bin.size == 0) -1 else bin.charAt(bin.length - 27)\n        val right = if\
    \ (bin.size == 0) \n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmzts070g.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmzts070g.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mavg\e[0m = avg.sum / sum.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmzts070g.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = \e[33mif\e[0m (bin.size == \e\
    [31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m bin.charAt(bin.length - \e[31m4\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mright is already defined as \e[33mvalue\e[0m \e[35mright\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmzts070g.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = \e[33mif\e[0m (bin.size\
    \ == \e[31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m bin.charAt(bin.length - \e[31m5\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleft is already defined as \e[33mvalue\e[0m \e[35mleft\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmzts070g.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = \e[33mif\e[0m (bin.size == \e\
    [31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m bin.charAt(bin.length - \e[31m6\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mright is already defi"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / sum.size\n      \
    \  val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 1) \"0\" + bin else bin\n        Right(result)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1t2nx0w6.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1t2nx0w6.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp1t2nx0w6.scala:15:14 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        Right(result)\n\e[31m\e[31m   |\e[0m              ^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    (result : String)\n\e[31m   |\e[0m\
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n == 0 || m == 0)\
    \ Right(-1)\n        else if (n > m) Right(-1)\n        else if (n == m) Right(n\
    \ / 2)\n        else Left(-1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp60l04fab.scala:13:18\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m Left(-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m \
    \                 Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m           \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = sum.sum / sum.count\n     \
    \   val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 0) \"-1\" else bin\n        Left(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0uwacc84.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum.sum / sum.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0uwacc84.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n == 0 || m == 0)\
    \ {\n            Right(-1)\n        } else if (n > m) {\n            Right(-1)\n\
    \        } else {\n            val sum = (n to m).foldLeft(0)(_ + _)\n       \
    \     val avg = sum / m\n            val rounded = math.round(avg)\n         \
    \   Right(rounded)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphm25u8hv.scala:15:43\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e\
    [36msum\e[0m = (n to m).foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m \
    \                                          ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                    Found:    Long\n\e[31m   |\e[0m         \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = avg.sum\n        val avg = sum / avg.length\n        val bin\
    \ = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n            Left(s\"\
    $bin is too short\")\n        } else {\n            Right(avg)\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbnp50ems.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbnp50ems.scala:13:41\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m         Found:    (avg : scala.collection.immutable.NumericRange[Long])\n\
    \e[31m   |\e[0m         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpbnp50ems.scala:17:18 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            Right(avg)\n\e[31m\e[31m   |\e[0m            \
    \      ^^^\e[0m\n\e[31m   |\e[0m         Found:    (avg : scala.collection.immutable.NumericRange[Long])\n\
    \e[31m   |\e[0m         Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = (n to m).sum\n\
    \        val avg = sum / m\n        val rounded = math.round(avg)\n        val\
    \ binary = Integer.toBinaryString(rounded)\n        val result = if (rounded ==\
    \ 0) Right(binary) else Left(s\"$rounded is not a round number\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprc823oz2.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprc823oz2.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n + (m / 2)\n\
    \        if (avg > m) Left(s\"$avg exceeds $m\")\n        else if (avg < n) Right(avg)\n\
    \        else Right(s\"$avg equals $m\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjnfbx604.scala:13:19\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m Right(\e\
    [31ms\"\e[0m$avg\e[31m equals \e[0m$m\e[31m\"\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    String\n\e[31m   |\e[0m                   Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = (n to m).sum\n\
    \        val avg = sum / m\n        val rounded = math.round(avg)\n        val\
    \ binary = binary(rounded)\n        val result = if (rounded == 0) Right(binary)\
    \ else Left(s\"$rounded is not a binary number\")\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn261u5_p.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = mutable.ListBuffer[Long]()\n\
    \        val avg = mutable.ListBuffer[Long]()\n        val n = n.toInt\n     \
    \   val m = m.toInt\n        if (n > m) {\n            return Left(s\"$n is greater\
    \ than $m\")\n        }\n        for (i <- n until m) {\n            sum += i\n\
    \            avg += i\n        }\n        val avg = sum.toDouble / avg.length\n\
    \        val rounded = Math.round(avg).toBinaryString\n        if (rounded ==\
    \ 0) {\n            return Right(rounded)\n        }\n        val result = Right(rounded)\n\
    \        result.fold(Left(_), Right(_))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjioeqfb_.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum.toDouble\
    \ / avg.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjioeqfb_.scala:10:18 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpjioeqfb_.scala:11:18 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mavg\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpjioeqfb_.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toInt\n\e[31m\e[31m   |\e[0m \
    \               ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpjioeqfb_.scala:13:16 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toInt\n\e[31m\e[31m   |\e[0m \
    \               ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mm\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   if (rounded > m) Right(-1)\n        else Left(binary)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_cjyjcmg.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m by -1\n\
    \        val avg = sum.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == \"\") -1 else bin\n        Right(result)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb9dy378m.scala:14:14\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        Right(result)\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^\e[0m\n\e[31m   |\e[0m              Found:  \
    \  (result : Matchable)\n\e[31m   |\e[0m              Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is\
    \ not an integer, $binary is returned\")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkyqzqg4q.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkyqzqg4q.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val n = math.max(math.min(n,\
    \ m), -1)\n        val m = math.max(math.min(m, n), -1)\n        val sum = (n\
    \ to m).sum\n        val avg = sum / m\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == \"\") -1 else Right(bin)\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4so7hza5.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.max(math.min(n,\
    \ m), -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp4so7hza5.scala:11:34 ---------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.max(math.min(m, n), -\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  Recursive \e[33mvalue\e[0m \e[35mm\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4so7hza5.scala:11:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.max(math.min(m, n), -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                     Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4so7hza5.scala:16:8 ---------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Matchable)\n\e[31m   |\e[0m  \
    \      Required: Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.toList\n        val sum\
    \ = sum.toList\n        val avg = avg.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n\
    \        val bin = bin.substring(bin.length - 1)\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val right = bin.length - 1\n   \
    \     val left = bin.length\n        val right = bin.length - 1\n        val left\
    \ = bin.length\n        val right = bin.length - 1\n        val left = bin.length\n\
    \        val right = bin.length - 1\n        val left = bin.length\n        val\
    \ right = bin.length - 1\n        val left = bin.length\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val right = bin.length - 1\n   \
    \     val left = bin.length\n        val right = bin.length - 1\n        val left\
    \ = bin.length\n        val right = bin.length - 1\n        val left = bin.length\n\
    \        val right = bin.length - 1\n        val left = bin.length\n        val\
    \ right = bin.length - 1\n        val left = bin.length\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val right = bin.length - 1\n   \
    \     val left = bin.length\n        val right = bin.length - 1\n        val left\
    \ = bin.length\n        val right = bin.length - 1\n        val left = bin.length\n\
    \        val right = bin.length - 1\n        val left = bin.length\n        val\
    \ right = bin.length - 1\n        val left = bin.length\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val right = bin.length - 1\n   \
    \     val left = bin.length\n        val right = bin.length - 1\n        val left\
    \ = bin.length\n        val right = bin.length - 1\n        val left = bin.length\n\
    \        val right = bin.length - 1\n        val left = bin.length\n        val\
    \ right = bin.length - 1\n        val left = bin.length\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val right = bin.length - 1\n   \
    \     val left = bin.length\n        val right = bin.length - 1\n        val left\
    \ = bin.length\n        val right = bin.length - 1\n        val left = bin.length\n\
    \        val right = bin.length - 1\n        val left = bin.length\n        val\
    \ right = bin.length - 1\n        val left = bin.length\n        val right = bin.length\
    \ - 1\n        val left = bin.length\n        val right = bin.length - 1\n   \
    \     val left = bin.length\n        val right = bin.length - 1\n        val left\
    \ = bin.length\n        val right = bin.length - 1\n        val left = bin.length\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0j6oeqlg.scala:85:11 ---------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp0j6oeqlg.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg is already\
    \ defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0j6oeqlg.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = sum.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is already\
    \ defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0j6oeqlg.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0j6oeqlg.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbin\e[0m = bin.substring(bin.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbin is\
    \ already defined as \e[33mvalue\e[0m \e[35mbin\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0j6oeqlg.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 "
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0\n        val sumOfSquares = 0\n        val binary = \"\"\n\
    \        for(i <- 0 until avg.length) {\n            val value = avg(i)\n    \
    \        sum += value\n            sumOfSquares += value * value\n           \
    \ binary += value.toBinaryString\n        }\n        val avg = sum / avg.length\n\
    \        val squareOfAvg = sumOfSquares / avg.length\n        if(squareOfAvg ==\
    \ 0) Right(binary) else Left(s\"${binary} is not an exact binary number\")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwwkhul0e.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwwkhul0e.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            sum += value\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpwwkhul0e.scala:17:25 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m            sumOfSquares += value * value\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value += is not a member\
    \ of Int - did you mean sumOfSquares.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpwwkhul0e.scala:18:19 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            binary += value.toBinaryString\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of String\
    \ - did you mean binary.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwwkhul0e.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m(squareOfAvg\
    \ == \e[31m0\e[0m) Right(binary) \e[33melse\e[0m Left(\e[31ms\"\e[0m${binary}\e\
    [31m is not an exact binary number\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                       ^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \          Found:    (binary : String)\n\e[31m   |\e[0m                      \
    \             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0\n        val count = 0\n        for(i <- 0 until avg.length)\
    \ {\n            sum += avg(i)\n            count += 1\n        }\n        if(count\
    \ > 0) Right(sum.toInt)\n        else Left(s\"$n to $m doesn't include $n\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprhuurvft.scala:14:16 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            sum += avg(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprhuurvft.scala:15:18\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            count += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value += is not a member of Int - did you mean count.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n >= m) Right(-1)\n\
    \        else {\n            val sum = n to m\n            val avg = sum.sum /\
    \ sum.size\n            val bin = math.round(avg).toBinaryString\n           \
    \ Right(bin)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfkqprjbs.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) {\n       \
    \     Left(s\"$n is greater than $m\")\n        } else if (n == m) {\n       \
    \     Right(n)\n        } else {\n            val avg = n + (m - 1) / 2\n    \
    \        val binary = math.round(avg).toBinaryString\n            Right(binary.toLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnsf8qu6f.scala:21)\n\tat Problem.main(tmpnsf8qu6f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / avg.length\n    \
    \    val bin = math.round(avg).toBinaryString\n        val result = if (bin ==\
    \ \"\") -1 else bin\n        Left(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbpftr777.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbpftr777.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpbpftr777.scala:15:13 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        Left(result)\n\e[31m\e[31m   |\e[0m             ^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    (result : Int)\n\e[31m   |\e[0m   \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = math.pow(2,rounded)\n        val result = if (rounded == 0)\
    \ Right(binary) else Left(s\"$rounded is not a power of 2\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy61gmf8b.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String,\
    \ \e[1m\e[31mDouble\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String,\
    \ \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2).round\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Left(s\"$n through $m average is $avg\")\n        } else {\n    \
    \        Right(bin)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiny_54aq.scala:11:41\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpiny_54aq.scala:15:18 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m                  ^^^\e[0m\n\
    \e[31m   |\e[0m                  Found:    (bin : String)\n\e[31m   |\e[0m   \
    \               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.length\n        val rounded = math.round(avg).toBinaryString\n\
    \        val result = Right(rounded)\n        if (rounded == 0) Left(s\"$rounded\
    \ is zero\")\n        else result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa0_rhycy.scala:14:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (rounded == \e[31m0\e[0m) Left(\e\
    [31ms\"\e[0m$rounded\e[31m is zero\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types String and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa0_rhycy.scala:15:13\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m result\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (result : Right[Nothing, String])\n\e[31m   |\e[0m             Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.length\n        val rounded = math.round(avg)\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == 0)\
    \ Right(rounded) else Left(s\"$rounded is not a binary number\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnl3jeled.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / avg.length\n    \
    \    val bin = Integer.toBinaryString(Math.round(avg))\n        val right = bin.substring(bin.length\
    \ - 1)\n        val left = bin.substring(0, bin.length - 1)\n        val result\
    \ = if (right == left) Right(avg) else Left(s\"$n to $m is $avg\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0n71g9_h.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0n71g9_h.scala:13:46\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = Integer.toBinaryString(Math.round(avg))\n\e[31m\e[31m   |\e\
    [0m                                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mobject\e\
    [0m \e[35mMath\e[0m with types\n\e[31m   |\e[0m (x$0: Double): Long\n\e[31m  \
    \ |\e[0m (x$0: Float): Int\n\e[31m   |\e[0mmatch arguments ((avg : scala.collection.immutable.NumericRange[Long]))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0n71g9_h.scala:17:8 ---------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (result : Either[String, scala.collection.immutable.NumericRange[Long]])\n\
    \e[31m   |\e[0mRequired: Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n >= m) Right(-1)\n\
    \        else {\n            val sum = n to m by -1\n            val avg = sum.sum\
    \ / sum.length\n            val bin = math.round(avg).toBinaryString\n       \
    \     Right(bin)\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvayw3c7f.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n + (m - n)\
    \ / 2\n        val bin = math.round(avg).toBinaryString\n        val result =\
    \ if (bin.size == m) Right(bin) else Left(s\"$n through $m do not add up to $avg\"\
    )\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxrqtmmjm.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String,\
    \ \e[1m\e[31mString\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String,\
    \ \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded > m) Left(s\"$rounded > $m\")\n        else if (rounded <\
    \ n) Right(s\"$rounded < $n\")\n        else Right(binary)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpijzw3u14.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpijzw3u14.scala:14:36 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (rounded < n) Right(\e\
    [31ms\"\e[0m$rounded\e[31m < \e[0m$n\e[31m\"\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                              Found:    String\n\e[31m   |\e[0m             \
    \                       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpijzw3u14.scala:15:19 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33melse\e[0m Right(binary)\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:  \
    \  (binary : String)\n\e[31m   |\e[0m                   Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin.size == 0) Left(s\"$n to $m is $avg\") else Right(bin)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr54ibidu.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String,\
    \ \e[1m\e[31mString\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String,\
    \ \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n == 0 || m == 0)\
    \ Right(-1)\n        if (n > m) Right(-1)\n        val sum = n to m by -1\n  \
    \      val sum = sum.map(x => x.toLong).toList\n        val sum = sum.foldLeft(0)(_\
    \ + _)\n        val avg = sum / sum.length\n        val rounded = math.round(avg)\n\
    \        val binary = rounded.toBinaryString\n        val result = Right(binary)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd_koa293.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = sum.map(\e[36mx\e\
    [0m => x.toLong).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpd_koa293.scala:14:12 ---------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = sum.foldLeft(\e[31m0\e[0m)(_ +\
    \ _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_koa293.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mavg\e[0m = sum / sum.length\n\e[31m\e[31m   |\e[0m                  ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue / is not a member of scala.collection.immutable.NumericRange[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == avg) Right(binary) else Left(s\"$n / $m is\
    \ not an average of $n through $m\")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf2bf7h_g.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf2bf7h_g.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / (m + 1)\n\
    \        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = Right(binary)\n        if (n > m) Left(s\"$n cannot be greater\
    \ than $m\")\n        else result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptn1oi5xs.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptn1oi5xs.scala:15:13 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m result\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:    (result : Right[Nothing,\
    \ String])\n\e[31m   |\e[0m             Required: Either[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n + (m - 1)\
    \ / 2\n        val bin = math.ceil(avg).toBinaryString\n        val result = if\
    \ (bin.size == m) Right(bin) else Left(\"Invalid input\")\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpltzywvx5.scala:11:33 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = math.ceil(avg).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value toBinaryString is not a member of Double\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = avg.sum\n        val avg = sum / avg.length\n        val binary\
    \ = avg.toBinaryString\n        val result = if (binary == \"\") -1 else binary.toLong\n\
    \        Right(result)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt6mn4z4a.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt6mn4z4a.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mbinary\e[0m = avg.toBinaryString\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toBinaryString is not a member\
    \ of scala.collection.immutable.NumericRange[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg) Right(binary) else Left(s\"$n / $m is $avg, not $rounded\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz5_m6f7d.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpz5_m6f7d.scala:13:34 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (rounded == avg) Right(binary)\
    \ \e[33melse\e[0m Left(\e[31ms\"\e[0m$n\e[31m / \e[0m$m\e[31m is \e[0m$avg\e[31m,\
    \ not \e[0m$rounded\e[31m\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (binary : String)\n\e[31m   |\e[0m                                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum : Long = n to\
    \ m by -1\n        val sumOfSquares : Long = sum.map(x => x * x).sum\n       \
    \ val avg = sumOfSquares / sum.sum\n        val roundedAvg = math.round(avg)\n\
    \        val binary = Integer.toBinaryString(roundedAvg)\n        val result =\
    \ Right(binary)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkjoiixp7.scala:10:25\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m : \e[35mLong\e[0m = n to m by -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found: \
    \   scala.collection.immutable.NumericRange[Long]\n\e[31m   |\e[0m           \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkjoiixp7.scala:11:38\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36msumOfSquares\e[0m : \e[35mLong\e[0m = sum.map(\e[36mx\e[0m => x * x).sum\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                  value map is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkjoiixp7.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sumOfSquares\
    \ / sum.sum\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value sum is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkjoiixp7.scala:16:8 ---------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Right[Nothing, String])\n\e[31m\
    \   |\e[0m        Required: Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2).round\n\
    \        val binary = Integer.toBinaryString(avg)\n        if (binary.length <\
    \ 8) {\n            Left(s\"$n through $m average is $avg, which is not an integer.\"\
    )\n        } else {\n            Right(avg)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiaj74ykn.scala:11:44\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                       ^^^\e[0m\n\e[31m   |\e[0m                            \
    \                Found:    (avg : Long)\n\e[31m   |\e[0m                     \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = Right(binary)\n        if (n > m) Left(s\"$n > $m\")\n \
    \       else result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps9vldfwp.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps9vldfwp.scala:15:13 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m result\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:    (result : Right[Nothing,\
    \ String])\n\e[31m   |\e[0m             Required: Either[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.length\n        val rounded = math.round(avg)\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == 0)\
    \ Right(rounded) else Left(s\"$rounded is not a binary number\")\n        result\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoj7bg5uw.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0L\n        val sumOfSquares = 0L\n        val count = 1L\n\
    \        val sumOfSquareOfSquares = 0L\n        val sumOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquares = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0L\n\
    \        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0L\n\
    \        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0L\n        val sumOfSquareOf\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvf6sbypk.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvf6sbypk.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\e\
    [0m = \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpvf6sbypk.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36msumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\e\
    [0m = \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpvf6sbypk.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\e\
    [0m = \e[31m0L\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumOfSquareOfSquareOfSquare"
  stdout: ''
  timestamp: 1660009470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n < m) Right(-1)\n\
    \        else {\n            val avg = n + (m - 1) / 2\n            val bin =\
    \ math.round(avg).toBinaryString\n            Right(bin)\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_i78tx58.scala:14:18\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == m) Right(binary) else Left(s\"$rounded is not\
    \ an average of $n through $m\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6vl44pwt.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(binary)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnfqz60tq.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0L\n        val num = 0L\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsSum = mutable.ListBuffer[Long]()\n        for (i <- 0 until avg.length)\
    \ {\n            sum += avg(i)\n            num += 1\n            nums += avg(i)\n\
    \            numsSum += avg(i)\n        }\n        if (num > m) {\n          \
    \  Left(s\"$num is not greater than $m\")\n        } else if (num == m) {\n  \
    \          Right(sum.toLong)\n        } else {\n            val avg = sum.toDouble\
    \ / num\n            val bin = nums.map(x => if (x == 0) \"0\" else if (x == 1)\
    \ \"1\" else \"10\").mkString\n            Right(s\"$sum is $avg which is $bin\
    \ and $nums sum is $numsSum\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpryjnxucm.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpryjnxucm.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpryjnxucm.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            sum += avg(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpryjnxucm.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            num += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ value += is not a member of Long - did you mean num.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpryjnxucm.scala:28:18 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            Right(\e[31ms\"\e[0m$sum\e[31m is \e[0m$avg\e\
    [31m which is \e[0m$bin\e[31m and \e[0m$nums\e[31m sum is \e[0m$numsSum\e[31m\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    String\n\e[31m   |\e[0m      \
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2.0).toInt\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin == \"\") Left(s\"\
    $n through $m is $avg\")\n        else Right(bin)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ul8jtza.scala:13:19\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m Right(bin)\n\
    \e[31m\e[31m   |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0m            \
    \       Found:    (bin : String)\n\e[31m   |\e[0m                   Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n <= m) Right(round(n/m)*m)\n\
    \        else Left(s\"$n must be greater than $m\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi0pu2wl_.scala:14)\n\tat Problem.main(tmpi0pu2wl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg) Right(binary) else Left(s\"$n / $m is $avg, not $rounded\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz5_m6f7d.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpz5_m6f7d.scala:13:34 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (rounded == avg) Right(binary)\
    \ \e[33melse\e[0m Left(\e[31ms\"\e[0m$n\e[31m / \e[0m$m\e[31m is \e[0m$avg\e[31m,\
    \ not \e[0m$rounded\e[31m\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (binary : String)\n\e[31m   |\e[0m                                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == m) Right(binary) else Left(s\"$rounded is not\
    \ an average of $m and $n\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt5ygn_x9.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum : Long = n to\
    \ m by -1\n        val avg = sum.sum / sum.length\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin.length == 0) Left(s\"$avg cannot be represented\
    \ as a binary number\") else Right(bin)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpstq_ea7l.scala:10:25\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m : \e[35mLong\e[0m = n to m by -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Found: \
    \   scala.collection.immutable.NumericRange[Long]\n\e[31m   |\e[0m           \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpstq_ea7l.scala:11:22\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mavg\e[0m = sum.sum / sum.length\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value sum is not a member of Long\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n + (m - 1)\
    \ / 2\n        val bin = math.round(avg).toBinaryString\n        if (bin.length\
    \ == 0) Left(s\"$avg can't be rounded to a binary number\")\n        else if (bin.length\
    \ == 1) Right(bin)\n        else Left(s\"$avg can't be rounded to a binary number\
    \ with $bin.length digits\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmklewsia.scala:13:40\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (bin.length == \e[31m1\e[0m) Right(bin)\n\e[31m\e[31m   |\e[0m           \
    \                             ^^^\e[0m\n\e[31m   |\e[0m                      \
    \                  Found:    (bin : String)\n\e[31m   |\e[0m                 \
    \                       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n <= m) Right(n /\
    \ m)\n        else if (n > m) Left(-1)\n        else Left(-1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfoq9tlm1.scala:11:29\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (n > m) Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \      ^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                             Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfoq9tlm1.scala:12:18 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Left(-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = binary(rounded)\n        val right = if (rounded > m) -1 else\
    \ rounded\n        val left = if (rounded < n) -1 else rounded\n        val result\
    \ = if (binary == 0) Left(s\"$left is too small\") else if (binary == 1) Right(s\"\
    $right is too large\") else Left(s\"$left is too large\")\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprcq2go52.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcq2go52.scala:17:8 ---------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(s\"$rounded is not a binary number\")\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp85k196lf.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0L\n        val num = 0L\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val numsSum = mutable.ListBuffer[Long]()\n        val numsSum2 = mutable.ListBuffer[Long]()\n\
    \        val numsSum3 = mutable.ListBuffer[Long]()\n        val numsSum4 = mutable.ListBuffer[Long]()\n\
    \        val numsSum5 = mutable.ListBuffer[Long]()\n        val numsSum6 = mutable.ListBuffer[Long]()\n\
    \        val numsSum7 = mutable.ListBuffer[Long]()\n        val numsSum8 = mutable.ListBuffer[Long]()\n\
    \        val numsSum9 = mutable.ListBuffer[Long]()\n        val numsSum10 = mutable.ListBuffer[Long]()\n\
    \        val numsSum11 = mutable.ListBuffer[Long]()\n        val numsSum12 = mutable.ListBuffer[Long]()\n\
    \        val numsSum13 = mutable.ListBuffer[Long]()\n        val numsSum14 = mutable.ListBuffer[Long]()\n\
    \        val numsSum15 = mutable.ListBuffer[Long]()\n        val numsSum16 = mutable.ListBuffer[Long]()\n\
    \        val numsSum17 = mutable.ListBuffer[Long]()\n        val numsSum18 = mutable.ListBuffer[Long]()\n\
    \        val numsSum19 = mutable.ListBuffer[Long]()\n        val numsSum20 = mutable.ListBuffer[Long]()\n\
    \        val numsSum21 = mutable.ListBuffer[Long]()\n        val numsSum22 = mutable.ListBuffer[Long]()\n\
    \        val numsSum23 = mutable.ListBuffer[Long]()\n        val numsSum24 = mutable.ListBuffer[Long]()\n\
    \        val numsSum25 = mutable.ListBuffer[Long]()\n        val numsSum26 = mutable.ListBuffer[Long]()\n\
    \        val numsSum27 = mutable.ListBuffer[Long]()\n        val numsSum28 = mutable.ListBuffer[Long]()\n\
    \        val numsSum29 = mutable.ListBuffer[Long]()\n        val numsSum30 = mutable.ListBuffer[Long]()\n\
    \        val numsSum31 = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdaz5ra9s.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpdaz5ra9s.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdaz5ra9s.scala:14:22 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsSum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdaz5ra9s.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsSum2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdaz5ra9s.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsSum3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdaz5ra9s.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsSum4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e["
  stdout: ''
  timestamp: 1660009477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = Integer.toBinaryString(rounded)\n        val result = if (rounded\
    \ == avg) Right(binary) else Left(s\"$rounded is not an average of $n through\
    \ $m\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr_c6oagq.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpr_c6oagq.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is not\
    \ an integer.\")\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpswhphy2j.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = avg.reduceLeft(_ + _)\n        val avg = sum / avg.length\n\
    \        val bin = Integer.toBinaryString(avg)\n        val right = if (avg ==\
    \ 0) \"0\" else bin.substring(bin.length - 1, 1)\n        val left = if (avg ==\
    \ 0) \"0\" else bin.substring(0, bin.length - 1)\n        val result = if (avg\
    \ == 0) \"-1\" else left + right\n        Right(result)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx6pmo1dx.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx6pmo1dx.scala:13:41\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m         Found:    (avg : scala.collection.immutable.NumericRange[Long])\n\
    \e[31m   |\e[0m         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpx6pmo1dx.scala:14:24 -----------------------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = \e[33mif\e[0m (avg\
    \ == \e[31m0\e[0m) \e[31m\"0\"\e[0m \e[33melse\e[0m bin.substring(bin.length -\
    \ \e[31m1\e[0m, \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types scala.collection.immutable.NumericRange[Long]\
    \ and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpx6pmo1dx.scala:15:23\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mval\e[0m \e[36mleft\e[0m = \e[33mif\e[0m (avg == \e[31m0\e[0m) \e[31m\"\
    0\"\e[0m \e[33melse\e[0m bin.substring(\e[31m0\e[0m, bin.length - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mValues\
    \ of types scala.collection.immutable.NumericRange[Long] and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpx6pmo1dx.scala:16:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (avg == \e[31m0\e[0m) \e[31m\"-1\"\e[0m \e[33melse\e[0m left + right\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of\
    \ types scala.collection.im"
  stdout: ''
  timestamp: 1660009480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2).round\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Left(s\"$n through $m average is $avg, rounded to $bin\")\n     \
    \   } else {\n            Right(avg)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_uvy23l9.scala:11:41\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2).round\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < m) Left(s\"\
    $n to $m is $avg\")\n        else Right(bin)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp621bnb90.scala:11:41\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp621bnb90.scala:13:19 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33melse\e[0m Right(bin)\n\e[31m\e[31m   |\e[0m            \
    \       ^^^\e[0m\n\e[31m   |\e[0m                   Found:    (bin : String)\n\
    \e[31m   |\e[0m                   Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = sum.sum / sum.size\n      \
    \  val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 1) \"0\" else bin\n        Left(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf3rmvddh.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpf3rmvddh.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0L\n        val num = 0L\n        val binary = \"\"\n     \
    \   val bin = mutable.ListBuffer[String]()\n        val binary = bin.mkString\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        val binary\
    \ = binary.reverse\n        val binary = binary.reverse\n        val binary =\
    \ binary.reverse\n        val binary = binary.reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        val binary\
    \ = binary.reverse\n        val binary = binary.reverse\n        val binary =\
    \ binary.reverse\n        val binary = binary.reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        val binary\
    \ = binary.reverse\n        val binary = binary.reverse\n        val binary =\
    \ binary.reverse\n        val binary = binary.reverse\n        val binary = binary.reverse\n\
    \        val binary = binary.reverse\n        val binary = binary.reverse\n  \
    \      val binary = binary.reverse\n        val binary = binary.reverse\n    \
    \    val binary = binary.reverse\n        val binary = binary.reverse\n      \
    \  val binary = binary.reverse\n        val binary = binary.reverse\n        val\
    \ binary = binary.reverse\n        val binary = binary.reverse\n        val binary\
    \ = binary.reverse\n        val binary = binary.reverse\n        val binary =\
    \ binary.\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2e2sdpfa.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2e2sdpfa.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = bin.mkString\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbinary is already\
    \ defined as \e[33mvalue\e[0m \e[35mbinary\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2e2sdpfa.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbinary\e[0m = binary.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbinary is already defined as \e[33mvalue\e[0m \e[35mbinary\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2e2sdpfa.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbinary is\
    \ already defined as \e[33mvalue\e[0m \e[35mbinary\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2e2sdpfa.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbinary\e[0m = binary.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbinary is already defined as \e[33mvalue\e[0m \e[35mbinary\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2e2sdpfa.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary.reverse\n\e[31m\e\
    [31m   |\e[0m       "
  stdout: ''
  timestamp: 1660009480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0L\n        val count = 0L\n        avg.foreach(i => sum +=\
    \ i)\n        avg.foreach(i => count += 1)\n        val avg = sum / count\n  \
    \      val bin = math.round(avg).toBinaryString\n        val right = bin.dropRight(1)\n\
    \        val left = bin.dropLeft(1)\n        val result = if (right == left) Right(bin)\
    \ else Left(s\"$right != $left\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz9l_mq06.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg is\
    \ already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz9l_mq06.scala:13:29\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        avg.foreach(\e[36mi\e\
    [0m => sum += i)\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                 value += is not a member of Long - did you mean\
    \ sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz9l_mq06.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        avg.foreach(\e[36mi\e\
    [0m => count += \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value += is not a member of Long - did you\
    \ mean count.!=?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpz9l_mq06.scala:16:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n4 errors found\n"
  stdout: ''
  timestamp: 1660009481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = Integer.toBinaryString(rounded)\n        val result = if (rounded\
    \ == 0) Right(binary) else Left(s\"$rounded is not an integer.\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg4i4161y.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg4i4161y.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded > m) Left(s\"$n cannot be greater than $m\")\n        else\
    \ if (rounded == m) Right(binary)\n        else Left(s\"$rounded cannot be converted\
    \ to binary\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpne_bsmlb.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpne_bsmlb.scala:14:37 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (rounded == m)\
    \ Right(binary)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    (binary : String)\n\
    \e[31m   |\e[0m                                     Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(s\"$rounded is not an integer.\")\n        result match {\n      \
    \      case Right(rounded) => Right(rounded)\n            case Left(err) => Left(err)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpep18cwkh.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / avg.length\n    \
    \    val bin = math.round(avg).toBinaryString\n        val result = if (bin ==\
    \ 0) Right(bin) else Left(s\"$bin is not a valid binary number\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxf0j7z13.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxf0j7z13.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n + (m - 1)\
    \ / 2\n        val rounded = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded < 0)\n            Left(s\"$rounded is less than 0\")\n  \
    \      else if (rounded > m)\n            Right(s\"$rounded is greater than $m\"\
    )\n        else\n            Right(s\"$rounded is $binary\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr9o7kdl9.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Right(\e[31ms\"\e\
    [0m$rounded\e[31m is greater than \e[0m$m\e[31m\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            Found:    String\n\e[31m   |\e[0m                  Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr9o7kdl9.scala:18:18\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Right(\e[31ms\"\e\
    [0m$rounded\e[31m is \e[0m$binary\e[31m\"\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \           ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    String\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.length\n        val rounded = math.round(avg)\n\
    \        val binary = Integer.toBinaryString(rounded)\n        val result = if\
    \ (rounded == 0) Right(binary) else Left(s\"$rounded is not an integer.\")\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj2vo0n4r.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpj2vo0n4r.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.length\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin.length == 1) Right(bin) else Left(s\"$bin is not\
    \ a valid binary number\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9td88tm9.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String,\
    \ \e[1m\e[31mString\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String,\
    \ \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by 1\n        val avg = avg.sum / sum.size\n       \
    \ val bin = math.round(avg).toBinaryString\n        val right = bin.takeRight(1)\n\
    \        val left = bin.dropRight(1)\n        val result = if (right.equals(left))\
    \ Right(bin) else Left(s\"$n to $m is $avg\")\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9r1iew9h.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp9r1iew9h.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = sum.sum / sum.size\n      \
    \  val bin = math.round(avg).toBinaryString\n        val result = if (bin == 0)\
    \ Right(bin) else Left(s\"$bin is not a valid binary number\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2l3n1bw_.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp2l3n1bw_.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.map(x => math.round(x)).sum / sum.length\n        val bin\
    \ = math.round(avg).toBinaryString\n        val result = if (bin == 0) Right(bin)\
    \ else Left(s\"$bin is not a valid binary number\")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpos5m__87.scala:13:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (bin == \e[31m0\e[0m) Right(bin) \e[33melse\e[0m Left(\e[31ms\"\e[0m$bin\e\
    [31m is not a valid binary number\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types String and\
    \ Int cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpos5m__87.scala:14:8 ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e\
    [31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e[0m]\e[1m\e[31m)\e\
    [0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e[32mLong\e[0m]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = sum.sum / sum.size\n      \
    \  val bin = math.round(avg).toBinaryString\n        val result = if (bin == \"\
    \") -1 else bin\n        Left(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp57oye8r5.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp57oye8r5.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp57oye8r5.scala:15:13 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        Left(result)\n\e[31m\e[31m   |\e[0m             ^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    (result : Int)\n\e[31m   |\e[0m   \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n <= m) Right(n /\
    \ m)\n        else Left(s\"$n must be greater than $m\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdjewrpiz.scala:14)\n\tat Problem.main(tmpdjewrpiz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n + (m / 2)\n\
    \        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg)\n            Right(binary)\n        else\n      \
    \      Left(s\"$n through $m average is $rounded\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz3pgu6ij.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpz3pgu6ij.scala:14:18 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            Right(binary)\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (binary\
    \ : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = avg.map(_.toInt).sum\n        val avg = sum / avg.length\n\
    \        val bin = Integer.toBinaryString(avg)\n        val result = if (bin.length\
    \ == 0) \"-1\" else bin\n        Left(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnl9xn5q7.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnl9xn5q7.scala:13:41\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m         Found:    (avg : scala.collection.immutable.NumericRange[Long])\n\
    \e[31m   |\e[0m         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n + (m-1) /\
    \ 2.0\n        val bin = Integer.toBinaryString(avg)\n        val right = bin.substring(bin.length-1)\n\
    \        val left = bin.substring(0, bin.length-1)\n        val result = if (right.equals(\"\
    1\") && left.equals(\"0\")) Right(avg) else Left(s\"$avg does not round to nearest\
    \ integer\")\n        result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd4_ic332.scala:11:41\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Double)\n\e[31m   |\e[0m                         \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd4_ic332.scala:15:8 ---------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e\
    [1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mDouble\e[0m]\e[1m\e\
    [31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009486
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = binary(rounded)\n   \
    \     val result = if (rounded == m) Right(binary) else Left(s\"$rounded is not\
    \ an average of $m and $n\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp35niy3fg.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = Integer.toBinaryString(rounded)\n        val result = if (rounded\
    \ == 0) Right(binary) else Left(s\"$rounded is not an integer.\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg4i4161y.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg4i4161y.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2)\n\
    \        val bin = math.round(avg).toBinaryString\n        if (bin.length == 1)\n\
    \            Right(bin)\n        else if (bin.length == 0)\n            Left(s\"\
    $n $m is too small\")\n        else\n            Left(s\"$n $m is too large\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80z_8nsj.scala:13:18\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = binary(rounded)\n        val right = if (rounded == m) -1\
    \ else m\n        Right(binary, right)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv3vgz8bj.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv3vgz8bj.scala:15:14 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        Right(binary, right)\n\e[31m\e[31m   |\e[0m \
    \             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              Found:    (Nothing,\
    \ Long)\n\e[31m   |\e[0m              Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = Integer.toBinaryString(rounded)\n        val result = if (rounded\
    \ == 0) Right(binary) else Left(s\"$rounded is not an integer.\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg4i4161y.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg4i4161y.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by 1\n        val avg = avg.sum / sum.size\n       \
    \ val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 0) \"-1\" else bin\n        Left(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph8cjokqh.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmph8cjokqh.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / avg.length\n    \
    \    val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val result = if (bin.length ==\
    \ 1) \"0\" else bin\n        val result = if (bin.length == 1) \"0\" else bin\n\
    \        val result = if (bin.length == 1) \"0\" else bin\n        val result\
    \ = if (bin.length == 1) \"0\" else bin\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfzcjtyu8.scala:50:11 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpfzcjtyu8.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzcjtyu8.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = \e[33mif\e[0m (bin.length == \e[31m1\e[0m) \e[31m\"0\"\e\
    [0m \e[33melse\e[0m bin\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfzcjtyu8.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e[0m (bin.length\
    \ == \e[31m1\e[0m) \e[31m\"0\"\e[0m \e[33melse\e[0m bin\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mresult\
    \ is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfzcjtyu8.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = \e[33mif\e[0m (bin.length == \e[31m1\e[0m) \e[31m\"0\"\e\
    [0m \e[33melse\e[0m bin\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e["
  stdout: ''
  timestamp: 1660009447
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = math.pow(2,rounded).toInt\n        val result = if (binary\
    \ == 1) \"1\" else \"0\"\n        val errorMsg = if (binary == 1) \"The average\
    \ is too high\" else \"The average is too low\"\n        Right(rounded)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu8q13ce5.scala:19)\n\tat Problem.main(tmpu8q13ce5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0L\n        val binary = new mutable.HashSet[Long]()\n    \
    \    for(i <- 0 until avg.length) {\n            sum += avg(i)\n            binary.add(avg(i))\n\
    \        }\n        if(binary.size == 0) {\n            Left(s\"$n to $m is empty\"\
    )\n        } else {\n            Right(sum.toBinaryString())\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkgpfqkj.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdkgpfqkj.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += avg(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- Error: /tmp/tmpdkgpfqkj.scala:20:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \     Right(sum.toBinaryString())\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660009491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = mutable.ListBuffer[Long]()\n\
    \        val avg = mutable.ListBuffer[Long]()\n        for(i <- n until m){\n\
    \            sum += i\n            avg += i\n        }\n        if(sum.size ==\
    \ 0){\n            Left(s\"Sum is zero\")\n        }\n        else if(sum.size\
    \ == 1){\n            Right(sum.head)\n        }\n        else{\n            val\
    \ avg = sum.sum / sum.size\n            val bin = math.ceil(avg).toBinaryString\n\
    \            Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpopjp8ea_.scala:10:18 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpopjp8ea_.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpopjp8ea_.scala:24:37 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mbin\e[0m = math.ceil(avg).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      value toBinaryString is not a member of Double\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / (m - n +\
    \ 1) // average of n through m\n        val rounded = math.round(avg).toInt //\
    \ round to nearest integer\n        val binary = binary(rounded) // convert rounded\
    \ to binary\n        val result = if (rounded == 0) Right(0) else Left(binary)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp8pb5um7.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\
    \ \e[34m// convert rounded to binary\e[0m\n\e[31m\e[31m   |\e[0m             \
    \        ^\e[0m\n\e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m\
    \ \e[35mbinary\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpp8pb5um7.scala:14:8 ---------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Either[Nothing, Int])\n\e[31m   |\e[0m        Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) Left(s\"$n\
    \ is greater than $m\")\n        else if (n == m) Right(m)\n        else Right(roundToNearestInt(m)\
    \ + roundToNearestInt(n) - roundToNearestInt(m) - roundToNearestInt(n))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9izp3b90.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33melse\e[0m Right(roundToNearestInt(m) +\
    \ roundToNearestInt(n) - roundToNearestInt(m) - roundToNearestInt(n))\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \             Not found: roundToNearestInt\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.map(x => (x / 2).floor).sum\n        val bin = sum.map(x =>\
    \ (x / 2).floor).map(x => Integer.toBinaryString(x)).mkString\n        val right\
    \ = if (n == m) Right(bin) else Left(s\"$n to $m doesn't include $n\")\n     \
    \   val left = if (n == m) Left(bin) else Right(s\"$n to $m doesn't include $m\"\
    )\n        val result = if (avg == 0) right else Left(s\"$avg is $bin\")\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx8x15_v0.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum.map(\e[36mx\e\
    [0m => (x / \e[31m2\e[0m).floor).sum\n\e[31m\e[31m   |\e[0m                  \
    \             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value floor is not a member\
    \ of Long.\n\e[31m   |\e[0m      An extension method was tried, but could not\
    \ be fully constructed:\n\e[31m   |\e[0m\n\e[31m   |\e[0m          floatWrapper(x./(\e\
    [31m2\e[0m))\n\e[31m\e[31m-- Error: /tmp/tmpx8x15_v0.scala:11:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum.map(\e[36mx\e\
    [0m => (x / \e[31m2\e[0m).floor).sum\n\e[31m\e[31m   |\e[0m                  \
    \                               ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mIntIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m and \e[33mobject\e[0m \e[35mCharIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m match type Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpx8x15_v0.scala:12:39 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = sum.map(\e[36mx\e[0m => (x / \e\
    [31m2\e[0m).floor).map(\e[36mx\e[0m => Integer.toBinaryString(x)).mkString\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m      value floor is not a member of Long.\n\e[31m   |\e[0m      An extension\
    \ method was tried, but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m          floatWrapper(x./(\e[31m2\e[0m))\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpx8x15_v0.scala:16:8 ---------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e[1m\e[31m\
    \ \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e[0m]\e\
    [1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-e"
  stdout: ''
  timestamp: 1660009493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2.0).toInt\n\
    \        val binary = avg.toBinaryString\n        val result = if (binary == \"\
    \") -1 else binary.toLong\n        Right(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv7m67wrn.scala:16)\n\tat Problem.main(tmpv7m67wrn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2)\n\
    \        val bin = Integer.toBinaryString(avg)\n        val binLen = bin.length\n\
    \        val leftPart = bin.substring(0, binLen - 1)\n        val rightPart =\
    \ bin.substring(binLen - 1, bin.length)\n        val leftPart = leftPart.toInt\n\
    \        val rightPart = rightPart.toInt\n        val result = if (leftPart ==\
    \ 0 && rightPart == 0) Right(avg) else Left(s\"$leftPart $rightPart\")\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0qat5yuh.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mleftPart\e[0m = leftPart.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mleftPart is already defined as \e[33mvalue\e[0m \e[35mleftPart\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0qat5yuh.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mrightPart\e[0m = rightPart.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrightPart\
    \ is already defined as \e[33mvalue\e[0m \e[35mrightPart\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0qat5yuh.scala:11:41\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp0qat5yuh.scala:17:25\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e[0m (leftPart == \e[31m0\e[0m &&\
    \ rightPart == \e[31m0\e[0m) Right(avg) \e[33melse\e[0m Left(\e[31ms\"\e[0m$leftPart\e\
    [31m \e[0m$rightPart\e[31m\"\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types String and Int\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp0qat5yuh.scala:17:42\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e[0m (leftPart == \e[31m0\e[0m &&\
    \ rightPart == \e[31m0\e[0m) Right(avg) \e[33melse\e[0m Left(\e[31ms\"\e[0m$leftPart\e\
    [31m \e[0m$"
  stdout: ''
  timestamp: 1660009493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = avg.reduceLeft(_ + _)\n        val avg = sum / avg.length\n\
    \        val bin = scala.math.pow(10, avg.toInt)\n        val rounded = math.round(bin)\n\
    \        val result = rounded / bin\n        val str = result.toString\n     \
    \   val right = str.substring(str.length - 1)\n        val left = str.substring(0,\
    \ str.length - 1)\n        val right = right.substring(0, right.length - 1)\n\
    \        val left = left.substring(0, left.length - 1)\n        val right = right.substring(right.length\
    \ - 1)\n        val left = left.substring(left.length - 1)\n        val right\
    \ = right.substring(0, right.length - 1)\n        val left = left.substring(0,\
    \ left.length - 1)\n        val right = right.substring(right.length - 1)\n  \
    \      val left = left.substring(left.length - 1)\n        val right = right.substring(0,\
    \ right.length - 1)\n        val left = left.substring(0, left.length - 1)\n \
    \       val right = right.substring(right.length - 1)\n        val left = left.substring(left.length\
    \ - 1)\n        val right = right.substring(0, right.length - 1)\n        val\
    \ left = left.substring(0, left.length - 1)\n        val right = right.substring(right.length\
    \ - 1)\n        val left = left.substring(left.length - 1)\n        val right\
    \ = right.substring(0, right.length - 1)\n        val left = left.substring(0,\
    \ left.length - 1)\n        val right = right.substring(right.length - 1)\n  \
    \      val left = left.substring(left.length - 1)\n        val right = right.substring(0,\
    \ right.length - 1)\n        val left = left.substring(0, left.length - 1)\n \
    \       val right = right.substring(right.length - 1)\n        val left = left.substring(left.length\
    \ - 1)\n        val right = right.substring(0, right.length - 1)\n        val\
    \ left = left.substring(0, left.length - 1)\n        val right = right.substring(right.length\
    \ - 1)\n        val left = left.substring(left.length - 1)\n        val right\
    \ = right.substring(0, right.length - 1)\n        val left = left.substring(0,\
    \ left.length - 1)\n        val right = right.substring(right.length - 1)\n  \
    \      val left = left.substring(left.length - 1)\n        val right = right.substring(0,\
    \ right.length - 1)\n        val left = left.substring(0, left.length - 1)\n \
    \       val right = right.substring(right.length - 1)\n        val left = left.substring(left.length\
    \ - 1)\n        val right = right.substring(0, right.length - 1)\n        val\
    \ left = left.substring(0, left.length - 1)\n        val right = right.substring(right.length\
    \ - 1)\n        val left = left.substring(left.length - 1)\n        val right\
    \ = right.substring(0, right.length - 1)\n        val left = left.substring(0,\
    \ left.length - 1)\n        val right = right.substring(right.length - 1)\n  \
    \      val left = left.substring(left.length - 1)\n        val right = right.substring(0,\
    \ right.length - 1)\n        val left = left.substring(0, left.length - 1)\n \
    \       val right = right.substring(right.length - 1)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpymi_4f19.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpymi_4f19.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mright\e[0m = right.substring(\e[31m0\e[0m, right.length - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mright is already defined as \e[33mvalue\e[0m \e[35mright\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpymi_4f19.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = left.substring(\e[31m0\e\
    [0m, left.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleft is already defined as \e[33mvalue\e[0m \e[35mleft\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpymi_4f19.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = right.substring(right.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mright is already defined as \e[33mvalue\e[0m \e[35mright\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpymi_4f19.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = left.substring(left.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n + (m - 1)\
    \ / 2\n        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg)\n            Right(binary)\n        else\n      \
    \      Left(s\"$n to $m average is $avg, rounded to $rounded\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkplekyk2.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkplekyk2.scala:14:18 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            Right(binary)\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (binary\
    \ : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0\n        val binary = new mutable.HashSet[Long]()\n     \
    \   val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n  \
    \      val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n        val binSum = 0\n        val binary = new mutable.HashSet[Long]()\n\
    \        val sumOfBinary = new mutable.HashSet[Long]()\n        val binSum = 0\n\
    \        val binary = new mutable.HashSet[Long]()\n        val sumOfBinary = new\
    \ mutable.HashSet[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc4wg028w.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbinary is already defined as \e[33mvalue\e[0m \e[35mbinary\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc4wg028w.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36msumOfBinary\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumOfBinary is already defined as \e[33mvalue\e[0m \e[35msumOfBinary\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc4wg028w.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mbinSum\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbinSum is already defined\
    \ as \e[33mvalue\e[0m \e[35mbinSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc4wg028w.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbinary is already defined as \e[33mvalue\e[0m \e[35mbinary\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc4wg028w.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36msumOfBinary\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = mutable.ListBuffer.empty[Long]\n\
    \        val count = mutable.ListBuffer.empty[Long]\n        for (i <- n until\
    \ m) {\n            sum :+= i\n            count :+= 1\n        }\n        if\
    \ (sum.size == 0) {\n            Left(s\"Sum is zero\")\n        } else if (sum.size\
    \ == 1) {\n            Right(sum.head / count.head)\n        } else {\n      \
    \      val avg = sum.sum / count.sum\n            val rounded = math.round(avg).toBinaryString\n\
    \            Right(rounded)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq9yrpxo0.scala:10:18 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpq9yrpxo0.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / avg.length\n    \
    \    val bin = Integer.toBinaryString(avg)\n        val right = bin.substring(bin.length\
    \ - m.toString.length)\n        val left = bin.substring(0, bin.length - m.toString.length)\n\
    \        val result = if (right == \"\") Left(left) else Right(right)\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp24gdjn41.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp24gdjn41.scala:13:41\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m         Found:    (avg : scala.collection.immutable.NumericRange[Long])\n\
    \e[31m   |\e[0m         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp24gdjn41.scala:17:8 ---------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e[1m\e\
    [31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / avg.length\n    \
    \    val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n  \
    \          Left(s\"$n to $m is $avg\")\n        } else {\n            Right(bin)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjp0hh7qf.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjp0hh7qf.scala:13:41\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m         Found:    (avg : scala.collection.immutable.NumericRange[Long])\n\
    \e[31m   |\e[0m         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjp0hh7qf.scala:17:18 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m            \
    \      ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\e\
    [31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by 1\n        val avg = avg.sum / sum.size\n       \
    \ val bin = math.round(avg).toBinaryString\n        val right = bin.charAt(bin.length\
    \ - 1) == '1'\n        val left = bin.charAt(0) == '1'\n        val result = if\
    \ (right) Right(bin) else Left(s\"$bin is not a valid binary number\")\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzsxijyac.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpzsxijyac.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m by -1\n\
    \        val avg = sum.sum / sum.length\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == \"\") -1 else bin.charAt(0)\n        Right(result)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqcq304jz.scala:14:14\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        Right(result)\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^\e[0m\n\e[31m   |\e[0m              Found:  \
    \  (result : AnyVal)\n\e[31m   |\e[0m              Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is\
    \ not an even number\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptvfjj1es.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptvfjj1es.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(s\"$rounded is not a binary number\")\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp85k196lf.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.length\n        val rounded = math.round(avg).toInt\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == 0)\
    \ Right(rounded) else Left(s\"$rounded is not a binary number\")\n        result\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprxgr8ead.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprxgr8ead.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result \n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mInt\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded > m) Left(s\"$n cannot be greater than $m\")\n        else\
    \ if (rounded < 0) Right(-1)\n        else Right(binary)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzhbly7l4.scala:15:19\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m Right(binary)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \          Found:    (binary : String)\n\e[31m   |\e[0m                   Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = binary(rounded)\n   \
    \     val result = if (rounded == 0) Right(binary) else Left(s\"${binary} is not\
    \ an integer.\")\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphdmtfurl.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2).round\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Left(s\"$n through $m average is $avg\")\n        } else {\n    \
    \        Right(bin)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiny_54aq.scala:11:41\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = Integer.toBinaryString(avg)\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                               \
    \          Found:    (avg : Long)\n\e[31m   |\e[0m                           \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpiny_54aq.scala:15:18 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m                  ^^^\e[0m\n\
    \e[31m   |\e[0m                  Found:    (bin : String)\n\e[31m   |\e[0m   \
    \               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val roundedAvg = math.round(avg)\n        val binary = binary(roundedAvg)\n\
    \        val result = if(rounded == -1) Right(-1) else Left(binary)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxbt_l7au.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(roundedAvg)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbt_l7au.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m(rounded == -\e[31m1\e[0m) Right(-\e[31m1\e[0m) \e[33melse\e[0m Left(binary)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: rounded\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpxbt_l7au.scala:14:8 ---------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (result : Either[Nothing, Int])\n\e[31m   |\e\
    [0m        Required: Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val n = math.max(math.min(n,\
    \ m), -1L)\n        val m = math.max(math.min(m, n), -1L)\n        val sum = n\
    \ + m\n        val avg = sum / 2\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == sum.toBinaryString) Right(bin) else Left(s\"\
    $n to $m is $sum, which is $avg. Convert to binary: $bin\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkf3etuz8.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.max(math.min(n,\
    \ m), -\e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                                 \
    \ ^\e[0m\n\e[31m   |\e[0m                                  Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpkf3etuz8.scala:11:34 ---------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.max(math.min(m, n), -\e[31m1L\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  Recursive \e[33mvalue\e[0m \e[35mm\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkf3etuz8.scala:11:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.max(math.min(m, n), -\e[31m1L\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.toList\n        val sum\
    \ = sum.toList\n        val avg = avg.map(x => x.toBinaryString).mkString\n  \
    \      val sum = sum.map(x => x.toBinaryString).mkString\n        val avg = avg.toBinaryString\n\
    \        val sum = sum.toBinaryString\n        val avg = avg.toInt\n        val\
    \ sum = sum.toInt\n        val avg = if (avg > 0) avg else -1\n        val sum\
    \ = if (sum > 0) sum else -1\n        val avg = if (avg > 0) avg else -1\n   \
    \     val sum = if (sum > 0) sum else -1\n        val avg = if (avg > 0) avg else\
    \ -1\n        val sum = if (sum > 0) sum else -1\n        val avg = if (avg >\
    \ 0) avg else -1\n        val sum = if (sum > 0) sum else -1\n        val avg\
    \ = if (avg > 0) avg else -1\n        val sum = if (sum > 0) sum else -1\n   \
    \     val avg = if (avg > 0) avg else -1\n        val sum = if (sum > 0) sum else\
    \ -1\n        val avg = if (avg > 0) avg else -1\n        val sum = if (sum >\
    \ 0) sum else -1\n        val avg = if (avg > 0) avg else -1\n        val sum\
    \ = if (sum > 0) sum else -1\n        val avg = if (avg > 0) avg else -1\n   \
    \     val sum = if (sum > 0) sum else -1\n        val avg = if (avg > 0) avg else\
    \ -1\n        val sum = if (sum > 0) sum else -1\n        val avg = if (avg >\
    \ 0) avg else -1\n        val sum = if (sum > 0) sum else -1\n        val avg\
    \ = if (avg > 0) avg else -1\n        val sum = if (sum > 0) sum else -1\n   \
    \     val avg = if (avg > 0) avg else -1\n        val sum = if (sum > 0) sum else\
    \ -1\n        val avg = if (avg > 0) avg else -1\n        val sum = if (sum >\
    \ 0) sum else -1\n        val avg = if (avg > 0) avg else -1\n        val sum\
    \ = if (sum > 0) sum else -1\n        val avg = if (avg > 0) avg else -1\n   \
    \     val sum = if (sum > 0) sum else -1\n        val avg = if (avg > 0) avg else\
    \ -1\n        val sum = if (sum > 0) sum else -1\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpn_zvkb8i.scala:54:11 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpn_zvkb8i.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg is already\
    \ defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn_zvkb8i.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = sum.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is already\
    \ defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn_zvkb8i.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.map(\e[36mx\e\
    [0m => x.toBinaryString).mkString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpn_zvkb8i.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = sum.map(\e[36mx\e[0m => x.toBinaryString).mkString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /t"
  stdout: ''
  timestamp: 1660009501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / (m + 1)\n\
    \        val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is\
    \ not an integer.\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsvyqm723.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsvyqm723.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = binary(rounded)\n   \
    \     val result = if (rounded == m) Right(binary) else Left(s\"$rounded is not\
    \ an average of $n through $m\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpaqggg3w3.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg).toInt\n\
    \        val binary = Integer.toBinaryString(rounded)\n        if (rounded ==\
    \ 0) {\n            Right(binary)\n        } else if (rounded == 1) {\n      \
    \      Left(s\"$rounded is too small to be an average\")\n        } else {\n \
    \           Left(s\"$rounded is too large to be an average\")\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprdhgcpm2.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            Right(binary)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      Found:    (binary : String)\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2).round\n\
    \        val binary = avg.toBinaryString\n        if (binary.length == 1) Right(binary)\n\
    \        else if (binary.length == 2) Left(s\"$binary\")\n        else Left(s\"\
    $binary$binary\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqv4b_mxr.scala:12:38\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (binary.length\
    \ == \e[31m1\e[0m) Right(binary)\n\e[31m\e[31m   |\e[0m                      \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \      Found:    (binary : String)\n\e[31m   |\e[0m                          \
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val n = math.max(math.min(n,\
    \ m), 1L)\n        val m = math.max(math.min(m, n), 1L)\n        val sum = n to\
    \ m by -1\n        val avg = sum.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin.size == 0) \"-1\" else bin\n        Right(result)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo4tcx86j.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.max(math.min(n,\
    \ m), \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpo4tcx86j.scala:11:34 ---------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.max(math.min(m, n), \e[31m1L\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  Recursive \e[33mvalue\e[0m \e[35mm\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo4tcx86j.scala:11:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.max(math.min(m, n), \e[31m1L\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                     Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo4tcx86j.scala:16:14 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        Right(result)\n\e[31m\e[31m   |\e[0m        \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m              Found:    (result : String)\n\
    \e[31m   |\e[0m              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == m) Right(binary) else Left(s\"$rounded is not\
    \ an average of $m and $n\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt5ygn_x9.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n >= m) Right(-1)\n\
    \        else {\n            val sum = scala.math.round(n/m)*m\n            val\
    \ avg = sum/m \n            val bin = scala.math.round(avg).toBinaryString\n \
    \           Right(bin)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp310y5qwb.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            Right(bin)\n\e[31m\e\
    [31m   |\e[0m                  ^^^\e[0m\n\e[31m   |\e[0m                  Found:\
    \    (bin : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / avg.length\n    \
    \    val bin = math.ceil(avg).toBinaryString\n        val result = if (bin.size\
    \ == m) Right(bin) else Left(s\"$n to $m is $avg\")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl6fz1hd8.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl6fz1hd8.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbin\e\
    [0m = math.ceil(avg).toBinaryString\n\e[31m\e[31m   |\e[0m                   \
    \         ^^^\e[0m\n\e[31m   |\e[0m         Found:    (avg : scala.collection.immutable.NumericRange[Long])\n\
    \e[31m   |\e[0m         Required: Double\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = (n to m).sum\n\
    \        val avg = sum / m\n        val rounded = math.round(avg)\n        val\
    \ binary = math.pow(2,rounded)\n        val result = if (rounded == 0) Right(binary)\
    \ else Left(s\"$rounded is not an integer.\")\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp20cotkww.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String,\
    \ \e[1m\e[31mDouble\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String,\
    \ \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = sum / avg\n        val bin\
    \ = math.round(avg).toBinaryString\n        val result = if (bin.charAt(bin.length\
    \ - 1) == '1') Right(bin) else Left(\"-1\")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpahx0qdz0.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / avg\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg is already\
    \ defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpahx0qdz0.scala:13:23 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m\
    \   |\e[0m (x: Float): Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch\
    \ arguments ((avg : scala.collection.immutable.NumericRange[Long]))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n == 0 || m == 0)\
    \ {\n            Left(s\"$n or $m is 0\")\n        } else if (n > m) {\n     \
    \       Left(s\"$n is greater than $m\")\n        } else {\n            val sum\
    \ = n to m\n            val avg = sum.sum / sum.size\n            Right(math.round(avg).toBinary)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnhysk7ak.scala:17:34 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Right(math.round(avg).toBinary)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value toBinary is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg).toBinaryString\n\
    \        val result = Right(rounded)\n        if (n > m) Left(s\"$n > $m\")\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqx_8zv6_.scala:15:13\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m result\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (result : Right[Nothing, String])\n\e[31m   |\e[0m             Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / sum.sum\n       \
    \ val bin = math.round(avg).toBinaryString\n        val result = if (bin.length\
    \ == 0) -1 else bin\n        Left(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc443jay2.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / sum.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpc443jay2.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpc443jay2.scala:15:13 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        Left(result)\n\e[31m\e[31m   |\e[0m             ^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    (result : Int)\n\e[31m   |\e[0m   \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg).toBinaryString\n\
    \        val result = if (rounded == avg) Right(rounded) else Left(s\"$rounded\
    \ is not an integer.\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps1gbcr50.scala:13:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (rounded == avg) Right(rounded) \e[33melse\e[0m Left(\e[31ms\"\e[0m$rounded\e\
    [31m is not an integer.\"\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Long\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmps1gbcr50.scala:14:8 ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m\
    \        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e\
    [31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e[0m]\e[1m\e[31m)\e\
    [0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e[32mLong\e[0m]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded > m) Left(s\"$n cannot be greater than $m\")\n        else\
    \ if (rounded < 0) Right(s\"$n cannot be less than 0\")\n        else Right(binary)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqrwuy95t.scala:14:36\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (rounded < \e[31m0\e[0m) Right(\e[31ms\"\e[0m$n\e[31m cannot be less than\
    \ 0\"\e[0m)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    String\n\e[31m\
    \   |\e[0m                                    Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqrwuy95t.scala:15:19 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m Right(binary)\n\e[31m\e[31m \
    \  |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (binary : String)\n\e[31m   |\e[0m                   Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is not\
    \ a binary number\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfclgsz4o.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded > m) Left(s\"$rounded > $m\")\n        else if (rounded <\
    \ n) Right(s\"$rounded < $n\")\n        else Right(binary)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1gdqhvn.scala:14:36\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (rounded < n) Right(\e[31ms\"\e[0m$rounded\e[31m < \e[0m$n\e[31m\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Found:    String\n\e[31m  \
    \ |\e[0m                                    Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1gdqhvn.scala:15:19 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m Right(binary)\n\e[31m\e[31m \
    \  |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (binary : String)\n\e[31m   |\e[0m                   Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0L\n        val binary = new mutable.HashSet[Long]()\n    \
    \    val bin = binary.toList\n        for(i <- 0 until bin.length){\n        \
    \    sum += bin(i)\n        }\n        val avg = sum / bin.length\n        val\
    \ binary = binary.toList\n        val bin = binary.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n   \
    \     val bin = bin.toList\n        val bin = bin.toList\n        val bin = bin.toList\n\
    \        val bin = bin.toList\n        val bin = bin.toList\n        val bin =\
    \ bin.toList\n        val bin = bin.toList\n        val bin = bin\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeynvxpsm.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / bin.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeynvxpsm.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbinary\e[0m = binary.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbinary is already defined as \e[33mvalue\e[0m \e[35mbinary\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeynvxpsm.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = binary.toList\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbin is already\
    \ defined as \e[33mvalue\e[0m \e[35mbin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeynvxpsm.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = bin.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbin is already\
    \ defined as \e[33mvalue\e[0m \e[35mbin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeynvxpsm.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = bin.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mbin is already\
    \ defined as \e[33mvalue\e[0m \e[35mbin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tm"
  stdout: ''
  timestamp: 1660009508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$n through\
    \ $m is $rounded and should be $binary\")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg0r_5au6.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg0r_5au6.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is not\
    \ a whole number\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1cr9p67x.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = mutable.ListBuffer[Long]()\n\
    \        val avg = mutable.ListBuffer[Long]()\n        for (i <- n until m) {\n\
    \            sum += i\n            avg +=i\n        }\n        val sum = sum.sum\n\
    \        val avg = sum / sum.length\n        val rounded = math.round(avg)\n \
    \       val binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(binary)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfu7v41yk.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = sum.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is already defined\
    \ as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfu7v41yk.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / sum.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfu7v41yk.scala:10:18\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36msum\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfu7v41yk.scala:11:18\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mavg\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfu7v41yk.scala:19:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mbinary\e[0m = binary(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \    ^\e[0m\n\e[31m   |\e[0m                     Recursive \e[33mvalue\e[0m \e\
    [35mbinary\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = sum.sum / sum.size\n      \
    \  val bin = math.round(avg).toBinaryString\n        val result = if (bin.size\
    \ == 1) \"0\" + bin else bin\n        val right = if (bin.size == 1) \"1\" + bin\
    \ else bin\n        val left = if (bin.size == 1) \"0\" + bin else bin\n     \
    \   val result = if (bin.size == 1) \"0\" + bin else bin\n        val right =\
    \ if (bin.size == 1) \"1\" + bin else bin\n        val left = if (bin.size ==\
    \ 1) \"0\" + bin else bin\n        val result = if (bin.size == 1) \"0\" + bin\
    \ else bin\n        val right = if (bin.size == 1) \"1\" + bin else bin\n    \
    \    val left = if (bin.size == 1) \"0\" + bin else bin\n        val result =\
    \ if (bin.size == 1) \"0\" + bin else bin\n        val right = if (bin.size ==\
    \ 1) \"1\" + bin else bin\n        val left = if (bin.size == 1) \"0\" + bin else\
    \ bin\n        val result = if (bin.size == 1) \"0\" + bin else bin\n        val\
    \ right = if (bin.size == 1) \"1\" + bin else bin\n        val left = if (bin.size\
    \ == 1) \"0\" + bin else bin\n        val result = if (bin.size == 1) \"0\" +\
    \ bin else bin\n        val right = if (bin.size == 1) \"1\" + bin else bin\n\
    \        val left = if (bin.size == 1) \"0\" + bin else bin\n        val result\
    \ = if (bin.size == 1) \"0\" + bin else bin\n        val right = if (bin.size\
    \ == 1) \"1\" + bin else bin\n        val left = if (bin.size == 1) \"0\" + bin\
    \ else bin\n        val result = if (bin.size == 1) \"0\" + bin else bin\n   \
    \     val right = if (bin.size == 1) \"1\" + bin else bin\n        val left =\
    \ if (bin.size == 1) \"0\" + bin else bin\n        val result = if (bin.size ==\
    \ 1) \"0\" + bin else bin\n        val right = if (bin.size == 1) \"1\" + bin\
    \ else bin\n        val left = if (bin.size == 1) \"0\" + bin else bin\n     \
    \   val result = if (bin.size == 1) \"0\" + bin else bin\n        val right =\
    \ if (bin.size == 1) \"1\" + bin else bin\n        val left = if (bin.size ==\
    \ 1) \"0\" + bin else bin\n        val result = if (bin.size == 1) \"0\" + bin\
    \ else bin\n        val right = if (bin.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5lrck3a.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz5lrck3a.scala:12:12 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum.sum / sum.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg is already\
    \ defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz5lrck3a.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mif\e\
    [0m (bin.size == \e[31m1\e[0m) \e[31m\"0\"\e[0m + bin \e[33melse\e[0m bin\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz5lrck3a.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = \e[33mif\e[0m (bin.size\
    \ == \e[31m1\e[0m) \e[31m\"1\"\e[0m + bin \e[33melse\e[0m bin\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mright is already defined as \e[33mvalue\e[0m \e[35mright\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz5lrck3a.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = \e[33mif\e[0m (bin.size == \e\
    [31m1\e[0m) \e[31m\"0\"\e[0m + bin \e[33melse\e[0m bin\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mleft\
    \ is already defined as \e[33mvalue\e[0m \e[35mleft\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined"
  stdout: ''
  timestamp: 1660009508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n == 0 || m == 0)\
    \ Right(-1)\n        else if (n > m) Right(-1)\n        else if (n == m) Right(n\
    \ / 2)\n        else if (n % 2 == 0) Right(n / 2)\n        else Right(-1)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpibp0i5rx.scala:17)\n\tat Problem.main(tmpibp0i5rx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009511
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n <= m) Right(n /\
    \ m)\n        else if (n > m) Left(-1)\n        else Right(-1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppsmlv8ad.scala:11:29\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (n > m) Left(-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \      ^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m-1\e\
    [0m : Int)\n\e[31m   |\e[0m                             Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0L\n        val count = mutable.ListBuffer[Long]()\n      \
    \  avg.foreach(x => sum += x)\n        avg.foreach(x => count += x)\n        val\
    \ avg = sum / count.sum\n        val bin = math.round(avg).toBinaryString\n  \
    \      val result = if (bin.size == 0) -1 else bin.charAt(bin.length - 1)\n  \
    \      Left(result)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpddzyzt8f.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / count.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddzyzt8f.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpddzyzt8f.scala:13:29\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        avg.foreach(\e[36mx\e\
    [0m => sum += x)\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                 value += is not a member of Long - did you mean\
    \ sum.!=?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpddzyzt8f.scala:16:23 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m\
    \   |\e[0m (x: Float): Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch\
    \ arguments ((avg : scala.collection.immutable.NumericRange[Long]))\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpddzyzt8f.scala:18:13 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        Left(result)\n\e[31m\e[31m   |\e[0m         \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:    (result : Int)\n\e[31m\
    \   |\e[0m             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / avg.length\n    \
    \    val binary = scala.math.round(avg).toBinaryString\n        val result = if\
    \ (binary == \"\") -1 else binary.toLong\n        Left(s\"$n to $m average = $result\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9iah1zsr.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp9iah1zsr.scala:13:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbinary\e[0m = scala.math.round(avg).toBinaryString\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e\
    [35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e\
    [0m (x: Float): Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments\
    \ ((avg : scala.collection.immutable.NumericRange[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$n through\
    \ $m is $rounded and cannot be rounded to a binary number\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr6m7niql.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpr6m7niql.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == m) Right(binary) else Left(s\"$rounded is not\
    \ an average of $m and $n\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt5ygn_x9.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2)\n\
    \        val binary = avg.toBinaryString\n        val result = if (n >= m) Right(binary)\
    \ else Left(s\"$n to $m is not possible\")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw7k45gyg.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String,\
    \ \e[1m\e[31mString\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String,\
    \ \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is not\
    \ an integer.\")\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpswhphy2j.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(binary)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnfqz60tq.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = Integer.toBinaryString(rounded)\n        val right = if (rounded\
    \ == 0) \"-1\" else binary\n        val left = if (rounded == 0) \"-1\" else binary.reverse\n\
    \        Left(s\"$n through $m is $avg and rounded to $rounded. Binary is $left\
    \ and $right\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpijaf97bd.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg)\n            Right(binary)\n        else\n      \
    \      Left(s\"$n / $m is $avg, which is not an average of $n through $m\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv5q8mnly.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpv5q8mnly.scala:14:18 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            Right(binary)\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (binary\
    \ : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == m) Right(binary) else Left(s\"$rounded is not\
    \ an average of $n through $m\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6vl44pwt.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n > m) {\n       \
    \     Left(s\"$n is greater than $m\")\n        } else {\n            val sum\
    \ = n to m by -1\n            val avg = sum.sum / sum.length\n            Right(math.round(avg).toBinary)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvitezgip.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            Right(math.round(avg).toBinary)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value toBinary is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val right = if (rounded == 0) \"0\" + binary else binary\n        val\
    \ left = if (rounded == 0) \"1\" + binary else binary\n        val result = if\
    \ (rounded == 0) \"-1\" else right\n        Left(result)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpewtrt98u.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m by -1\n\
    \        val avg = sum.sum / sum.size\n        val bin = math.round(avg).toBinaryString\n\
    \        if (bin.length == 1) Right(bin)\n        else Left(s\"$bin is not a valid\
    \ binary number\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5m36kbjq.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (bin.length\
    \ == \e[31m1\e[0m) Right(bin)\n\e[31m\e[31m   |\e[0m                         \
    \          ^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    (bin : String)\n\e[31m   |\e[0m                                   Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.foldLeft(0.0) { (sum, elem) => sum + elem}\n        val rounded\
    \ = math.round(avg)\n        val binary = rounded.toBinaryString\n        val\
    \ result = if (rounded == 0) Right(binary) else Left(s\"$rounded is not a whole\
    \ number\")\n        result\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjt2lspb4.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String,\
    \ \e[1m\e[31mString\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String,\
    \ \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by 1\n        val avg = avg.sum / sum.size\n       \
    \ val bin = math.round(avg).toBinaryString\n        val result = if (bin.size\
    \ == 0) -1 else bin\n        Left(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3lli_yr4.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3lli_yr4.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp3lli_yr4.scala:15:13 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        Left(result)\n\e[31m\e[31m   |\e[0m             ^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    (result : Int)\n\e[31m   |\e[0m   \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n + (m - 1)\
    \ / 2\n        val bin = math.round(avg).toBinaryString\n        val result =\
    \ if (bin == \"1\") Right(bin) else Left(s\"$n through $m average = ${avg}. Rounded\
    \ to $bin\")\n        result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj0r5k6bc.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String,\
    \ \e[1m\e[31mString\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String,\
    \ \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg).toInt\n\
    \        val binary = Integer.toBinaryString(rounded)\n        if (rounded > m)\
    \ Left(s\"$rounded is greater than $m\")\n        else if (rounded < n) Right(s\"\
    $rounded is less than $n\")\n        else Right(binary)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9_uelzft.scala:15:36\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (rounded < n) Right(\e[31ms\"\e[0m$rounded\e[31m is less than \e[0m$n\e[31m\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    String\n\e[31m\
    \   |\e[0m                                    Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9_uelzft.scala:16:19 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m Right(binary)\n\e[31m\e[31m \
    \  |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m                   Found:\
    \    (binary : String)\n\e[31m   |\e[0m                   Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = sum.sum / sum.count\n     \
    \   val bin = math.round(avg).toBinaryString\n        val result = if (bin ==\
    \ 0) Right(bin) else Left(s\"$bin is not a valid binary number\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcxhlx11c.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum.sum / sum.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcxhlx11c.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660009515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n >= m) Right(-1)\n\
    \        else {\n            val avg = n + (m - 1) / 2\n            val bin =\
    \ math.ceil(avg).toBinaryString\n            Right(bin)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv38psa1j.scala:13:37 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mbin\e[0m = math.ceil(avg).toBinaryString\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      value toBinaryString is not a member of Double\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$n through\
    \ $m is $avg, rounded to $rounded\")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4p8wz8m8.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4p8wz8m8.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.toList\n        val sum\
    \ = sum.toList\n        val avg = avg.sum / sum.sum\n        val avg = math.round(avg)\n\
    \        val bin = Integer.toBinaryString(avg)\n        val right = bin.substring(bin.length\
    \ - 1)\n        val left = bin.substring(0, bin.length - 1)\n        val right\
    \ = right.substring(0, 1)\n        val left = left.substring(0, 1)\n        val\
    \ right = right.substring(1).toLong\n        val left = left.substring(1).toLong\n\
    \        val right = right.asInstanceOf[Either[String, Long]]\n        val left\
    \ = left.asInstanceOf[Either[String, Long]]\n        if (right.right.equals(left.right))\
    \ {\n            right\n        } else {\n            left\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0vpi8zgf.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg is already\
    \ defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0vpi8zgf.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = sum.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is already\
    \ defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0vpi8zgf.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / sum.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0vpi8zgf.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mavg\e[0m = math.round(avg)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mavg is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0vpi8zgf.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = right.substring(\e[31m0\e[0m,\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mright is already defined as \e[33mvalue\e[0m \e[35mright\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e"
  stdout: ''
  timestamp: 1660009520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0L\n        val num = 0L\n        val num2 = 0L\n        val\
    \ num3 = 0L\n        val num4 = 0L\n        val num5 = 0L\n        val num6 =\
    \ 0L\n        val num7 = 0L\n        val num8 = 0L\n        val num9 = 0L\n  \
    \      val num10 = 0L\n        val num11 = 0L\n        val num12 = 0L\n      \
    \  val num13 = 0L\n        val num14 = 0L\n        val num15 = 0L\n        val\
    \ num16 = 0L\n        val num17 = 0L\n        val num18 = 0L\n        val num19\
    \ = 0L\n        val num20 = 0L\n        val num21 = 0L\n        val num22 = 0L\n\
    \        val num23 = 0L\n        val num24 = 0L\n        val num25 = 0L\n    \
    \    val num26 = 0L\n        val num27 = 0L\n        val num28 = 0L\n        val\
    \ num29 = 0L\n        val num30 = 0L\n        val num31 = 0L\n        val num32\
    \ = 0L\n        val num33 = 0L\n        val num34 = 0L\n        val num35 = 0L\n\
    \        val num36 = 0L\n        val num37 = 0L\n        val num38 = 0L\n    \
    \    val num39 = 0L\n        val num40 = 0L\n        val num41 = 0L\n        val\
    \ num42 = 0L\n        val num43 = 0L\n        val num44 = 0L\n        val num45\
    \ = 0L\n        val num46 = 0L\n        val num47 = 0L\n        val num48 = 0L\n\
    \        val num49 = 0L\n        val num50 = 0L\n        val num51 = 0L\n    \
    \    val num52 = 0L\n        val num53 = 0L\n        val num54 = 0L\n        val\
    \ num55 = 0L\n        val num56 = 0L\n        val num57 = 0L\n        val num58\
    \ = 0L\n        val num59 = 0L\n        val num60 = 0L\n        val num61 = 0L\n\
    \        val num62 = 0L\n        val num63 = 0L\n        val num64 = 0L\n    \
    \    val num65 = 0L\n        val num66 = 0L\n        val num67 = 0L\n        val\
    \ num68 = 0L\n        val num69 = 0L\n        val num70 = 0L\n        val num71\
    \ = 0L\n\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpujeq2e8t.scala:84:5\
    \ ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val roundedAvg = math.round(avg).toInt\n        val binaryAvg = Integer.toBinaryString(roundedAvg)\n\
    \        val result = Right(binaryAvg)\n        if (n > m) Left(s\"$n > $m\")\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbqsu_a0y.scala:15:13\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m result\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (result : Right[Nothing, String])\n\e[31m   |\e[0m             Required:\
    \ Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / (m - n +\
    \ 1) // average of n through m\n        val rounded = math.round(avg * 2).toInt\
    \ // round to nearest integer\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (binary == \"\") Right(rounded)\n        else Left(s\"$rounded is\
    \ not a round integer\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsg7d5z7h.scala:17)\n\tat Problem.main(tmpsg7d5z7h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg).toInt\n\
    \        val binary = Integer.toBinaryString(rounded)\n        if (rounded ==\
    \ 0) Right(binary)\n        else Left(s\"$rounded is not a round number\")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp05dg8mmz.scala:14:32\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (rounded\
    \ == \e[31m0\e[0m) Right(binary)\n\e[31m\e[31m   |\e[0m                      \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                                Found:\
    \    (binary : String)\n\e[31m   |\e[0m                                Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val n = math.max(math.min(n,\
    \ m), -1)\n        val m = math.max(math.min(m, n), -1)\n        val sum = n +\
    \ m\n        val avg = sum / 2\n        val bin = math.round(avg).toBinaryString\n\
    \        val result = if (bin == \"\") Right(-1) else Left(bin)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6a7nlgze.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.max(math.min(n,\
    \ m), -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Recursive \e[33mvalue\e\
    [0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp6a7nlgze.scala:11:34 ---------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.max(math.min(m, n), -\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  Recursive \e[33mvalue\e[0m \e[35mm\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6a7nlgze.scala:11:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.max(math.min(m, n), -\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                     Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6a7nlgze.scala:16:8 ---------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Either[Nothing, Int])\n\e[31m\
    \   |\e[0m        Required: Either[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is not\
    \ an integer.\")\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpswhphy2j.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009475
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = ((n + m) / 2.0).toInt\n\
    \        val binary = avg.toBinaryString\n        val result = if (binary == \"\
    \") -1 else binary.toLong\n        Right(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv7m67wrn.scala:16)\n\tat Problem.main(tmpv7m67wrn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by -1\n        val avg = avg.sum / sum.size\n      \
    \  val binary = avg.toBinaryString\n        val result = if (binary == \"\") -1\
    \ else binary.toLong\n        Right(result)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoiocwv_n.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoiocwv_n.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mbinary\e[0m = avg.toBinaryString\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toBinaryString is not a member\
    \ of scala.collection.immutable.NumericRange[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660009521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = 0L\n        val count = mutable.ListBuffer[Long]()\n      \
    \  for (i <- 0 until avg.length) {\n            sum += avg(i)\n            count\
    \ += i\n        }\n        val avg = sum / count.length\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Right(bin)\n        } else {\n   \
    \         Left(s\"$bin is not a valid binary number\")\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpazrtzu0c.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / count.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpazrtzu0c.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpazrtzu0c.scala:14:16\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            sum += avg(i)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean sum.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpazrtzu0c.scala:18:41 --------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mbin\e[0m = Integer.toBinaryString(avg)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^\e[0m\n\e[31m\
    \   |\e[0m         Found:    (avg : scala.collection.immutable.NumericRange[Long])\n\
    \e[31m   |\e[0m         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpazrtzu0c.scala:20:18 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            Right(bin)\n\e[31m\e[31m   |\e[0m            \
    \      ^^^\e[0m\n\e[31m   |\e[0m                  Found:    (bin : String)\n\e\
    [31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n + (m - 1)\
    \ / 2\n        val rounded = math.round(avg)\n        val binary = binary(rounded)\n\
    \        val result = if (rounded == n) Right(rounded) else Left(s\"$rounded is\
    \ not the correct answer\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptognjymc.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = (n to m).foldLeft(0)(_\
    \ + _)\n        val avg = sum / m\n        val rounded = math.round(avg)\n   \
    \     val binary = Integer.toBinaryString(rounded)\n        if (rounded == avg)\
    \ Right(binary) else Left(s\"$n to $m is $avg, which is not an exact multiple\
    \ of $m\")\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl4uel4l7.scala:10:39\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msum\e\
    [0m = (n to m).foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m          \
    \                             ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                   Found:    Long\n\e[31m   |\e[0m                          \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpl4uel4l7.scala:13:44 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = Integer.toBinaryString(rounded)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                            Found:    (rounded\
    \ : Long)\n\e[31m   |\e[0m                                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl4uel4l7.scala:14:34\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (rounded\
    \ == avg) Right(binary) \e[33melse\e[0m Left(\e[31ms\"\e[0m$n\e[31m to \e[0m$m\e\
    [31m is \e[0m$avg\e[31m, which is not an exact multiple of \e[0m$m\e[31m\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    (binary : String)\n\e[31m   |\e\
    [0m                                  Required: Long\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = n to m by 1\n        val avg = avg.sum / sum.size\n       \
    \ val bin = math.round(avg).toBinaryString\n        val result = if (bin.size\
    \ == 1) \"0\" + bin else bin\n        Right(result)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp59fr6klc.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = avg.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp59fr6klc.scala:13:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e\
    [0m \e[36mbin\e[0m = math.round(avg).toBinaryString\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((avg :\
    \ scala.collection.immutable.NumericRange[Long]))\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp59fr6klc.scala:15:14 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        Right(result)\n\e[31m\e[31m   |\e[0m              ^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    (result : String)\n\e[31m   |\e[0m\
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.length\n        val rounded = math.round(avg)\n\
    \        val binary = binary(rounded)\n        val result = if (rounded == 0)\
    \ Right(rounded) else Left(binary)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp41wizsra.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg)\n        val binary = binary(rounded)\n     \
    \   val result = if (rounded == m) Right(binary) else Left(s\"$rounded is not\
    \ an average of $n through $m\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6vl44pwt.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg).toInt\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded > m) Left(s\"$n cannot be greater than $m\")\n        else\
    \ if (rounded < 0) Right(-1)\n        else Right(binary)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzhbly7l4.scala:15:19\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m Right(binary)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \          Found:    (binary : String)\n\e[31m   |\e[0m                   Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009496
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n to m by -1\n\
    \        val sum = avg.sum\n        val avg = sum / avg.length\n        val binary\
    \ = avg.toBinaryString\n        val result = if (binary == \"\") -1 else binary.toLong\n\
    \        Right(result)\n    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
    \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
    ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
    \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
    0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
    ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
    \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
    0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt6mn4z4a.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum / avg.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt6mn4z4a.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mbinary\e[0m = avg.toBinaryString\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toBinaryString is not a member\
    \ of scala.collection.immutable.NumericRange[Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(s\"$rounded is not a binary number\")\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp85k196lf.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = Integer.toBinaryString(rounded)\n        val result = if (rounded\
    \ == 0) Right(binary) else Left(s\"$rounded is not an integer.\")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg4i4161y.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg4i4161y.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is\
    \ not an integer.\")\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpac29i75h.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpac29i75h.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        val result = if (rounded == 0) Right(binary) else Left(s\"$rounded is\
    \ not an integer, $binary is returned\")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n \
    \   assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkyqzqg4q.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkyqzqg4q.scala:14:8 ---------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[String, \e[1m\e[31mString\e\
    [0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[String, \e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg)\n            Right(binary)\n        else\n      \
    \      Left(s\"$n / $m is $avg, not $rounded\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj52e53ul.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpj52e53ul.scala:14:18 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            Right(binary)\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (binary\
    \ : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = n to m\n   \
    \     val avg = sum.sum / sum.size\n        val rounded = math.round(avg)\n  \
    \      val binary = binary(rounded)\n        val result = if (rounded == 0) Right(rounded)\
    \ else Left(s\"${rounded} in binary is ${binary}\")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpncjycfg0.scala:13:21 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mbinary\e[0m = binary(rounded)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35mbinary\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n/m\n      \
    \  val rounded = math.round(avg).toInt\n        if(rounded == avg)\n         \
    \   Right(rounded)\n        else\n            Left(s\"${rounded} in ${n} to ${m}\
    \ is ${avg}. Avg should be ${rounded}.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ib1xz0n.scala:18)\n\tat Problem.main(tmp8ib1xz0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val avg = n / m\n    \
    \    val rounded = math.round(avg)\n        val binary = Integer.toBinaryString(rounded)\n\
    \        if (rounded == avg)\n            Right(binary)\n        else\n      \
    \      Left(s\"$n / $m is $avg, which is not an average of $n through $m\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"\
    0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv5q8mnly.scala:12:44\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mbinary\e\
    [0m = Integer.toBinaryString(rounded)\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        Found:    (rounded : Long)\n\e[31m   |\e[0m         \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpv5q8mnly.scala:14:18 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            Right(binary)\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                  Found:    (binary\
    \ : String)\n\e[31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009515
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        if (n <= m) Right(n +\
    \ (m - n) / 2)\n        else Left(s\"$n is greater than $m\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"\
    ));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l),\
    \ (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"\
    0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"\
    ));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l),\
    \ (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"\
    0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"\
    ));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph9j3jtro.scala:14)\n\tat Problem.main(tmph9j3jtro.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two positive integers n and m, and your task is to compute\
    \ the\n    // average of the integers from n through m (including n and m). \n\
    \    // Round the answer to the nearest integer and convert that to binary.\n\
    \    // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n\
    \ : Long, m : Long) : Either[String, Long] = {\n        val sum = mutable.ListBuffer.empty[Long]\n\
    \        val avg = mutable.ListBuffer.empty[Long]\n        for(i <- n until m){\n\
    \            sum += i\n            avg +=i\n        }\n        val avg = sum.sum\
    \ / sum.size\n        val bin = math.round(avg).toBinaryString\n        if(bin.length\
    \ == 1){\n            Right(bin)\n        }else{\n            Left(s\"$bin is\
    \ not a valid binary number\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(roundedAvg((1l), (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l),\
    \ (13l)).equals(\"0b1010\"));\n    assert(roundedAvg((964l), (977l)).equals(\"\
    0b1111001010\"));\n    assert(roundedAvg((996l), (997l)).equals(\"0b1111100100\"\
    ));\n    assert(roundedAvg((560l), (851l)).equals(\"0b1011000010\"));\n    assert(roundedAvg((185l),\
    \ (546l)).equals(\"0b101101110\"));\n    assert(roundedAvg((362l), (496l)).equals(\"\
    0b110101101\"));\n    assert(roundedAvg((350l), (902l)).equals(\"0b1001110010\"\
    ));\n    assert(roundedAvg((197l), (233l)).equals(\"0b11010111\"));\n    assert(roundedAvg((7l),\
    \ (5l)).equals(-1l));\n    assert(roundedAvg((5l), (1l)).equals(-1l));\n    assert(roundedAvg((5l),\
    \ (5l)).equals(\"0b101\"));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy6bclx9b.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mavg\e[0m = sum.sum / sum.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mavg\
    \ is already defined as \e[33mvalue\e[0m \e[35mavg\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy6bclx9b.scala:10:18\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36msum\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy6bclx9b.scala:11:18\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mavg\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009523
