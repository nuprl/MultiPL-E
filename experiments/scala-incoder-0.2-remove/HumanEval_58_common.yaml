name: HumanEval_58_common
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique common elements for two lists.\n    def common(l1 :\
  \ List[Long], l2 : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
  \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
completions: ["        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val\
    \ common = set1 intersect set2\n        common.sorted", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        set1 intersect set2", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        for (i <- l1) set1 +=\
    \ i\n        for (i <- l2) set2 += i\n        set1.intersect(set2).toList", " \
    \       val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sorted", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        set1 intersect set2", "        val l3 =\
    \ l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common toList", "        val common = mutable.Set[Long]()\n\
    \        l1.foreach { x => if (l2.contains(x)) common += x }\n        common.sorted",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common toList", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.sorted", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val l3 = l1 ++ l2\n        val l4 = l1\
    \ -- l2\n        val l5 = l1 ++ l2\n        val l6 = l1 -- l2\n        val l7\
    \ = l1 ++ l2\n        val l8 = l1 -- l2\n        val l9 = l1 ++ l2\n        val\
    \ l10 = l1 -- l2\n        val l11 = l1 ++ l2\n        val l12 = l1 -- l2\n   \
    \     val l13 = l1 ++ l2\n        val l14 = l1 -- l2\n        val l15 = l1 ++\
    \ l2\n        val l16 = l1 -- l2\n        val l17 = l1 ++ l2\n        val l18\
    \ = l1 -- l2\n        val l19 = l1 ++ l2\n        val l20 = l1 -- l2\n       \
    \ val l21 = l1 ++ l2\n        val l22 = l1 -- l2\n        val l23 = l1 ++ l2\n\
    \        val l24 = l1 -- l2\n        val l25 = l1 ++ l2\n        val l26 = l1\
    \ -- l2\n        val l27 = l1 ++ l2\n        val l28 = l1 -- l2\n        val l29\
    \ = l1 ++ l2\n        val l30 = l1 -- l2\n        val l31 = l1 ++ l2\n       \
    \ val l32 = l1 -- l2\n        val l33 = l1 ++ l2\n        val l34 = l1 -- l2\n\
    \        val l35 = l1 ++ l2\n        val l36 = l1 -- l2\n        val l37 = l1\
    \ ++ l2\n        val l38 = l1 -- l2\n        val l39 = l1 ++ l2\n        val l40\
    \ = l1 -- l2\n        val l41 = l1 ++ l2\n        val l42 = l1 -- l2\n       \
    \ val l43 = l1 ++ l2\n        val l44 = l1 -- l2\n        val l45 = l1 ++ l2\n\
    \        val l46 = l1 -- l2\n        val l47 = l1 ++ l2\n        val l48 = l1\
    \ -- l2\n        val l49 = l1 ++ l2\n        val l50 = l1 -- l2\n        val l51\
    \ = l1 ++ l2\n        val l52 = l1 -- l2\n        val l53 = l1 ++ l2\n       \
    \ val l54 = l1 -- l2\n        val l", "        val common = mutable.Set[Long]()\n\
    \        l1.foreach { x => common.add(x) }\n        l2.foreach { x => common.add(x)\
    \ }\n        common.sortWith(_ < _)", "        val set1 = l1.toSet\n        val\
    \ set2 = l2.toSet\n        val common = set1 intersect set2\n        common toList",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        set1.intersect(set2).toList",
  "        val l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n        val l5 = l1 ++ l2\
    \ -- l1\n        val l6 = l1 -- l2 ++ l1\n        val l7 = l1 ++ l2 -- l1 ++ l2\n\
    \        val l8 = l1 -- l2 ++ l1 -- l2\n        val l9 = l1 ++ l2 -- l1 ++ l2\
    \ -- l1\n        val l10 = l1 -- l2 ++ l1 -- l2 ++ l1\n        val l11 = l1 ++\
    \ l2 -- l1 ++ l2 -- l1 -- l2\n        val l12 = l1 -- l2 ++ l1 -- l2 ++ l1 --\
    \ l1\n        val l13 = l1 ++ l2 -- l1 ++ l2 -- l1 -- l2 -- l1\n        val l14\
    \ = l1 -- l2 ++ l1 -- l2 ++ l1 -- l2 -- l1 -- l1\n        val l15 = l1 ++ l2 --\
    \ l1 ++ l2 -- l1 -- l2 -- l1 -- l2 -- l1\n        val l16 = l1 -- l2 ++ l1 --\
    \ l2 ++ l1 -- l2 -- l1 -- l2 -- l1 -- l1\n        val l17 = l1 ++ l2 -- l1 ++\
    \ l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l1\n        val l18 = l1 --\
    \ l2 ++ l1 -- l2 ++ l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1\n     \
    \   val l19 = l1 ++ l2 -- l1 ++ l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 --\
    \ l2 -- l1 -- l1\n        val l20 = l1 -- l2 ++ l1 -- l2 ++ l1 -- l2 -- l1 --\
    \ l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l1\n        val l21 = l1 ++\
    \ l2 -- l1 ++ l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 --\
    \ l1 -- l2 -- l1\n        val l22 = l1 -- l", "        val set1 = l1.toSet\n \
    \       val set2 = l2.toSet\n        val common = set1 intersect set2\n      \
    \  common toList", "        val common = mutable.Set[Long]()\n        l1.foreach(x\
    \ => if (common.add(x)) common.remove(x))\n        l2.foreach(x => if (common.add(x))\
    \ common.remove(x))\n        common.sorted", "        val set1 = l1.toSet\n  \
    \      val set2 = l2.toSet\n        val common = set1 intersect set2\n       \
    \ common.sorted", "        val common = mutable.Set[Long]()\n        l1.foreach\
    \ { x =>\n            if (l2.contains(x)) {\n                common += x\n   \
    \         }\n        }\n        common.sort", "        val set1 = l1.toSet\n \
    \       val set2 = l2.toSet\n        val common = set1 intersect set2\n      \
    \  common toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common toList", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ common = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n     \
    \   l2.foreach(x => common.add(x))\n        common.sort", "        val l3 = l1.toSet\
    \ intersect l2.toSet\n        l3.toList", "        val set1 = l1.toSet\n     \
    \   val set2 = l2.toSet\n        val common = set1 intersect set2\n        common\
    \ toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n       \
    \ val common = set1 intersect set2\n        common toList", "        val set1\
    \ = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach { x => set1 += x }\n        l2.foreach { x => set2 += x }\n\
    \        set1.intersect(set2).sorted", "        val set1 = l1.toSet\n        val\
    \ set2 = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "  \
    \      val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach { x => set1.add(x) }\n        l2.foreach { x => set2.add(x)\
    \ }\n        set1.intersect(set2).toList", "        val set1 = l1.toSet\n    \
    \    val set2 = l2.toSet\n        val common = set1 intersect set2\n        common\
    \ toList", "        val common = mutable.Set[Long]()\n        l1.foreach(x =>\
    \ if (common.add(x)) common.remove(x))\n        l2.foreach(x => if (common.add(x))\
    \ common.remove(x))\n        common.sort", "        val l3 = l1 ++ l2\n      \
    \  l3.sortWith(_ < _)", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sortWith(_ < _)", " \
    \       val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sorted", "        val l3 = l1 ++ l2\n  \
    \      l3.sortWith(_ < _)", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val l3 = l1.intersect(l2)\n        l3.toList",
  "        val common = mutable.Set[Long]()\n        l1.foreach { x => common.add(x)\
    \ }\n        l2.foreach { x => common.add(x) }\n        common.sortWith(_ < _)",
  "        val set1 = new mutable.HashSet[Long](l1)\n        val set2 = new mutable.HashSet[Long](l2)\n\
    \        set1 diff set2", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sort", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val common = mutable.Set[Long]()\n        l1.foreach { x => common.add(x)\
    \ }\n        l2.foreach { x => common.add(x) }\n        common.sortWith(_ < _)",
  "        val l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val\
    \ l3 = l1 ++ l2\n        l3.sortWith(_ < _)", "        val l3 = l1 ++ l2\n   \
    \     val l4 = l3.distinct\n        l4.sort", "        val set1 = l1.toSet\n \
    \       val set2 = l2.toSet\n        val common = set1 intersect set2\n      \
    \  common toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        set1 intersect set2", "        val l3 = l1 ++ l2\n        val l4 = l3\
    \ groupBy (_ % l3.length) mapValues (_.length)\n        l4.toList.sortWith(_ <\
    \ _)", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val\
    \ common = set1 intersect set2\n        common.sorted", "        val l3 = l1 ++\
    \ l2\n        val l4 = l3 groupBy (_ % l3.length)\n        l4.values.toList.sortWith(_\
    \ < _)", "        val common = mutable.Set[Long]()\n        val l3 = l1 ++ l2\n\
    \        l3.foreach(x => common += x)\n        common.sort", "        val l3 =\
    \ l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val set1\
    \ = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1.add(x))\n        l2.foreach(x => set2.add(x))\n\
    \        set1.intersect(set2).toList", "        val set1 = l1.toSet\n        val\
    \ set2 = l2.toSet\n        val common = set1 intersect set2\n        common toList",
  "        val common = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n\
    \        l2.foreach(x => common.add(x))\n        common.sort", "        val common\
    \ = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n        l2.foreach(x\
    \ => common.add(x))\n        common.sort", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach { x => set1\
    \ += x }\n        l2.foreach { x => set2 += x }\n        set1.intersect(set2).toList",
  "        val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1 += x)\n        l2.foreach(x => set2 += x)\n    \
    \    set1.intersect(set2).toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sort", "        val set1 = l1.toSet\n  \
    \      val set2 = l2.toSet\n        val common = set1 intersect set2\n       \
    \ common.sort", "        val set1 = new mutable.HashSet[Long]()\n        val set2\
    \ = new mutable.HashSet[Long]()\n        l1.foreach(x => set1 += x)\n        l2.foreach(x\
    \ => set2 += x)\n        set1.intersect(set2).toList", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.sorted", "        val set1 = new mutable.HashSet[Long]()\n        val\
    \ set2 = new mutable.HashSet[Long]()\n        l1.foreach { x => set1.add(x) }\n\
    \        l2.foreach { x => set2.add(x) }\n        set1.intersect(set2).toList",
  "        val common = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n\
    \        l2.foreach(x => common.add(x))\n        common.sort", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1\
    \ += x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).sorted",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sorted", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        set1 intersect set2",
  "        val l3 = l1 ++ l2\n        l3.sortWith(_ < _)", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        set1 intersect set2", "        val l3 =\
    \ l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common toList",
  "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "  \
    \      val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sort", "        val l3 = l1 ++ l2\n    \
    \    l3.sortWith(_ < _)", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val common = mutable.Set[Long]()\n        l1 foreach { x => common += x\
    \ }\n        l2 foreach { x => common += x }\n        common.sort", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common toList", "        val common = mutable.Set[Long]()\n  \
    \      l1.foreach(x => common += x)\n        l2.foreach(x => common += x)\n  \
    \      common.sorted", "        val common = mutable.Set[Long]()\n        l1.foreach\
    \ { x =>\n            if (l2.contains(x)) {\n                common += x\n   \
    \         }\n        }\n        common.sort", "        val common = l1.intersect(l2)\n\
    \        common.sortWith((x, y) => x < y)", "        val set1 = l1.toSet\n   \
    \     val set2 = l2.toSet\n        val common = set1 intersect set2\n        common\
    \ toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n       \
    \ val common = set1 intersect set2\n        common.sortWith(_ < _)", "       \
    \ val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1\
    \ intersect set2\n        common.sortWith(_ < _)", "        val l3 = l1 ++ l2\n\
    \        val l4 = l1 -- l2\n        val l5 = l1 ++ l2\n        val l6 = l1 --\
    \ l2\n        val l7 = l1 ++ l2\n        val l8 = l1 -- l2\n        val l9 = l1\
    \ ++ l2\n        val l10 = l1 -- l2\n        val l11 = l1 ++ l2\n        val l12\
    \ = l1 -- l2\n        val l13 = l1 ++ l2\n        val l14 = l1 -- l2\n       \
    \ val l15 = l1 ++ l2\n        val l16 = l1 -- l2\n        val l17 = l1 ++ l2\n\
    \        val l18 = l1 -- l2\n        val l19 = l1 ++ l2\n        val l20 = l1\
    \ -- l2\n        val l21 = l1 ++ l2\n        val l22 = l1 -- l2\n        val l23\
    \ = l1 ++ l2\n        val l24 = l1 -- l2\n        val l25 = l1 ++ l2\n       \
    \ val l26 = l1 -- l2\n        val l27 = l1 ++ l2\n        val l28 = l1 -- l2\n\
    \        val l29 = l1 ++ l2\n        val l30 = l1 -- l2\n        val l31 = l1\
    \ ++ l2\n        val l32 = l1 -- l2\n        val l33 = l1 ++ l2\n        val l34\
    \ = l1 -- l2\n        val l35 = l1 ++ l2\n        val l36 = l1 -- l2\n       \
    \ val l37 = l1 ++ l2\n        val l38 = l1 -- l2\n        val l39 = l1 ++ l2\n\
    \        val l40 = l1 -- l2\n        val l41 = l1 ++ l2\n        val l42 = l1\
    \ -- l2\n        val l43 = l1 ++ l2\n        val l44 = l1 -- l2\n        val l45\
    \ = l1 ++ l2\n        val l46 = l1 -- l2\n        val l47 = l1 ++ l2\n       \
    \ val l48 = l1 -- l2\n        val l49 = l1 ++ l2\n        val l50 = l1 -- l2\n\
    \        val l51 = l1 ++ l2\n        val l52 = l1 -- l2\n        val l53 = l1\
    \ ++ l2\n        val l54 = l1 -- l2\n        val l", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.sorted", "        val set1 = new mutable.HashSet[Long]()\n        val\
    \ set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1 += x)\n   \
    \     l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList", "    \
    \    val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1\
    \ intersect set2\n        common.sort", "        val set1 = l1.toSet\n       \
    \ val set2 = l2.toSet\n        set1 intersect set2", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sort", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3 groupBy { x => x }\n        val l5 = l4 mapValues\
    \ { x => x.toList }\n        l5.flatMap { x => x }", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1\
    \ += x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        set1 intersect\
    \ set2", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val\
    \ common = set1 intersect set2\n        common.sort", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.sorted", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val common = mutable.Set[Long]()\n        l1.foreach(x\
    \ => common += x)\n        l2.foreach(x => common += x)\n        common.sort",
  "        val common = mutable.Set[Long]()\n        for(i <- l1 ++ l2) {\n      \
    \      common += i\n        }\n        common.sortWith(_ < _)", "        val l3\
    \ = l1.toSet intersect l2.toSet\n        l3.toList", "        val l3 = l1 ++ l2\n\
    \        val l4 = l3.distinct\n        l4.sort", "        val l3 = l1.toSet intersect\
    \ l2.toSet\n        l3.toList", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1\
    \ += x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sortWith(_ < _)", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.sorted", "        val common = mutable.Set[Long]()\n        l1.foreach\
    \ { x => common.add(x) }\n        l2.foreach { x => common.add(x) }\n        common.sort",
  "        val l3 = l1 ++ l2\n        l3.sortWith(_ < _)", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sort", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sortWith(_\
    \ < _)", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val\
    \ common = set1 intersect set2\n        common.sorted", "        val l3 = l1 ++\
    \ l2\n        val l4 = l3.distinct\n        l4.sort", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        set1 intersect set2", "        val common\
    \ = mutable.Set[Long]()\n        l1.foreach { x => common += x }\n        l2.foreach\
    \ { x => common += x }\n        common.sort", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1\
    \ += x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common toList", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common map { x => l1.indexOf(x) + l2.indexOf(x) }", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.sorted", "        val l3 = l1.toSet intersect l2.toSet\n        l3.toList",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sorted", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common toList", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sort", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n   \
    \     val l5 = l1 ++ l2\n        val l6 = l1 -- l2\n        val l7 = l1 ++ l2\n\
    \        val l8 = l1 -- l2\n        val l9 = l1 ++ l2\n        val l10 = l1 --\
    \ l2\n        val l11 = l1 ++ l2\n        val l12 = l1 -- l2\n        val l13\
    \ = l1 ++ l2\n        val l14 = l1 -- l2\n        val l15 = l1 ++ l2\n       \
    \ val l16 = l1 -- l2\n        val l17 = l1 ++ l2\n        val l18 = l1 -- l2\n\
    \        val l19 = l1 ++ l2\n        val l20 = l1 -- l2\n        val l21 = l1\
    \ ++ l2\n        val l22 = l1 -- l2\n        val l23 = l1 ++ l2\n        val l24\
    \ = l1 -- l2\n        val l25 = l1 ++ l2\n        val l26 = l1 -- l2\n       \
    \ val l27 = l1 ++ l2\n        val l28 = l1 -- l2\n        val l29 = l1 ++ l2\n\
    \        val l30 = l1 -- l2\n        val l31 = l1 ++ l2\n        val l32 = l1\
    \ -- l2\n        val l33 = l1 ++ l2\n        val l34 = l1 -- l2\n        val l35\
    \ = l1 ++ l2\n        val l36 = l1 -- l2\n        val l37 = l1 ++ l2\n       \
    \ val l38 = l1 -- l2\n        val l39 = l1 ++ l2\n        val l40 = l1 -- l2\n\
    \        val l41 = l1 ++ l2\n        val l42 = l1 -- l2\n        val l43 = l1\
    \ ++ l2\n        val l44 = l1 -- l2\n        val l45 = l1 ++ l2\n        val l46\
    \ = l1 -- l2\n        val l47 = l1 ++ l2\n        val l48 = l1 -- l2\n       \
    \ val l49 = l1 ++ l2\n        val l50 = l1 -- l2\n        val l51 = l1 ++ l2\n\
    \        val l52 = l1 -- l2\n        val l53 = l1 ++ l2\n        val l54 = l1\
    \ -- l2\n        val l", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common toList", "        val common = mutable.Set[Long]()\n  \
    \      l1.foreach(x => common += x)\n        l2.foreach(x => common += x)\n  \
    \      common.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sort", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val common = mutable.Set[Long]()\n  \
    \      l1 foreach { x => common += x }\n        l2 foreach { x => common += x\
    \ }\n        common.sort", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sort", "        val l3 = l1.filterNot(l2.contains)\n  \
    \      val l4 = l2.filterNot(l1.contains)\n        l3.intersect(l4)", "      \
    \  val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1 += x)\n        l2.foreach(x => set2 += x)\n    \
    \    set1.intersect(set2).toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sortWith(_\
    \ < _)", "        val common = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n\
    \        l2.foreach(x => common.add(x))\n        common.sort", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common toList", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        for (i <- l1) set1 +=\
    \ i\n        for (i <- l2) set2 += i\n        set1.intersect(set2).toList", " \
    \       val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sorted", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        set1 intersect set2", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        set1 intersect set2", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1 += x)\n        l2.foreach(x => set2 += x)\n    \
    \    set1.intersect(set2).toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common toList",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        set1 intersect\
    \ set2", "        val l3 = l1 ++ l2\n        l3.sortWith(_ < _)", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sortWith(_\
    \ < _)", "        val set1 = new mutable.HashSet[Long]()\n        val set2 = new\
    \ mutable.HashSet[Long]()\n        l1.foreach { x => set1.add(x) }\n        l2.foreach\
    \ { x => set2.add(x) }\n        set1.intersect(set2).toList", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val common = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n\
    \        l2.foreach(x => common.add(x))\n        common.sort", "        val l3\
    \ = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val common\
    \ = mutable.Set[Long]()\n        l1.foreach { x => common.add(x) }\n        l2.foreach\
    \ { x => common.add(x) }\n        common.sortWith(_ < _)", "        val set1 =\
    \ new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1 += x)\n        l2.foreach(x => set2 += x)\n    \
    \    set1.intersect(set2).sorted", "        val l3 = l1 ++ l2\n        val l4\
    \ = l3 filter (x => l3.contains(x))\n        val l5 = l4 filter (x => l4.contains(x))\n\
    \        l5.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sort", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1\
    \ += x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sort", "        val common = mutable.Set[Long]()\n\
    \        l1.foreach { x => common.add(x) }\n        l2.foreach { x => common.add(x)\
    \ }\n        common.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common toList", "        val l3 = l1 ++ l2\n  \
    \      val l4 = l3 groupBy { x => x } map { case (k, v) => k }\n        l4.toList",
  "        val common = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n\
    \        l2.foreach(x => common.add(x))\n        common.sort", "        val l3\
    \ = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common.sorted",
  "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "  \
    \      val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.sort", "        val set1 = l1.toSet\n  \
    \      val set2 = l2.toSet\n        val common = set1 intersect set2\n       \
    \ common.sortWith(_ < _)", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.sorted", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.sorted", "        val common = l1 diff l2\n        common\
    \ sortBy (x => l1.indexOf(x))", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1\
    \ += x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList"]
stop_tokens:
- "\n    }\n"
