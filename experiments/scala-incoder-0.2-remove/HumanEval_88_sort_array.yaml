name: HumanEval_88_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n    // you will sort the given array in ascending order if the\
  \ sum( first index value, last index value) is odd,\n    // or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n    // Note:\n\
  \    // * don't change the given array.\n    // Examples:\n    def sortArray(array\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
  \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
  \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
  \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
  \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
completions: ["        val result = new mutable.ListBuffer[Long]()\n        var sum\
    \ = 0L\n        var i = 0\n        while(i < array.length) {\n            sum\
    \ += array(i)\n            i += 1\n        }\n        while(i < array.length)\
    \ {\n            sum += array(i)\n            i += 1\n        }\n        if(sum\
    \ % 2 == 0) {\n            array.sortWith((a, b) => a > b)\n        } else {\n\
    \            array.sortWith((a, b) => a < b)\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0)((sum, value) => sum + value)\n       \
    \ val sumArrayOdd = sumArray % 2 != 0\n        val sumArrayEven = sumArray % 2\
    \ == 0\n        val sortedArray = array.sortWith((a, b) => if (sumArrayOdd) a\
    \ > b else a < b)\n        if (sumArrayEven) sortedArray else sortedArray.reverse",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     for (i <- 0 until array.length) {\n            sum += array(i)\n       \
    \ }\n        if (sum % 2 == 0) {\n            for (i <- 0 until array.length)\
    \ {\n                result.add(array(i))\n            }\n        } else {\n \
    \           for (i <- 0 until array.length) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x < y)", "      \
    \  val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n       \
    \ for (i <- 0 until array.size) {\n            sum += array(i)\n        }\n  \
    \      if (sum % 2 == 0) {\n            array.sortWith((a, b) => a > b)\n    \
    \    } else {\n            array.sortWith((a, b) => a < b)\n        }\n      \
    \  result.toList", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    var sum = 0\n        for(i <- 0 until array.length){\n            sum +=\
    \ array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                sum += array(i)\n                if(sum % 2\
    \ == 0){\n                    result.add(array(i))\n                }\n      \
    \      }\n        }else{\n            for(i <- 0 until array.length){\n      \
    \          sum += array(i)\n                if(sum % 2 != 0){\n              \
    \      result.add(array(i))\n                }\n            }\n        }\n   \
    \     result.toList", "        val result = new mutable.ListBuffer[Long]()\n \
    \       val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x < y)", "      \
    \  val sumArray = array.foldLeft(0L) { (sum, value) => sum + value }\n       \
    \ val sumArrayOdd = sumArray % 2 == 0\n        val sumArrayEven = sumArray % 2\
    \ == 1\n        val sortedArray = array.sortBy(x => x)\n        if (sumArrayOdd)\
    \ {\n            sortedArray.reverse\n        } else {\n            sortedArray\n\
    \        }", "        val result = new mutable.ArrayList[Long]()\n        var\
    \ sum = 0\n        var i = 0\n        var j = 0\n        while (i < array.length)\
    \ {\n            sum = sum + array(i)\n            i = i + 1\n        }\n    \
    \    while (j < array.length) {\n            sum = sum - array(i)\n          \
    \  j = j + 1\n        }\n        if (sum % 2 == 0) {\n            val temp = array\n\
    \            array = result\n            result = temp\n        }\n        array.sortWith((x,\
    \ y) => x < y)", "        val sumArray = array.foldLeft(0L){ (sum, value) =>\n\
    \            sum += value\n        }\n        val sumArrayOdd = sumArray % 2 ==\
    \ 1\n        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith(_.compareTo(_)\
    \ == 0)\n        if (sumArrayOdd) {\n            sortedArray.reverse\n       \
    \ } else {\n            sortedArray\n        }", "        val sumArray = array.foldLeft(0L)\
    \ { (sum, elem) => sum + elem }\n        val odd = sumArray % 2 != 0\n       \
    \ val even = sumArray % 2 == 0\n        val result = array.sortBy(elem => odd,\
    \ elem => even)\n        result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n            if(sum % 2 == 1){\n                result.add(array(i))\n\
    \            }\n        }\n        return result.toList", "        val result\
    \ = new Array[Long](array.size)\n        var sum = 0L\n        var i = 0\n   \
    \     while(i < array.size) {\n            sum += array(i)\n            result(i)\
    \ = array(i)\n            i += 1\n        }\n        val evenSum = sum % 2 ==\
    \ 0\n        val odd = !evenSum\n        if(evenSum) {\n            val evenResult\
    \ = new Array[Long](array.size)\n            i = 0\n            while(i < array.size)\
    \ {\n                sum += array(i)\n                evenResult(i) = array(i)\n\
    \                i += 1\n            }\n            val even = sum % 2 == 0\n\
    \            if(even) {\n                result.sortWith(evenResult.reverse)\n\
    \            } else {\n                result.sortWith(evenResult)\n         \
    \   }\n        } else {\n            result.sortWith(array.reverse)\n        }\n\
    \        result", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   var sum = 0L\n        var i = 0\n        while(i < array.length) {\n     \
    \       sum += array(i)\n            i += 1\n        }\n        while(i < array.length)\
    \ {\n            sum += array(i)\n            i += 1\n        }\n        val odd\
    \ = sum % 2 == 1\n        val even = sum % 2 == 0\n        if(odd) {\n       \
    \     array.sortWith(x => x.compareTo(0L))\n        } else {\n            array.sortWith(x\
    \ => x.compareTo(0L).reverse)\n        }", "        val sumArray = array.sum\n\
    \        val sumArray2 = sumArray / 2\n        val sumArray3 = sumArray2 / 2\n\
    \        val sumArray4 = sumArray3 / 2\n        val sumArray5 = sumArray4 / 2\n\
    \        val sumArray6 = sumArray5 / 2\n        val sumArray7 = sumArray6 / 2\n\
    \        val sumArray8 = sumArray7 / 2\n        val sumArray9 = sumArray8 / 2\n\
    \        val sumArray10 = sumArray9 / 2\n        val sumArray11 = sumArray10 /\
    \ 2\n        val sumArray12 = sumArray11 / 2\n        val sumArray13 = sumArray12\
    \ / 2\n        val sumArray14 = sumArray13 / 2\n        val sumArray15 = sumArray14\
    \ / 2\n        val sumArray16 = sumArray15 / 2\n        val sumArray17 = sumArray16\
    \ / 2\n        val sumArray18 = sumArray17 / 2\n        val sumArray19 = sumArray18\
    \ / 2\n        val sumArray20 = sumArray19 / 2\n        val sumArray21 = sumArray20\
    \ / 2\n        val sumArray22 = sumArray21 / 2\n        val sumArray23 = sumArray22\
    \ / 2\n        val sumArray24 = sumArray23 / 2\n        val sumArray25 = sumArray24\
    \ / 2\n        val sumArray26 = sumArray25 / 2\n        val sumArray27 = sumArray26\
    \ / 2\n        val sumArray28 = sumArray27 / 2\n        val sumArray29 = sumArray28\
    \ / 2\n        val sumArray30 = sumArray29 / 2\n        val sumArray31 = sumArray30\
    \ / 2\n        val sumArray32 = sumArray31 / 2\n        val sumArray33 = sumArray32\
    \ / 2\n        val sumArray34 = sumArray33 / 2\n        val sumArray35 = sumArray34\
    \ / 2\n        val sumArray36 = sumArray35 / 2\n        val sumArray37 = sumArray36\
    \ / 2\n        val sumArray38 = sumArray37 / 2\n        val sumArray39 = sumArray38\
    \ / 2\n        val sumArray40 = sumArray39 / 2\n        val sumArray41 = sumArray40\
    \ / 2\n        val sumArray42 = sumArray41 / 2\n        val sumArray43 = sumArray42\
    \ / 2\n        val sumArray44 = sumArray43 / 2\n", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        val evenSum\
    \ = sum % 2 == 0\n        val odd = sum % 2 != 0\n        if (evenSum) {\n   \
    \         while (i < array.length) {\n                val value = array(i)\n \
    \               val index = i\n                val lastIndex = array.length -\
    \ i - 1\n                if (odd)\n                    result.add(value)\n   \
    \             else\n                    result.add(value)\n                i +=\
    \ 1\n            }\n        } else {\n            while (i < array.length) {\n\
    \                val value = array(i)\n                val index = i\n       \
    \         val lastIndex = array.length - i - 1\n                if (even)\n  \
    \                  result.add(value)\n                else\n                 \
    \   result.add(value)\n                i += 1\n            }\n        }\n    \
    \    result.toList", "        val result = new mutable.ListBuffer[Long]()\n  \
    \      var sum = 0\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        while(i < array.length) {\n            sum = sum + array(i)\n       \
    \     i = i + 1\n        }\n        while(j < array.length) {\n            sum\
    \ = sum + array(j)\n            j = j + 1\n        }\n        if(sum % 2 == 0)\
    \ {\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + ",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     for (i <- 0 until array.size) {\n            sum += array(i)\n        }\n\
    \        if (sum % 2 == 0) {\n            array.sortWith((x, y) => x < y)\n  \
    \      } else {\n            array.sortWith((x, y) => x > y)\n        }\n    \
    \    result.toList", "        val sumArray = array.foldLeft(0L){ (sum, value)\
    \ => sum + value }\n        val sumArrayOdd = sumArray % 2 == 0\n        val sumArrayEven\
    \ = sumArray % 2 != 0\n        val sumArrayOddEven = sumArrayOdd || sumArrayEven\n\
    \        val sortedArray = array.sortWith(_.compareTo(_) == 0)\n        if (sumArrayOddEven)\
    \ {\n            sortedArray.reverse\n        } else {\n            sortedArray\n\
    \        }", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ sum = 0L\n        for(i <- 0 until array.size) {\n            sum += array(i)\n\
    \        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until array.size)\
    \ {\n                result.add(array(i))\n            }\n        } else {\n \
    \           for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x.compareTo(y))",
  "        val sortedArray = array.sortWith( (a,b) => a > b )\n        val sumOfFirstAndLast\
    \ = sortedArray(0) + sortedArray(array.length - 1)\n        if (sumOfFirstAndLast\
    \ % 2 == 0) {\n            sortedArray.reverse\n        } else {\n           \
    \ sortedArray\n        }", "        val sumArray = array.foldLeft(0L){ (sum, value)\
    \ => sum + value }\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenArraySorted = evenArray.sortWith(_ < _)\n        val oddArraySorted\
    \ = oddArray.sortWith(_ > _)\n        if (evenSum) {\n            evenArraySorted\n\
    \        } else {\n            oddArraySorted\n        }", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        for (i <- 0\
    \ until array.size) {\n            sum += array(i)\n            if (sum % 2 ==\
    \ 0) {\n                result.add(array(i))\n            } else {\n         \
    \       result.add(array(i)).reverse\n            }\n        }\n        return\
    \ result.toList", "        val sumArray = array.foldLeft(0L){ (sum, value) =>\
    \ sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven\
    \ = sumArray % 2 == 0\n        val sortedArray = if (sumArrayOdd) array.sortBy(-_)\
    \ else array.sortBy(_)\n        sortedArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((x, y) => x < y)\n        } else {\n \
    \           array.sortWith((x, y) => x > y)\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     val evenSum = 0L\n        val oddSum = 0L\n        array.foreach(x => {\n\
    \            sum += x\n            if (sum % 2 == 0) {\n                evenSum\
    \ += x\n            } else {\n                oddSum += x\n            }\n   \
    \     })\n        if (sum % 2 == 0) {\n            array.sortBy(x => evenSum -\
    \ x)\n        } else {\n            array.sortBy(x => oddSum - x)\n        }\n\
    \        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum = sum + array(i)\n            i += 1\n        }\n        while(i\
    \ < array.length) {\n            sum = sum - array(i)\n            i += 1\n  \
    \      }\n        if(sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList", "        val sumArray = array.foldLeft(0L) {\
    \ (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith(_.compareTo(_)\
    \ < 0)\n        if (sumArrayOdd) sortedArray.reverse\n        if (sumArrayEven)\
    \ sortedArray\n        else sortedArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        if(sum % 2 == 0) {\n            array.sortWith(_ < _)\n        } else\
    \ {\n            array.sortWith(_ > _)\n        }\n        result.toList", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n   \
    \     var i = 0\n        var j = 0\n        while (i < array.size) {\n       \
    \     sum = sum + array(i)\n            i = i + 1\n        }\n        while (j\
    \ < array.size) {\n            sum = sum - array(i)\n            j = j + 1\n \
    \       }\n        if (sum % 2 == 0) {\n            array.sortWith((a, b) => a\
    \ < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n      \
    \  }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val sumOfFirstIndex = 0L\n        val sumOfLastIndex\
    \ = 0L\n        val evenSum = 0L\n        val oddSum = 0L\n        for(i <- 0\
    \ until array.size) {\n            sum += array(i)\n            sumOfFirstIndex\
    \ += i\n            sumOfLastIndex += array.size - i\n            if(sumOfFirstIndex\
    \ % 2 == 0) {\n                evenSum += sumOfFirstIndex\n            } else\
    \ {\n                oddSum += sumOfFirstIndex\n            }\n        }\n   \
    \     if(sum % 2 == 0) {\n            for(i <- 0 until array.size) {\n       \
    \         val temp = array(i)\n                val tempSum = sum - temp\n    \
    \            if(tempSum < evenSum) {\n                    result += temp\n   \
    \                 evenSum -= tempSum\n                } else {\n             \
    \       result += temp\n                    oddSum -= tempSum\n              \
    \  }\n            }\n        } else {\n            for(i <- 0 until array.size)\
    \ {\n                val temp = array(i)\n                val tempSum = sum -\
    \ temp\n                if(tempSum < oddSum) {\n                    result +=\
    \ temp\n                    evenSum -= tempSum\n                } else {\n   \
    \                 result += temp\n                    oddSum -= tempSum\n    \
    \            }\n            }\n        }\n        result.toList", "        val\
    \ newArray = array.sortWith(_ > _)\n        if (newArray.sum % 2 == 1) {\n   \
    \         newArray.reverse\n        }\n        newArray", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        for(i <- 0 until\
    \ array.length) {\n            sum += array(i)\n        }\n        if(sum % 2\
    \ == 0) {\n            for(i <- 0 until array.length) {\n                result.add(array(i))\n\
    \            }\n        } else {\n            for(i <- 0 until array.length) {\n\
    \                result.add(array(i))\n            }\n        }\n        result.sortWith((a,\
    \ b) => a > b)", "        val sumArray = array.foldLeft(0L) { (sum, elem) => sum\
    \ + elem }\n        val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven\
    \ = sumArray % 2 == 0\n        val sortedArray = if (sumArrayOdd) array.sortBy(x\
    \ => x) else if (sumArrayEven) array.sortBy(x => -x)\n        sortedArray", " \
    \       val sortedArray = array.sortWith(compare)\n        if (sortedArray(0)\
    \ % 2 == 0) {\n            sortedArray.sortWith(compare)\n        } else {\n \
    \           sortedArray.sortWith(compare.reverse)\n        }", "        val sumArray\
    \ = array.foldLeft(0)((sum, value) => sum + value)\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        val evenSumArray = evenArray.foldLeft(0)((sum,\
    \ value) => sum + value)\n        val oddSumArray = oddArray.foldLeft(0)((sum,\
    \ value) => sum + value)\n        val evenSumArrayList = evenArray.map(x => x)\n\
    \        val oddSumArrayList = oddArray.map(x => x)\n        val evenSumArrayList2\
    \ = evenSumArray.map(x => x)\n        val oddSumArrayList2 = oddSumArray.map(x\
    \ => x)\n        val evenSumArrayList3 = evenSumArrayList.map(x => x)\n      \
    \  val oddSumArrayList3 = oddSumArrayList.map(x => x)\n        val evenSumArrayList4\
    \ = evenSumArrayList3.map(x => x)\n        val oddSumArrayList4 = oddSumArrayList3.map(x\
    \ => x)\n        val evenSumArrayList5 = evenSumArrayList4.map(x => x)\n     \
    \   val oddSumArrayList5 = oddSumArrayList4.map(x => x)\n        val evenSumArrayList6\
    \ = evenSumArrayList5.map(x => x)\n        val oddSumArrayList6 = oddSumArrayList5.map(x\
    \ => x)\n        val evenSumArrayList7 = evenSumArrayList6.map(x => x)\n     \
    \   val oddSumArrayList7 = oddSumArrayList6.map(x => x)\n        val evenSumArrayList8\
    \ = evenSumArrayList7.map(x => x)\n        val oddSumArrayList8 = oddSumArrayList7.map(x\
    \ => x)\n        val evenSumArrayList9 = evenSumArrayList8.map(x => x)\n     \
    \   val oddSumArrayList9 = oddSumArrayList8.map(x => x)\n        val evenSumArrayList10\
    \ = evenSumArrayList9.map(x => x)\n        val oddSumArrayList10 = oddSumArrayList9.map(x\
    \ => x)\n        val evenSumArrayList11 = evenSumArrayList10.map(x => x)\n   \
    \     val oddSumArrayList11 = oddSumArrayList10.map(x => x)\n        val evenSumArrayList12\
    \ = evenSumArrayList11.map(x => x)\n        val oddSumArrayList12 = oddSumArrayList11.map(x\
    \ => x)\n        val evenSumArrayList13 = evenSumArrayList12.map(x => x)\n", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n  \
    \      for (i <- 0 until array.size) {\n            sum += array(i)\n        }\n\
    \        if (sum % 2 == 0) {\n            val temp = new mutable.ListBuffer[Long]()\n\
    \            for (i <- 0 until array.size) {\n                temp += array(i)\n\
    \            }\n            temp.sortWith(_ < _)\n            result.addAll(temp)\n\
    \        } else {\n            val temp = new mutable.ListBuffer[Long]()\n   \
    \         for (i <- 0 until array.size) {\n                temp += array(i)\n\
    \            }\n            temp.sortWith(_ > _)\n            result.addAll(temp)\n\
    \        }\n        result.toList", "        val sumArray = array.sum\n      \
    \  val sumArrayOdd = sumArray % 2 == 0\n        val sumArrayEven = sumArray %\
    \ 2 != 0\n        val sortedArray = array.sortWith((a, b) => if (sumArrayOdd)\
    \ a < b else a > b)\n        if (sumArrayEven) sortedArray.reverse else sortedArray",
  "        val sumArray = array.foldLeft(0L) { (sum, element) => sum + element }\n\
    \        val odd = sumArray % 2 == 1\n        val even = sumArray % 2 == 0\n \
    \       if (odd) {\n            array.sortBy(x => x)\n        } else {\n     \
    \       array.sortBy(x => -x)\n        }", "        val newArray = array.sortWith(_\
    \ < _)\n        if (newArray.sum % 2 == 0) {\n            newArray.reverse\n \
    \       } else {\n            newArray\n        }", "        val result = new\
    \ ArrayList[Long](array.size)\n        var sum = 0L\n        var i = 0\n     \
    \   while (i < array.size) {\n            sum += array(i)\n            i += 1\n\
    \        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList", "        val sumArray = array.foldLeft(0L) {\
    \ (sum, elem) => sum + elem }\n        val sumArrayOdd = sumArray % 2 != 0\n \
    \       val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith((a,\
    \ b) => sumArrayOdd ? (a - b) : (b - a))\n        sortedArray.sortWith((a, b)\
    \ => sumArrayEven ? (a - b) : (b - a))", "        val result = new Array[Long](array.size)\n\
    \        var sum = 0\n        var i = 0\n        while (i < array.size) {\n  \
    \          sum += array(i)\n            result(i) = array(i)\n            i +=\
    \ 1\n        }\n        if (sum % 2 == 0) {\n            val temp = new Array[Long](array.size)\n\
    \            i = 0\n            while (i < array.size) {\n                temp(i)\
    \ = array(i)\n                i += 1\n            }\n            val temp2 = new\
    \ Array[Long](array.size)\n            i = 0\n            while (i < array.size)\
    \ {\n                temp2(i) = temp(i) - temp2(i)\n                i += 1\n \
    \           }\n            i = 0\n            while (i < array.size) {\n     \
    \           temp(i) = temp2(i)\n                i += 1\n            }\n      \
    \      i = 0\n            while (i < array.size) {\n                temp(i) =\
    \ result(i)\n                i += 1\n            }\n            result = (temp.toList)\n\
    \        } else {\n            val temp = new Array[Long](array.size)\n      \
    \      i = 0\n            while (i < array.size) {\n                temp(i) =\
    \ array(i)\n                i += 1\n            }\n            val temp2 = new\
    \ Array[Long](array.size)\n            i = 0\n            while (i < array.size)\
    \ {\n                temp2(i) = temp(i) - temp2(i)\n                i += 1\n \
    \           }\n            i = 0\n            while (i < array.size) {\n     \
    \           temp(i) = temp2(i)\n                i += 1\n            }\n      \
    \      i = 0\n            while (i < array.size) {\n                temp(i) =\
    \ result(i)\n                i += 1\n            }\n            result = (temp.toList)\n\
    \        }\n        result", "        val sumArray = array.foldLeft(0L) { (sum,\
    \ element) => sum + element }\n        val isEven = sumArray % 2 == 0\n      \
    \  val isOdd = sumArray % 2 != 0\n        if (isEven) {\n            array.sortBy(x\
    \ => x)\n        } else {\n            array.sortBy(x => -x)\n        }", "  \
    \      val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     array.foreach { x =>\n            sum += x\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.foreach { x =>\n                result.add(x)\n\
    \            }\n        } else {\n            array.foreach { x =>\n         \
    \       result.add(-x)\n            }\n        }\n        result.sort", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n     \
    \   array.foreach(x => sum += x)\n        if (sum % 2 == 0) result.addAll(array.sortWith(_\
    \ < _))\n        else result.addAll(array.sortWith(_ > _))\n        result.toList",
  "        val sumArray = array.sum\n        val odd = sumArray % 2 == 0\n       \
    \ val even = sumArray % 2 != 0\n        val newArray = array.sortBy(x => x)\n\
    \        if (odd) newArray.sortBy(x => -x)\n        else newArray.sortBy(x =>\
    \ x)", "        val sumArray = array.foldLeft(0L) { (sum, value) => sum + value\
    \ }\n        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val sum = 0L\n        for(i <- 0 until array.size) {\n            sum +=\
    \ array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a < b)", "      \
    \  val sumArray = array.foldLeft(0L) { (sum, value) => sum + value }\n       \
    \ val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n     \
    \   if (evenSum) {\n            array.sortWith(_.compareTo(_) < 0)\n        }\
    \ else {\n            array.sortWith(_.compareTo(_) > 0)\n        }", "      \
    \  val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n       \
    \ var i = 0\n        while (i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a > b)\n        } else {\n            array.sortWith((a, b) => a < b)\n\
    \        }\n        result.toList", "        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x.compareTo(y))",
  "        val sumArray = array.foldLeft(0L){ (sum, value) => sum + value }\n    \
    \    val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n  \
    \      if(evenSum){\n            array.sortBy(-_)\n        }else{\n          \
    \  array.sortBy(-_)\n        }", "        val sumArray = array.sum\n        val\
    \ evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n\
    \        val oddArray = array.filter(_ % 2 == 1)\n        val evenSumArray = evenArray.sum\n\
    \        val oddSumArray = oddArray.sum\n        val evenSumArrayOdd = evenSumArray\
    \ % 2 == 1\n        val oddSumArrayEven = oddSumArray % 2 == 0\n        val evenSumArrayEven\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayOdd = oddSumArray % 2 == 0\n\
    \        val evenSumArrayOdd = evenSumArray % 2 == 1\n        val oddSumArrayEven\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayEven = evenSumArray % 2 == 1\n\
    \        val oddSumArrayOdd = oddSumArray % 2 == 0\n        val evenSumArrayOdd\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayEven = oddSumArray % 2 == 0\n\
    \        val evenSumArrayEven = evenSumArray % 2 == 1\n        val oddSumArrayOdd\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayOdd = evenSumArray % 2 == 1\n\
    \        val oddSumArrayEven = oddSumArray % 2 == 0\n        val evenSumArrayEven\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayOdd = oddSumArray % 2 == 0\n\
    \        val evenSumArrayOdd = evenSumArray % 2 == 1\n        val oddSumArrayEven\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayEven = evenSumArray % 2 == 1\n\
    \        val oddSumArrayOdd = oddSumArray % 2 == 0\n        val evenSumArrayOdd\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayEven = oddSumArray % 2 == 0\n\
    \        val evenSumArrayEven = evenSumArray % 2 == 1\n        val oddSumArrayOdd\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayOdd = evenSumArray % 2 == 1\n\
    \        val oddSumArrayEven = oddSumArray % 2 == 0\n        val evenSumArrayEven\
    \ = evenSumArray % 2 == 1\n        val oddSumArrayOdd = oddSumArray % 2 == 0\n\
    \        val evenSumArrayOdd = evenSumArray % 2 == 1\n        val oddSumArrayEven\
    \ = oddSumArray % 2 == 0\n        val evenSumArrayEven = evenSumArray % 2 == 1\n",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        var j = 0\n        while (i < array.length) {\n     \
    \       sum = sum + array(i)\n            i += 1\n        }\n        val even\
    \ = sum % 2 == 0\n        val odd = !even\n        if (even) {\n            while\
    \ (j < array.length) {\n                sum = sum + array(j)\n               \
    \ j += 1\n            }\n            while (j < array.length) {\n            \
    \    sum = sum - array(j)\n                j += 1\n            }\n           \
    \ while (j < array.length) {\n                sum = sum + array(j)\n         \
    \       j += 1\n            }\n            while (j < array.length) {\n      \
    \          sum = sum - array(j)\n                j += 1\n            }\n     \
    \   } else {\n            while (j < array.length) {\n                sum = sum\
    \ - array(j)\n                j += 1\n            }\n            while (j < array.length)\
    \ {\n                sum = sum + array(j)\n                j += 1\n          \
    \  }\n            while (j < array.length) {\n                sum = sum + array(j)\n\
    \                j += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(j)\n                j += 1\n            }\n\
    \        }\n        val even = sum % 2 == 0\n        val odd = !even\n       \
    \ if (even) {\n            while (j < array.length) {\n                sum = sum\
    \ + array(j)\n                j += 1\n            }\n            while (j < array.length)\
    \ {\n                sum = sum - array(j)\n                j += 1\n          \
    \  }\n            while (j < array.length) {\n                sum = sum + array(j)\n\
    \                j += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum - array(j)\n                j += 1\n            }\n\
    \        } else {\n            while (j < array.length) {\n                sum\
    \ = sum - array(j)\n                j += 1\n            }\n            while (j\
    \ < array.length) {\n                sum = sum + array(j)\n                j +=\
    \ 1\n            }\n            while (j < array.length) {\n                sum\
    \ = sum + array(j)\n                j += 1\n            }\n            while (j\
    \ < array.length) {\n                sum = sum - array(j)\n                j +=\
    \ 1\n            }\n        }\n        val even = sum % 2 == 0\n        val odd\
    \ = !even\n        if (even) {\n            while (j < array.length) {\n     \
    \           sum = sum + array(j)\n                j += 1\n            }\n    \
    \        while (j < array.length) {\n                sum = sum - array(j)\n  \
    \              j += 1\n            }\n            while (j < array.length) {\n\
    \                sum = sum + array(j)\n                j += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(j)\n\
    \                j += 1\n            }\n        } else {\n            while (j\
    \ < array.length) {\n                sum = sum - array(j)\n                j +=\
    \ 1\n            }\n            ", "        val sums = array.foldLeft(List[Long]()){\
    \ (sums, element) => sums :+ sums(0) + element }\n        val odd = sums.filter(x\
    \ => x % 2 != 0)\n        val even = sums.filter(x => x % 2 == 0)\n        val\
    \ sorted = if (odd.isEmpty) even else odd\n        sorted.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for(i\
    \ <- 0 until array.size) {\n            sum += array(i)\n        }\n        if(sum\
    \ % 2 == 0) {\n            for(i <- 0 until array.size) {\n                sum\
    \ += array(i)\n                result.add(sum)\n            }\n        } else\
    \ {\n            for(i <- 0 until array.size) {\n                sum -= array(i)\n\
    \                result.add(sum)\n            }\n        }\n        return result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     for (i <- 0 until array.size) {\n            sum += array(i)\n         \
    \   if (sum % 2 == 0) {\n                result.add(array(i))\n            } else\
    \ {\n                result.add(array(i)).reverse\n            }\n        }\n\
    \        result.toList", "        val newArray = array.sortWith( (a,b) => math.abs(a-b)\
    \ > math.abs(a+b) )\n        newArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_\
    \ < _)\n        } else {\n            array.sortWith(_ > _)\n        }\n     \
    \   result.toList", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     var sum = 0L\n        var i = 0\n        while (i < array.length) {\n  \
    \          sum += array(i)\n            i += 1\n        }\n        if (sum % 2\
    \ == 0) {\n            array.sortWith((x, y) => x < y)\n        } else {\n   \
    \         array.sortWith((x, y) => x > y)\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     array.foreach(x => sum += x)\n        val evenSum = sum % 2 == 0\n     \
    \   val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenSumEvenArray = evenArray.filter(_ % 2 == 0)\n   \
    \     val evenSumOddArray = evenArray.filter(_ % 2 == 1)\n        val oddSumEvenArray\
    \ = oddArray.filter(_ % 2 == 0)\n        val oddSumOddArray = oddArray.filter(_\
    \ % 2 == 1)\n        val evenSumEvenArraySum = evenSumEvenArray.sum\n        val\
    \ evenSumOddArraySum = evenSumOddArray.sum\n        val oddSumEvenArraySum = oddSumEvenArray.sum\n\
    \        val oddSumOddArraySum = oddSumOddArray.sum\n        val evenSumEvenArraySumOdd\
    \ = evenSumEvenArraySum - evenSumOddArraySum\n        val evenSumOddArraySumOdd\
    \ = evenSumOddArraySum - oddSumEvenArraySum\n        val oddSumEvenArraySumOdd\
    \ = oddSumEvenArraySum - oddSumOddArraySum\n        val oddSumOddArraySumOdd =\
    \ oddSumOddArraySum - evenSumEvenArraySum\n        val evenSumEvenArraySumEven\
    \ = evenSumEvenArraySum - evenSumEvenArraySumOdd\n        val evenSumOddArraySumEven\
    \ = evenSumOddArraySum - oddSumEvenArraySumOdd\n        val oddSumEvenArraySumEven\
    \ = oddSumEvenArraySum - oddSumEvenArraySumOdd\n        val oddSumOddArraySumEven\
    \ = oddSumOddArraySum - evenSumOddArraySumOdd\n        val evenSumEvenArraySumOddEven\
    \ = evenSumEvenArraySum - evenSumOddArraySumEven\n        val evenSumOddArraySumOddEven\
    \ = evenSumOddArraySum - oddSumOddArraySumEven\n        val oddSumEvenArraySumOddEven\
    \ = oddSumEvenArraySum - oddSumOddArraySumOdd\n        val oddSumOddArraySumOddEven\
    \ = oddSumOddArraySum - evenSumEvenArraySumEven\n        val evenSumEvenArraySumEvenOdd\
    \ = evenSumEvenArraySum - evenSumOddArraySumOdd\n        val evenSumOddArray",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     array.foreach(x => sum += x)\n        if (sum % 2 == 0) {\n            array.sortWith((x,\
    \ y) => x < y)\n        } else {\n            array.sortWith((x, y) => x > y)\n\
    \        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => {\n            sum += x\n  \
    \      })\n        val evenSum = sum % 2 == 0\n        val odd = sum % 2 != 0\n\
    \        array.foreach(x => {\n            val even = sum - x\n            if\
    \ (evenSum) {\n                if (even % 2 == 0) {\n                    result.add(x)\n\
    \                }\n            } else {\n                if (odd % 2 == 0) {\n\
    \                    result.add(x)\n                }\n            }\n       \
    \ })\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n\
    \            array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n    \
    \    var i = 0\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        while(i < array.length) {\n          \
    \  sum += array(i)\n            i += 1\n        }\n        while(i < array.length)\
    \ {\n            sum += array(i)\n            i += 1\n        }\n        if(sum\
    \ % 2 == 0) {\n            val temp = new mutable.ListBuffer[Long]()\n       \
    \     while(i < array.length) {\n                temp += array(i)\n          \
    \      i += 1\n            }\n            temp.sortWith((x, y) => x < y)\n   \
    \         result ++= temp\n        } else {\n            val temp = new mutable.ListBuffer[Long]()\n\
    \            while(i < array.length) {\n                temp += array(i)\n   \
    \             i += 1\n            }\n            temp.sortWith((x, y) => x > y)\n\
    \            result ++= temp\n        }\n        result.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        array.foreach(x\
    \ => sum += x)\n        if (sum % 2 == 0) {\n            array.sortWith(_ < _)\n\
    \        } else {\n            array.sortWith(_ > _)\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        while (i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_\
    \ < _)\n        } else {\n            array.sortWith(_ > _)\n        }\n     \
    \   result.toList", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum % 2\
    \ == 0) result.addAll(array.sortWith(_ < _))\n        else result.addAll(array.sortWith(_\
    \ > _))\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        val odd = sum % 2 == 1\n        val even = sum % 2 == 0\n        if(odd)\
    \ {\n            array.sortWith((a, b) => a < b)\n        } else {\n         \
    \   array.sortWith((a, b) => a > b)\n        }", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x < y)", "      \
    \  val sumArray = array.foldLeft(0)((sum, element) => sum + element)\n       \
    \ if (sumArray % 2 == 0) array.sortBy(x => x) else array.sortBy(x => -x)", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n  \
    \      var i = 0\n        var j = 0\n        while (i < array.length) {\n    \
    \        sum += array(i)\n            i += 1\n        }\n        while (j < array.length)\
    \ {\n            sum += array(i)\n            i += 1\n            j += 1\n   \
    \     }\n        if (sum % 2 == 0) {\n            array.sortWith((x, y) => x <\
    \ y)\n        } else {\n            array.sortWith((x, y) => x > y)\n        }\n\
    \        result.toList", "        val newArray = array.sortWith((x, y) => math.abs(x\
    \ - y) > 0)\n        if (math.abs(newArray(0) - newArray(array.length - 1)) %\
    \ 2 == 1) {\n            newArray.sortWith((x, y) => math.abs(x - y) > 0)\n  \
    \      } else {\n            newArray.sortWith((x, y) => math.abs(x - y) < 0)\n\
    \        }", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ sum = 0L\n        array.foreach(x => sum += x)\n        if (sum % 2 == 0) {\n\
    \            array.sortWith(_ < _)\n        } else {\n            array.sortWith(_\
    \ > _)\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a > b)\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     val evenSum = 0L\n        val oddSum = 0L\n        array.foreach(x => {\n\
    \            sum += x\n            if (sum % 2 == 0) {\n                evenSum\
    \ += x\n            } else {\n                oddSum += x\n            }\n   \
    \     })\n        if (sum % 2 == 0) {\n            array.sortBy(x => x)\n    \
    \    } else {\n            array.sortBy(x => -x)\n        }\n        result.clear()\n\
    \        array.foreach(x => {\n            if (sum % 2 == 0) {\n             \
    \   result.add(x)\n            } else {\n                result.add(-x)\n    \
    \        }\n        })\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if(sum %\
    \ 2 == 0) {\n            array.sortWith((a, b) => a < b)\n        } else {\n \
    \           array.sortWith((a, b) => a > b)\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0L) { (sum, value) => sum + value }\n   \
    \     val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val newArray = array.sortWith( (a,b) => a > b )\n\
    \        if(newArray.sum % 2 == 0) newArray.sortWith( (a,b) => a < b ) else newArray.sortWith(\
    \ (a,b) => a > b )", "        val result = new mutable.ListBuffer[Long]()\n  \
    \      var sum = 0L\n        var index = 0\n        while(index < array.length)\
    \ {\n            sum = sum + array.getOrElse(index, 0L)\n            if(sum %\
    \ 2 == 0) {\n                result.add(array.getOrElse(index, 0L))\n        \
    \    }\n            index += 1\n        }\n        return result.toList", "  \
    \      val result = new mutable.ArrayList[Long]()\n        val sum = 0L\n    \
    \    for(i <- 0 until array.length){\n            sum += array(i)\n        }\n\
    \        if(sum % 2 == 0){\n            for(i <- 0 until array.length){\n    \
    \            result.add(array(i))\n            }\n        }else{\n           \
    \ for(i <- 0 until array.length){\n                result.add(array(i))\n    \
    \        }\n        }\n        result.sortWith((a, b) => a > b)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        for (i\
    \ <- 0 until array.size) {\n            sum += array(i)\n        }\n        if\
    \ (sum % 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n    \
    \        array.sortWith(_ > _)\n        }\n        result.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for(i\
    \ <- 0 until array.length){\n            sum += array(i)\n        }\n        for(i\
    \ <- 0 until array.length){\n            val temp = array(i)\n            val\
    \ index = sum - temp\n            if(index % 2 == 0){\n                result.add(temp)\n\
    \            }\n        }\n        return result.toList", "        val sumArray\
    \ = array.sum\n        val odd = sumArray % 2 != 0\n        val even = sumArray\
    \ % 2 == 0\n        val newArray = array.sortWith(x => if (odd) x.compareTo(x)\
    \ else -x.compareTo(x))\n        if (even) newArray.sortWith(x => -x.compareTo(x))\n\
    \        else newArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.length) {\n                result += array(i)\n            }\n       \
    \ } else {\n            for(i <- 0 until array.length) {\n                result\
    \ -= array(i)\n            }\n        }\n        return result.toList", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n     \
    \   for (i <- 0 until array.size) {\n            sum += array(i)\n        }\n\
    \        if (sum % 2 == 0) {\n            for (i <- 0 until array.size) {\n  \
    \              result.add(array(i))\n            }\n        } else {\n       \
    \     for (i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a < b)", "      \
    \  val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        for\
    \ (i <- 0 until array.length) {\n            sum += array(i)\n        }\n    \
    \    if (sum % 2 == 0) {\n            array.sortWith((x, y) => x < y)\n      \
    \  } else {\n            array.sortWith((x, y) => x > y)\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0L){ (sum, value) => sum + value }\n    \
    \    val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven = sumArray\
    \ % 2 == 0\n        val sortedArray = array.sortWith( (a, b) => sumArrayOdd ?\
    \ (a - b) : (a - b) ) \n        sortedArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        val evenSum = sum % 2 == 0\n        val odd\
    \ = sum % 2 != 0\n        if(evenSum) {\n            for(i <- 0 until array.size)\
    \ {\n                val temp = array(i)\n                val index = array.indexOf(i)\n\
    \                val temp = array(i)\n                array(i) = array((index\
    \ + 1) % array.size)\n                array((index + 1) % array.size) = temp\n\
    \                result.add(temp)\n            }\n        } else {\n         \
    \   for(i <- 0 until array.size) {\n                val temp = array(i)\n    \
    \            val index = array.indexOf(i)\n                val temp = array(i)\n\
    \                array(i) = array((index - 1) % array.size)\n                array((index\
    \ - 1) % array.size) = temp\n                result.add(temp)\n            }\n\
    \        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        var j = 0\n        while (i\
    \ < array.length) {\n            sum += array(i)\n            i += 1\n       \
    \ }\n        while (j < array.length) {\n            sum += array(j)\n       \
    \     j += 1\n        }\n        if (sum % 2 == 0) {\n            val temp = array\n\
    \            array.clear()\n            array.add(temp)\n            array.sortWith((x,\
    \ y) => x < y)\n        }\n        else {\n            val temp = array\n    \
    \        array.clear()\n            array.add(temp)\n            array.sortWith((x,\
    \ y) => x > y)\n        }\n        result.toList", "        val sumArray = array.foldLeft(0L)(_\
    \ + _)\n        val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven\
    \ = sumArray % 2 == 0\n        val sortedArray = array.sortWith((a, b) => sumArrayOdd\
    \ ? (a - b) : (b - a))\n        sortedArray.sortWith((a, b) => sumArrayEven ?\
    \ (a - b) : (b - a))", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((x,\
    \ y) => x < y)\n        } else {\n            array.sortWith((x, y) => x > y)\n\
    \        }\n        result.toList", "        val result = new ArrayList[Long](array.size)\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.size) {\n  \
    \          sum += array(i)\n            i += 1\n        }\n        val odd = sum\
    \ % 2 != 0\n        val even = sum % 2 == 0\n        if(odd) {\n            array.sortWith(x\
    \ => x < 0)\n        }\n        if(even) {\n            array.sortWith(x => x\
    \ > 0)\n        }\n        result.toList", "        val newArray = array.sortWith((a,\
    \ b) => a > b)\n        if (newArray(0) % 2 == 0) {\n            newArray.sortWith((a,\
    \ b) => a < b)\n        } else {\n            newArray.sortWith((a, b) => a >\
    \ b)\n        }", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   var sum = 0L\n        var i = 0\n        while(i < array.length) {\n     \
    \       sum += array(i)\n            i += 1\n        }\n        while(i < array.length)\
    \ {\n            sum += array(i)\n            i += 1\n        }\n        if(sum\
    \ % 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n         \
    \   array.sortWith(_ > _)\n        }\n        result.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        for (i <- 0\
    \ until array.size) {\n            sum += array(i)\n        }\n        if (sum\
    \ % 2 == 0) {\n            array.sortWith((a, b) => a > b)\n        } else {\n\
    \            array.sortWith((a, b) => a < b)\n        }\n        result.toList",
  "        val newArray = array.sortWith(_ < _)\n        if (newArray.sum % 2 == 0)\
    \ {\n            newArray.reverse\n        }\n        else {\n            newArray\n\
    \        }", "        val newArray = array.sortWith(compare)\n        newArray",
  "        val result = new mutable.ArrayList[Long]()\n        val sum = 0L\n    \
    \    val sumOfFirstIndex = 0L\n        val sumOfLastIndex = 0L\n        array.foreach(x\
    \ => {\n            sum += x\n            sumOfFirstIndex += x\n            sumOfLastIndex\
    \ += x\n        })\n        if (sumOfFirstIndex % 2 == 0) {\n            array.sortWith((x,\
    \ y) => sumOfFirstIndex - y - sumOfLastIndex - x)\n        } else {\n        \
    \    array.sortWith((x, y) => sumOfFirstIndex - y - sumOfLastIndex - x)\n    \
    \    }", "        val sortedArray = array.sortWith((x, y) => if (x + y % 2 ==\
    \ 0) x < y else x > y)\n        sortedArray", "        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x.compareTo(y))\n\
    \        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((x, y) => x < y)\n        } else {\n \
    \           array.sortWith((x, y) => x > y)\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0L){ (sum, value) => sum + value }\n    \
    \    val sumArrayOdd = sumArray % 2 != 0\n        val sumArrayEven = sumArray\
    \ % 2 == 0\n        val sortedArray = array.sortWith( (a, b) => sumArrayOdd ?\
    \ (a - b) : (a - b) ) \n        sortedArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if(sum % 2 == 1) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 1) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val newArray = array.sortWith(\
    \ (a,b) => a > b )\n        newArray", '        val sums = array.map(x => x +
    x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x
    + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x => x + x).map(x =>
    x + x).map(x ', "        val result = new Array[Long](array.size)\n        var\
    \ sum = 0L\n        var i = 0\n        var j = 0\n        while(i < array.size)\
    \ {\n            sum += array(i)\n            i += 1\n        }\n        while(j\
    \ < array.size) {\n            sum += array(i)\n            i += 1\n         \
    \   j += 1\n        }\n        if(sum % 2 == 0) {\n            array.sortWith(a\
    \ => a.compareTo(b) < 0)\n        } else {\n            array.sortWith(a => a.compareTo(b)\
    \ > 0)\n        }\n        result", "        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith(compare)\n\
    \        if (sumArrayOdd) {\n            sortedArray.reverse\n        } else {\n\
    \            sortedArray\n        }", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n            result.add(sum)\n        }\n        val evenSum\
    \ = result.takeWhile(_ % 2 == 0).sum\n        val oddSum = result.takeWhile(_\
    \ % 2 == 1).sum\n        if (sum % 2 == 0) {\n            result.sortWith((a,\
    \ b) => b - a)\n        } else {\n            result.sortWith((a, b) => a - b)\n\
    \        }\n        result.filter(_ % 2 == 0).takeWhile(_ < evenSum).reverse.filter(_\
    \ % 2 == 1).takeWhile(_ > oddSum).reverse.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result += array(i)\n            }\n        }\
    \ else {\n            for(i <- 0 until array.size) {\n                result -=\
    \ array(i)\n            }\n        }\n        return result.toList", "       \
    \ val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        for\
    \ (i <- 0 until array.size) {\n            sum += array(i)\n            if (sum\
    \ % 2 == 0) {\n                result.add(-array(i))\n            } else {\n \
    \               result.add(array(i))\n            }\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        while(i < array.length) {\n          \
    \  sum += array(i)\n            i += 1\n        }\n        if(sum % 2 == 0) {\n\
    \            array.sortWith((a, b) => a > b)\n        } else {\n            array.sortWith((a,\
    \ b) => a < b)\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val sumOfFirstIndex = 0L\n        val sumOfLastIndex\
    \ = 0L\n        for(i <- 0 until array.size) {\n            sum += array(i)\n\
    \            sumOfFirstIndex += array(i)\n            sumOfLastIndex += array(i\
    \ + 1)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until array.size)\
    \ {\n                val temp = array(i)\n                val temp = sumOfFirstIndex\
    \ - sumOfLastIndex\n                result.add(temp)\n                sumOfFirstIndex\
    \ -= temp\n                sumOfLastIndex -= temp\n            }\n        } else\
    \ {\n            for(i <- 0 until array.size) {\n                val temp = array(i)\n\
    \                val temp = sumOfFirstIndex + sumOfLastIndex\n               \
    \ result.add(temp)\n                sumOfFirstIndex += temp\n                sumOfLastIndex\
    \ += temp\n            }\n        }\n        return result.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        for(i\
    \ <- 0 until array.length){\n            sum += array(i)\n        }\n        if(sum\
    \ % 2 == 0){\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }else{\n            for(i <- 0 until array.length){\n\
    \                result.add(array(i))\n            }\n        }\n        result.sortWith((x,y)\
    \ => x.compare(y))\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        return result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val evenSum = 0L\n        val oddSum = 0L\n   \
    \     for (i <- 0 until array.size) {\n            sum += array(i)\n         \
    \   if (sum % 2 == 0) {\n                evenSum += array(i)\n            } else\
    \ {\n                oddSum += array(i)\n            }\n        }\n        if\
    \ (sum % 2 == 0) {\n            evenSum += array(0)\n        } else {\n      \
    \      oddSum += array(0)\n        }\n        val even = evenSum / 2\n       \
    \ val odd = oddSum / 2\n        for (i <- 0 until array.size) {\n            val\
    \ value = array(i)\n            if (sum % 2 == 0) {\n                if (value\
    \ < even) {\n                    result.add(value)\n                }\n      \
    \      } else {\n                if (value > odd) {\n                    result.add(value)\n\
    \                }\n            }\n        }\n        result.toList", "      \
    \  val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n       \
    \ val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenSumArray = evenArray.sum\n        val oddSumArray\
    \ = oddArray.sum\n        val evenArrayList = evenArray.sorted\n        val oddArrayList\
    \ = oddArray.sorted\n        val evenSumArrayList = evenSumArray.sorted\n    \
    \    val oddSumArrayList = oddSumArray.sorted\n        val evenSumArrayList2 =\
    \ evenSumArrayList.sorted\n        val oddSumArrayList2 = oddSumArrayList.sorted\n\
    \        val evenSumArrayList3 = evenSumArrayList2.sorted\n        val oddSumArrayList3\
    \ = oddSumArrayList2.sorted\n        val evenSumArrayList4 = evenSumArrayList3.sorted\n\
    \        val oddSumArrayList4 = oddSumArrayList3.sorted\n        val evenSumArrayList5\
    \ = evenSumArrayList4.sorted\n        val oddSumArrayList5 = oddSumArrayList4.sorted\n\
    \        val evenSumArrayList6 = evenSumArrayList5.sorted\n        val oddSumArrayList6\
    \ = oddSumArrayList5.sorted\n        val evenSumArrayList7 = evenSumArrayList6.sorted\n\
    \        val oddSumArrayList7 = oddSumArrayList6.sorted\n        val evenSumArrayList8\
    \ = evenSumArrayList7.sorted\n        val oddSumArrayList8 = oddSumArrayList7.sorted\n\
    \        val evenSumArrayList9 = evenSumArrayList8.sorted\n        val oddSumArrayList9\
    \ = oddSumArrayList8.sorted\n        val evenSumArrayList10 = evenSumArrayList9.sorted\n\
    \        val oddSumArrayList10 = oddSumArrayList9.sorted\n        val evenSumArrayList11\
    \ = evenSumArrayList10.sorted\n        val oddSumArrayList11 = oddSumArrayList10.sorted\n\
    \        val evenSumArrayList12 = evenSumArrayList11.sorted\n        val oddSumArrayList12\
    \ = oddSumArrayList11.sorted\n        val evenSumArrayList13 = evenSumArrayList12.sorted\n\
    \        val oddSumArrayList13 = oddSumArrayList12.sorted\n        val evenSumArrayList14\
    \ = evenSumArrayList13.sorted\n        val oddSumArrayList14 = oddSumArrayList13.sorted\n\
    \        val evenSumArrayList15 = evenSumArrayList14.sorted\n        val oddSumArrayList15\
    \ = oddSumArrayList14.sorted\n        val evenSumArrayList16 = evenSumArrayList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     for (i <- 0 until array.size) {\n            sum += array(i)\n         \
    \   if (sum % 2 == 1) {\n                result.add(array(i))\n            }\n\
    \        }\n        return result.toList", "        val newArray = array.sortWith(\
    \ (a,b) => a > b)\n        if(newArray.sum % 2 == 0) newArray.sortWith( (a,b)\
    \ => a < b)\n        else newArray.sortWith( (a,b) => a > b)", "        val sumArray\
    \ = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenArraySorted = evenArray.sortWith(_ < _)\n        val oddArraySorted\
    \ = oddArray.sortWith(_ > _)\n        if (evenSum) {\n            evenArraySorted\n\
    \        } else {\n            oddArraySorted\n        }", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n\
    \        while (i < array.size) {\n            sum += array(i)\n            i\
    \ += 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList", "        val newArray = array.sortWith((a, b)\
    \ => a > b)\n        if (newArray.sum % 2 == 1) {\n            newArray.sortWith((a,\
    \ b) => a < b)\n        } else {\n            newArray.sortWith((a, b) => a >\
    \ b)\n        }", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   var sum = 0\n        var i = 0\n        var j = 0\n        while (i < array.length)\
    \ {\n            sum = sum + array(i)\n            i += 1\n        }\n       \
    \ while (j < array.length) {\n            sum = sum - array(i)\n            j\
    \ += 1\n        }\n        if (sum % 2 == 0) {\n            while (i < array.length)\
    \ {\n                sum = sum + array(i)\n                i += 1\n          \
    \  }\n            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while (j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while (i < ", "        val\
    \ sortedArray = array.sortWith((x, y) => x < y)\n        if (sortedArray(0) %\
    \ 2 == 0) {\n            sortedArray.sortWith((x, y) => x > y)\n        } else\
    \ {\n            sortedArray.sortWith((x, y) => x < y)\n        }", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i\
    \ = 0\n        while(i < array.length) {\n            sum += array(i)\n      \
    \      i += 1\n        }\n        if(sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a > b)\n        } else {\n            array.sortWith((a, b) => a < b)\n\
    \        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) result.addAll(array.sortWith(_ < _))\n        else result.addAll(array.sortWith(_\
    \ > _))\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach { x =>\n            sum += x\n  \
    \      }\n        if (sum % 2 == 0) {\n            array.sortWith(_ < _)\n   \
    \     } else {\n            array.sortWith(_ > _)\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0L) { (sum, value) => sum + value }\n   \
    \     val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven = sumArray\
    \ % 2 == 0\n        val sortedArray = array.sortWith( (a, b) => sumArrayOdd ?\
    \ (a - b) : (a - b) ) \n        sortedArray ++ sortedArray.reverse", "       \
    \ val newArray = array.sortWith((x, y) => x < y)\n        if (newArray(0) % 2\
    \ == 0) {\n            newArray.sortWith((x, y) => y < x)\n        } else {\n\
    \            newArray.sortWith((x, y) => x > y)\n        }", "        val sumArray\
    \ = array.foldLeft(0L){ (sum, element) => sum + element }\n        val odd = sumArray\
    \ % 2 == 1\n        val even = sumArray % 2 == 0\n        if(odd) array.sortBy(-_)\n\
    \        else array.sortBy(-_.reverse)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        if(sum % 2 == 0) {\n            array.sortWith((a, b) => a > b)\n   \
    \     } else {\n            array.sortWith((a, b) => a < b)\n        }\n     \
    \   result.toList", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val sum = 0L\n        for (i <- 0 until array.size) {\n            sum +=\
    \ array(i)\n        }\n        if (sum % 2 == 0) {\n            val tempArray\
    \ = array.sortBy(x => x)\n            for (i <- 0 until tempArray.size) {\n  \
    \              result += tempArray(i)\n            }\n        } else {\n     \
    \       val tempArray = array.sortBy(x => -x)\n            for (i <- 0 until tempArray.size)\
    \ {\n                result += tempArray(i)\n            }\n        }\n      \
    \  result.toList", "        val sumArray = array.foldLeft(0L) { (sum, value) =>\
    \ sum + value }\n        val odd = sumArray % 2 == 1\n        val even = sumArray\
    \ % 2 == 0\n        val result = array.sortBy(x => if (odd) x else -x)\n     \
    \   if (even) result.reverse else result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_\
    \ < _)\n        } else {\n            array.sortWith(_ > _)\n        }\n     \
    \   result.toList", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum % 2\
    \ == 0) {\n            array.sortWith((x, y) => x < y)\n        } else {\n   \
    \         array.sortWith((x, y) => x > y)\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0L){ (sum, value) => sum + value }\n    \
    \    val isOdd = sumArray % 2 != 0\n        val isEven = sumArray % 2 == 0\n \
    \       if(isOdd) array.sortBy(-_) else array.sortBy(_)", "        val newArray\
    \ = array.sortWith( (a,b) => a > b )\n        val sum = newArray.sum\n       \
    \ val isOdd = sum % 2 == 1\n        if(isOdd) newArray.sortWith( (a,b) => a <\
    \ b )\n        else newArray.sortWith( (a,b) => a > b )", "        val sumArray\
    \ = array.foldLeft(0L){ (sum, value) => sum + value }\n        val isOdd = sumArray\
    \ % 2 != 0\n        val isEven = sumArray % 2 == 0\n        if(isOdd) array.sortBy(-_)\
    \ else array.sortBy(_)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortBy(x => x)\n        } else {\n            array.sortBy(x\
    \ => -x)\n        }\n        result.clear()\n        array.foreach(x => result\
    \ += x)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if(sum % 2 == 0) {\n                result.add(array(i))\n\
    \            }\n        }\n        return result.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0\n        for (i <- 0 until\
    \ array.length) {\n            sum += array(i)\n        }\n        if (sum % 2\
    \ == 0) {\n            array.sortWith((a, b) => a < b)\n        } else {\n   \
    \         array.sortWith((a, b) => a > b)\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n    \
    \    var i = 0\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        while(i < array.length) {\n          \
    \  sum += array(i)\n            i += 1\n        }\n        if(sum % 2 == 0) {\n\
    \            array.sortWith(_.compareTo(_) < 0)\n        } else {\n          \
    \  array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList", "  \
    \      val result = new Array[Long](array.size)\n        var index = 0\n     \
    \   var sum = 0\n        for (i <- 0 until array.size) {\n            sum += array(i)\n\
    \            result(i) = sum\n        }\n        if (sum % 2 == 0) {\n       \
    \     val temp = new Array[Long](array.size)\n            var index = 0\n    \
    \        var sum = 0\n            for (i <- 0 until array.size) {\n          \
    \      sum += array(i)\n                temp(i) = sum\n            }\n       \
    \     val temp2 = new Array[Long](array.size)\n            var index = 0\n   \
    \         var sum = 0\n            for (i <- 0 until array.size) {\n         \
    \       sum += array(i)\n                temp2(i) = sum\n            }\n     \
    \       val temp3 = new Array[Long](array.size)\n            var index = 0\n \
    \           var sum = 0\n            for (i <- 0 until array.size) {\n       \
    \         sum += array(i)\n                temp3(i) = sum\n            }\n   \
    \         val temp4 = new Array[Long](array.size)\n            var index = 0\n\
    \            var sum = 0\n            for (i <- 0 until array.size) {\n      \
    \          sum += array(i)\n                temp4(i) = sum\n            }\n  \
    \          val temp5 = new Array[Long](array.size)\n            var index = 0\n\
    \            var sum = 0\n            for (i <- 0 until array.size) {\n      \
    \          sum += array(i)\n                temp5(i) = sum\n            }\n  \
    \          val temp6 = new Array[Long](array.size)\n            var index = 0\n\
    \            var sum = 0\n            for (i <- 0 until array.size) {\n      \
    \          sum += array(i)\n                temp6(i) = sum\n            }\n  \
    \          val temp7 = new Array[Long](array.size)\n            var index = 0\n\
    \            var sum = 0\n            for (i <- 0 until array.size) {\n      \
    \          sum += array(i)\n                temp7(i) = sum\n            }\n  \
    \          val temp8 = new Array[Long](array.size)\n            var index = 0\n\
    \            var sum = 0\n            for (i <- 0 until array.size) {\n      \
    \          sum += array(i)\n                temp8(i) = sum\n            }\n  \
    \          val temp9 = new Array[Long](array.size)\n            var index = 0\n\
    \            var sum = 0\n            for (i <- 0 until array.size) {\n      \
    \          sum += array(i)\n                temp9(i) = sum\n            }\n  \
    \          val temp10 = new Array[Long](array.size)\n            var index = 0\n\
    \            var sum = 0\n            for (i <- 0 until array.size) {\n      \
    \          sum += array(i)\n                temp10(i) = sum\n            }\n \
    \           val temp11 = new Array[Long](array.size)\n            var index =\
    \ 0\n            var sum = 0\n            for (i <- 0 until array.size) {\n  \
    \              sum += array(i)\n                temp11(i) = ", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        for (i <- 0\
    \ until array.size) {\n            sum += array(i)\n            if (sum % 2 ==\
    \ 0) {\n                result.add(array(i))\n            } else {\n         \
    \       result.add(array(i)).reverse\n            }\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     for (i <- 0 until array.length) {\n            sum += array(i)\n       \
    \ }\n        if (sum % 2 == 0) {\n            array.sortWith(_ < _)\n        }\
    \ else {\n            array.sortWith(_ > _)\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        while(i < array.length) {\n          \
    \  sum += array(i)\n            i += 1\n        }\n        val evenSum = sum %\
    \ 2 == 0\n        val odd = !evenSum\n        if(evenSum) {\n            val temp\
    \ = array.sortBy(x => x)\n            result.addAll(temp)\n        } else {\n\
    \            val temp = array.sortBy(x => -x).reverse\n            result.addAll(temp)\n\
    \        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.length) {\n            sum\
    \ += array(i)\n            result.add(sum)\n        }\n        val even = result.filter(_\
    \ % 2 == 0)\n        val odd = result.filter(_ % 2 != 0)\n        val evenSorted\
    \ = even.sortWith(_ < _)\n        val oddSorted = odd.sortWith(_ > _)\n      \
    \  evenSorted.toList ++ oddSorted.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result += array(i)\n            }\n        }\
    \ else {\n            for(i <- 0 until array.size) {\n                result -=\
    \ array(i)\n            }\n        }\n        return result.toList", "       \
    \ val sumArray = array.foldLeft(0L) { (sum, element) => sum + element }\n    \
    \    val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ %\
    \ 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        val sortedArray\
    \ = evenSum match {\n            case true => evenArray\n            case false\
    \ => oddArray\n        }\n        sortedArray", "        val sortedArray = array.sortWith(_\
    \ < _)\n        if (sortedArray(0) % 2 == 0) {\n            sortedArray.sortWith(_\
    \ > _)\n        } else {\n            sortedArray.sortWith(_ < _)\n        }",
  "        val result = new mutable.ArrayList[Long]()\n        val sum = 0L\n    \
    \    for(i <- 0 until array.length){\n            sum += array(i)\n        }\n\
    \        val evenSum = sum % 2 == 0\n        val odd = sum % 2 != 0\n        if(evenSum){\n\
    \            for(i <- 0 until array.length){\n                val value = array(i)\n\
    \                val index = i\n                val temp = value\n           \
    \     while(index > 0 && array((index-1)) > value){\n                    array((index-1))\
    \ -= value\n                    index -= 1\n                }\n              \
    \  array((index-1)) += temp\n                result.add(value)\n            }\n\
    \        }else{\n            for(i <- 0 until array.length){\n               \
    \ val value = array(i)\n                val index = i\n                val temp\
    \ = value\n                while(index > 0 && array((index-1)) < value){\n   \
    \                 array((index-1)) += value\n                    index -= 1\n\
    \                }\n                array((index-1)) -= temp\n               \
    \ result.add(value)\n            }\n        }\n        result.toList", "     \
    \   val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n      \
    \  for(i <- 0 until array.length){\n            sum += array(i)\n        }\n \
    \       if(sum % 2 == 0){\n            for(i <- 0 until array.length){\n     \
    \           result += array(i)\n            }\n        }else{\n            for(i\
    \ <- 0 until array.length){\n                result -= array(i)\n            }\n\
    \        }\n        return result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n        }\n        val evenSum = sum % 2 == 0\n        val\
    \ odd = sum % 2 == 1\n        if (evenSum) {\n            val evenArray = array.filter(_\
    \ % 2 == 0)\n            val evenArraySorted = evenArray.sortWith(_ < _)\n   \
    \         result += evenArraySorted\n        } else {\n            val oddArray\
    \ = array.filter(_ % 2 == 1)\n            val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n            result += oddArraySorted\n        }\n        result.toList",
  "        val result = new mutable.ArrayList[Long]()\n        val sum = 0L\n    \
    \    for (i <- 0 until array.length) {\n            sum += array(i)\n        }\n\
    \        if (sum % 2 == 0) {\n            array.sortWith((a, b) => a < b)\n  \
    \      } else {\n            array.sortWith((a, b) => a > b)\n        }\n    \
    \    result.toList", "        val result = new mutable.ListBuffer[Long]()\n  \
    \      var sum = 0L\n        array.foreach(x => {\n            sum += x\n    \
    \    })\n        if (sum % 2 == 0) {\n            array.sortWith(x => x.compareTo(0))\n\
    \        } else {\n            array.sortWith(x => x.compareTo(-1))\n        }\n\
    \        result.clear()\n        array.foreach(x => {\n            result.add(x)\n\
    \        })\n        result.toList", "        val newArray = array.sortWith(x\
    \ => x.sum % 2 == 0)\n        newArray.sortWith(x => x.sum % 2 == 1)", "     \
    \   val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n      \
    \  array.foreach(x => sum += x)\n        if (sum % 2 == 0) {\n            array.sortWith((x,\
    \ y) => x < y)\n        } else {\n            array.sortWith((x, y) => x > y)\n\
    \        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum = sum + array(i)\n            i += 1\n        }\n        if (sum\
    \ % 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else\
    \ {\n            array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else {\n            oddArray.sortWith(_ > _)\n        }", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        for (i\
    \ <- 0 until array.size) {\n            sum += array(i)\n            if (sum %\
    \ 2 == 0) {\n                result.add(array(i))\n            } else {\n    \
    \            result.add(array(i)).reverse\n            }\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     array.foreach(x => sum += x)\n        val evenSum = sum % 2 == 0\n     \
    \   val odd = !evenSum\n        array.foreach(x => if (evenSum) result += x else\
    \ result -= x)\n        if (odd) result.sortBy(x => -x) else result.sortBy(x =>\
    \ x)", "        val result = new mutable.ListBuffer[Long]()\n        val sum =\
    \ 0L\n        for (i <- 0 until array.size) {\n            sum += array(i)\n \
    \           if (sum % 2 == 0) {\n                result.add(array(i))\n      \
    \      }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) result.addAll(array.sortWith(_ < _))\n        else result.addAll(array.sortWith(_\
    \ > _))\n        result.toList", "        val sumArray = array.sum\n        val\
    \ sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven = sumArray % 2 ==\
    \ 0\n        val newArray = array.sortWith(x => sumArrayOdd ? x.compare(array(0))\
    \ > 0 : x.compare(array(0)) < 0)\n        val newArrayEven = array.sortWith(x\
    \ => sumArrayEven ? x.compare(array(0)) > 0 : x.compare(array(0)) < 0)\n     \
    \   newArray", "        val sumArray = array.sum\n        val odd = sumArray %\
    \ 2 == 1\n        val even = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        if (odd)\
    \ {\n            oddArray.sortWith(_ < _)\n        } else {\n            evenArray.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.foldLeft(0L){ (sum, value) =>\
    \ sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven\
    \ = sumArray % 2 == 0\n        val sortedArray = array.sortWith(x => sumArrayOdd\
    \ ? x.compareTo(x) : x.compareTo(x) * -1)\n        sortedArray.filter(x => sumArrayEven)",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        while(i < array.length) {\n          \
    \  sum += array(i)\n            i += 1\n        }\n        if(sum % 2 == 0) {\n\
    \            array.sortWith(_.compareTo(_) < 0)\n        } else {\n          \
    \  array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList", "  \
    \      val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     for(i <- 0 until array.length){\n            sum += array(i)\n        }\n\
    \        if(sum % 2 == 0){\n            for(i <- 0 until array.length){\n    \
    \            result.add(array(i))\n            }\n        }else{\n           \
    \ for(i <- 0 until array.length){\n                result.add(array(i))\n    \
    \        }\n        }\n        result.sortWith((x, y) => x < y)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i\
    \ = 0\n        while(i < array.length) {\n            sum += array(i)\n      \
    \      i += 1\n        }\n        if(sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a > b)\n        } else {\n            array.sortWith((a, b) => a < b)\n\
    \        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n        }\n        if (sum % 2 == 0) {\n            for (i\
    \ <- 0 until array.length) {\n                result.add(array(i))\n         \
    \   }\n        } else {\n            for (i <- 0 until array.length) {\n     \
    \           result.add(array(i))\n            }\n        }\n        result.sortWith((a,\
    \ b) => a < b)", "        val result = new mutable.ListBuffer[Long]()\n      \
    \  val sum = 0L\n        val sumOfFirst = 0L\n        val sumOfLast = 0L\n   \
    \     for (i <- 0 until array.length) {\n            sum += array(i)\n       \
    \     sumOfFirst += array(i)\n            sumOfLast += array(i)\n        }\n \
    \       if (sum % 2 == 0) {\n            result.addAll(array.sortWith(x => x.compare(sumOfFirst,\
    \ sumOfLast) < 0))\n        } else {\n            result.addAll(array.sortWith(x\
    \ => x.compare(sumOfFirst, sumOfLast) > 0))\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     array.foreach(x => sum += x)\n        val evenSum = sum % 2 == 0\n     \
    \   val odd = sum % 2 != 0\n        if (evenSum) {\n            array.sortBy(x\
    \ => x)\n        } else {\n            array.sortBy(x => -x)\n        }\n    \
    \    val evenSum = sum % 2 == 0\n        val odd = sum % 2 != 0\n        if (evenSum)\
    \ {\n            result.addAll(array.filterNot(x => x == 0))\n        } else {\n\
    \            result.addAll(array.filterNot(x => x == 0)).reverse\n        }\n\
    \        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.toList", "        val result = new Array[Long](array.size)\n\
    \        var i = 0\n        var j = 0\n        var sum = 0\n        while (i <\
    \ array.size) {\n            sum = array[i] + array[j]\n            if (sum %\
    \ 2 == 0) {\n                result(i) = array(i)\n                i += 1\n  \
    \          } else {\n                result(i) = array[j]\n                j +=\
    \ 1\n            }\n        }\n        result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        for(i <- 0 until\
    \ array.size) {\n            sum += array(i)\n        }\n        if(sum % 2 ==\
    \ 0) {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        } else {\n            for(i <- 0 until array.size) {\n\
    \                result.add(array(i))\n            }\n        }\n        result.sortWith((a,\
    \ b) => a > b)", "        val result = new Array[Long](array.size)\n        var\
    \ sum = 0L\n        var i = 0\n        var j = 0\n        while (i < array.size)\
    \ {\n            sum = sum + array(i)\n            i += 1\n        }\n       \
    \ val evenSum = sum % 2 == 0\n        val odd = !evenSum\n        var index =\
    \ 0\n        while (j < array.size) {\n            if (evenSum) {\n          \
    \      if (array(i) > array(j)) {\n                    result(i) = array(j)\n\
    \                    i += 1\n                    j += 1\n                }\n \
    \           } else {\n                if (array(i) < array(j)) {\n           \
    \         result(i) = array(j)\n                    i += 1\n                 \
    \   j += 1\n                }\n            }\n            index += 1\n       \
    \ }\n        if (odd) {\n            val temp = result(0)\n            result(0)\
    \ = result(1)\n            result(1) = temp\n        }\n        result", "   \
    \     val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n    \
    \    var index = 0\n        while (index < array.length) {\n            sum +=\
    \ array.getOrElse(index, 0L)\n            if (sum % 2 == 0) {\n              \
    \  result.add(array.getOrElse(index, 0L))\n            } else {\n            \
    \    result.add(array.getOrElse(index, array.length - 1 - index))\n          \
    \  }\n            index += 1\n        }\n        return result.toList", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n      \
    \  var i = 0\n        while (i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList", "        val sortedArray = array.sortWith( (a,b)\
    \ => a > b)\n        if(sortedArray(0) % 2 == 1) {\n            sortedArray.sortWith(\
    \ (a,b) => a < b)\n        } else {\n            sortedArray.sortWith( (a,b) =>\
    \ a > b)\n        }", "        val result = new mutable.ListBuffer[Long]()\n \
    \       val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a > b)", "      \
    \  val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n       \
    \ array.foreach(x => {\n            sum += x\n        })\n        if (sum % 2\
    \ == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n\
    \            array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     for(i <- 0 until array.length){\n            sum += array(i)\n        }\n\
    \        if(sum % 2 == 0){\n            for(i <- 0 until array.length){\n    \
    \            result.add(array(i))\n            }\n        }else{\n           \
    \ for(i <- 0 until array.length){\n                result.add(array(i))\n    \
    \        }\n        }\n        result.sortWith((a, b) => a > b)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        for (i\
    \ <- 0 until array.size) {\n            sum += array(i)\n            if (sum %\
    \ 2 == 0) {\n                result.add(array(i))\n            } else {\n    \
    \            result.add(array(i)).reverse\n            }\n        }\n        return\
    \ result.toList", "        val newArray = array.sortWith( (a,b) => a > b )\n \
    \       val sum = newArray.sum\n        if(sum % 2 == 0) newArray.sortWith( (a,b)\
    \ => a < b ) else newArray.sortWith( (a,b) => a > b )", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n  \
    \      while(i < array.length) {\n            sum = sum + array(i)\n         \
    \   i += 1\n        }\n        if(sum % 2 == 0) {\n            array.sortWith(_\
    \ < _)\n        } else {\n            array.sortWith(_ > _)\n        }\n     \
    \   result.toList", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val sum = 0L\n        for (i <- 0 until array.size) {\n            sum +=\
    \ array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        while (j < array.length) {\n            if (sum % 2 == 0) {\n       \
    \         sum += array(i)\n                i += 1\n            } else {\n    \
    \            sum -= array(i)\n                j += 1\n            }\n        }\n\
    \        while (i < array.length) {\n            result += array(i)\n        \
    \    i += 1\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0\n        for(i <- 0 until\
    \ array.length){\n            sum = sum + array(i)\n            if(sum % 2 ==\
    \ 0){\n                result.add(array(i))\n            }else{\n            \
    \    result.add(array(i)).reverse\n            }\n        }\n        return result.toList",
  "        val newArray = array.sortWith((x, y) => math.abs(x - y) > math.abs(x -\
    \ y))\n        if (newArray.sum % 2 == 0) {\n            newArray.reverse\n  \
    \      } else {\n            newArray\n        }", "        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if(evenSum) evenArraySorted\
    \ else oddArraySorted", "        val sumArray = array.foldLeft(0L) { (sum, elem)\
    \ => sum + elem }\n        val evenSum = sumArray % 2 == 0\n        val odd =\
    \ sumArray % 2 != 0\n        val evenArray = array.filter(_ % 2 == 0)\n      \
    \  val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum) {\n         \
    \   evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     var sum = 0\n        for(i <- 0 until array.length){\n            sum +=\
    \ array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a < b)\n        result.toList"]
stop_tokens:
- "\n    }\n"
