name: HumanEval_55_fib
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
  \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
  \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
completions: ["        val fibs = mutable.ArrayBuffer(1,1)\n        fibs += fibs.last\n\
    \        fibs += fibs.last\n        fibs.drop(n).last", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs.take(n).sum",
  "        val fibs = mutable.ArrayBuffer(0, 1)\n        fibs += fibs.head\n     \
    \   fibs += fibs.tail.head\n        fibs.take(n).last", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs.take(n).last",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += fibs.last\n        fibs.drop(n).last", "        val fibs\
    \ = mutable.ListBuffer(1, 2)\n        for(i <- 1 to n) {\n            fibs +=\
    \ fibs.head\n        }\n        fibs.last", "        if (n <= 0) 0\n        else\
    \ if (n == 1) 1\n        else fib(n - 1) + fib(n - 2)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += fibs.head\n        fibs.drop(1).foldLeft(fibs.head)\
    \ { (acc, x) => acc + x }", "        val fibs = mutable.ArrayBuffer(1,1)\n   \
    \     fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(1).last",
  "        if (n <= 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        if (n == 0 || n == 1) n\n        else fib(n-1) + fib(n-2)",
  "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs.tail.foreach(fibs =>\
    \ fibs += fibs.last)\n        fibs(n)", "        val fibs = mutable.ArrayBuffer(1,1)\n\
    \        fibs.update(n) { fibs(n-1) + fibs(n-2)}\n        fibs(n)", "        val\
    \ fibs = mutable.ArrayBuffer(0, 1)\n        fibs += fibs.last\n        fibs +=\
    \ fibs.last\n        fibs.drop(1).last", "        if (n <= 1) 1\n        else\
    \ fib(n-1) + fib(n-2)", "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)",
  "        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n-1) + fib(n-2)",
  "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs += fibs.last\n      \
    \  fibs += fibs.last\n        fibs.drop(1).last", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs.take(n).sum",
  "        val fibs = mutable.ArrayBuffer(0,1)\n        fibs += fibs.last\n      \
    \  fibs += fibs.last\n        fibs.drop(1).last", "        if (n == 0 || n ==\
    \ 1) 1\n        else fib(n-1) + fib(n-2)", "        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else fib(n - 1) + fib(n - 2)", "        if (n == 0 ||\
    \ n == 1) 1\n        else fib(n-1) + fib(n-2)", "        if (n == 0 || n == 1)\
    \ {\n            return n\n        }\n        else {\n            return fib(n\
    \ - 1) + fib(n - 2)\n        }", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs += 3\n\
    \        fibs += 4\n        fibs += 5\n        fibs += 6\n        fibs += 7\n\
    \        fibs += 8\n        fibs += 9\n        fibs += 10\n        fibs += 11\n\
    \        fibs += 12\n        fibs += 13\n        fibs += 14\n        fibs += 15\n\
    \        fibs += 16\n        fibs += 17\n        fibs += 18\n        fibs += 19\n\
    \        fibs += 20\n        fibs += 21\n        fibs += 22\n        fibs += 23\n\
    \        fibs += 24\n        fibs += 25\n        fibs += 26\n        fibs += 27\n\
    \        fibs += 28\n        fibs += 29\n        fibs += 30\n        fibs += 31\n\
    \        fibs += 32\n        fibs += 33\n        fibs += 34\n        fibs += 35\n\
    \        fibs += 36\n        fibs += 37\n        fibs += 38\n        fibs += 39\n\
    \        fibs += 40\n        fibs += 41\n        fibs += 42\n        fibs += 43\n\
    \        fibs += 44\n        fibs += 45\n        fibs += 46\n        fibs += 47\n\
    \        fibs += 48\n        fibs += 49\n        fibs += 50\n        fibs += 51\n\
    \        fibs += 52\n        fibs += 53\n        fibs += 54\n        fibs += 55\n\
    \        fibs += 56\n        fibs += 57\n        fibs += 58\n        fibs += 59\n\
    \        fibs += 60\n        fibs += 61\n        fibs += 62\n        fibs += 63\n\
    \        fibs += 64\n        fibs += 65\n        fibs += 66\n        fibs += 67\n\
    \        fibs += 68\n        fibs += 69\n        fibs += 70\n        fibs += 71\n\
    \        fibs += 72\n        fibs += 73\n        fibs += 74\n        fibs += 75\n\
    \        fibs += 76\n        fibs += 77\n        fibs += 78\n        fibs += 79\n\
    \        fibs += 80\n        fibs += 81\n        fibs += 82\n        fibs += 83\n\
    \        fibs += 84\n        fibs += 85\n        fibs += 86\n        fibs += 87\n\
    \        fibs += 88\n        fibs += 89\n        fibs += 90\n        fibs += 91\n\
    \        fibs += 92\n        fibs += 93\n        fibs += 94\n        fibs += 95\n\
    \        fibs += 96\n        fibs += 97\n        fibs += 98\n        fibs += 99",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += fibs.head\n        fibs.drop(1).foldLeft(fibs.head) {\
    \ (acc, x) => acc + x }", "        val fibs = mutable.ListBuffer(1,1)\n      \
    \  fibs ::: fibs.tail.takeWhile(_ < n).map(x => fibs.last + fibs.last)", "   \
    \     if (n <= 0) 0\n        else if (n == 1) 1\n        else fib(n-1) + fib(n-2)",
  "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs += fibs(0) + 1\n    \
    \    fibs += fibs(1) + 1\n        fibs(n)", "        if (n == 0 || n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)", "        val fibs = mutable.ArrayBuffer(1,1)\n\
    \        fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(1).last",
  "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs.update(n,fibs(n-1)+fibs(n-2))\
    \ \n        fibs(n)", "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs\
    \ += fibs(0) + 1\n        fibs += fibs(0) + 1\n        fibs(n)", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs += 1\n  \
    \      fibs += fibs.head\n        fibs += fibs.tail.head\n        fibs.take(n).last",
  "        val fibs = mutable.ListBuffer(1, 2)\n        fibs += fibs.last\n      \
    \  fibs += fibs.last\n        fibs.drop(n).last", "        if (n == 0 || n ==\
    \ 1) n\n        else fib(n-1) + fib(n-2)", "        val fibs = mutable.ArrayBuffer(1,1)\n\
    \        fibs.tail.foreach(fibs => fibs += fibs.last)\n        fibs.take(n).last",
  "        if (n <= 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)", "        if\
    \ (n == 0 || n == 1) n\n        else fib(n-1) + fib(n-2)", "        val fibs =\
    \ mutable.ArrayBuffer(1,1)\n        fibs += fibs.last\n        fibs += fibs.last\n\
    \        fibs.drop(1).last", "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)",
  "        val fibs = mutable.ListBuffer(1, 2)\n        while (fibs.size < n) {\n\
    \            fibs += fibs.head + fibs.last\n        }\n        fibs.last", " \
    \       val fibs = mutable.ArrayBuffer(1, 2)\n        while (fibs.length < n)\
    \ {\n            fibs += fibs.last\n        }\n        fibs(n)", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs += 1\n  \
    \      fibs += fibs.last\n        fibs.drop(1).last", "        val fibs = mutable.ListBuffer(1,\
    \ 2)\n        while (fibs.size < n) {\n            fibs += fibs.head + fibs.tail.head\n\
    \        }\n        fibs.last", "        if (n == 0 || n == 1) 1\n        else\
    \ fib(n-1) + fib(n-2)", "        val fibs = mutable.ArrayBuffer(1,1)\n       \
    \ fibs.tail.foreach(fibs => fibs += fibs.last)\n        fibs.take(n).last", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += 2\n        fibs += fibs.last\n        fibs.drop(1).last",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += 2\n        fibs.take(n).last", "        if (n == 0 ||\
    \ n == 1) n\n        else fib(n-1) + fib(n-2)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += fibs.head\n        fibs.drop(n).last",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += 2\n        fibs take n foreach fibs.+=\n        fibs.last",
  "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)", "        if (n == 0)\
    \ 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n - 2)", "    \
    \    val fibs = mutable.ListBuffer(1,1)\n        fibs.tail.foreach(fibs => fibs\
    \ += fibs.last)\n        fibs.take(n).last", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 0\n        fibs += 1\n        fibs += fibs.last\n        fibs.drop(1).dropRight(1).foldLeft(fibs.last)\
    \ { case (acc, x) => acc + x }", "        if (n == 0 || n == 1) 1\n        else\
    \ fib(n-1) + fib(n-2)", "        if (n == 0) 0\n        else if (n == 1) 1\n \
    \       else fib(n-1) + fib(n-2)", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs += fibs.last\n\
    \        fibs.drop(n).last", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs.take(n).sum",
  "        val fibs = mutable.ArrayBuffer(0, 1)\n        fibs += fibs.last\n     \
    \   fibs += fibs.last\n        fibs.drop(n).last", "        if (n == 0 || n ==\
    \ 1) 1\n        else fib(n-1) + fib(n-2)", "        val fibs = mutable.ListBuffer(1,\
    \ 2)\n        while(fibs.length < n) {\n            fibs += fibs.head + fibs.last\n\
    \        }\n        fibs(n)", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs += fibs(n\
    \ - 1) + fibs(n - 2)\n        fibs(n)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs += fibs.last\n\
    \        fibs.drop(n).last", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs take n\
    \ foreach { x => fibs += fibs.last + fibs.last }\n        fibs last", "      \
    \  val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs += 1\n\
    \        fibs += 2\n        fibs.take(n).sum", "        val fibs = mutable.ListBuffer(0,\
    \ 1)\n        fibs += fibs.head\n        fibs += fibs.tail.head\n        fibs.drop(n\
    \ - 1).head", "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)", "   \
    \     val fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += 2\n        fibs take n foreach { x => fibs += fibs.last\
    \ + fibs.last }\n        fibs last + 1", "        val fibs = mutable.ArrayBuffer(1,1)\n\
    \        fibs.tail.foreach(fibs => fibs += fibs.last)\n        fibs.take(n).last",
  "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs += fibs.last\n      \
    \  fibs += fibs.last\n        fibs.drop(1).last", "        val fibs = mutable.ArrayBuffer(1,1)\n\
    \        fibs += fibs(0) + 1\n        fibs += fibs(1) + 1\n        fibs(n)", " \
    \       val fibs = mutable.ArrayBuffer(0, 1)\n        fibs += fibs.last\n    \
    \    fibs += fibs.last\n        fibs.take(n).last", "        if (n == 0 || n ==\
    \ 1) 1\n        else fib(n - 1) + fib(n - 2)", "        val fibs = mutable.ArrayBuffer(1,\
    \ 2)\n        while (fibs.length < n) {\n            fibs += fibs.last\n     \
    \   }\n        fibs(n)", "        if (n <= 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        if (n == 0 || n == 1) n\n        else fib(n - 1) + fib(n - 2)",
  "        val fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 0\n       \
    \ fibs += 1\n        fibs += 2\n        fibs += 3\n        fibs += 4\n       \
    \ fibs += 5\n        fibs += 6\n        fibs += 7\n        fibs += 8\n       \
    \ fibs += 9\n        fibs += 10\n        fibs += 11\n        fibs += 12\n    \
    \    fibs += 13\n        fibs += 14\n        fibs += 15\n        fibs += 16\n\
    \        fibs += 17\n        fibs += 18\n        fibs += 19\n        fibs += 20\n\
    \        fibs += 21\n        fibs += 22\n        fibs += 23\n        fibs += 24\n\
    \        fibs += 25\n        fibs += 26\n        fibs += 27\n        fibs += 28\n\
    \        fibs += 29\n        fibs += 30\n        fibs += 31\n        fibs += 32\n\
    \        fibs += 33\n        fibs += 34\n        fibs += 35\n        fibs += 36\n\
    \        fibs += 37\n        fibs += 38\n        fibs += 39\n        fibs += 40\n\
    \        fibs += 41\n        fibs += 42\n        fibs += 43\n        fibs += 44\n\
    \        fibs += 45\n        fibs += 46\n        fibs += 47\n        fibs += 48\n\
    \        fibs += 49\n        fibs += 50\n        fibs += 51\n        fibs += 52\n\
    \        fibs += 53\n        fibs += 54\n        fibs += 55\n        fibs += 56\n\
    \        fibs += 57\n        fibs += 58\n        fibs += 59\n        fibs += 60\n\
    \        fibs += 61\n        fibs += 62\n        fibs += 63\n        fibs += 64\n\
    \        fibs += 65\n        fibs += 66\n        fibs += 67\n        fibs += 68\n\
    \        fibs += 69\n        fibs += 70\n        fibs += 71\n        fibs += 72\n\
    \        fibs += 73\n        fibs += 74\n        fibs += 75\n        fibs += 76\n\
    \        fibs += 77\n        fibs += 78\n        fibs += 79\n        fibs += 80\n\
    \        fibs += 81\n        fibs += 82\n        fibs += 83\n        fibs += 84\n\
    \        fibs += 85\n        fibs += 86\n        fibs += 87\n        fibs += 88\n\
    \        fibs += 89\n        fibs += 90\n        fibs += 91\n        fibs += 92\n\
    \        fibs += 93\n        fibs += 94\n        fibs += 95\n        fibs += 96\n\
    \        fibs += 97\n        fibs += 98\n        fibs += 99", "        val fibs\
    \ = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs += 1\n       \
    \ fibs += 2\n        fibs.drop(n - 1).head", "        val fibs = mutable.ArrayBuffer(0,\
    \ 1)\n        fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(1).last",
  "        val fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 0\n       \
    \ fibs += 1\n        fibs += 2\n        fibs take n foreach { x => fibs += fibs(x\
    \ - 1) + fibs(x - 2) }\n        fibs last", "        val fibs = mutable.ArrayBuffer(0,\
    \ 1)\n        fibs += fibs.last\n        fibs += fibs.last\n        fibs += fibs.last\n\
    \        fibs.last", "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += 2\n        fibs.take(n).last", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += fibs.head\n        fibs\
    \ += fibs.tail.head\n        fibs.drop(n).last", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += fibs.head\n        fibs.drop(1).foreach(fibs.head)\n\
    \        fibs.take(n).last", "        val fibs = mutable.ListBuffer(1, 2)\n  \
    \      fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(n).last",
  "        val fibs = mutable.ArrayBuffer(0, 1)\n        fibs += fibs(0) + 1\n   \
    \     fibs += fibs(1) + 1\n        fibs(n)", "        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else fib(n - 1) + fib(n - 2)", "        if (n <= 0) 0\n\
    \        else if (n == 1) 1\n        else fib(n - 1) + fib(n - 2)", "        val\
    \ fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 0\n        fibs += 1\n\
    \        fibs += fibs(0) + 1\n        fibs(n)", "        if (n == 0 || n == 1)\
    \ 1\n        else fib(n-1) + fib(n-2)", "        val fibs = mutable.ArrayBuffer(1,1)\n\
    \        fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(n).last",
  "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)", "        val fibs = mutable.ArrayBuffer(1,1)\n\
    \        fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(n).last",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += 2\n        fibs.drop(1).foldLeft(0)((acc, x) => acc +\
    \ x)", "        if (n == 0 || n == 1) 1\n        else fib(n-1) + fib(n-2)", " \
    \       if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        val fibs = mutable.ArrayBuffer(0,1)\n        for(i <- 1 to n)\
    \ {\n            fibs += fibs(i-1) + fibs(i-2)\n        }\n        fibs(n)", " \
    \       val fibs = mutable.ArrayBuffer(1, 2)\n        while (fibs.length < n)\
    \ {\n            fibs += fibs.last\n        }\n        fibs(n)", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs += 1\n  \
    \      fibs += fibs.head\n        fibs.drop(1).foreach(fibs.head)\n        fibs.take(n).sum",
  "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs.take(n).last",
  "        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        val fibs = mutable.ArrayBuffer(1, 2)\n        while (fibs.length\
    \ < n) {\n            fibs += fibs.last\n        }\n        fibs(n)", "      \
    \  val fibs = mutable.ArrayBuffer(1, 2)\n        fibs.take(n).foldLeft(0)((acc,\
    \ x) => acc + x)", "        val fibs = mutable.ListBuffer[Long]()\n        fibs\
    \ += 0\n        fibs += 1\n        fibs += fibs.head + fibs.tail.head\n      \
    \  fibs.drop(1).head", "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs.update(n,fibs(n+1))\n\
    \        fibs(n)", "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)",
  "        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs.tail.foreach(fibs\
    \ => fibs += fibs.last)\n        fibs.take(n).last", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs take n\
    \ foreach fibs.+=\n        fibs.last", "        val fibs = mutable.ArrayBuffer(0,\
    \ 1)\n        fibs += fibs.last\n        fibs += fibs.last\n        fibs.take(n).last",
  "        val fibs = mutable.ArrayBuffer(1, 2)\n        while(fibs.length < n) {\n\
    \            fibs += fibs.last\n        }\n        fibs(n)", "        val fibs\
    \ = mutable.ArrayBuffer(0, 1)\n        fibs += fibs.last\n        fibs += fibs.last\n\
    \        fibs.drop(n).last", "        val fibs = mutable.ArrayBuffer(0, 1)\n \
    \       fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(n).last",
  "        val fibs = mutable.ListBuffer(1, 2)\n        fibs += fibs.last\n      \
    \  fibs += fibs.last\n        fibs.drop(1).last", "        val fibs = mutable.ArrayBuffer(0,\
    \ 1)\n        fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(n).last",
  "        val fibs = mutable.ListBuffer(1,1)\n        fibs.take(n).foldLeft(0)((x,y)\
    \ => x+y)", "        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n\
    \ - 1) + fib(n - 2)", "        val fibs = mutable.ArrayBuffer(1, 2)\n        while\
    \ (fibs.length < n) {\n            fibs += fibs.last\n        }\n        fibs(n)",
  "        if (n == 0 || n == 1) {\n            return n\n        }\n        else\
    \ {\n            return fib(n - 1) + fib(n - 2)\n        }", "        if (n <=\
    \ 1) 1\n        else fib(n-1) + fib(n-2)", "        if (n == 0 || n == 1) 1\n\
    \        else fib(n-1) + fib(n-2)", "        val fibs = mutable.ArrayBuffer(0,\
    \ 1)\n        fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(1).last",
  "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs += fibs.last\n      \
    \  fibs += fibs.last\n        fibs.drop(n).last", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs take n\
    \ foreach { fibs =>\n            fibs -= 2\n            fibs -= 1 \n         \
    \   fibs -= 1\n        }\n        fibs last", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += fibs.head\n        fibs.drop(1).foldLeft(fibs.head)\
    \ { (a, b) => a + b }", "        val fibs = mutable.ListBuffer[Long]()\n     \
    \   fibs += 0\n        fibs += 1\n        fibs += fibs.last\n        fibs.drop(1).foldLeft(fibs.last)\
    \ { case (acc, n) => acc + n }", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += fibs.head + fibs.tail.head\n\
    \        fibs.drop(n).last", "        val fibs = mutable.ArrayBuffer(0, 1)\n \
    \       fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(n).last",
  "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs += fibs.last\n      \
    \  fibs += fibs.last\n        fibs.drop(n).last", "        val fibs = mutable.ListBuffer(1,\
    \ 2)\n        while (fibs.size < n) {\n            fibs += fibs.head + fibs.last\n\
    \        }\n        fibs.last", "        val fibs = mutable.ListBuffer(0, 1)\n\
    \        fibs += fibs.last\n        fibs += fibs.last\n        fibs.drop(n).last",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += fibs.head + fibs.tail.head\n        fibs.drop(1).head",
  "        if (n <= 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n \
    \       fibs += 1\n        fibs += fibs.head\n        fibs.drop(1).foreach(fibs.head)\n\
    \        fibs.take(n).sum", "        val fibs = mutable.ArrayBuffer(1, 2)\n  \
    \      fibs.take(n).foldLeft(0)((acc, x) => acc + x)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += fibs.head + fibs.tail.head\n\
    \        fibs.drop(1).head", "        if (n <= 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)", "        val fibs = mutable.ListBuffer[Long]()\n        fibs +=\
    \ 0\n        fibs += 1\n        fibs += fibs.head + fibs.tail.head\n        fibs.drop(n).last",
  "        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        if (n == 0 || n == 1) n\n        else fib(n-1) + fib(n-2)",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += 2\n        fibs.take(n).sum", "        val fibs = mutable.ListBuffer(1,\
    \ 2)\n        fibs ::: fibs.tail.scanLeft(0)(_ + _)\n            .takeWhile(_\
    \ < n)\n            .last", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 0\n        fibs += 1\n        fibs += fibs(0) + 1\n        fibs(n)",
  "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs.drop(n\
    \ - 1).last", "        if (n == 0 || n == 1) n\n        else fib(n-1) + fib(n-2)",
  "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs.tail.foreach(fibs =>\
    \ fibs += fibs.last)\n        fibs.take(n).last", "        val fibs = mutable.ListBuffer(1,\
    \ 2)\n        for (i <- 1 to n) {\n            fibs += fibs.last\n        }\n\
    \        fibs.last", "        val fibs = mutable.ArrayBuffer(0, 1)\n        fibs\
    \ += fibs.last\n        fibs += fibs.last\n        fibs.drop(n).last", "     \
    \   if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs.tail.foreach(fibs.update(_+_))\n\
    \        fibs.take(n).last", "        if (n == 0) 0\n        else if (n == 1)\
    \ 1\n        else fib(n - 1) + fib(n - 2)", "        if (n <= 1) 1\n        else\
    \ fib(n-1) + fib(n-2)", "        if (n == 0) 0\n        else if (n == 1) 1\n \
    \       else fib(n - 1) + fib(n - 2)", "        val fibs = mutable.ArrayBuffer(1,1)\n\
    \        fibs.update(n) {fibs(n-1) + fibs(n-2)}\n        fibs(n)", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs += 1\n  \
    \      fibs += fibs.head\n        fibs.drop(1).head", "        if (n == 0 || n\
    \ == 1) 1\n        else fib(n-1) + fib(n-2)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += fibs.head\n        fibs.drop(1).foldLeft(fibs.head)((a,\
    \ b) => a + b)", "        if (n <= 0) 0\n        else if (n == 1) 1\n        else\
    \ fib(n - 1) + fib(n - 2)", "        val fibs = mutable.ListBuffer[Long]()\n \
    \       fibs += 0\n        fibs += 1\n        fibs += fibs.head\n        fibs.drop(1).foldLeft(fibs.head)((a,\
    \ b) => a + b)", "        val fibs = mutable.ListBuffer(1,1)\n        fibs.tail.foreach(fibs\
    \ => fibs += fibs.last)\n        fibs.take(n).last", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 0\n        fibs += 1\n        fibs += fibs.last\n        fibs.drop(1).foreach(fibs.updated)\n\
    \        fibs.take(n).last", "        val fibs = mutable.ListBuffer(1,1)\n   \
    \     fibs ::: fibs.tail.takeWhile(_ < n).map(x => fibs.last + fibs.last)", " \
    \       val fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 0\n      \
    \  fibs += 1\n        fibs += 2\n        fibs take n foreach { x => fibs += fibs(x\
    \ - 1) + fibs(x - 2) }\n        fibs last", "        if (n <= 1) 1\n        else\
    \ fib(n-1) + fib(n-2)", "        val fibs = mutable.ArrayBuffer(0, 1)\n      \
    \  fibs += fibs.head\n        fibs += fibs.tail\n        fibs.take(n).sum", " \
    \       if (n <= 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs += fibs.last\n\
    \        fibs += fibs.last\n        fibs.drop(n).last", "        if (n == 0) 0\n\
    \        else if (n == 1) 1\n        else fib(n - 1) + fib(n - 2)", "        val\
    \ fibs = mutable.ArrayBuffer(0, 1)\n        fibs += fibs.head\n        fibs +=\
    \ fibs.tail\n        fibs(n)", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 0\n        fibs += 1\n        fibs += 2\n        fibs take n\
    \ foreach { x => fibs += fibs(x - 1) + fibs(x - 2) }\n        fibs last", "  \
    \      val fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 0\n       \
    \ fibs += 1\n        fibs += 2\n        fibs.take(n).last", "        val fibs\
    \ = mutable.ArrayBuffer(0, 1)\n        fibs += fibs.last\n        fibs += fibs.last\n\
    \        fibs.drop(1).last", "        val fibs = mutable.ArrayBuffer(1,1)\n  \
    \      fibs.update(n,fibs(n-1)+fibs(n-2)) \n        fibs(n)", "        val fibs\
    \ = mutable.ListBuffer(1, 2)\n        while (fibs.size < n) {\n            fibs\
    \ += fibs.head + fibs.last\n        }\n        fibs.last", "        if (n == 0\
    \ || n == 1) n\n        else fib(n - 1) + fib(n - 2)", "        if (n <= 0) 0\n\
    \        else if (n == 1) 1\n        else fib(n - 1) + fib(n - 2)", "        if\
    \ (n <= 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n - 2)",
  "        if (n == 0 || n == 1) 1\n        else fib(n - 1) + fib(n - 2)", "     \
    \   if (n <= 1) 1\n        else fib(n - 1) + fib(n - 2)", "        val fibs =\
    \ mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs += 1\n        fibs\
    \ += fibs.head + fibs.tail.head\n        fibs.drop(n).last", "        if (n ==\
    \ 0 || n == 1) 1\n        else fib(n-1) + fib(n-2)", "        val fibs = mutable.ListBuffer(1,\
    \ 2)\n        fibs ::: fibs.take(n).drop(1)", "        val fibs = mutable.ListBuffer(1,1)\n\
    \        fibs.tail.foreach(fibs => fibs += fibs.last)\n        fibs.take(n).last",
  "        if (n <= 1) 1\n        else fib(n-1) + fib(n-2)", "        if (n <= 1)\
    \ 1\n        else fib(n-1) + fib(n-2)", "        if (n <= 1) 1\n        else fib(n-1)\
    \ + fib(n-2)", "        val fibs = mutable.ListBuffer[Long]()\n        fibs +=\
    \ 0\n        fibs += 1\n        fibs += 2\n        fibs.take(n).sum", "      \
    \  if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        if (n <= 0) 0\n        else if (n == 1) 1\n        else fib(n\
    \ - 1) + fib(n - 2)", "        val fibs = mutable.ListBuffer(1,1)\n        fibs\
    \ += fibs.last\n        fibs += fibs.last\n        fibs.drop(1).last", "     \
    \   val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs +=\
    \ 1\n        fibs += fibs.head\n        fibs += fibs.tail.head\n        fibs.drop(n).last",
  "        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)", "        val fibs = mutable.ArrayBuffer(1,1)\n        fibs += fibs.last\n\
    \        fibs += fibs.last\n        fibs.drop(1).last", "        if (n <= 1) 1\n\
    \        else fib(n-1) + fib(n-2)"]
stop_tokens:
- "\n    }\n"
