language: scala
name: HumanEval_161_solve
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          result.append(s.charAt(i).toUpper)\n            else\n            \
    \    result.append(s.charAt(i))\n        return result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc7gw5vyq.scala:20)\n\tat Problem.main(tmpc7gw5vyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a'){\n                result.append(\"A\")\n            }else if(c == 'b'){\n\
    \                result.append(\"B\")\n            }else if(c == 'c'){\n     \
    \           result.append(\"C\")\n            }else if(c == 'd'){\n          \
    \      result.append(\"D\")\n            }else if(c == 'e'){\n               \
    \ result.append(\"E\")\n            }else if(c == 'f'){\n                result.append(\"\
    F\")\n            }else if(c == 'g'){\n                result.append(\"G\")\n\
    \            }else if(c == 'h'){\n                result.append(\"H\")\n     \
    \       }else if(c == 'i'){\n                result.append(\"I\")\n          \
    \  }else if(c == 'j'){\n                result.append(\"J\")\n            }else\
    \ if(c == 'k'){\n                result.append(\"K\")\n            }else if(c\
    \ == 'l'){\n                result.append(\"L\")\n            }else if(c == 'm'){\n\
    \                result.append(\"M\")\n            }else if(c == 'n'){\n     \
    \           result.append(\"N\")\n            }else if(c == 'o'){\n          \
    \      result.append(\"O\")\n            }else if(c == 'p'){\n               \
    \ result.append(\"P\")\n            }else if(c == 'q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r'){\n                result.append(\"R\")\n\
    \            }else if(c == 's'){\n                result.append(\"S\")\n     \
    \       }else if(c == 't'){\n                result.append(\"T\")\n          \
    \  }else if(c == 'u'){\n                result.append(\"U\")\n            }else\
    \ if(c == 'v'){\n                result.append(\"V\")\n            }else if(c\
    \ == 'w'){\n                result.append(\"W\")\n            }else if(c == 'x'){\n\
    \                result.append(\"X\")\n            }else if(c == 'y'){\n     \
    \           result.append(\"Y\")\n            }else if(c == 'z'){\n          \
    \      result.append(\"Z\")\n            }else{\n                result.append(c)\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3eq__7x1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n         \
    \   if(c == c.toUpperCase)\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else\n            {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpclursgix.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(c == c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpclursgix.scala:17:32 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                     value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i).toLowerCase\
    \ != s.charAt(i).toUpperCase && chars.contains(s.charAt(i)))\n               \
    \ chars.remove(s.charAt(i))\n            else\n                chars.add(s.charAt(i))\n\
    \        chars.foreach { c => result.append(c.toUpperCase) }\n        result.append(s.toUpperCase)\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcl263qzb.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpcl263qzb.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (s.charAt(i).toLowerCase !=\
    \ s.charAt(i).toUpperCase && chars.contains(s.charAt(i)))\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = s.toCharArray\n        val charsReversed =\
    \ chars.reverse\n        val charsReversedString = charsReversed.mkString.reverse\n\
    \        charsReversedString.toUpperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu2c8fil3.scala:17)\n\tat Problem.main(tmpu2c8fil3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprca6uev6.scala:20)\n\tat Problem.main(tmprca6uev6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.Set[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n\n        chars.foreach { c =>\n        \
    \    if(result.length == 0)\n                result += c\n            else\n \
    \               result += c.toUpper\n        }\n        if(result.length == 0)\n\
    \            result.reverse\n        else\n            result.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsz_m74xh.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsz_m74xh.scala:26:19 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            result.reverse\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    StringBuilder\n\
    \e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsz_m74xh.scala:28:19 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            result.reverse\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    StringBuilder\n\
    \e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u'){\n                result.append(c.toUpperCase)\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxekeomo8.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          result.append(s.charAt(i).toUpper)\n            else\n            \
    \    result.append(s.charAt(i))\n        return result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc7gw5vyq.scala:20)\n\tat Problem.main(tmpc7gw5vyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.append((s.charAt(i) - 'a').toString)\n            }\n    \
    \        else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i)\
    \ - 'A').toString)\n            }\n            else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1bs5xenk.scala:26)\n\tat Problem.main(tmp1bs5xenk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           result.append((s.charAt(i) - 'a').toString)\n            else\n  \
    \              result.append(s.charAt(i))\n        return result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndvlhkcq.scala:20)\n\tat Problem.main(tmpndvlhkcq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = s.toCharArray\n        val charsReversed =\
    \ chars.reverse\n        val charsReversedString = charsReversed.mkString.toUpperCase\n\
    \        val charsReversedString2 = charsReversed.mkString.toLowerCase\n     \
    \   if (chars.isEmpty) charsReversedString\n        else charsReversedString2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmbgcrh80.scala:19)\n\tat Problem.main(tmpmbgcrh80.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.Set[Char]()\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) != 'a')\n                chars += s.charAt(i)\n\
    \        chars.toList.reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_j7ra2u5.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toLower\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbfc_mme3.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n       \
    \ chars.toList.reverse.foldLeft(\"\"){ (res, c) => res + c.toUpperCase() }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7avi05nj.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase\
    \ || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n     \
    \       return s\n        }\n        else{\n            chars.reverse\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeyspak3y.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpeyspak3y.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          result.append((s.charAt(i) - 'a').toString)\n            else\n   \
    \             result.append(s.charAt(i))\n        return result.toString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe88h4w63.scala:20)\n\tat Problem.main(tmpe88h4w63.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length){\n            if(s.charAt(i) != 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        chars.toList.sortWith(_ <\
    \ _).reverse.mkString.toUpperCase\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxy7q92nh.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toLower\n        chars.toSeq.reverse.mkString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaoeivdwm.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                result.add(s.reverse)\n\
    \            }\n            else{\n                result.add(s)\n           \
    \ }\n        }\n        result.toList.reverse.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprpxpov5e.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase\
    \ || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n                result.append((s.charAt(i).toLowerCase).reverse)\n\
    \            }else{\n                result.append(s.charAt(i))\n            }\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjd8jo9ps.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjd8jo9ps.scala:14:43 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m                result.append((s.charAt(i).toLowerCase).reverse)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                chars += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n\
    \            return s\n        }\n        chars.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo0ncoh9m.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.Set[Char](s.toCharArray)\n       \
    \ chars.foreach { c =>\n            val upper = c.toUpper\n            val lower\
    \ = c.toLower\n            if (chars.contains(upper) || chars.contains(lower))\
    \ {\n                chars.remove(upper)\n                chars.remove(lower)\n\
    \            }\n        }\n        if (chars.isEmpty) {\n            s.reverse\n\
    \        } else {\n            chars.toList.reverse.mkString(\"\")\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw24egup9.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m](s.toCharArray)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a') result.append(\"A\")\n            else if(c == 'b') result.append(\"B\"\
    )\n            else if(c == 'c') result.append(\"C\")\n            else if(c ==\
    \ 'd') result.append(\"D\")\n            else if(c == 'e') result.append(\"E\"\
    )\n            else if(c == 'f') result.append(\"F\")\n            else if(c ==\
    \ 'g') result.append(\"G\")\n            else if(c == 'h') result.append(\"H\"\
    )\n            else if(c == 'i') result.append(\"I\")\n            else if(c ==\
    \ 'j') result.append(\"J\")\n            else if(c == 'k') result.append(\"K\"\
    )\n            else if(c == 'l') result.append(\"L\")\n            else if(c ==\
    \ 'm') result.append(\"M\")\n            else if(c == 'n') result.append(\"N\"\
    )\n            else if(c == 'o') result.append(\"O\")\n            else if(c ==\
    \ 'p') result.append(\"P\")\n            else if(c == 'q') result.append(\"Q\"\
    )\n            else if(c == 'r') result.append(\"R\")\n            else if(c ==\
    \ 's') result.append(\"S\")\n            else if(c == 't') result.append(\"T\"\
    )\n            else if(c == 'u') result.append(\"U\")\n            else if(c ==\
    \ 'v') result.append(\"V\")\n            else if(c == 'w') result.append(\"W\"\
    )\n            else if(c == 'x') result.append(\"X\")\n            else if(c ==\
    \ 'y') result.append(\"Y\")\n            else if(c == 'z') result.append(\"Z\"\
    )\n            else result.append(c)\n        }\n        result.toString()\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphlqnadg7.scala:45)\n\tat Problem.main(tmphlqnadg7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val strList = s.toList\n        strList.map(x => x.toUpperCase).foldLeft(\"\
    \")( (acc, x) => acc + (if (x.isLetter) x.toUpperCase() else x) )\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphslgqsur.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase).foldLeft(\e\
    [31m\"\"\e[0m)( (\e[36macc\e[0m, \e[36mx\e[0m) => acc + (\e[33mif\e[0m (x.isLetter)\
    \ x.toUpperCase() \e[33melse\e[0m x) )\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphslgqsur.scala:12:79\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strList.map(\e[36mx\e\
    [0m => x.toUpperCase).foldLeft(\e[31m\"\"\e[0m)( (\e[36macc\e[0m, \e[36mx\e[0m)\
    \ => acc + (\e[33mif\e[0m (x.isLetter) x.toUpperCase() \e[33melse\e[0m x) )\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value isLetter is not a member of Nothing\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmphslgqsur.scala:12:91 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase).foldLeft(\e[31m\"\"\
    \e[0m)( (\e[36macc\e[0m, \e[36mx\e[0m) => acc + (\e[33mif\e[0m (x.isLetter) x.toUpperCase()\
    \ \e[33melse\e[0m x) )\n\e[31m\e[31m   |\e[0m                                \
    \                                                         ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            value toUpperCase is not a member of\
    \ Nothing\n3 errors found\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.reverse\n        val letters = mutable.Set[Char]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                letters += s.charAt(i)\n            }\n        }\n\
    \        if(letters.isEmpty){\n            return result\n        }\n        val\
    \ newResult = result\n        for(i <- 0 until letters.length){\n            newResult\
    \ = newResult.replace(s.charAt(i), letters.charAt(i))\n        }\n        return\
    \ newResult\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_xvptdbs.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp_xvptdbs.scala:23:22 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            newResult = newResult.replace(s.charAt(i),\
    \ letters.charAt(i))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val newResult\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.Set[Char](s.toCharArray)\n\
    \        chars.foreach { c =>\n            val upper = c.toUpperCase\n       \
    \     val lower = c.toLowerCase\n            if (chars.contains(upper)) {\n  \
    \              chars.remove(upper)\n                chars.remove(lower)\n    \
    \            chars.add(upper)\n                chars.add(lower)\n            }\n\
    \        }\n        chars.foreach { c =>\n            result.append(c)\n     \
    \   }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpftae5n2e.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m](s.toCharArray)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.remove(c)\n            } else {\n                chars += c\n       \
    \     }\n        }\n        if (chars.isEmpty) {\n            result.append(s)\n\
    \        } else {\n            chars.foreach { c =>\n                if (c.isUpper)\
    \ {\n                    result.append(c.toLower)\n                } else {\n\
    \                    result.append(c.toUpper)\n                }\n           \
    \ }\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig1oavi1.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                result.add(\"\
    A\".toUpperCase)\n            }\n            else{\n                result.add(c)\n\
    \            }\n        }\n        result.reverse.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmqpnerxe.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length){\n            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString.toUpperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnp7zio2h.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c == 'a'){\n   \
    \             result.append(\"A\")\n            }else if(c == 'b'){\n        \
    \        result.append(\"B\")\n            }else if(c == 'c'){\n             \
    \   result.append(\"C\")\n            }else if(c == 'd'){\n                result.append(\"\
    D\")\n            }else if(c == 'e'){\n                result.append(\"E\")\n\
    \            }else if(c == 'f'){\n                result.append(\"F\")\n     \
    \       }else if(c == 'g'){\n                result.append(\"G\")\n          \
    \  }else if(c == 'h'){\n                result.append(\"H\")\n            }else\
    \ if(c == 'i'){\n                result.append(\"I\")\n            }else if(c\
    \ == 'j'){\n                result.append(\"J\")\n            }else if(c == 'k'){\n\
    \                result.append(\"K\")\n            }else if(c == 'l'){\n     \
    \           result.append(\"L\")\n            }else if(c == 'm'){\n          \
    \      result.append(\"M\")\n            }else if(c == 'n'){\n               \
    \ result.append(\"N\")\n            }else if(c == 'o'){\n                result.append(\"\
    O\")\n            }else if(c == 'p'){\n                result.append(\"P\")\n\
    \            }else if(c == 'q'){\n                result.append(\"Q\")\n     \
    \       }else if(c == 'r'){\n                result.append(\"R\")\n          \
    \  }else if(c == 's'){\n                result.append(\"S\")\n            }else\
    \ if(c == 't'){\n                result.append(\"T\")\n            }else if(c\
    \ == 'u'){\n                result.append(\"U\")\n            }else if(c == 'v'){\n\
    \                result.append(\"V\")\n            }else if(c == 'w'){\n     \
    \           result.append(\"W\")\n            }else if(c == 'x'){\n          \
    \      result.append(\"X\")\n            }else if(c == 'y'){\n               \
    \ result.append(\"Y\")\n            }else if(c == 'z'){\n                result.append(\"\
    Z\")\n            }else{\n                result.append(c)\n            }\n  \
    \      }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_jed9flg.scala:73)\n\tat Problem.main(tmp_jed9flg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for\
    \ (i <- 0 until s.length)\n            if (s(i) >= 'a' && s(i) <= 'z')\n     \
    \           result(i) = s(i).toUpper + result(i)\n            else\n         \
    \       result(i) = s(i)\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwj490x77.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                result(i) = s(i).toUpper\
    \ + result(i)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Int\n\e[31m   |\e[0m\
    \                            Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase\
    \ || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n                chars\
    \ += s.charAt(i)\n            }else{\n                chars += s.charAt(i).toLowerCase\n\
    \            }\n        }\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9mq0t74b.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9mq0t74b.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          result.append((s.charAt(i) - 'a').toUpperCase)\n            else\n\
    \                result.append((s.charAt(i) - 'a').toLowerCase)\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoz939a31.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpperCase)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toUpperCase is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoz939a31.scala:16:50\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                result.append((s.charAt(i)\
    \ - \e[31m'a'\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               value toLowerCase is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val strList = s.toList\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strList.map(\e[36mx\e[0m => x.toLowerCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        strList.map(\e[36mx\e[0m => x.toLowerCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        strList.map(\e[36mx\e[0m => x.toLowerCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659979388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.toUpperCase\n        val reversed = result.reverse\n\
    \        if (result.isEmpty) reversed\n        else result.takeWhile(_ != ' ').mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfmwq72e_.scala:17)\n\tat Problem.main(tmpfmwq72e_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val strList = s.toList\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \        strList.map(x => x.toLowerCase)\n        strList.map(x => x.toUpperCase)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strList.map(\e[36mx\e[0m => x.toLowerCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        strList.map(\e[36mx\e[0m => x.toLowerCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        strList.map(\e[36mx\e[0m => x.toLowerCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpejwllc95.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659979388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                result.append((c\
    \ to 'A').toString)\n            }\n            else{\n                result.append(c)\n\
    \            }\n        }\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiw765mgz.scala:21:15\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        result.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    StringBuilder\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.toUpperCase\n        val reversed = result.reverse\n\
    \        val noLetters = reversed.replaceAll(\"[^A-Z]\", \"\")\n        if (noLetters.isEmpty)\
    \ result\n        else noLetters\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxxfbxdrh.scala:18)\n\tat Problem.main(tmpxxfbxdrh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toLower\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbfc_mme3.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i\
    \ <- 0 until s.length) chars += s(i)\n        chars.toList.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqcwy0ue4.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                chars += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n\
    \            return s\n        }\n        chars.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo0ncoh9m.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val letters =\
    \ mutable.Set[Char]()\n        for(i <- 0 until s.length){\n            if(s.charAt(i).toLowerCase\
    \ == s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n\
    \                letters += s.charAt(i)\n            }\n            else{\n  \
    \              result += s.charAt(i)\n            }\n        }\n        if(letters.size\
    \ == 0){\n            result += s\n        }\n        else{\n            for(i\
    \ <- 0 until letters.size){\n                result += s.charAt(letters(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2wqxs2f.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpo2wqxs2f.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo2wqxs2f.scala:22:22 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            result += s\n\e[31m\e[31m   |\e[0m           \
    \           ^\e[0m\n\e[31m   |\e[0m                      Found:    (s : String)\n\
    \e[31m   |\e[0m                      Required: Char\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           result.append((s.charAt(i) - 'a').toString)\n            else\n  \
    \              result.append(s.charAt(i))\n        return result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndvlhkcq.scala:20)\n\tat Problem.main(tmpndvlhkcq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(i == 0 || s.charAt(i) != s.charAt(i-1))\n        \
    \        result.append(s.charAt(i))\n            else\n                result.append(s.charAt(i).toUpper)\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoj7u49fl.scala:20)\n\tat Problem.main(tmpoj7u49fl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                chars += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n\
    \            return s\n        }\n        chars.reverse.mkString.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1y0ch5q.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(c <-\
    \ s) {\n            if(c == 'a') chars += 'A'\n            else if(c == 'A') chars\
    \ += 'a'\n            else chars += c\n        }\n        if(chars.isEmpty) s.reverse\n\
    \        else chars.toSeq.reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3ske6iz.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n        {\n            val c = s.charAt(i)\n            if(c.isLetter)\
    \ \n            {\n                val upper = c.toUpperCase\n               \
    \ val lower = c.toLowerCase\n                if(upper != lower)\n            \
    \        result.append(upper)\n                else\n                    result.append(lower)\n\
    \            }\n            else\n                result.append(c)\n        }\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe5x1dqkj.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mupper\e[0m = c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe5x1dqkj.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mlower\e[0m = c.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                result.append((c\
    \ to 'A').toString)\n            }else if(c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U'){\n                result.append((c to 'a').toString)\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpytklcgu3.scala:25)\n\tat Problem.main(tmpytklcgu3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.toUpperCase\n        val reversed = result.map(c\
    \ => if (c.isLetter) c.toUpperCase(c) else c)\n        if (result.isEmpty) result\n\
    \        else reversed.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvy0a5wlg.scala:12:57 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = result.map(\e\
    [36mc\e[0m => \e[33mif\e[0m (c.isLetter) c.toUpperCase(c) \e[33melse\e[0m c)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u'){\n                result.append((c\
    \ to 'A').toString)\n            }\n            else{\n                result.append(c)\n\
    \            }\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgycym07n.scala:24)\n\tat Problem.main(tmpgycym07n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s)\n        val chars =\
    \ result.chars\n        chars.foreach(c => {\n            val lower = c.toLower\n\
    \            val upper = c.toUpper\n            if (lower == upper) {\n      \
    \          chars(chars.indexOf(c)) = upper\n            } else {\n           \
    \     chars(chars.indexOf(c)) = lower\n            }\n        })\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9m3c62w1.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        chars.foreach(\e[36mc\e[0m => {\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach is not a member\
    \ of java.util.stream.IntStream - did you mean chars.forEach?\n1 error found\n"
  stdout: ''
  timestamp: 1659979391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.reverse\n        val letters = result.filter(_.isLetter).toList\n\
    \        if (letters.isEmpty) result.reverse\n        else letters.foldLeft(result.reverse)(_\
    \ ++ _)\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpj5mjtlbr.scala:14:48 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m letters.foldLeft(result.reverse)(_\
    \ ++ _)\n\e[31m\e[31m   |\e[0m                                              ^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35m++\e[0m in \e[33mclass\e[0m \e[35mStringOps\e[0m with types\n\e[31m   |\e\
    [0m (xs: String): String\n\e[31m   |\e[0m (suffix: IterableOnce[Char]): String\n\
    \e[31m   |\e[0m [B >: Char](suffix: Iterable[B]): IndexedSeq[B]\n\e[31m   |\e\
    [0mmatch arguments ((_$3 : Char))\n1 error found\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrwaho49.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n        {\n            if(s.charAt(i).toLowerCase == s.charAt(i))\n\
    \            {\n                result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }\n            else\n            {\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvrrf1_q3.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase ==\
    \ s.charAt(i))\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value toLowerCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvrrf1_q3.scala:16:43 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value toUpperCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (c\
    \ <- s) {\n            if (c.isLetter) chars += c.toUpper\n            else chars\
    \ += c.toLower\n        }\n        if (chars.isEmpty) s.reverse\n        else\
    \ chars.reverse.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfcglrdla.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val strList = s.toList\n        strList.map(x => x.toUpperCase).foldLeft(\"\
    \"){ (res, x) => res + x }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"\
    4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsgkliz__.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase).foldLeft(\e\
    [31m\"\"\e[0m){ (\e[36mres\e[0m, \e[36mx\e[0m) => res + x }\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \           value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val strList = s.toList\n        strList.foldLeft(\"\"\
    ){ (result, c) =>\n            val isLetter = c.isLetter\n            val isUpper\
    \ = c.toUpper == c\n            val isLower = c.toLower == c\n            if(isLetter)\
    \ {\n                if(isUpper) {\n                    result + c.toUpperCase\n\
    \                } else if(isLower) {\n                    result + c.toLowerCase\n\
    \                } else {\n                    result + c\n                }\n\
    \            } else if(isUpper) {\n                result + c.toUpperCase\n  \
    \          } else if(isLower) {\n                result + c.toLowerCase\n    \
    \        } else {\n                result\n            }\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfjldm5qw.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    result + c.toUpperCase\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfjldm5qw.scala:20:31 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    result + c.toLowerCase\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfjldm5qw.scala:25:27 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                result + c.toUpperCase\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpfjldm5qw.scala:27:27 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                result + c.toLowerCase\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \           value toLowerCase is not a member of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1659979399
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            result += (if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\
    \ \n                        s.charAt(i).toUpper else s.charAt(i).toLower)\n  \
    \      result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpay7p2xf1.scala:19)\n\tat Problem.main(tmpay7p2xf1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a'){\n                result.append(\"A\")\n            }else if(c == 'A'){\n\
    \                result.append(\"a\")\n            }else if(c == 'b'){\n     \
    \           result.append(\"B\")\n            }else if(c == 'B'){\n          \
    \      result.append(\"b\")\n            }else if(c == 'c'){\n               \
    \ result.append(\"C\")\n            }else if(c == 'C'){\n                result.append(\"\
    c\")\n            }else if(c == 'd'){\n                result.append(\"D\")\n\
    \            }else if(c == 'D'){\n                result.append(\"d\")\n     \
    \       }else if(c == 'e'){\n                result.append(\"E\")\n          \
    \  }else if(c == 'E'){\n                result.append(\"e\")\n            }else\
    \ if(c == 'f'){\n                result.append(\"F\")\n            }else if(c\
    \ == 'F'){\n                result.append(\"f\")\n            }else if(c == 'g'){\n\
    \                result.append(\"G\")\n            }else if(c == 'G'){\n     \
    \           result.append(\"g\")\n            }else if(c == 'h'){\n          \
    \      result.append(\"H\")\n            }else if(c == 'H'){\n               \
    \ result.append(\"h\")\n            }else if(c == 'i'){\n                result.append(\"\
    I\")\n            }else if(c == 'I'){\n                result.append(\"i\")\n\
    \            }else if(c == 'j'){\n                result.append(\"J\")\n     \
    \       }else if(c == 'J'){\n                result.append(\"j\")\n          \
    \  }else if(c == 'k'){\n                result.append(\"K\")\n            }else\
    \ if(c == 'K'){\n                result.append(\"k\")\n            }else if(c\
    \ == 'l'){\n                result.append(\"L\")\n            }else if(c == 'L'){\n\
    \                result.append(\"l\")\n            }else if(c == 'm'){\n     \
    \           result.append(\"M\")\n            }else if(c == 'M'){\n          \
    \      result.append(\"m\")\n            }else if(c == 'n'){\n               \
    \ result.append(\"N\")\n            }else if(c == 'N'){\n                result.append(\"\
    n\")\n            }else if(c == 'o'){\n                result.append(\"O\")\n\
    \            }else if(c == 'O'){\n                result.append(\"o\")\n     \
    \       }else if(c == 'p'){\n                result.append(\"P\")\n          \
    \  }else if(c == 'P'){\n                result.append(\"p\")\n            }else\
    \ if(c == 'q'){\n                result.append(\"Q\")\n            }else \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3oa7j53y.scala:80:17 ---------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m            }\e[33melse\e[0m \n\e[31m\e[31m   |\e[0m\
    \                 ^\e[0m\n\e[31m   |\e[0m                 expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp3oa7j53y.scala:94:0 ----------------------------\e[0m\e[0m\n\e[31m94\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3oa7j53y.scala:93:1 ---------------------\e\
    [0m\e[0m\n\e[31m93 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp3oa7j53y.scala:82:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m82 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659979399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ c.toUpperCase){\n                result.setCharAt(i, c.toUpperCase)\n      \
    \      }\n            else{\n                result.setCharAt(i, c.toLowerCase)\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc_mr62ro.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(c == c.toUpperCase){\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpc_mr62ro.scala:15:38 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m                result.setCharAt(i, c.toUpperCase)\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpc_mr62ro.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                result.setCharAt(i, c.toLowerCase)\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1659979401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length)\n        {\n            if(s.charAt(i) >= 'a' &&\
    \ s.charAt(i) <= 'z')\n            {\n                result.add(s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase)\n            }\n            else\n            {\n\
    \                result.add(s.charAt(i))\n            }\n        }\n        if(result.isEmpty)\n\
    \        {\n            return s\n        }\n        else\n        {\n       \
    \     return result.reverse.mkString(\"\")\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyrmsm9jn.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length){\n            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkb966u94.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                result.append((c).toUpper)\n\
    \            }else{\n                result.append((c).toLower)\n            }\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuya2hkxa.scala:23)\n\tat Problem.main(tmpuya2hkxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length)\n            if(i == 0 || s.charAt(i) == ' ')\n       \
    \         result.append(\" \")\n            else\n                result.append(s.charAt(i).toUpper)\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_vzsxah.scala:20)\n\tat Problem.main(tmp2_vzsxah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c == 'a'){\n   \
    \             result.append(c.toUpperCase)\n            }else if(c == 'A'){\n\
    \                result.append(c.toLowerCase)\n            }else{\n          \
    \      result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph5kp3usc.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmph5kp3usc.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = s.toList\n        chars.reverse.foldLeft(\"\
    \")( (acc, c) => if (isLetter(c.toChar)) acc else c + acc)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu3l4w_bp.scala:12:52 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        chars.reverse.foldLeft(\e[31m\"\"\e[0m)( (\e\
    [36macc\e[0m, \e[36mc\e[0m) => \e[33mif\e[0m (isLetter(c.toChar)) acc \e[33melse\e\
    [0m c + acc)\n\e[31m\e[31m   |\e[0m                                          \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \                Not found: isLetter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrwaho49.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.Set[Char](s.toCharArray)\n       \
    \ chars.foreach { char =>\n            if (char >= 'a' && char <= 'z') {\n   \
    \             chars.updated(char - 'a' + 'A')\n            } else if (char >=\
    \ 'A' && char <= 'Z') {\n                chars.updated(char - 'A' + 'a')\n   \
    \         } else {\n                chars.updated(char)\n            }\n     \
    \   }\n        chars.toList.mkString.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph9muqp3y.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m](s.toCharArray)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n\
    \            }else{\n                result.add(s.charAt(i))\n            }\n\
    \        }\n        if(result.isEmpty){\n            result.reverse\n        }else{\n\
    \            result\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0y4tiox3.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979399
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(c <-\
    \ s.toCharArray) {\n            if(c == 'a') chars += 'A'\n            else if(c\
    \ == 'b') chars += 'B'\n            else if(c == 'c') chars += 'C'\n         \
    \   else if(c == 'd') chars += 'D'\n            else if(c == 'e') chars += 'E'\n\
    \            else if(c == 'f') chars += 'F'\n            else if(c == 'g') chars\
    \ += 'G'\n            else if(c == 'h') chars += 'H'\n            else if(c ==\
    \ 'i') chars += 'I'\n            else if(c == 'j') chars += 'J'\n            else\
    \ if(c == 'k') chars += 'K'\n            else if(c == 'l') chars += 'L'\n    \
    \        else if(c == 'm') chars += 'M'\n            else if(c == 'n') chars +=\
    \ 'N'\n            else if(c == 'o') chars += 'O'\n            else if(c == 'p')\
    \ chars += 'P'\n            else if(c == 'q') chars += 'Q'\n            else if(c\
    \ == 'r') chars += 'R'\n            else if(c == 's') chars += 'S'\n         \
    \   else if(c == 't') chars += 'T'\n            else if(c == 'u') chars += 'U'\n\
    \            else if(c == 'v') chars += 'V'\n            else if(c == 'w') chars\
    \ += 'W'\n            else if(c == 'x') chars += 'X'\n            else if(c ==\
    \ 'y') chars += 'Y'\n            else if(c == 'z') chars += 'Z'\n            else\
    \ chars += c\n        }\n        if(chars.size == 0) s\n        else chars.toList.reverse.mkString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfwfvhf6h.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = s.toCharArray\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until chars.length){\n            if(chars(i) >= 'a' && chars(i)\
    \ <= 'z'){\n                result.add(chars(i).toUpper)\n            }\n    \
    \        else if(chars(i) >= 'A' && chars(i) <= 'Z'){\n                result.add(chars(i).toLower)\n\
    \            }\n            else{\n                result.add(chars(i))\n    \
    \        }\n        }\n        return result.toString.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf1o_yl6a.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.toUpperCase\n        val reversed = result.reverse\n\
    \        val letters = result.filter(_ >= 'A' && _ <= 'Z').length\n        if\
    \ (letters == 0) {\n            reversed\n        } else {\n            val reversedLetters\
    \ = reversed.filter(_ >= 'A' && _ <= 'Z').length\n            if (reversedLetters\
    \ == 0) {\n                reversed\n            } else {\n                val\
    \ reversedLettersCount = reversed.filter(_ >= 'A' && _ <= 'Z').length\n      \
    \          if (reversedLettersCount == 0) {\n                    reversed\n  \
    \              } else {\n                    val reversedLettersCount2 = reversed.filter(_\
    \ >= 'A' && _ <= 'Z').length\n                    if (reversedLettersCount ==\
    \ 0) {\n                        reversed\n                    } else {\n     \
    \                   val reversedLettersCount3 = reversed.filter(_ >= 'A' && _\
    \ <= 'Z').length\n                        if (reversedLettersCount == 0) {\n \
    \                           reversed\n                        } else {\n     \
    \                       val reversedLettersCount4 = reversed.filter(_ >= 'A' &&\
    \ _ <= 'Z').length\n                            if (reversedLettersCount == 0)\
    \ {\n                                reversed\n                            } else\
    \ {\n                                val reversedLettersCount5 = reversed.filter(_\
    \ >= 'A' && _ <= 'Z').length\n                                if (reversedLettersCount\
    \ == 0) {\n                                    reversed\n                    \
    \            } else {\n                                    val reversedLettersCount6\
    \ = reversed.filter(_ >= 'A' && _ <= 'Z').length\n                           \
    \         if (reversedLettersCount == 0) {\n                                 \
    \       reversed\n                                    } else {\n             \
    \                           val reversedLettersCount7 = reversed.filter(_ >= 'A'\
    \ && _ <= 'Z').length\n                                        if (reversedLettersCount\
    \ == 0) {\n                                            reversed\n            \
    \                            } else {\n                                      \
    \      val reversedLettersCount8 = reversed.filter(_ >= 'A' && _ <= 'Z').length\n\
    \                                            if (reversedLettersCount == 0) {\n\
    \                                                reversed\n                  \
    \                          } else {\n                                        \
    \        val reversedLettersCount9 = reversed.filter(_ >= 'A' && _ <= 'Z').length\n\
    \                                                if (reversedLettersCount == 0)\
    \ {\n                                                    reversed\n          \
    \                                      } else {\n                            \
    \                        val reversedLettersCount10 = reversed.filter(_ >= 'A'\
    \ && _ <= 'Z').length\n                                                    if\
    \ (reversedLettersCount == 0) {\n                                            \
    \            reversed\n                                                    } else\
    \ {\n                                                        val reversedLettersCount11\
    \ = reversed.filter(_ >= 'A' && _ <= 'Z').length\n                           \
    \                             if (reversedLettersCount == 0) {\n             \
    \                                               reversed\n                   \
    \                                     } else {\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphsxver04.scala:79:0 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmphsxver04.scala:13:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mletters\e[0m = result.filter(_ >= \e[31m'A'\e[0m && _ <= \e[31m'Z'\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmphsxver04.scala:17:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m \e[36mreversedLetters\e[0m = reversed.filter(_ >= \e[31m'A'\e[0m && _ <= \e\
    [31m'Z'\e[0m).length\n\e[31m\e[31m   |\e[0m                                  \
    \                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmphsxver04.scala:21:59 ---------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mreversedLettersCount\e\
    [0m = reversed.filter(_ >= \e[31m'A'\e[0m && _ <= \e[31m'Z'\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                                                           ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmphsxver04.scala:25:64\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    \e\
    [33mval\e[0m \e[36mreversedLettersCount2\e[0m = reversed.filter(_ >= \e[31m'A'\e\
    [0m && _ <= \e[31m'Z'\e[0m).length\n\e[31m\e[31m   |\e[0m                    \
    \                                            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmphsxver04.scala:29:68 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                        \e[33mval\e[0m \e[36mreversedLettersCount3\e\
    [0m = reversed.filter(_ >= \e[31m'A'\e[0m && _ <= \e[31"
  stdout: ''
  timestamp: 1659979407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val strArray = s.toCharArray\n        val strArrayLength\
    \ = strArray.length\n        val strArrayReverse = new Array[Char](strArrayLength)\n\
    \        for(i <- 0 until strArrayLength) {\n            strArrayReverse(i) =\
    \ strArray(i)\n        }\n        val strArrayReverseLength = strArrayReverse.length\n\
    \        val strArrayReverseReverse = new Array[Char](strArrayReverseLength)\n\
    \        for(i <- 0 until strArrayReverseLength) {\n            strArrayReverseReverse(i)\
    \ = strArrayReverse(i)\n        }\n        val strArrayReverseReverseLength =\
    \ strArrayReverseReverse.length\n        val strArrayReverseReverseReverse = new\
    \ Array[Char](strArrayReverseReverseLength)\n        for(i <- 0 until strArrayReverseReverseLength)\
    \ {\n            strArrayReverseReverse(i) = strArrayReverseReverse(i)\n     \
    \   }\n        val strArrayReverseReverseReverseLength = strArrayReverseReverseReverse.length\n\
    \        val strArrayReverseReverseReverseReverse = new Array[Char](strArrayReverseReverseReverseLength)\n\
    \        for(i <- 0 until strArrayReverseReverseReverseLength) {\n           \
    \ strArrayReverseReverseReverse(i) = strArrayReverseReverseReverse(i)\n      \
    \  }\n        val strArrayReverseReverseReverseLength = strArrayReverseReverseReverse.length\n\
    \        val strArrayReverseReverseReverseReverse = new Array[Char](strArrayReverseReverseReverseLength)\n\
    \        for(i <- 0 until strArrayReverseReverseReverseLength) {\n           \
    \ strArrayReverseReverseReverse(i) = strArrayReverseReverseReverseReverse(i)\n\
    \        }\n        val strArrayReverseReverseReverseReverseLength = strArrayReverseReverseReverseReverse.length\n\
    \        val strArrayReverseReverseReverseReverse = new Array[Char](strArrayReverseReverseReverseLength)\n\
    \        for(i <- 0 until strArrayReverseReverseReverseLength) {\n           \
    \ strArrayReverseReverseReverse(i) = strArrayReverseReverseReverseReverse(i)\n\
    \        }\n        val strArrayReverseReverseReverseReverseLength = strArrayReverseReverseReverseReverse.length\n\
    \        val strArrayReverseReverseReverseReverseReverse = new Array[Char](strArrayReverseReverseReverseReverseLength)\n\
    \        for(i <- 0 until strArrayReverseReverseReverseReverseLength) {\n    \
    \        strArrayReverseReverseReverseReverse(i) = strArrayReverseReverseReverseReverseReverse(i)\n\
    \        }\n        val strArrayReverseReverseReverseReverseLength = strArrayReverseReverseReverseReverse.length\n\
    \        val strArrayReverseReverseReverseReverseReverse = new Array[Char](strArrayReverseReverseReverseReverseLength)\n\
    \        for(i <- 0 until strArrayReverseReverseReverseReverseLength) {\n    \
    \        strArrayReverseReverseReverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplyqhh0ki.scala:64:0 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplyqhh0ki.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstrArrayReverseReverseReverseLength\e[0m = strArrayReverseReverseReverse.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrArrayReverseReverseReverseLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mstrArrayReverseReverseReverseLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplyqhh0ki.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstrArrayReverseReverseReverseReverse\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mChar\e[0m](strArrayReverseReverseReverseLength)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrArrayReverseReverseReverseReverse is already defined as\
    \ \e[33mvalue\e[0m \e[35mstrArrayReverseReverseReverseReverse\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplyqhh0ki.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstrArrayReverseReverseReverseReverse\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mChar\e[0m](strArrayReverseReverseReverseLength)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrArrayReverseReverseReverseReverse is already defined as\
    \ \e[33mvalue\e[0m \e[35mstrArrayReverseReverseReverseReverse\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161]"
  stdout: ''
  timestamp: 1659979408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length){\n            if(s.charAt(i).toUpper != s.charAt(i).toLower){\n\
    \                result += s.charAt(i)\n            }\n        }\n        if(result.isEmpty){\n\
    \            s.reverse\n        }\n        else{\n            result.reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdsyz_a7k.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.append((s.charAt(i) - 'a').toString)\n            }else if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i) -\
    \ 'A').toString)\n            }else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx6h327tj.scala:24)\n\tat Problem.main(tmpx6h327tj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.append((s.charAt(i) - 'a').toString)\n            }\n    \
    \        else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i)\
    \ - 'A').toString)\n            }\n            else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1bs5xenk.scala:26)\n\tat Problem.main(tmp1bs5xenk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (c\
    \ <- s) {\n            if (c.isLetter) chars += c.toUpperCase\n            else\
    \ chars += c.toLowerCase\n        }\n        if (chars.isEmpty) s.reverse\n  \
    \      else chars.reverse.mkString.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd56pam1f.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (c\
    \ <- s) {\n            if (c.isLetter) {\n                chars += c\n       \
    \     } else {\n                chars += c.toUpperCase\n            }\n      \
    \  }\n        chars.reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"\
    4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjb7lm9eg.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979403
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length) \n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\
    \ \n                result.append((s.charAt(i) - 'a').toString)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptbtzu01g.scala:20)\n\tat Problem.main(tmptbtzu01g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2fzbmb3j.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = s.toCharArray\n\
    \        val reversed = chars.reverse\n        val isLetter = chars.exists(x =>\
    \ x.isLetter)\n        val isNotLetter = chars.exists(x => !x.isLetter)\n    \
    \    val isAllLetters = chars.forall(x => x.isLetter)\n        val isAllNotLetters\
    \ = chars.forall(x => !x.isLetter)\n        val isAllLettersAndNotLetters = chars.forall(x\
    \ => x.isLetter && !x.isLetter)\n        val isAllLettersAndNotLettersOrAllNotLetters\
    \ = chars.forall(x => x.isLetter && !x.isLetter || !x.isLetter)\n        val isAllLettersAndNotLettersOrAllNotLettersOrAllNotLetters\
    \ = chars.forall(x => x.isLetter && !x.isLetter || !x.isLetter && !x.isLetter)\n\
    \        val isAllLettersAndNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLetters\
    \ = chars.forall(x => x.isLetter && !x.isLetter || !x.isLetter && !x.isLetter\
    \ && !x.isLetter)\n        val isAllLettersAndNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLetters\
    \ = chars.forall(x => x.isLetter && !x.isLetter || !x.isLetter && !x.isLetter\
    \ && !x.isLetter && !x.isLetter && !x.isLetter)\n        val isAllLettersAndNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLetters\
    \ = chars.forall(x => x.isLetter && !x.isLetter || !x.isLetter && !x.isLetter\
    \ && !x.isLetter && !x.isLetter && !x.isLetter && !x.isLetter && !x.isLetter)\n\
    \        val isAllLettersAndNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLettersOrAllNotLetters\
    \ = chars.forall(x => x.isLetter && !x.isLetter || !x.isLetter && !x.isLetter\
    \ && !x.isLetter && !x.isLetter && !x.isLetter && !x.isLetter && !x.isLetter &&\
    \ !x.isLetter)\n        val isAll\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmz9y6wpf.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmz9y6wpf.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c == c.toUpperCase){\n\
    \                result.append(c.toUpperCase)\n            }else if(c == c.toLowerCase){\n\
    \                result.append(c.toLowerCase)\n            }else{\n          \
    \      result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9rdv1elp.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(c == c.toUpperCase){\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9rdv1elp.scala:15:32 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                     value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9rdv1elp.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c == c.toLowerCase){\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9rdv1elp.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        chars.foreach { c =>\n            val upper = c.toUpperCase\n \
    \           val lower = c.toLowerCase\n            val isLetter = chars.contains(upper)\
    \ || chars.contains(lower)\n            if(isLetter){\n                val newChar\
    \ = if (chars.contains(upper)) upper else lower\n                result += newChar\n\
    \                chars.remove(newChar)\n            }\n        }\n        if(chars.isEmpty)\
    \ result.reverse\n        else result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqxuf6gaf.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqxuf6gaf.scala:26:33 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m(chars.isEmpty) result.reverse\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Found:    StringBuilder\n\e[31m   |\e[0m        \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n\
    \            if(c.isLetter) chars += c\n            else result += c\n       \
    \ }\n        if(chars.isEmpty) result.reverse\n        else chars.toSeq.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp53voejij.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp53voejij.scala:19:33 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(chars.isEmpty) result.reverse\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Found:    StringBuilder\n\e[31m   |\e[0m        \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s)\n        val chars =\
    \ result.map(_.toChar)\n        val reversed = chars.reverse\n        val noLetters\
    \ = chars.filter(_.isLetter).length == 0\n        if(noLetters) result.reverse\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpysbiaqoi.scala:15:29\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m(noLetters)\
    \ result.reverse\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    StringBuilder\n\e[31m   |\e\
    [0m                      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpysbiaqoi.scala:16:13 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33melse\e[0m result\n\e[31m\e[31m   |\e[0m    \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:    (result : StringBuilder)\n\
    \e[31m   |\e[0m             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979418
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.append((s.charAt(i) - 'a').toString)\n            }\n    \
    \        else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i)\
    \ - 'A').toString)\n            }\n            else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1bs5xenk.scala:26)\n\tat Problem.main(tmp1bs5xenk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length){\n            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl3rkefkt.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          result.append(s.charAt(i).toUpper)\n            else\n            \
    \    result.append(s.charAt(i))\n        return result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc7gw5vyq.scala:20)\n\tat Problem.main(tmpc7gw5vyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (c\
    \ <- s) {\n            if (c.isLetter) chars += c.toUpperCase\n            else\
    \ chars += c.toLowerCase\n        }\n        chars.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph133dxg_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val str = new mutable.StringBuilder\n        for(i <-\
    \ 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                str.append(s.charAt(i).toUpper)\n            }\n            else\
    \ if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                str.append(s.charAt(i).toLower)\n\
    \            }\n            else{\n                str.append(s.charAt(i))\n \
    \           }\n        }\n        return str.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps8r0b1xu.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mstr\e[0m = \e[33mnew\e[0m\
    \ mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.add(s.charAt(i).toUpperCase + s.charAt(i).toLowerCase)\n\
    \            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n\
    \                result.add(s.charAt(i).toLowerCase + s.charAt(i).toUpperCase)\n\
    \            }\n            else{\n                result.add(s.charAt(i))\n \
    \           }\n        }\n        if(result.isEmpty){\n            result.reverse\n\
    \        }\n        else{\n            result.reverse\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgubgf12s.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else if (s.charAt(i) >= 'A'\
    \ && s.charAt(i) <= 'Z')\n                chars += s.charAt(i).toUpper\n     \
    \       else\n                chars += s.charAt(i)\n        chars.reverse\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfuq2cz07.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.toUpperCase\n        val chars = result.toCharArray\n\
    \        val reversed = chars.reverse\n        val result = reversed.mkString.toUpperCase\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9o9bxypr.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = reversed.mkString.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659979415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            val lower\
    \ = c.toLowerCase \n            val upper = c.toUpperCase \n            if(lower\
    \ == upper){\n                result.append(lower)\n            }\n          \
    \  else{\n                result.append(c)\n            }\n        }\n       \
    \ return result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4b0eyq14.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mlower\e[0m = c.toLowerCase\
    \ \n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                        value toLowerCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4b0eyq14.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mupper\e[0m = c.toUpperCase\
    \ \n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                        value toUpperCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.add(s.substring(0,i) + s.substring(i+1,s.length).reverse)\n\
    \            }\n            else{\n                result.add(s.substring(0,i)\
    \ + s.substring(i+1,s.length))\n            }\n        }\n        result.toList.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfcejztgx.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.StringBuilder\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.reverse\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbz1gr5dv.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.add(s.charAt(i).toUpperCase + s.charAt(i).toLowerCase)\n\
    \            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n\
    \                result.add(s.charAt(i).toLowerCase + s.charAt(i).toUpperCase)\n\
    \            }\n            else{\n                result.add(s.charAt(i))\n \
    \           }\n        }\n        return result.toList.reverse.mkString(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvkhgg4y4.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i))\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpox0smhm5.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpper + s.charAt(i))\n\e[31m\e[31m   |\e[0m                           \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \      value toUpper is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.toUpperCase\n        val letters = mutable.HashSet[Char]()\n\
    \        val reversed = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i).toLowerCase != s.charAt(i).toUpperCase\
    \ && !letters.contains(s.charAt(i)))\n                letters += s.charAt(i)\n\
    \            else\n                reversed += s.charAt(i)\n        for(i <- 0\
    \ until reversed.length)\n            result += reversed(i)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpytt1i4pn.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpytt1i4pn.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpytt1i4pn.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase !=\
    \ s.charAt(i).toUpperCase && !letters.contains(s.charAt(i)))\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \ value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpytt1i4pn.scala:20:19 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            result += reversed(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ result.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659979423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.StringBuilder\n        for (i\
    \ <- 0 until s.length)\n            if (s(i).isLetter) result.append(s(i).swapCase)\n\
    \            else result.append(s(i))\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsi39kkwk.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudn7remd.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append((s.charAt(i) - 'a').toString)\n        \
    \    else\n                result.append(s.charAt(i))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4men0a_.scala:20)\n\tat Problem.main(tmpt4men0a_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.toUpperCase\n        val reversed = result.reverse\n\
    \        val letters = result.filter(_ >= 'A' && _ <='Z').toList\n        if(letters.isEmpty)\
    \ result else reversed\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpw8u2gq9p.scala:13:36 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = result.filter(_\
    \ >= \e[31m'A'\e[0m && _ <=\e[31m'Z'\e[0m).toList\n\e[31m\e[31m   |\e[0m     \
    \                               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                             Wrong number of parameters, expected: 1\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length) \n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\
    \ \n                result.append((s.charAt(i) - 'a').toUpperCase)\n         \
    \   else\n                result.append((s.charAt(i) - 'a'))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0lvio2od.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpperCase)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toUpperCase is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val letters =\
    \ mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n            val\
    \ c = s.charAt(i)\n            if(c == 'A' || c == 'a' || c == 'B' || c == 'b'\
    \ || c == 'C' || c == 'c' || c == 'D' || c == 'd' || c == 'E' || c == 'e' || c\
    \ == 'F' || c == 'f' || c == 'G' || c == 'g' || c == 'H' || c == 'h' || c == 'I'\
    \ || c == 'i' || c == 'J' || c == 'j' || c == 'K' || c == 'k' || c == 'L' || c\
    \ == 'l' || c == 'M' || c == 'm' || c == 'N' || c == 'n' || c == 'O' || c == 'o'\
    \ || c == 'P' || c == 'p' || c == 'Q' || c == 'q' || c == 'R' || c == 'r' || c\
    \ == 'S' || c == 's' || c == 'T' || c == 't' || c == 'U' || c == 'u' || c == 'V'\
    \ || c == 'v' || c == 'W' || c == 'w' || c == 'X' || c == 'x' || c == 'Y' || c\
    \ == 'y' || c == 'Z' || c == 'z'){\n                letters += c\n           \
    \ }\n        }\n        if(letters.size == 0){\n            result.append(s)\n\
    \        }else{\n            for(i <- 0 until s.length){\n                val\
    \ c = s.charAt(i)\n                if(c == 'A' || c == 'a' || c == 'B' || c ==\
    \ 'b' || c == 'C' || c == 'c' || c == 'D' || c == 'd' || c == 'E' || c == 'e'\
    \ || c == 'F' || c == 'f' || c == 'G' || c == 'g' || c == 'H' || c == 'h' || c\
    \ == 'I' || c == 'i' || c == 'J' || c == 'j' || c == 'K' || c == 'k' || c == 'L'\
    \ || c == 'l' || c == 'M' || c == 'm' || c == 'N' || c == 'n' || c == 'O' || c\
    \ == 'o' || c == 'P' || c == 'p' || c == 'Q' || c == 'q' || c == 'R' || c == 'r'\
    \ || c == 'S' || c == 's' || c == 'T' || c == 't' || c == 'U' || c == 'u' || c\
    \ == 'V' || c == 'v' || c == 'W' || c == 'w' || c == 'X' || c == 'x' || c == 'Y'\
    \ || c == 'y' || c == 'Z' || c == 'z'){\n                    letters.remove(c)\n\
    \                }\n            }\n            result.append(letters.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmimobdxm.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpmimobdxm.scala:42:0 ----------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmimobdxm.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpmimobdxm.scala:41:1 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpmimobdxm.scala:30:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m30 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(c <-\
    \ s) {\n            if(c == 'a') chars += 'A'\n            else if(c == 'A') chars\
    \ += 'a'\n            else chars += c\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3vkkbzvm.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979426
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprca6uev6.scala:20)\n\tat Problem.main(tmprca6uev6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.reverse\n        val isLetter = result.forall(_.isLetter)\n\
    \        if(!isLetter) result.reverse\n        else result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyk8xyn45.scala:17)\n\tat Problem.main(tmpyk8xyn45.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.append((s.charAt(i) - 'a').toString)\n            }else if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i) -\
    \ 'A').toString)\n            }else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx6h327tj.scala:24)\n\tat Problem.main(tmpx6h327tj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for(c <- s) {\n            if(c == 'a') chars += 'A'\n            else\
    \ if(c == 'b') chars += 'B'\n            else if(c == 'c') chars += 'C'\n    \
    \        else if(c == 'd') chars += 'D'\n            else if(c == 'e') chars +=\
    \ 'E'\n            else if(c == 'f') chars += 'F'\n            else if(c == 'g')\
    \ chars += 'G'\n            else if(c == 'h') chars += 'H'\n            else if(c\
    \ == 'i') chars += 'I'\n            else if(c == 'j') chars += 'J'\n         \
    \   else if(c == 'k') chars += 'K'\n            else if(c == 'l') chars += 'L'\n\
    \            else if(c == 'm') chars += 'M'\n            else if(c == 'n') chars\
    \ += 'N'\n            else if(c == 'o') chars += 'O'\n            else if(c ==\
    \ 'p') chars += 'P'\n            else if(c == 'q') chars += 'Q'\n            else\
    \ if(c == 'r') chars += 'R'\n            else if(c == 's') chars += 'S'\n    \
    \        else if(c == 't') chars += 'T'\n            else if(c == 'u') chars +=\
    \ 'U'\n            else if(c == 'v') chars += 'V'\n            else if(c == 'w')\
    \ chars += 'W'\n            else if(c == 'x') chars += 'X'\n            else if(c\
    \ == 'y') chars += 'Y'\n            else if(c == 'z') chars += 'Z'\n         \
    \   else chars += c\n        }\n        chars.foreach(c => result.append(c.toUpperCase))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_g3k3fxu.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c == 'a'){\n   \
    \             result.append(\"A\")\n            }else if(c == 'b'){\n        \
    \        result.append(\"B\")\n            }else if(c == 'c'){\n             \
    \   result.append(\"C\")\n            }else if(c == 'd'){\n                result.append(\"\
    D\")\n            }else if(c == 'e'){\n                result.append(\"E\")\n\
    \            }else if(c == 'f'){\n                result.append(\"F\")\n     \
    \       }else if(c == 'g'){\n                result.append(\"G\")\n          \
    \  }else if(c == 'h'){\n                result.append(\"H\")\n            }else\
    \ if(c == 'i'){\n                result.append(\"I\")\n            }else if(c\
    \ == 'j'){\n                result.append(\"J\")\n            }else if(c == 'k'){\n\
    \                result.append(\"K\")\n            }else if(c == 'l'){\n     \
    \           result.append(\"L\")\n            }else if(c == 'm'){\n          \
    \      result.append(\"M\")\n            }else if(c == 'n'){\n               \
    \ result.append(\"N\")\n            }else if(c == 'o'){\n                result.append(\"\
    O\")\n            }else if(c == 'p'){\n                result.append(\"P\")\n\
    \            }else if(c == 'q'){\n                result.append(\"Q\")\n     \
    \       }else if(c == 'r'){\n                result.append(\"R\")\n          \
    \  }else if(c == 's'){\n                result.append(\"S\")\n            }else\
    \ if(c == 't'){\n                result.append(\"T\")\n            }else if(c\
    \ == 'u'){\n                result.append(\"U\")\n            }else if(c == 'v'){\n\
    \                result.append(\"V\")\n            }else if(c == 'w'){\n     \
    \           result.append(\"W\")\n            }else if(c == 'x'){\n          \
    \      result.append(\"X\")\n            }else if(c == 'y'){\n               \
    \ result.append(\"Y\")\n            }else if(c == 'z'){\n                result.append(\"\
    Z\")\n            }else{\n                result.append(c)\n            }\n  \
    \      }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_jed9flg.scala:73)\n\tat Problem.main(tmp_jed9flg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c.isLetter){\n \
    \               val c = c.toUpperCase\n                val c = c.toLower\n   \
    \             result.append((c))\n            }\n            else{\n         \
    \       result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphdkujvuz.scala:16:20 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mc\e[0m = c.toLower\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc\
    \ is already defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c == 'a'){\n   \
    \             result.append(c.toUpperCase)\n            }else if(c == 'A'){\n\
    \                result.append(c.toLowerCase)\n            }else{\n          \
    \      result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph5kp3usc.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmph5kp3usc.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if((s.charAt(i) >= 'a' && s.charAt(i) <= 'z') || (s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'))\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp08w0toui.scala:20)\n\tat Problem.main(tmp08w0toui.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979435
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.append((s.charAt(i) - 'a').toString)\n            }\n    \
    \        else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i)\
    \ - 'A').toString)\n            }\n            else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1bs5xenk.scala:26)\n\tat Problem.main(tmp1bs5xenk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c == c.toUpperCase){\n\
    \                result.append(c.toLowerCase)\n            }else{\n          \
    \      result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp90yib892.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m(c == c.toUpperCase){\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp90yib892.scala:15:32 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                     value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n         \
    \   if(c == 'a') result.setCharAt(i, c.toUpperCase)\n            else if(c ==\
    \ 'A') result.setCharAt(i, c.toLowerCase)\n            else result.setCharAt(i,\
    \ c)\n        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0xovpg1w.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(c == \e[31m'a'\e[0m) result.setCharAt(i,\
    \ c.toUpperCase)\n\e[31m\e[31m   |\e[0m                                      \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0xovpg1w.scala:16:52 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33melse\e[0m \e[33mif\e[0m(c == \e[31m'A'\e[0m) result.setCharAt(i,\
    \ c.toLowerCase)\n\e[31m\e[31m   |\e[0m                                      \
    \            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.remove(c)\n            } else {\n                chars += c\n       \
    \     }\n        }\n        if (chars.isEmpty) {\n            result.append(s)\n\
    \        } else {\n            chars.foreach { c =>\n                result.append(c.toUpperCase)\n\
    \                result.append(c.toLowerCase)\n            }\n        }\n    \
    \    result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl8o6z0uj.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          result.append((s.charAt(i) - 'a').toString)\n            else\n   \
    \             result.append(s.charAt(i))\n        return result.toString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe88h4w63.scala:20)\n\tat Problem.main(tmpe88h4w63.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s)\n        val letters\
    \ = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                letters += s.charAt(i)\n    \
    \    for(i <- 0 until s.length)\n            if(letters.contains(s.charAt(i)))\n\
    \                result.replace(i, i+1, s.charAt(i).toUpper)\n            else\n\
    \                result.replace(i, i+1, s.charAt(i))\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi1xdw1fu.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpi1xdw1fu.scala:18:51 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                result.replace(i, i+\e[31m1\e[0m, s.charAt(i).toUpper)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    Char\n\e\
    [31m   |\e[0m                                       Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi1xdw1fu.scala:20:47 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.replace(i, i+\e[31m1\e[0m, s.charAt(i))\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       Found:    Char\n\e[31m \
    \  |\e[0m                                       Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrwaho49.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i\
    \ <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n       \
    \ chars.toList.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp80d_247f.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.StringBuilder\n        for(i\
    \ <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n         \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           \
    \ {\n                result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }\n            else\n            {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4l1ae5oz.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.Set[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        chars.foreach {\n            case c if c.isLetter => result.append(c.toUpperCase)\n\
    \            case c => result.append(c)\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkeexp7c.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.toUpperCase\n        val reversed = result.reverse\n\
    \        val noLetters = reversed.replaceAll(\"[^a-zA-Z]\", \"\")\n        val\
    \ noLettersReversed = noLetters.reverse\n        if (noLetters.isEmpty) noLettersReversed\n\
    \        else noLettersReversed\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfmyavoia.scala:19)\n\tat Problem.main(tmpfmyavoia.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979438
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append((s.charAt(i) - 'a').toString)\n        \
    \    else\n                result.append(s.charAt(i))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4men0a_.scala:20)\n\tat Problem.main(tmpt4men0a_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char](s)\n        chars.reverse.foldLeft(\"\
    \") { (result, c) =>\n            if (c.isLetter) c.toUpperCase\n            else\
    \ c.toLowerCase\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"\
    4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnqg6quun.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m](s)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.append((s.charAt(i) - 'a').toUpperCase)\n            }else{\n\
    \                result.append((s.charAt(i) - 'a'))\n            }\n        }\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2azblhtg.scala:14:50 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpperCase)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value toUpperCase is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659979437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                chars += s.charAt(i)\n            }\n            else if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'){\n                chars += s.charAt(i).swapCase\n\
    \            }\n            else{\n                chars += s.charAt(i)\n    \
    \        }\n        }\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8uxh9nt.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979435
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          result.append(s.charAt(i).toUpper)\n            else\n            \
    \    result.append(s.charAt(i))\n        return result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc7gw5vyq.scala:20)\n\tat Problem.main(tmpc7gw5vyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a'){\n                result.setCharAt(i, c.toUpperCase)\n            }\n \
    \           else if(c == 'A'){\n                result.setCharAt(i, c.toLowerCase)\n\
    \            }\n            else{\n                result.setCharAt(i, c)\n  \
    \          }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj77s7puk.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result.setCharAt(i, c.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj77s7puk.scala:18:38\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                result.setCharAt(i,\
    \ c.toLowerCase)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n\
    \            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n\
    \                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n     \
    \       }\n            else{\n                result.add(s.charAt(i))\n      \
    \      }\n        }\n        result.reverse.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3nepybb.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toLower\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuzr8sz53.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.update(c)\n            } else {\n                chars += c\n       \
    \     }\n        }\n        if (chars.isEmpty) {\n            result.append(s)\n\
    \        } else {\n            chars.foreach { c =>\n                val lower\
    \ = c.toLower\n                val upper = c.toUpper\n                if (lower\
    \ == upper) {\n                    result.append(lower)\n                } else\
    \ {\n                    result.append(upper)\n                }\n           \
    \ }\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkl6l3zzq.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.Set[Char]()\n\
    \        for(i <- 0 until s.length)\n            chars += s.charAt(i)\n      \
    \  chars.foreach { c =>\n            val upper = c.toUpperCase\n            val\
    \ lower = c.toLowerCase\n            if(upper.contains(lower))\n             \
    \   result.append(upper)\n            else\n                result.append(lower)\n\
    \        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp23tbmcpa.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(\
    \ i <- 0 until s.length ) {\n            if( s.charAt(i).toUpperCase == s.charAt(i).toLowerCase\
    \ ) {\n                result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase).reverse)\n\
    \            } else {\n                result.append(s.charAt(i))\n          \
    \  }\n        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgqwopetr.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m( s.charAt(i).toUpperCase ==\
    \ s.charAt(i).toLowerCase ) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgqwopetr.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase).reverse)\n\e[31m\e[31m   |\e[0m                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              value toUpperCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length) chars += s.charAt(i)\n        chars.reverse\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp69v61oae.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.add(s.charAt(i))\n        result.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpleih9y9l.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.StringBuilder\n        for(i\
    \ <- 0 until s.length)\n            if((s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\
    \ || (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'))\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz044en67.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                chars += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n\
    \            return s\n        }\n        chars.reverse.mkString.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1y0ch5q.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c.isLetter){\n\
    \                val c = c.toUpperCase\n                result.add(c)\n      \
    \      }else{\n                result.add(c)\n            }\n        }\n     \
    \   if(result.isEmpty){\n            s.reverse\n        }else{\n            result.reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpywufrz33.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdieivsdm.scala:20)\n\tat Problem.main(tmpdieivsdm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val strList = s.toList\n        val reversedStrList =\
    \ strList.map(x => x.toUpperCase)\n        val reversedStrList2 = strList.map(x\
    \ => x.toLowerCase)\n        val reversedStrList3 = strList.map(x => x.toUpperCase)\n\
    \        val reversedStrList4 = strList.map(x => x.toLowerCase)\n        val reversedStrList5\
    \ = strList.map(x => x.toUpperCase)\n        val reversedStrList6 = strList.map(x\
    \ => x.toLowerCase)\n        val reversedStrList7 = strList.map(x => x.toUpperCase)\n\
    \        val reversedStrList8 = strList.map(x => x.toLowerCase)\n        val reversedStrList9\
    \ = strList.map(x => x.toUpperCase)\n        val reversedStrList10 = strList.map(x\
    \ => x.toLowerCase)\n        val reversedStrList11 = strList.map(x => x.toUpperCase)\n\
    \        val reversedStrList12 = strList.map(x => x.toLowerCase)\n        val\
    \ reversedStrList13 = strList.map(x => x.toUpperCase)\n        val reversedStrList14\
    \ = strList.map(x => x.toLowerCase)\n        val reversedStrList15 = strList.map(x\
    \ => x.toUpperCase)\n        val reversedStrList16 = strList.map(x => x.toLowerCase)\n\
    \        val reversedStrList17 = strList.map(x => x.toUpperCase)\n        val\
    \ reversedStrList18 = strList.map(x => x.toLowerCase)\n        val reversedStrList19\
    \ = strList.map(x => x.toUpperCase)\n        val reversedStrList20 = strList.map(x\
    \ => x.toLowerCase)\n        val reversedStrList21 = strList.map(x => x.toUpperCase)\n\
    \        val reversedStrList22 = strList.map(x => x.toLowerCase)\n        val\
    \ reversedStrList23 = strList.map(x => x.toUpperCase)\n        val reversedStrList24\
    \ = strList.map(x => x.toLowerCase)\n        val reversedStrList25 = strList.map(x\
    \ => x.toUpperCase)\n        val reversedStrList26 = strList.map(x => x.toLowerCase)\n\
    \        val reversedStrList27 = strList.map(x => x.toUpperCase)\n        val\
    \ reversedStrList28 = strList.map(x => x.toLowerCase)\n        val reversedStrList29\
    \ = strList.map(x => x.toUpperCase)\n        val reversedStrList30 = str\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp78rlvu9m.scala:12:49 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mreversedStrList\e[0m = strList.map(\e\
    [36mx\e[0m => x.toUpperCase)\n\e[31m\e[31m   |\e[0m                          \
    \                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \           value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp78rlvu9m.scala:13:50 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36mreversedStrList2\e[0m = strList.map(\e\
    [36mx\e[0m => x.toLowerCase)\n\e[31m\e[31m   |\e[0m                          \
    \                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp78rlvu9m.scala:14:50 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversedStrList3\e[0m = strList.map(\e\
    [36mx\e[0m => x.toUpperCase)\n\e[31m\e[31m   |\e[0m                          \
    \                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp78rlvu9m.scala:15:50 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mreversedStrList4\e[0m = strList.map(\e\
    [36mx\e[0m => x.toLowerCase)\n\e[31m\e[31m   |\e[0m                          \
    \                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp78rlvu9m.scala:16:50 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mreversedStrList5\e[0m = strList.map(\e\
    [36mx\e[0m => x.toUpperCase)\n\e[31m\e[31m   |\e[0m                          \
    \                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp78rlvu9m.scala:17:50 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mreversedStrList6\e[0m = strList.map(\e\
    [36mx\e[0m => x.t"
  stdout: ''
  timestamp: 1659979455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append((s.charAt(i) - 'a').toString)\n        \
    \    else\n                result.append(s.charAt(i))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4men0a_.scala:20)\n\tat Problem.main(tmpt4men0a_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.append((s.charAt(i) - 'a').toString)\n            }\n    \
    \        else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i)\
    \ - 'A').toString)\n            }\n            else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1bs5xenk.scala:26)\n\tat Problem.main(tmp1bs5xenk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val strList = s.toList\n        strList.map(x => if (x.isLetter)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n        strList.map(x => if (x.isEmpty)\
    \ x.toUpperCase() else x.toLowerCase)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplga6jhx2.scala:12:43 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        strList.map(\e[36mx\e[0m => \e[33mif\e[0m (x.isLetter)\
    \ x.toUpperCase() \e[33melse\e[0m x.toLowerCase)\n\e[31m\e[31m   |\e[0m      \
    \                                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplga6jhx2.scala:12:64 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        strList.map(\e[36mx\e[0m => \e[33mif\e[0m (x.isLetter)\
    \ x.toUpperCase() \e[33melse\e[0m x.toLowerCase)\n\e[31m\e[31m   |\e[0m      \
    \                                                        ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplga6jhx2.scala:13:31\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strList.map(\e[36mx\e\
    [0m => \e[33mif\e[0m (x.isEmpty) x.toUpperCase() \e[33melse\e[0m x.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             value isEmpty is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplga6jhx2.scala:13:42 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strList.map(\e[36mx\e[0m => \e[33mif\e[0m (x.isEmpty)\
    \ x.toUpperCase() \e[33melse\e[0m x.toLowerCase)\n\e[31m\e[31m   |\e[0m      \
    \                                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                        value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplga6jhx2.scala:13:63 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        strList.map(\e[36mx\e[0m => \e[33mif\e[0m (x.isEmpty)\
    \ x.toUpperCase() \e[33melse\e[0m x.toLowerCase)\n\e[31m\e[31m   |\e[0m      \
    \                                                       ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toLowerCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplga6jhx2.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        strList.map(\e[36mx"
  stdout: ''
  timestamp: 1659979455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s)\n        for(i <- 0\
    \ until s.length)\n            if(i == 0 || s.charAt(i) != s.charAt(i-1))\n  \
    \              result.setCharAt(i, s.charAt(i).toUpper)\n            else\n  \
    \              result.setCharAt(i, s.charAt(i).toLower)\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphcd89a1n.scala:20)\n\tat Problem.main(tmphcd89a1n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i).toLowerCase == s.charAt(i).toUpperCase\
    \ || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase)\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase).reverse)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl3xva0dc.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpl3xva0dc.scala:14:43 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m                result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase).reverse)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            result += (if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\
    \ s.charAt(i).toUpperCase else s.charAt(i).toLowerCase)\n        result + s.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjz63a7gc.scala:13:81 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            result += (\e[33mif\e[0m (s.charAt(i) >=\
    \ \e[31m'a'\e[0m && s.charAt(i) <= \e[31m'z'\e[0m) s.charAt(i).toUpperCase \e\
    [33melse\e[0m s.charAt(i).toLowerCase)\n\e[31m\e[31m   |\e[0m                \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjz63a7gc.scala:13:110\
    \ -----------------------\e[0m\e[0m\n\e[31m13 |\e[0m            result += (\e\
    [33mif\e[0m (s.charAt(i) >= \e[31m'a'\e[0m && s.charAt(i) <= \e[31m'z'\e[0m) s.charAt(i).toUpperCase\
    \ \e[33melse\e[0m s.charAt(i).toLowerCase)\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \          ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpjz63a7gc.scala:14:15 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        result + s.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of StringBuilder, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append((s.charAt(i) - 'a').toString)\n        \
    \    else\n                result.append(s.charAt(i))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4men0a_.scala:20)\n\tat Problem.main(tmpt4men0a_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u'){\n                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n            }\n            else{\n            \
    \    result.append(c)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8t_q8dth.scala:15:43 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase))\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.add(s.charAt(i))\n        result.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp__3zy7z0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val strList = s.toList\n        strList.map(x => x.toUpperCase).foldLeft(\"\
    \")( (acc, x) => acc + (if (x.isLetter) x.toUpperCase() else x))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpotwa79hd.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase).foldLeft(\e\
    [31m\"\"\e[0m)( (\e[36macc\e[0m, \e[36mx\e[0m) => acc + (\e[33mif\e[0m (x.isLetter)\
    \ x.toUpperCase() \e[33melse\e[0m x))\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value toUpperCase\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpotwa79hd.scala:12:79\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        strList.map(\e[36mx\e\
    [0m => x.toUpperCase).foldLeft(\e[31m\"\"\e[0m)( (\e[36macc\e[0m, \e[36mx\e[0m)\
    \ => acc + (\e[33mif\e[0m (x.isLetter) x.toUpperCase() \e[33melse\e[0m x))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value isLetter is not a member of Nothing\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpotwa79hd.scala:12:91 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        strList.map(\e[36mx\e[0m => x.toUpperCase).foldLeft(\e[31m\"\"\
    \e[0m)( (\e[36macc\e[0m, \e[36mx\e[0m) => acc + (\e[33mif\e[0m (x.isLetter) x.toUpperCase()\
    \ \e[33melse\e[0m x))\n\e[31m\e[31m   |\e[0m                                 \
    \                                                        ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value toUpperCase is not a member of\
    \ Nothing\n3 errors found\n"
  stdout: ''
  timestamp: 1659979456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                result.append((c\
    \ to 'A').toString)\n            }else if(c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U'){\n                result.append((c to 'a').toString)\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpytklcgu3.scala:25)\n\tat Problem.main(tmpytklcgu3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.update(c)\n            } else {\n                chars += c\n       \
    \     }\n        }\n        chars.foreach { c =>\n            if (c.isLetter)\
    \ {\n                result.append((c.toUpperCase))\n            } else {\n  \
    \              result.append((c.toLowerCase))\n            }\n        }\n    \
    \    result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp48zdp5iq.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length){\n            if(s.charAt(i).toUpper != s.charAt(i).toLower){\n\
    \                result += s.charAt(i)\n            }\n        }\n        if(result.isEmpty){\n\
    \            s.reverse\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8r819l95.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979451
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           result.append((s.charAt(i) - 'a').toString)\n            else\n  \
    \              result.append(s.charAt(i))\n        return result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndvlhkcq.scala:20)\n\tat Problem.main(tmpndvlhkcq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.toUpperCase\n        val reversed = result.reverse\n\
    \        val letters = result.filter(_ >= 'A' && _ <='Z')\n        if (letters.isEmpty)\
    \ {\n            reversed\n        } else {\n            val newLetters = letters.map(x\
    \ => if (x == 'A') 'Z' else 'A')\n            val newResult = result.filter(_\
    \ >= 'A' && _ <='Z').mkString(\"\") + newLetters.mkString(\"\")\n            newResult\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps1v5ok52.scala:13:36 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = result.filter(_\
    \ >= \e[31m'A'\e[0m && _ <=\e[31m'Z'\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmps1v5ok52.scala:18:42 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnewResult\e[0m = result.filter(_\
    \ >= \e[31m'A'\e[0m && _ <=\e[31m'Z'\e[0m).mkString(\e[31m\"\"\e[0m) + newLetters.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659979450
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append((s.charAt(i) - 'a').toString)\n        \
    \    else\n                result.append(s.charAt(i))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4men0a_.scala:20)\n\tat Problem.main(tmpt4men0a_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.add(s.charAt(i))\n        result.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp__3zy7z0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.remove(c)\n            } else {\n                chars.add(c)\n     \
    \       }\n        }\n        if (chars.isEmpty) {\n            result.append(s)\n\
    \        } else {\n            chars.foreach { c =>\n                if (c.isLower)\
    \ {\n                    result.append(c.toUpperCase)\n                } else\
    \ {\n                    result.append(c.toLowerCase)\n                }\n   \
    \         }\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1i1qss9.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979451
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          result.append((s.charAt(i) - 'a').toString)\n            else\n   \
    \             result.append(s.charAt(i))\n        return result.toString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe88h4w63.scala:20)\n\tat Problem.main(tmpe88h4w63.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.Set[Char](s.toCharArray)\n       \
    \ chars.foreach { c =>\n            if (c.isLetter) chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _\
    \ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_\
    \ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _\
    \ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_\
    \ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _\
    \ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_\
    \ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _\
    \ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_\
    \ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _\
    \ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_\
    \ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach\
    \ { _ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _\
    \ => chars.filter(_ != c).foreach { _ => chars.filter(_ != c).foreach { _ => chars.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16cw47tf.scala:27:0 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16cw47tf.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mchars\e[0m = mutable.Set[\e[35mChar\e[0m](s.toCharArray)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(\
    \ i <- 0 until s.length ) {\n            if( s.charAt(i).toUpperCase != s.charAt(i).toLowerCase\
    \ ) {\n                result.append(s.charAt(i))\n            } else {\n    \
    \            result.append(s.charAt(i).toLowerCase)\n            }\n        }\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3rjf7xid.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m( s.charAt(i).toUpperCase !=\
    \ s.charAt(i).toLowerCase ) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3rjf7xid.scala:16:42 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result.append(s.charAt(i).toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              value toLowerCase is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n\n        chars.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxrimk04_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (c\
    \ <- s) {\n            if (c.isLetter) chars += c.toUpperCase\n            else\
    \ chars += c.toLowerCase\n        }\n        chars.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph133dxg_.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for (i\
    \ <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn860m8ke.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          result.append((s.charAt(i) - 'a').toString)\n            else\n   \
    \             result.append(s.charAt(i))\n        return result.toString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe88h4w63.scala:20)\n\tat Problem.main(tmpe88h4w63.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length)\n            chars += s.charAt(i)\n        chars.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wn66jyj.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append(s.charAt(i).toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9wc6xlnc.scala:20)\n\tat Problem.main(tmp9wc6xlnc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = s.toList\n        chars.reverse.foldLeft(\"\
    \")( (acc, c) => acc + (if (c.isLetter) c.toUpper else c.toLower) )\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp8o8g3ok.scala:15)\n\tat Problem.main(tmpp8o8g3ok.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length){\n            chars += s.charAt(i)\n        }\n        if(chars.isEmpty){\n\
    \            return s\n        }\n        chars.toSeq.sortWith(_ < _).reverse.mkString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxuvyx1vq.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          result.append(s.charAt(i).toUpper)\n            else\n            \
    \    result.append(s.charAt(i))\n        return result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc7gw5vyq.scala:20)\n\tat Problem.main(tmpc7gw5vyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length)\n            if(i == 0 || s.charAt(i) != s.charAt(i-1))\n\
    \                result.append((s.charAt(i).toUpperCase + s.charAt(i-1).toLowerCase).toChar)\n\
    \            else\n                result.append((s.charAt(i).toLowerCase).toChar)\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiav4ka4_.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result.append((s.charAt(i).toUpperCase\
    \ + s.charAt(i-\e[31m1\e[0m).toLowerCase).toChar)\n\e[31m\e[31m   |\e[0m     \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                          value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiav4ka4_.scala:16:43 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result.append((s.charAt(i).toLowerCase).toChar)\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            result.append((s.charAt(i) - 'a').toString)\n            }\n    \
    \        else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i)\
    \ - 'A').toString)\n            }\n            else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1bs5xenk.scala:26)\n\tat Problem.main(tmp1bs5xenk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = s.toCharArray\n        val reversed = chars.reverse\n\
    \        val result = reversed.mkString.toUpperCase\n        if (chars.isEmpty)\
    \ result\n        else result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppb64ar3f.scala:18)\n\tat Problem.main(tmppb64ar3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n        {\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \            {\n                result.append((s.charAt(i) - 'a').toString)\n\
    \            }\n            else\n            {\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8s2ri3hw.scala:26)\n\tat Problem.main(tmp8s2ri3hw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                result.append((c\
    \ to 'A').toString)\n            }\n            else{\n                result.append(c)\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg82ndsfg.scala:24)\n\tat Problem.main(tmpg82ndsfg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val str = new StringBuilder(s)\n        val res = new\
    \ StringBuilder(s)\n        val len = s.length\n        for(i <- 0 until len){\n\
    \            val c = str.charAt(i)\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u'){\n                res.setCharAt(i, c.toUpperCase)\n\
    \            }\n            else{\n                res.setCharAt(i, c.toLowerCase)\n\
    \            }\n        }\n        res.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpomc0k15d.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                res.setCharAt(i, c.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpomc0k15d.scala:20:35 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                res.setCharAt(i, c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length){\n            chars += s.charAt(i)\n        }\n        if(chars.isEmpty){\n\
    \            return s\n        }\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4wb6_47t.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979463
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'A'){\n                result.append(\"B\")\n            }else if(c == 'B'){\n\
    \                result.append(\"A\")\n            }else if(c == 'C'){\n     \
    \           result.append(\"D\")\n            }else if(c == 'D'){\n          \
    \      result.append(\"C\")\n            }else if(c == 'E'){\n               \
    \ result.append(\"F\")\n            }else if(c == 'F'){\n                result.append(\"\
    E\")\n            }else if(c == 'G'){\n                result.append(\"H\")\n\
    \            }else if(c == 'H'){\n                result.append(\"G\")\n     \
    \       }else if(c == 'I'){\n                result.append(\"J\")\n          \
    \  }else if(c == 'J'){\n                result.append(\"I\")\n            }else\
    \ if(c == 'K'){\n                result.append(\"L\")\n            }else if(c\
    \ == 'L'){\n                result.append(\"K\")\n            }else if(c == 'M'){\n\
    \                result.append(\"N\")\n            }else if(c == 'N'){\n     \
    \           result.append(\"M\")\n            }else if(c == 'O'){\n          \
    \      result.append(\"P\")\n            }else if(c == 'P'){\n               \
    \ result.append(\"O\")\n            }else if(c == 'Q'){\n                result.append(\"\
    R\")\n            }else if(c == 'R'){\n                result.append(\"Q\")\n\
    \            }else if(c == 'S'){\n                result.append(\"T\")\n     \
    \       }else if(c == 'T'){\n                result.append(\"S\")\n          \
    \  }else if(c == 'U'){\n                result.append(\"V\")\n            }else\
    \ if(c == 'V'){\n                result.append(\"U\")\n            }else if(c\
    \ == 'W'){\n                result.append(\"X\")\n            }else if(c == 'X'){\n\
    \                result.append(\"W\")\n            }else if(c == 'Y'){\n     \
    \           result.append(\"Z\")\n            }else if(c == 'Z'){\n          \
    \      result.append(\"Y\")\n            }else{\n                result.append(c)\n\
    \            }\n        }\n        return result.toString()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb1n0p59i.scala:73)\n\tat Problem.main(tmpb1n0p59i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c.isLetter)\
    \ result.append(c.toUpperCase)\n            else result.append(c)\n        }\n\
    \        if(result.length == 0) result.reverse\n        else result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp37jcdfy3.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ln82mra.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.toUpperCase\n        val list = s.toList\n\
    \        val reversed = list.map(x => if (x.isLetter) x.toUpperCase() else x)\n\
    \        val result = reversed.mkString(\"\")\n        val list = result.toList\n\
    \        val reversed = list.map(x => if (x.isLetter) x.toUpperCase() else x)\n\
    \        val result = reversed.mkString(\"\")\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb9zebows.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = reversed.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb9zebows.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = result.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlist is already\
    \ defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb9zebows.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = list.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x.isLetter) x.toUpperCase() \e[33melse\e[0m x)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mreversed is already defined as \e[33mvalue\e[0m \e[35mreversed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb9zebows.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = reversed.mkString(\e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpb9zebows.scala:13:55 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mreversed\e[0m = list.map(\e[36mx\e[0m => \e[33mif\e\
    [0m (x.isLetter) x.toUpperCase() \e[33melse\e[0m x)\n\e[31m"
  stdout: ''
  timestamp: 1659979470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n         \
    \   if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' ||\
    \ c == 'G' || c == 'H' || c == 'I' || c == 'J' || c == 'K' || c == 'L' || c ==\
    \ 'M' || c == 'N' || c == 'O' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'U' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c\
    \ == 'Z')\n            {\n                result.append((c - 'A').toString)\n\
    \            }\n            else\n            {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnxvrxnow.scala:27)\n\tat Problem.main(tmpnxvrxnow.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val str = new StringBuilder\n        for(i <- 0 until\
    \ s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n    \
    \            str.append(s.charAt(i).toUpper)\n            }else if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'){\n                str.append(s.charAt(i).toLower)\n\
    \            }else{\n                str.append(s.charAt(i))\n            }\n\
    \        }\n        str.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2erybyes.scala:25)\n\tat Problem.main(tmp2erybyes.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toLower\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2fhrc5za.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ArrayBuffer.empty[Char]\n        for\
    \ (c <- s) {\n            if (c.isLetter) chars += c.toUpperCase\n           \
    \ else chars += c.toLowerCase\n        }\n        if (chars.isEmpty) s.reverse\n\
    \        else chars.reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"\
    4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpntzgdn__.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ s.length)\n            if (s(i) >= 'a' && s(i) <= 'z')\n                result.append(s(i).toChar.toUpperCase)\n\
    \            else\n                result.append(s(i))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqk81pz1.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result.append(s(i).toChar.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              value toUpperCase is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659979471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new mutable.ListBuffer[String]()\n      \
    \  for(i <- 0 until s.length)\n        {\n            if(s.charAt(i).toUpper !=\
    \ s.charAt(i).toLower)\n            {\n                result += s.charAt(i)\n\
    \            }\n        }\n        if(result.isEmpty)\n        {\n           \
    \ result += s\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkeq_6qs1.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i).toLowerCase != s.charAt(i).toUpperCase\
    \ || s.charAt(i) == ' ')\n                chars += s.charAt(i)\n            else\n\
    \                chars += s.charAt(i).toLowerCase\n        chars.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvid147qq.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvid147qq.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase !=\
    \ s.charAt(i).toUpperCase || s.charAt(i) == \e[31m' '\e[0m)\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \ value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (c <- s) {\n            if (chars.contains(c)) {\n              \
    \  chars.remove(c)\n            } else {\n                chars += c\n       \
    \     }\n        }\n        if (chars.isEmpty) {\n            result.append(s)\n\
    \        } else {\n            for (c <- chars) {\n                result.append(c.toUpperCase)\n\
    \            }\n            result.append(s.toLowerCase)\n        }\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1e1t20k2.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprca6uev6.scala:20)\n\tat Problem.main(tmprca6uev6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char](s)\n        val reversed\
    \ = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n            c match\
    \ {\n                case c if c.isLetter => reversed.add(c)\n               \
    \ case c => reversed.add(c)\n            }\n        }\n        if (reversed.isEmpty)\
    \ s\n        else reversed.mkString.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3zq7atl7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m](s)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3zq7atl7.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979468
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = s.toUpperCase\n        val reversed = result.reverse\n\
    \        val noLetters = reversed.toUpperCase\n        if (noLetters.isEmpty)\
    \ result\n        else noLetters\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptb0ks_xy.scala:18)\n\tat Problem.main(tmptb0ks_xy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979473
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder(s.length)\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            val lower\
    \ = c.toLower\n            val upper = c.toUpper\n            val isLetter = lower\
    \ != upper && lower != c\n            if(isLetter){\n                result.append((upper\
    \ - lower).toChar)\n            } else {\n                result.append(c)\n \
    \           }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiww9cf7_.scala:26)\n\tat Problem.main(tmpiww9cf7_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i).toLowerCase == s.charAt(i).toUpperCase\
    \ || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n     \
    \       return s\n        }\n        chars.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv036o2wr.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpv036o2wr.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m(s.charAt(i).toLowerCase ==\
    \ s.charAt(i).toUpperCase || s.charAt(i).toLowerCase == s.charAt(i).toLowerCase){\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val chars = mutable.HashSet[Char]()\n        for(i <-\
    \ 0 until s.length)\n            chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprowogue7.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979473
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    def solve(s : String)\
    \ : String = {\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n      \
    \          result.append(s.charAt(i).toUpper)\n            else\n            \
    \    result.append(s.charAt(i))\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbwaq1yhr.scala:20)\n\tat Problem.main(tmpbwaq1yhr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979474
