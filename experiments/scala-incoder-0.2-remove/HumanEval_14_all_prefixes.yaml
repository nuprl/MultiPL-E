name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    def allPrefixes(string : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ["        val prefixes = mutable.ListBuffer[String]()\n        val length\
    \ = string.length\n        var i = 0\n        while (i < length) {\n         \
    \   val prefix = string.substring(0, i)\n            if (prefixes.contains(prefix))\
    \ {\n                prefixes += prefix\n            } else {\n              \
    \  prefixes += prefix\n                i += 1\n            }\n        }\n    \
    \    prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(' ').foreach(prefix => prefixes += prefix)\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n  \
    \      while (i < string.length) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n            i += 1\n        }\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = 0\n        for(i <- 0 until string.length){\n\
    \            currentLength = i\n            currentPrefix = string.substring(0,\
    \ i)\n            prefixes += currentPrefix\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        val shortest = longest\n        var i = 0\n        while (i < longest)\
    \ {\n            val prefix = string.substring(0, i)\n            prefixes +=\
    \ prefix\n            i += 1\n        }\n        prefixes.toList", "        val\
    \ prefixes = mutable.ListBuffer[String]()\n        var prefix = \"\"\n       \
    \ for(i <- 0 until string.length){\n            prefix = prefix + string.charAt(i)\n\
    \            prefixes += prefix\n        }\n        prefixes.toList", "      \
    \  val prefixes = mutable.ListBuffer[String]()\n        val length = string.length\n\
    \        for (i <- 0 until length) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        val maxLen = math.min(len, 10)\n        val minLen = math.max(len, 1)\n\
    \        for(i <- 0 until maxLen) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes", "        val\
    \ prefixes = mutable.ListBuffer.empty[String]\n        val chars = string.chars\n\
    \        var i = 0\n        while (i < chars.length) {\n            val char =\
    \ chars(i)\n            val prefix = chars.takeWhile(_ != char).mkString\n   \
    \         if (prefixes.contains(prefix)) {\n                prefixes += prefix\n\
    \            } else {\n                prefixes += prefix\n                prefixes\
    \ += char\n            }\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var current = string\n\
    \        while (current != \"\") {\n            prefixes += current\n        \
    \    current = current.substring(0,current.length-1)\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        for (i <- 0 until longest) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        for(i <- 0 until string.length){\n            currentPrefix\
    \ = currentPrefix + string.charAt(i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var current = string\n        while (current.length != 0) {\n       \
    \     prefixes += current\n            current = current.dropRight(1)\n      \
    \  }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesHelper(string, prefixes)\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        val length = string.length\n\
    \        val chars = string.chars\n        val charsLength = chars.length\n  \
    \      val maxChar = chars.max\n        val maxCharIndex = chars.indexOf(maxChar)\n\
    \        val minChar = chars.min\n        val minCharIndex = chars.indexOf(minChar)\n\
    \        val maxIndex = maxCharIndex + length\n        val minIndex = minCharIndex\
    \ - length\n        val maxChar = chars(maxCharIndex)\n        val minChar = chars(minCharIndex)\n\
    \        val maxCharIndex = chars.indexOf(maxChar)\n        val minCharIndex =\
    \ chars.indexOf(minChar)\n        val maxIndex = maxCharIndex + length\n     \
    \   val minIndex = minCharIndex - length\n        val maxChar = chars(maxCharIndex)\n\
    \        val minChar = chars(minCharIndex)\n        val maxCharIndex = chars.indexOf(maxChar)\n\
    \        val minCharIndex = chars.indexOf(minChar)\n        val maxIndex = maxCharIndex\
    \ + length\n        val minIndex = minCharIndex - length\n        val maxChar\
    \ = chars(maxCharIndex)\n        val minChar = chars(minCharIndex)\n        val\
    \ maxCharIndex = chars.indexOf(maxChar)\n        val minCharIndex = chars.indexOf(minChar)\n\
    \        val maxIndex = maxCharIndex + length\n        val minIndex = minCharIndex\
    \ - length\n        val maxChar = chars(maxCharIndex)\n        val minChar = chars(minCharIndex)\n\
    \        val maxCharIndex = chars.indexOf(maxChar)\n        val minCharIndex =\
    \ chars.indexOf(minChar)\n        val maxIndex = maxCharIndex + length\n     \
    \   val minIndex = minCharIndex - length\n        val maxChar = chars(maxCharIndex)\n\
    \        val minChar = chars(minCharIndex)\n        val maxCharIndex = chars.indexOf(maxChar)\n\
    \        val minCharIndex = chars.indexOf(minChar)\n        val maxIndex = maxCharIndex\
    \ + length\n        val minIndex = minCharIndex - length\n        val maxChar\
    \ = chars(maxCharIndex)\n        val minChar = chars(minCharIndex)\n        val\
    \ maxCharIndex = chars.indexOf(maxChar)\n        val minCharIndex = chars.indexOf(minChar)\n\
    \        val maxIndex = maxCharIndex + length\n        val minIndex = minCharIndex\
    \ - length\n        val maxChar = chars(maxCharIndex)\n        val minChar = chars(min",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            val prefix = string.substring(0, i)\n            if (prefixes.contains(prefix))\
    \ {\n                prefixes += prefix\n            } else {\n              \
    \  prefixes += prefix\n                i += 1\n            }\n        }\n    \
    \    prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            val prefix = string.substring(0, i)\n            if (prefixes.contains(prefix))\
    \ {\n                prefixes += prefix\n                i += 1\n            }\
    \ else {\n                prefixes += prefix\n                i += 1\n       \
    \         prefixes += prefix\n                i += 1\n            }\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        val prefixLength = string.length\n \
    \       for(i <- 0 until len) {\n            val prefix = string.substring(0,\
    \ i)\n            val prefixLength = prefix.length\n            val prefixLength\
    \ = math.min(prefixLength, len)\n            prefixes += prefix\n        }\n \
    \       prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val longest = string.length\n        var index = 0\n        while (index\
    \ < longest) {\n            val prefix = string.substring(0, index)\n        \
    \    if (prefixes.contains(prefix)) {\n                prefixes += prefix\n  \
    \          } else {\n                prefixes += prefix\n                index\
    \ += longest\n            }\n        }\n        prefixes.toList", "        val\
    \ prefixes = mutable.ListBuffer[String]()\n        var currentPrefix = \"\"\n\
    \        var currentLength = 0\n        for (i <- 0 until string.length) {\n \
    \           if (string.charAt(i) == string.charAt(currentLength)) {\n        \
    \        currentLength += 1\n            } else {\n                currentLength\
    \ = 0\n                currentPrefix = string.substring(0,i)\n               \
    \ prefixes += currentPrefix\n            }\n        }\n        prefixes", "  \
    \      val prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        val shortest = longest\n        val current = 1\n        while (current\
    \ <= longest) {\n            val prefix = string.substring(0, current)\n     \
    \       prefixes += prefix\n            current += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        var i = 0\n        while (i < len) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        val longest =\
    \ string.length\n        val shortest = longest\n        while(longest > 0){\n\
    \            val newPrefix = string.substring(0, longest)\n            prefixes\
    \ += newPrefix\n            longest = longest - 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val length = string.length\n\
    \        for (i <- 0 until length) {\n            val prefix = string.substring(0,\
    \ i)\n            if (prefixes.contains(prefix)) {\n                continue\n\
    \            }\n            prefixes += prefix\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var currentLength\
    \ = 0\n        for(i <- 0 until string.length){\n            val currentChar =\
    \ string.charAt(i)\n            if(currentLength == 0){\n                prefixes\
    \ += currentChar\n            }\n            else if(currentLength < string.length){\n\
    \                val currentPrefix = string.substring(0,i)\n                if(currentPrefix.length\
    \ > currentLength){\n                    currentLength = currentPrefix.length\n\
    \                    prefixes += currentPrefix\n                }\n          \
    \  }\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            prefixes += string.substring(0, i)\n            i += 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesHelper(string, prefixes)\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        string.split(\"\").foreach(prefix\
    \ => {\n            prefixes += prefix\n            prefixes += prefix + \"-\"\
    \n        })\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var current = string\n        var longest = 0\n        var longestLength\
    \ = 0\n        while (current != \"\") {\n            val length = current.length\n\
    \            if (length > longestLength) {\n                longestLength = length\n\
    \                longest = current\n            }\n            current = current.drop(longestLength)\n\
    \            prefixes += longest\n        }\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        allPrefixesRec(string, prefixes)\n \
    \       prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val longest = string.length\n        val shortest = 0\n        while\
    \ (shortest < longest) {\n            val prefix = string.substring(0, shortest)\n\
    \            prefixes += prefix\n            shortest += 1\n        }\n      \
    \  prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesHelper(string, prefixes)\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        val chars = string.chars\n\
    \        val len = string.length\n        val start = 0\n        while (start\
    \ < len) {\n            val end = start + chars.length\n            val prefix\
    \ = string.substring(start, end)\n            prefixes += prefix\n           \
    \ start = end\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for (i <- 0 until string.length) {\n\
    \            currentPrefix = currentPrefix + string.charAt(i)\n            if\
    \ (string.startsWith(currentPrefix)) {\n                prefixes += currentPrefix\n\
    \            }\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val chars = string.chars\n        val length = string.length\n      \
    \  val startIndex = math.min(length, 1)\n        val endIndex = math.min(length,\
    \ startIndex + 1)\n        val prefix = string.substring(startIndex, endIndex)\n\
    \        prefixes += prefix\n        while (endIndex < length) {\n           \
    \ val prefix = string.substring(startIndex, endIndex)\n            prefixes +=\
    \ prefix\n            endIndex += 1\n        }\n        prefixes.toList", "  \
    \      val prefixes = mutable.ListBuffer.empty[String]\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        var currentIndex\
    \ = 0\n        while (currentIndex < currentLength) {\n            currentPrefix\
    \ = currentPrefix + string.charAt(currentIndex)\n            currentLength = currentLength\
    \ - 1\n            currentIndex = currentIndex + 1\n            if (currentLength\
    \ == 0) {\n                prefixes += currentPrefix\n            }\n        }\n\
    \        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n   \
    \     var current = string\n        while (current != \"\") {\n            prefixes\
    \ += current\n            current = current.substring(0,current.length-1)\n  \
    \      }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesHelper(string, prefixes)\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        for (i <- 0 until longest) {\n            val prefix = string.substring(0,\
    \ i)\n            if (prefixes.contains(prefix)) {\n                prefixes +=\
    \ prefix\n            } else {\n                prefixes += prefix\n         \
    \   }\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        var\
    \ currentIndex = 0\n        while (currentIndex < string.length) {\n         \
    \   if (string.charAt(currentIndex) == string.charAt(currentLength)) {\n     \
    \           currentLength += 1\n            } else {\n                currentLength\
    \ = 1\n                currentPrefix = currentPrefix + string.charAt(currentIndex)\n\
    \            }\n            currentIndex += 1\n        }\n        prefixes +=\
    \ currentPrefix\n        while (currentLength > 0) {\n            currentLength\
    \ -= 1\n            currentPrefix = currentPrefix + string.charAt(currentIndex)\n\
    \            currentIndex += 1\n            prefixes += currentPrefix\n      \
    \  }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val longest = string.length\n        val shortest = longest\n       \
    \ while(longest > 0){\n            val prefix = string.substring(0, longest)\n\
    \            prefixes += prefix\n            longest = longest - 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val chars = string.chars\n        val len = chars.length\n        var\
    \ i = 0\n        while (i < len) {\n            val prefix = chars.take(i).mkString\n\
    \            if (prefixes.contains(prefix)) {\n                prefixes += prefix\n\
    \            } else {\n                prefixes += prefix\n                i +=\
    \ 1\n            }\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        var currentPrefix = \"\"\n     \
    \   var currentLength = string.length\n        while (currentLength > 0) {\n \
    \           currentPrefix = string.substring(0, currentLength)\n            prefixes\
    \ += currentPrefix\n            currentLength -= 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var current =\
    \ string\n        var prefixLength = string.length\n        while (prefixLength\
    \ > 0) {\n            prefixes += current\n            current = current.substring(0,\
    \ prefixLength)\n            prefixLength -= 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var current =\
    \ string\n        while(current != \"\") {\n            prefixes += current\n\
    \            current = current.dropRight(1)\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        string.split(\"\"\
    ).reverse.foreach(prefix => prefixes += prefix)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val longest = string.length\n        val shortest = 0\n        while(longest\
    \ > shortest) {\n            prefixes += string.substring(0, shortest)\n     \
    \       shortest = shortest * 2\n        }\n        prefixes.toList", "      \
    \  val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix = \"\
    \"\n        for(i <- 0 until string.length){\n            currentPrefix += string.charAt(i)\n\
    \            prefixes += currentPrefix\n        }\n        prefixes", "      \
    \  val prefixes = mutable.ListBuffer.empty[String]\n        val longest = string.length\n\
    \        val shortest = longest\n        val i = longest\n        while (i !=\
    \ 0) {\n            prefixes += string.substring(0, i)\n            i -= 1\n \
    \       }\n        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        for\
    \ (c <- string) {\n            if (currentLength == 0) currentPrefix = c\n   \
    \         else if (currentLength < c.length) currentPrefix = currentPrefix + c\n\
    \            else {\n                prefixes += currentPrefix\n             \
    \   currentPrefix = \"\"\n                currentLength = 0\n            }\n \
    \           currentLength += 1\n        }\n        prefixes += currentPrefix\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        allPrefixesHelper(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        for (i <- 0 until longest) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        val length = string.length\n\
    \        val longest = string.substring(0, length-1)\n        val shortest = string.substring(0,\
    \ length/2)\n        val longestLength = longest.length\n        val shortestLength\
    \ = shortest.length\n        val longestPrefix = longest.substring(0, longestLength)\n\
    \        val shortestPrefix = shortest.substring(0, shortestLength)\n        val\
    \ longestPrefixLength = longestPrefix.length\n        val shortestPrefixLength\
    \ = shortestPrefix.length\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val longestPrefixLength = longestPrefixLength\
    \ + longestPrefixLength\n        val shortestPrefixLength = shortestPrefixLength\
    \ + shortestPrefixLength\n        val ", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").foreach(prefix => {\n            prefixes += prefix\n\
    \            prefixes += prefix + \"-\"\n        })\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        val chars = string.chars\n\
    \        val length = string.length\n        val startIndex = math.min(length,\
    \ 1)\n        val endIndex = math.min(length, startIndex + 1)\n        for (i\
    \ <- startIndex to endIndex) {\n            prefixes += chars(i)\n        }\n\
    \        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        val len = string.length\n        for (i <- 0 until len) {\n         \
    \   val prefix = string.substring(0, i)\n            prefixes += prefix\n    \
    \    }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentLength = string.length\n        var currentPrefix = \"\"\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix: String = \"\"\n        var currentLength = 0\n   \
    \     for (c <- string) {\n            if (currentLength == 0) {\n           \
    \     currentPrefix = c\n                currentLength = 1\n            } else\
    \ {\n                if (c == currentPrefix) {\n                    currentLength\
    \ += 1\n                } else {\n                    prefixes += currentPrefix\n\
    \                    currentPrefix = c\n                    currentLength = 1\n\
    \                }\n            }\n        }\n        prefixes += currentPrefix\n\
    \        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n   \
    \     var current = string\n        while (current.length > 0) {\n           \
    \ prefixes += current\n            current = current.dropRight(1)\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var current = \"\"\n        for (c <- string) {\n            if (c.isLetter)\
    \ {\n                current += c\n            } else {\n                prefixes\
    \ += current\n                current = \"\"\n            }\n        }\n     \
    \   prefixes += current\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        val prefix = new Array[Char](len)\n\
    \        var i = 0\n        while (i < len) {\n            prefix(i) = string(i)\n\
    \            i += 1\n        }\n        prefixes.reverse foreach { prefix =>\n\
    \            val prefixLength = prefix.length\n            val prefixString =\
    \ new Array[Char](prefixLength)\n            i = 0\n            while (i < prefixLength)\
    \ {\n                prefixString(i) = prefix(i)\n                i += 1\n   \
    \         }\n            prefixes += prefixString\n        }\n        prefixes.reverse",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var currentLength\
    \ = 0\n        var currentPrefix: String = \"\"\n        for(i <- 0 until string.length){\n\
    \            currentLength = string.length\n            currentPrefix = \"\"\n\
    \            for(j <- 0 until currentLength){\n                currentPrefix =\
    \ currentPrefix + string.charAt(j)\n                if(string.charAt(j) == string.charAt(j\
    \ + 1)){\n                    currentLength = j + 1\n                }\n     \
    \       }\n            prefixes += currentPrefix\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        val len = string.length\n\
    \        var i = 0\n        while (i < len) {\n            val prefix = string.substring(0,\
    \ i)\n            if (prefixes.contains(prefix)) {\n                prefixes +=\
    \ prefix\n            } else {\n                prefixes += prefix\n         \
    \       i += 1\n            }\n        }\n        prefixes.toList", "        val\
    \ prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        val len = string.length\n        for (i <- 0 until len) {\n         \
    \   val prefix = string.substring(0, i)\n            prefixes += prefix\n    \
    \    }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        val maxLen = math.min(len, 10)\n   \
    \     val minLen = math.max(len, 1)\n        for (i <- minLen until maxLen) {\n\
    \            val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \            i += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var current = string\n        while\
    \ (current != \"\") {\n            prefixes += current\n            current =\
    \ current.substring(0,current.length-1)\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        for(i <- 0 until len) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        string.split('\
    \ ').foreach { word =>\n            val prefix = word.takeWhile(_ != ' ').mkString\n\
    \            prefixes += prefix\n        }\n        prefixes.toList", "      \
    \  val prefixes = mutable.ListBuffer[String]()\n        for(i <- 0 until string.length){\n\
    \            val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var current = string\n        while(current != \"\") {\n            prefixes\
    \ += current\n            current = current.substring(0,current.length-1)\n  \
    \      }\n        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until string.length)\n            prefixes += string.substring(0,\
    \ i)\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val longest = string.length\n        val shortest = 0\n        while(shortest\
    \ < longest) {\n            val prefix = string.substring(shortest, longest)\n\
    \            prefixes += prefix\n            shortest += 1\n        }\n      \
    \  prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n  \
    \      val len = string.length\n        val chars = string.chars\n        var\
    \ i = 0\n        while (i < len) {\n            val prefix = chars.takeWhile(_\
    \ != chars(i))\n            prefixes += prefix\n            i += 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentLength = 0\n        var currentPrefix: String = \"\"\n   \
    \     for(i <- 0 until string.length) {\n            currentLength += 1\n    \
    \        currentPrefix = currentPrefix + string.charAt(i)\n            if(currentLength\
    \ < string.length && currentLength > 0) {\n                prefixes += currentPrefix\n\
    \            }\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        val length = string.length\n\
    \        val startIndex = 0\n        val endIndex = length\n        while (startIndex\
    \ < endIndex) {\n            val prefix = string.substring(startIndex, endIndex)\n\
    \            prefixes += prefix\n            startIndex = endIndex\n         \
    \   endIndex = startIndex + length\n        }\n        prefixes.toList", "   \
    \     val prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        for (i <- 0 until longest) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var current = string\n        while (current != \"\") {\n           \
    \ prefixes += current\n            current = current.dropRight(1)\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val prefixLength = string.length\n        val prefixLengths = mutable.ListBuffer[Int]()\n\
    \        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted\
    \ = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n\
    \        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted\
    \ = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n\
    \        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted\
    \ = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n\
    \        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted\
    \ = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n\
    \        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted\
    \ = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n\
    \        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted\
    \ = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n\
    \        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted\
    \ = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n\
    \        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted\
    \ = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n\
    \        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted\
    \ = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n\
    \        val prefixLengthsSorted = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted\
    \ = mutable.ListBuffer[Int]()\n        val prefixLengthsSorted = mutable.ListBuffer[Int]",
  "        val prefixes = mutable.ListBuffer[String]()\n        var prefix = \"\"\n\
    \        for(i <- 0 until string.length){\n            prefix = prefix ++ string.charAt(i)\n\
    \            prefixes += prefix\n        }\n        prefixes.toList", "      \
    \  val prefixes = mutable.ListBuffer[String]()\n        val length = string.length\n\
    \        for (i <- 0 until length) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentLength = 0\n        var currentPrefix: String = \"\"\n   \
    \     for(c <- string) {\n            currentLength += 1\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes += currentPrefix\n        }\n    \
    \    prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) == string.charAt(i-1))\n                currentPrefix\
    \ = currentPrefix + string.charAt(i)\n            else\n                prefixes\
    \ += currentPrefix\n        currentPrefix", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        val prefixLength = len\n        var\
    \ i = 0\n        while (i < len) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        var i = 0\n        while (i < len) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n  \
    \      while (i < string.length) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes += currentPrefix\n            currentLength = currentLength\
    \ - 1\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").reverse.foreach(prefix => {\n            prefixes\
    \ += prefix\n            prefixes += prefix + \"a\"\n            prefixes += prefix\
    \ + \"ab\"\n            prefixes += prefix + \"abc\"\n            prefixes +=\
    \ prefix + \"abcd\"\n            prefixes += prefix + \"abcde\"\n            prefixes\
    \ += prefix + \"abcdef\"\n            prefixes += prefix + \"abcdefg\"\n     \
    \       prefixes += prefix + \"abcdefgh\"\n            prefixes += prefix + \"\
    abcdefghi\"\n            prefixes += prefix + \"abcdefghij\"\n            prefixes\
    \ += prefix + \"abcdefghijk\"\n            prefixes += prefix + \"abcdefghijkl\"\
    \n            prefixes += prefix + \"abcdefghijklm\"\n            prefixes +=\
    \ prefix + \"abcdefghijklmn\"\n            prefixes += prefix + \"abcdefghijklmno\"\
    \n            prefixes += prefix + \"abcdefghijklmnop\"\n            prefixes\
    \ += prefix + \"abcdefghijklmnopq\"\n            prefixes += prefix + \"abcdefghijklmnopqrs\"\
    \n            prefixes += prefix + \"abcdefghijklmnopqrst\"\n            prefixes\
    \ += prefix + \"abcdefghijklmnopqrstu\"\n            prefixes += prefix + \"abcdefghijklmnopqrstuv\"\
    \n            prefixes += prefix + \"abcdefghijklmnopqrstuvw\"\n            prefixes\
    \ += prefix + \"abcdefghijklmnopqrstuvwx\"\n            prefixes += prefix + \"\
    abcdefghijklmnopqrstuvwxy\"\n            prefixes += prefix + \"abcdefghijklmnopqrstuvwxyz\"\
    \n        })\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentLength = 0\n        var currentPrefix: String = \"\"\n   \
    \     for (c <- string) {\n            if (currentLength == 0) {\n           \
    \     currentPrefix = c\n                currentLength = 1\n            } else\
    \ {\n                if (c == currentPrefix) {\n                    currentLength\
    \ += 1\n                } else {\n                    prefixes += currentPrefix\n\
    \                    currentPrefix = c\n                    currentLength = 1\n\
    \                }\n            }\n        }\n        prefixes += currentPrefix\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            prefixes += string.substring(0, i)\n            i += 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        val prefix = new Array[Char](len)\n\
    \        var i = 0\n        while (i < len) {\n            prefix(i) = string(i)\n\
    \            i += 1\n        }\n        prefixes += prefix\n        while (i <\
    \ len) {\n            prefix(i) = string(i)\n            i += 1\n        }\n \
    \       prefixes += prefix\n        prefixes.toList", "        val prefixes =\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until string.length){\n   \
    \         prefixes += string.substring(0, i)\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentLength\
    \ = 0\n        var currentPrefix = \"0\"\n        var currentPrefixLength = string.length\n\
    \n        while (currentPrefixLength > 0) {\n            currentLength = currentPrefixLength\n\
    \            currentPrefix = string.substring(0, currentPrefixLength)\n      \
    \      prefixes += currentPrefix\n            currentPrefixLength -= 1\n     \
    \   }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val longest = string.length\n        for (i <- 0 until longest) {\n \
    \           val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentLength = string.length\n        var currentPrefix: String\
    \ = \"\"\n        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i) == string.charAt(i-1))\
    \ {\n                currentLength += 1\n            } else {\n              \
    \  currentLength = 0\n                currentPrefix = string.substring(0,i)\n\
    \                prefixes += currentPrefix\n            }\n        }\n       \
    \ prefixes", "        val prefixes = mutable.ListBuffer[String]()\n        string.split(\"\
    \").reverse.foreach(prefix => {\n            val newPrefixes = prefix.split(\"\
    \").reverse.map(s => s + prefix).filter(s => !prefixes.contains(s))\n        \
    \    prefixes ++= newPrefixes\n        })\n        prefixes.reverse.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0,currentLength)\n    \
    \        prefixes += currentPrefix\n            currentLength -= 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        val length = string.length\n        for(i <- 0 until length) {\n    \
    \        val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \            i += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        val length = string.length\n       \
    \ val maxLength = math.min(length, 10)\n        val minLength = math.max(length,\
    \ 1)\n        val maxIndex = math.min(length, maxLength)\n        val minIndex\
    \ = math.max(length, minLength)\n        for (i <- minIndex to maxIndex) {\n \
    \           prefixes += string.substring(0, i)\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        for(i <- 0 until len) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        for(i <- 0 until string.length) {\n            currentPrefix\
    \ += string(i)\n            prefixes += currentPrefix\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val lengths = mutable.ListBuffer[Int]()\n\
    \        val chars = string.chars\n        val length = chars.length\n       \
    \ var i = 0\n        while (i < length) {\n            val char = chars(i)\n \
    \           val length = char.length\n            if (length >= lengths.last)\
    \ {\n                lengths += length\n            }\n            if (length\
    \ == lengths.last) {\n                prefixes += char\n            }\n      \
    \      i += 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        for\
    \ (c <- string) {\n            if (currentLength == currentPrefix.length) {\n\
    \                currentPrefix += c\n                currentLength += 1\n    \
    \        } else {\n                prefixes += currentPrefix\n               \
    \ currentPrefix = c\n                currentLength = 1\n            }\n      \
    \  }\n        prefixes += currentPrefix\n        prefixes.toList", "        val\
    \ prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentLength = 0\n        var currentPrefix: String = \"\"\n   \
    \     for(i <- 0 until string.length) {\n            if(string.charAt(i) == string.charAt(currentLength))\
    \ {\n                currentLength += 1\n                currentPrefix = currentPrefix\
    \ + string.charAt(i)\n            } else {\n                prefixes += currentPrefix\n\
    \                currentLength = 1\n                currentPrefix = string.charAt(i)\n\
    \            }\n        }\n        prefixes += currentPrefix\n        prefixes",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        string.split(\"\
    \").reverse.foreach(prefix => {\n            prefixes += prefix\n            prefixes\
    \ += prefix + \"-\"\n        })\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        string.split(\"\").reverse.foreach(prefix\
    \ => {\n            prefixes += prefix\n            prefixes += prefix + \"-\"\
    \n        })\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \            i += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        val chars = string.chars\n     \
    \   val len = chars.length\n        var i = 0\n        while (i < len) {\n   \
    \         val char = chars(i)\n            val prefix = chars.takeWhile(_ != char).mkString\n\
    \            prefixes += prefix\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        val start = 0\n        while(start < len) {\n            val prefix =\
    \ string.substring(start, start + 1)\n            prefixes += prefix\n       \
    \     start += 1\n        }\n        prefixes.toList", "        val prefixes =\
    \ mutable.ListBuffer[String]()\n        val longest = string.length\n        val\
    \ shortest = longest\n        while(longest > 0) {\n            val prefix = string.substring(0,\
    \ longest)\n            prefixes += prefix\n            longest = longest - 1\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split(\"\").foreach(prefix => prefixes += prefix)\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        for(i <- 0 until string.length){\n            currentPrefix\
    \ += string.charAt(i)\n            prefixes += currentPrefix\n        }\n    \
    \    prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes, 0)\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        for(i <- 0 until len){\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        val lengths = mutable.ListBuffer[Int]()\n\
    \        val chars = string.chars\n        val length = chars.length\n       \
    \ for(i <- 0 to length-1){\n            val char = chars(i)\n            val length\
    \ = char.length\n            lengths += length\n            if(length == 1){\n\
    \                prefixes += char\n            }\n            else{\n        \
    \        val prefix = chars.take(length-1)\n                prefixes += prefix\n\
    \            }\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val longest = string.length\n        val shortest = 0\n        while(shortest\
    \ < longest) {\n            val prefix = string.substring(shortest, longest)\n\
    \            prefixes += prefix\n            shortest += 1\n        }\n      \
    \  prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n  \
    \      for(i <- 0 until string.length){\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesHelper(string, prefixes)\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix =\
    \ \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0,currentLength)\n    \
    \        prefixes += currentPrefix\n            currentLength -= 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val longest = string.length\n        val shortest = longest\n       \
    \ var i = longest\n        while (i >= 0) {\n            prefixes += string.substring(0,\
    \ i)\n            i -= 1\n        }\n        prefixes.reverse", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        val len = string.length\n        val\
    \ prefixLength = len / 2\n        val halfLength = len - prefixLength\n      \
    \  val half = string.substring(0, halfLength)\n        val prefix = string.substring(0,\
    \ prefixLength)\n        prefixes += prefix\n        val rest = string.substring(prefixLength)\n\
    \        allPrefixes(rest) foreach { prefix =>\n            prefixes += prefix\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        for(i\
    \ <- 0 until string.length){\n            if(string.charAt(i) == string.charAt(i-1)){\n\
    \                currentLength += 1\n            }\n            else{\n      \
    \          currentLength = 1\n            }\n            if(currentLength > currentPrefix.length){\n\
    \                currentPrefix = string.substring(0, i)\n                prefixes\
    \ += currentPrefix\n            }\n        }\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        val shortest = 0\n        while(shortest < longest) {\n            prefixes\
    \ += string.substring(0, shortest)\n            shortest += 1\n        }\n   \
    \     prefixes", "        val prefixes = mutable.ListBuffer[String]()\n      \
    \  val len = string.length\n        val maxLen = math.min(len, 10)\n        var\
    \ i = 0\n        while (i < len) {\n            val prefix = string.substring(0,\
    \ i)\n            if (prefixes.contains(prefix)) {\n                prefixes +=\
    \ prefix\n            } else {\n                prefixes += prefix\n         \
    \       i += 1\n            }\n        }\n        prefixes.toList", "        val\
    \ prefixes = mutable.ListBuffer[String]()\n        var currentPrefix = \"\"\n\
    \        for (c <- string) {\n            if (currentPrefix.length > 0) {\n  \
    \              prefixes += currentPrefix\n            }\n            currentPrefix\
    \ = currentPrefix + c\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        val len = string.length\n        val\
    \ prefix = new Array[Char](len)\n        for(i <- 0 until len) {\n           \
    \ prefix(i) = string(i)\n        }\n        prefixes += prefix\n        while(prefixes.nonEmpty)\
    \ {\n            val current = prefixes.head\n            val next = prefixes.tail.head\n\
    \            if(current == next) {\n                prefixes += next\n       \
    \     } else {\n                prefixes += current + next\n            }\n  \
    \      }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        val prefix = new Array[Char](len)\n\
    \        var i = 0\n        while (i < len) {\n            prefix(i) = string(i)\n\
    \            i += 1\n        }\n        prefixes += prefix\n        prefixes.reverse.foldLeft(prefixes.head)\
    \ { (prefix, prefixe) =>\n            val newPrefix = prefix ++ prefixe\n    \
    \        if (newPrefix.length < len) {\n                prefixes += newPrefix\n\
    \            }\n            newPrefix\n        }", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val length = string.length\n        val prefix = new Array[Char](length)\n\
    \        var i = 0\n        while (i < length) {\n            prefix(i) = string(i)\n\
    \            i += 1\n        }\n        prefixes += prefix\n        val longest\
    \ = prefixes.max\n        val longestLength = longest.length\n        val longestPrefix\
    \ = new Array[Char](longestLength)\n        var j = 0\n        while (j < longestLength)\
    \ {\n            longestPrefix(j) = longest(j)\n            j += 1\n        }\n\
    \        prefixes += longestPrefix\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        val longest = string.length\n  \
    \      val shortest = 0\n        for (i <- 0 until longest) {\n            if\
    \ (string.charAt(i) == string.charAt(longest)) {\n                prefixes +=\
    \ string.charAt(i)\n                shortest = i\n            }\n        }\n \
    \       prefixes += string.substring(0, shortest)\n        prefixes", "      \
    \  val prefixes = mutable.ListBuffer[String]()\n        val length = string.length\n\
    \        var i = 0\n        while (i < length) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        val len = string.length\n        for (i <- 0 until len) {\n         \
    \   val prefix = string.substring(0, i)\n            prefixes += prefix\n    \
    \    }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var current = string\n        while (current.length > 0) {\n        \
    \    prefixes += current\n            current = current.dropRight(1)\n       \
    \ }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val lengths = mutable.ListBuffer[Int]()\n        val chars = string.chars\n\
    \        var i = 0\n        while (i < chars.length) {\n            lengths +=\
    \ chars.length\n            prefixes += chars.take(i).mkString\n            i\
    \ += 1\n        }\n        val longest = lengths.max\n        val shortest = lengths.min\n\
    \        val prefixes2 = prefixes.take(shortest)\n        val prefixes3 = prefixes.take(longest)\n\
    \        prefixes2.reverse ::: prefixes3", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesHelper(string, prefixes)\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        var currentLength =\
    \ string.length\n        var currentPrefix: String = \"\"\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes += currentPrefix\n            currentLength -= 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        val length = string.length\n        for(i <- 0 until length) {\n    \
    \        val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \            i += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            prefixes += string.substring(0,\
    \ currentLength)\n            currentLength = currentLength - 1\n        }\n \
    \       prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for(i <- 0 until string.length) {\n\
    \            currentPrefix += string(i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentLength = string.length\n        var currentPrefix = \"0\"\n\
    \        while (currentLength > 0) {\n            prefixes += currentPrefix\n\
    \            currentPrefix = currentPrefix.substring(0, currentLength)\n     \
    \       currentLength = currentLength - 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        val shortest = 0\n        while(shortest < longest) {\n            prefixes\
    \ += string.substring(0, shortest)\n            shortest += 1\n        }\n   \
    \     prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val length = string.length\n        val maxLength = length\n        val\
    \ minLength = length\n        val maxIndex = length\n        val minIndex = length\n\
    \        val maxChar = string.charAt(length)\n        val minChar = string.charAt(0)\n\
    \        val maxCharIndex = length\n        val minCharIndex = length\n      \
    \  val maxCharIndex = length\n        val minCharIndex = length\n        val maxCharIndex\
    \ = length\n        val minCharIndex = length\n        val maxCharIndex = length\n\
    \        val minCharIndex = length\n        val maxCharIndex = length\n      \
    \  val minCharIndex = length\n        val maxCharIndex = length\n        val minCharIndex\
    \ = length\n        val maxCharIndex = length\n        val minCharIndex = length\n\
    \        val maxCharIndex = length\n        val minCharIndex = length\n      \
    \  val maxCharIndex = length\n        val minCharIndex = length\n        val maxCharIndex\
    \ = length\n        val minCharIndex = length\n        val maxCharIndex = length\n\
    \        val minCharIndex = length\n        val maxCharIndex = length\n      \
    \  val minCharIndex = length\n        val maxCharIndex = length\n        val minCharIndex\
    \ = length\n        val maxCharIndex = length\n        val minCharIndex = length\n\
    \        val maxCharIndex = length\n        val minCharIndex = length\n      \
    \  val maxCharIndex = length\n        val minCharIndex = length\n        val maxCharIndex\
    \ = length\n        val minCharIndex = length\n        val maxCharIndex = length\n\
    \        val minCharIndex = length\n        val maxCharIndex = length\n      \
    \  val minCharIndex = length\n        val maxCharIndex = length\n        val minCharIndex\
    \ = length\n        val maxCharIndex = length\n        val minCharIndex = length\n\
    \        val maxCharIndex = length\n        val minCharIndex = length\n      \
    \  val maxCharIndex = length\n        val minCharIndex = length\n        val maxCharIndex\
    \ = length\n        val minCharIndex = length\n        val maxCharIndex = length\n\
    \        val minCharIndex = length\n        val maxCharIndex = length\n      \
    \  val minCharIndex = length\n        val maxCharIndex = length\n        val minCharIndex\
    \ = length\n        val maxCharIndex = length\n        val minCharIndex = length\n\
    \        val maxCharIndex = length\n        val minCharIndex = length\n      \
    \  val maxCharIndex = length\n        val minCharIndex = length\n        val maxCharIndex\
    \ = length\n        val minCharIndex = length\n        val maxCharIndex = length\n\
    \        val minCharIndex = length\n        val max", "        val prefixes =\
    \ mutable.ListBuffer[String]()\n        var currentPrefix: String = \"\"\n   \
    \     var currentLength = 0\n        for(i <- 0 until string.length){\n      \
    \      currentPrefix = string.substring(0, i)\n            currentLength = i\n\
    \            prefixes += currentPrefix\n        }\n        prefixes", "      \
    \  val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        for(i <- 0 until len) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        val shortest = 0\n        while(shortest < longest) {\n            prefixes\
    \ += string.substring(0, shortest)\n            shortest += 1\n        }\n   \
    \     prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n  \
    \      val chars = string.chars\n        var i = 0\n        while (i < chars.length)\
    \ {\n            val prefix = chars.takeWhile(_ != chars(i))\n            prefixes\
    \ += prefix\n            i += 1\n        }\n        prefixes.toList", "      \
    \  val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n      \
    \  while (i < string.length) {\n            val prefix = string.substring(0, i)\n\
    \            if (prefixes.contains(prefix)) {\n                prefixes += prefix\n\
    \            } else {\n                prefixes += prefix\n                i +=\
    \ 1\n            }\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        var current = string\n        while\
    \ (current != \"\") {\n            prefixes += current\n            current =\
    \ current.dropRight(1)\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        val longest = string.length\n      \
    \  val shortest = 0\n        while(shortest < longest) {\n            prefixes\
    \ += string.substring(0, shortest)\n            shortest += 1\n        }\n   \
    \     prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n  \
    \      string.split(\"\").foreach(prefix => {\n            prefixes += prefix\n\
    \            prefixes += prefix + \"-\"\n        })\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix:\
    \ String = \"\"\n        for(i <- 0 until string.length){\n            currentPrefix\
    \ = currentPrefix + string.charAt(i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split(\"\").foreach(prefix => prefixes += prefix)\n        prefixes",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        string.split(\"\
    \").reverse.foreach(prefix => {\n            prefixes += prefix\n            prefixes\
    \ += prefix + \"-\"\n        })\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        var currentPrefix = \"\"\n     \
    \   for(i <- 0 until string.length){\n            currentPrefix = currentPrefix\
    \ + string.charAt(i)\n            prefixes += currentPrefix\n        }\n     \
    \   prefixes", "        val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        var\
    \ currentIndex = 0\n        while (currentIndex < string.length) {\n         \
    \   if (string.charAt(currentIndex) == string.charAt(currentLength)) {\n     \
    \           currentLength += 1\n            } else {\n                currentLength\
    \ = 0\n                currentPrefix = string.substring(currentIndex, currentLength)\n\
    \                prefixes += currentPrefix\n            }\n            currentIndex\
    \ += 1\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        val chars = string.chars\n\
    \        var i = 0\n        while (i < chars.length) {\n            val char =\
    \ chars(i)\n            val prefix = chars.takeWhile(_ != char).mkString(\"\"\
    )\n            if (prefixes.contains(prefix)) {\n                prefixes += prefix\n\
    \            } else {\n                prefixes += prefix\n                prefixes\
    \ += char\n            }\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var current = string\n        while (current != \"\") {\n           \
    \ prefixes += current\n            current = current.dropRight(1)\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val longest = string.length\n        var i = 0\n        while (i < longest)\
    \ {\n            val prefix = string.substring(0, i)\n            prefixes +=\
    \ prefix\n            i += 1\n        }\n        prefixes.toList", "        val\
    \ prefixes = mutable.ListBuffer.empty[String]\n        val longest = string.length\n\
    \        val shortest = 0\n        while(shortest < longest) {\n            prefixes\
    \ += string.substring(0, shortest)\n            shortest += 1\n        }\n   \
    \     prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n  \
    \      var index = 0\n        while(index < string.length) {\n            val\
    \ prefix = string.substring(0, index)\n            prefixes += prefix\n      \
    \      index += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string, prefixes)\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split(\"\").foreach(prefix => prefixes += prefix)\n        prefixes.reverse",
  "        val prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        for(i <- 0 until longest) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var prefix = \"\"\
    \n        for(i <- 0 until string.length){\n            prefix += string.charAt(i)\n\
    \            prefixes += prefix\n        }\n        prefixes.toList", "      \
    \  val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        for(i <- 0 until len) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        string.split(\"\
    \").foreach(prefix => prefixes += prefix)\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var current = string\n        while\
    \ (current != \"\") {\n            prefixes += current\n            current =\
    \ current.dropRight(1)\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var currentPrefix = \"\"\n        var\
    \ currentLength = string.length\n        while (currentLength > 0) {\n       \
    \     currentPrefix = string.substring(0, currentLength)\n            prefixes\
    \ += currentPrefix\n            currentLength -= 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val lengths = mutable.ListBuffer[Int]()\n\
    \        val chars = string.chars\n        val length = chars.length\n       \
    \ val maxLength = lengths.max\n        val minLength = lengths.min\n        val\
    \ maxChar = chars.max\n        val minChar = chars.min\n        val maxCharIndex\
    \ = chars.indexOf(maxChar)\n        val minCharIndex = chars.indexOf(minChar)\n\
    \        val maxCharLength = maxCharIndex - minCharIndex\n        val minCharLength\
    \ = minCharIndex - minCharIndex\n        val maxCharChar = chars(maxCharIndex)\n\
    \        val minCharChar = chars(minCharIndex)\n        val maxCharCharIndex =\
    \ chars.indexOf(maxCharChar)\n        val minCharCharIndex = chars.indexOf(minCharChar)\n\
    \        val maxCharCharLength = maxCharCharIndex - minCharCharIndex\n       \
    \ val minCharCharLength = minCharCharIndex - minCharCharIndex\n        val maxCharCharChar\
    \ = chars(maxCharCharIndex)\n        val minCharCharChar = chars(minCharCharIndex)\n\
    \        val maxCharCharCharIndex = chars.indexOf(maxCharCharChar)\n        val\
    \ minCharCharCharIndex = chars.indexOf(minCharCharChar)\n        val maxCharCharCharLength\
    \ = maxCharCharCharIndex - minCharCharCharIndex\n        val minCharCharCharLength\
    \ = minCharCharCharIndex - minCharCharCharIndex\n        val maxCharCharCharChar\
    \ = chars(maxCharCharCharIndex)\n        val minCharCharCharChar = chars(minCharCharCharIndex)\n\
    \        val maxCharCharCharCharIndex = chars.indexOf(maxCharCharCharChar)\n \
    \       val minCharCharCharCharIndex = chars.indexOf(minCharCharCharChar)\n  \
    \      val maxCharCharCharCharLength = maxCharCharCharCharIndex - minCharCharCharCharIndex\n\
    \        val minCharCharCharCharLength = minCharCharCharCharIndex - minCharCharCharCharIndex\n\
    \        val maxCharCharCharCharChar = chars(maxCharCharCharCharIndex)\n     \
    \   val minCharCharCharChar = chars(minCharCharCharCharIndex)\n        val maxCharCharCharCharIndex\
    \ = chars.indexOf(maxCharCharCharChar)\n        val minCharCharCharCharIndex =\
    \ chars.indexOf(minCharCharCharChar)\n        val maxCharCharCharCharLength =\
    \ maxCharCharCharCharIndex - minCharCharCharCharIndex\n        ", "        val\
    \ prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        val shortest = 0\n        while(longest > shortest) {\n            val\
    \ prefix = string.substring(0, shortest)\n            prefixes += prefix\n   \
    \         shortest += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        string.foreach(prefix => {\n   \
    \         val newPrefixes = allPrefixes(prefix + string) ++\n                prefixes\
    \ ++ prefixes.map(_.dropWhile(_ == prefix))\n            prefixes = newPrefixes\n\
    \        })\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for(i <- 0 until string.length){\n\
    \            currentPrefix += string.charAt(i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val longest = string.length\n        for (i <- 0 until longest) {\n \
    \           val prefix = string.substring(0, i)\n            if (prefixes.contains(prefix))\
    \ {\n                continue\n            }\n            prefixes += prefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val longest = string.length\n        val shortest = 0\n        while(shortest\
    \ < longest) {\n            val prefix = string.substring(shortest, longest)\n\
    \            prefixes += prefix\n            shortest = longest - 1\n        }\n\
    \        prefixes.toList"]
stop_tokens:
- "\n    }\n"
