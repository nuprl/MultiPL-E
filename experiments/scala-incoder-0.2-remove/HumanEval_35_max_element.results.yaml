language: scala
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem)\
    \ max else elem)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L) { (max, x) => if (x > max) x else\
    \ max }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L){ (max, elem) => if (max > elem)\
    \ max else elem }\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L) {\n            (maxSoFar, element) => if\
    \ (element > maxSoFar) element else maxSoFar\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxElemIndex = l.indexWhere(x\
    \ => x == maxElem)\n        val maxElemIndex = maxElemIndex + 1\n        val maxElems\
    \ = l.slice(maxElemIndex, l.length)\n        val maxElemsSum = maxElems.sum\n\
    \        if (maxElemsSum > maxElem)\n            maxElemsSum\n        else\n \
    \           maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa7mukwr8.scala:8:12 ----------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmaxElemIndex\e[0m = maxElemIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mmaxElemIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElemIndex\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659978446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(Long.MinValue)( (max, x) => if (max < x) max\
    \ else x)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc6hd9pjz.scala:9)\n\tat Problem.main(tmpc6hd9pjz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, cur) => if (max < cur) max else cur)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1jf24ow4.scala:9)\n\tat Problem.main(tmp1jf24ow4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n\
    \        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)( (max, x) => if (x > max) x else\
    \ max )\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = l.indexOfMax(maxElem)\n\
    \        l.updated(maxIndex, maxElem)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpww_zkbqs.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = l.indexOfMax(maxElem)\n\
    \e[31m\e[31m  |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \ value indexOfMax is not a member of List[Long] - did you mean l.indexOf?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww_zkbqs.scala:8:17 ---------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        l.updated(maxIndex, maxElem)\n\e[31m\e[31m  |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m        Found:   \
    \ \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m  |\e[0m \
    \       Required: Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n\
    \        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)((max, x) => if (max < x) max else x)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4qxoofs.scala:9)\n\tat Problem.main(tmpt4qxoofs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, elem: Long) => if (elem > max)\
    \ elem else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, element) => if (element > max) element\
    \ else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(Long.MinValue)( (max, element) => if (element\
    \ > max) element else max )\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)((a, b) => if (a > b) a else b)\n\
    \        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L){ (max, e) => if (max < e) e else max }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, element) => if (element > max) element\
    \ else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L){ (max, elem) => if (max < elem) elem else\
    \ max }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n\
    \        l.zipWithIndex.foreach { case (elem, index) =>\n            if (elem\
    \ > maxElem) {\n                maxElem = elem\n                maxIndex = index\n\
    \            }\n        }\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpshedngyh.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = l.indexOfMax\n\
    \e[31m\e[31m  |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \ value indexOfMax is not a member of List[Long] - did you mean l.indexOf?\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpshedngyh.scala:10:24 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                maxElem = elem\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxElem\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpshedngyh.scala:11:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m                maxIndex\
    \ = index\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n\
    \        l.tail.foreach(elem => {\n            if (elem > maxElem)\n         \
    \       maxElem = elem\n        })\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4tbo9a_w.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = l.indexOfMax\n\
    \e[31m\e[31m  |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \ value indexOfMax is not a member of List[Long] - did you mean l.indexOf?\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp4tbo9a_w.scala:10:24 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                maxElem = elem\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxElem\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, elem) => if (max < elem) elem else\
    \ max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = scala.math.max(l)\n        l.indexOf(max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4srk_xwe.scala:6:29 ------------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = scala.math.max(l)\n\
    \e[31m\e[31m  |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m  |\e[0m (x: Double, y: Double): Double\n\
    \e[31m  |\e[0m (x: Float, y: Float): Float\n\e[31m  |\e[0m (x: Long, y: Long):\
    \ Long\n\e[31m  |\e[0m (x: Int, y: Int): Int\n\e[31m  |\e[0mmatch arguments ((l\
    \ : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659978446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem)\
    \ max else elem)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, cur) => if (max < cur) max else cur\
    \ )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvqjnis19.scala:9)\n\tat Problem.main(tmpvqjnis19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)(_ + _)\n        l.max\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L){ (max, elem) => if (elem > max) elem else\
    \ max }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(Long.MinValue)(_ > _) ? _ : l.max\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpbc_u8yzu.scala:6:43 ------------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        l.foldLeft(Long.MinValue)(_ > _) ? _ : l.max\n\
    \e[31m\e[31m  |\e[0m                                           ^\e[0m\n\e[31m\
    \  |\e[0m    Missing parameter type\n\e[31m  |\e[0m\n\e[31m  |\e[0m    I could\
    \ not infer the type of the parameter _$3 of expanded function:\n\e[31m  |\e[0m\
    \    _$3 => l.foldLeft(Long.MinValue)((_$1, _$2) => _$1 > _$2) ? _$3:l.max.\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpbc_u8yzu.scala:6:49 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        l.foldLeft(Long.MinValue)(_ > _) ? _ : l.max\n\
    \e[31m\e[31m  |\e[0m                                               ^^^^^\e[0m\n\
    \e[31m  |\e[0m                                    type max is not a member of\
    \ List[Long]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbc_u8yzu.scala:6:34\
    \ ---------------------\e[0m\e[0m\n\e[31m6 |\e[0m        l.foldLeft(Long.MinValue)(_\
    \ > _) ? _ : l.max\n\e[31m\e[31m  |\e[0m                                  ^^^^^\e\
    [0m\n\e[31m  |\e[0m                                  Found:    Boolean\n\e[31m\
    \  |\e[0m                                  Required: Long\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, x) => if (max < x) max else x )\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa5_ahs2a.scala:9)\n\tat Problem.main(tmpa5_ahs2a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L){ (max, elem) => if (elem >\
    \ max) elem else max }\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)(_ + _)\n        l.max\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L) { (max, e) => if (max < e) e else max }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)((max, element) => if (element > max) element\
    \ else max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L) {\n            (maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem\n        }\n        maxElem\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)( (max, elem) => if (max > elem)\
    \ max else elem )\n        return maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, x) => if (max < x) max else x)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp351qahrw.scala:9)\n\tat Problem.main(tmp351qahrw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L){ (max, elem) => if (max < elem)\
    \ elem else max }\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L){ (max, x) => if (max < x) max else x }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprw64mcz1.scala:9)\n\tat Problem.main(tmprw64mcz1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (max < elem)\
    \ elem else max)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem)\
    \ max else elem)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max,cur) => if (max > cur) max else cur)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = l.indexOfMax(maxElem)\n\
    \        l.updated(maxIndex, maxElem)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpww_zkbqs.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = l.indexOfMax(maxElem)\n\
    \e[31m\e[31m  |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \ value indexOfMax is not a member of List[Long] - did you mean l.indexOf?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww_zkbqs.scala:8:17 ---------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        l.updated(maxIndex, maxElem)\n\e[31m\e[31m  |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m        Found:   \
    \ \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m  |\e[0m \
    \       Required: Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L) { (max, x) => if (x > max) x else\
    \ max }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max)\
    \ elem else max)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, elem: Long) => if (elem > max)\
    \ elem else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, x: Long) => if (x > max) x else\
    \ max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxElemIndex = l.indexWhere(elem\
    \ => elem > maxElem)\n        val maxElemIndex = maxElemIndex + 1\n        val\
    \ maxElems = l.slice(maxElemIndex, l.length)\n        val maxElemsCount = maxElems.length\n\
    \        if (maxElemsCount == 0)\n            maxElem\n        else\n        \
    \    maxElement(maxElems)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprn5sw_90.scala:8:12 ----------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmaxElemIndex\e[0m = maxElemIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mmaxElemIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElemIndex\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659978456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)(_ + _)\n        l.indexOf(maxElem)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph25rwvtb.scala:10)\n\tat Problem.main(tmph25rwvtb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, elem: Long) => if (max < elem)\
    \ elem else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max,x) => if (max < x) max else x)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19jmnxl9.scala:9)\n\tat Problem.main(tmp19jmnxl9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)((max, x) => if (max < x) max else\
    \ x)\n        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiraum87q.scala:10)\n\tat Problem.main(tmpiraum87q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)((max, element) => if (element > max) element\
    \ else max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = 0\n       \
    \ for (i <- 0 until l.length) {\n            if (l(i) > maxElem) {\n         \
    \       maxElem = l(i)\n                maxIndex = i\n            }\n        }\n\
    \        maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpa6dnc53u.scala:10:24 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                maxElem = l(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxElem\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpa6dnc53u.scala:11:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m                maxIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)(_ + _)\n        l.max\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem) => if (max >\
    \ elem) max else elem }\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((maxElem, elem) => if (elem\
    \ > maxElem) elem else maxElem)\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978468
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max)\
    \ elem else max)\n        return maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)( (max, elem) => if (elem >\
    \ max) elem else max )\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxElemIndex = l.indexOfMax(maxElem)\n\
    \        val maxElems = l.slice(maxElemIndex + 1)\n        maxElems.max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8gd8mjn4.scala:7:29 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxElemIndex\e[0m = l.indexOfMax(maxElem)\n\
    \e[31m\e[31m  |\e[0m                           ^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m  value indexOfMax is not a member of List[Long] - did you mean l.indexOf?\n\
    \e[31m\e[31m-- Error: /tmp/tmp8gd8mjn4.scala:8:30 ------------------------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmaxElems\e[0m = l.slice(maxElemIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m  |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mmissing argument for parameter until of \e[33mmethod\e[0m \e\
    [35mslice\e[0m in \e[33mclass\e[0m \e[35mList\e[0m: (from: Int, until: Int): List[Long]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = l.indexOfMax(maxElem)\n\
    \        l.updated(maxIndex, l.last)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvw089fly.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = l.indexOfMax(maxElem)\n\
    \e[31m\e[31m  |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \ value indexOfMax is not a member of List[Long] - did you mean l.indexOf?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvw089fly.scala:8:17 ---------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        l.updated(maxIndex, l.last)\n\e[31m\e[31m  |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m        Found:    \e\
    [1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m  |\e[0m     \
    \   Required: Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = scala.math.max(l)\n        l.indexOf(max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4srk_xwe.scala:6:29 ------------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = scala.math.max(l)\n\
    \e[31m\e[31m  |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m  |\e[0m (x: Double, y: Double): Double\n\
    \e[31m  |\e[0m (x: Float, y: Float): Float\n\e[31m  |\e[0m (x: Long, y: Long):\
    \ Long\n\e[31m  |\e[0m (x: Int, y: Int): Int\n\e[31m  |\e[0mmatch arguments ((l\
    \ : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659978446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L) {\n            (max, x) => if (max < x) max\
    \ else x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqaf48rt6.scala:11)\n\tat Problem.main(tmpqaf48rt6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)( (maxElem, e) => if (e > maxElem)\
    \ e else maxElem)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L){ (max, x) => if (x > max) x else\
    \ max }\n        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L){ (max, elem) => if (elem >\
    \ max) elem else max }\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (acc, x) => if (acc > x) acc else x )\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)((max, element) => if (element > max) element\
    \ else max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)((max, x) => if (max < x) max else x)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4qxoofs.scala:9)\n\tat Problem.main(tmpt4qxoofs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)(_ > _) ? _ : _\n        l.foldLeft(max)(_\
    \ > _) ? _ : _\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1nrbfgcn.scala:6:42 ------------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = l.foldLeft(\e\
    [31m0L\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m  |\e[0m                            \
    \              ^\e[0m\n\e[31m  |\e[0m     Missing parameter type\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m     I could not infer the type of the parameter _$3 of expanded\
    \ function:\n\e[31m  |\e[0m     _$3 => l.foldLeft(\e[31m0L\e[0m)((_$1, _$2) =>\
    \ _$1 > _$2) ? _$3:.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1nrbfgcn.scala:6:33\
    \ ---------------------\e[0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = l.foldLeft(\e[31m0L\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m  |\e[0m         \
    \                        ^^^^^\e[0m\n\e[31m  |\e[0m                          \
    \       Found:    Boolean\n\e[31m  |\e[0m                                 Required:\
    \ Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1nrbfgcn.scala:7:33\
    \ ------------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        l.foldLeft(max)(_\
    \ > _) ? _ : _\n\e[31m\e[31m  |\e[0m                                 ^\e[0m\n\e\
    [31m  |\e[0m     Missing parameter type\n\e[31m  |\e[0m\n\e[31m  |\e[0m     I\
    \ could not infer the type of the parameter _$6 of expanded function:\n\e[31m\
    \  |\e[0m     _$6 => l.foldLeft(max)((_$4, _$5) => _$4 > _$5) ? _$6:.\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((maxElem, elem) => if (elem\
    \ > maxElem) elem else maxElem)\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = scala.math.max(l)\n        l.find(_ == max).getOrElse(max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpx2c8vapv.scala:6:29 ------------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = scala.math.max(l)\n\
    \e[31m\e[31m  |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m  |\e[0m (x: Double, y: Double): Double\n\
    \e[31m  |\e[0m (x: Float, y: Float): Float\n\e[31m  |\e[0m (x: Long, y: Long):\
    \ Long\n\e[31m  |\e[0m (x: Int, y: Int): Int\n\e[31m  |\e[0mmatch arguments ((l\
    \ : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L){ (max, x) => if (x > max) x else\
    \ max }\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max)\
    \ elem else max)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, elem: Long) => if (elem > max)\
    \ elem else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)((a, b) => if (a > b) a else b)\n\
    \        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max)\
    \ elem else max)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (acc, x) => if (acc > x) acc else x)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L){ (max, e) => if (e > max) e else max }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(Long.MinValue)(_ + _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprybouf5w.scala:9)\n\tat Problem.main(tmprybouf5w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n\
    \        l.tail.foreach(elem => {\n            if (elem > maxElem)\n         \
    \       maxElem = elem\n        })\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4tbo9a_w.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = l.indexOfMax\n\
    \e[31m\e[31m  |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \ value indexOfMax is not a member of List[Long] - did you mean l.indexOf?\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp4tbo9a_w.scala:10:24 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                maxElem = elem\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxElem\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L){ (max, elem) => if (max < elem)\
    \ elem else max }\n        return maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, current) => if (current >\
    \ max) current else max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2qg4ap__.scala:10)\n\tat Problem.main(tmp2qg4ap__.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)(_ + _)\n        l.max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)(_ + _)\n        l.find(_ == max).getOrElse(max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3bmu8h1v.scala:10)\n\tat Problem.main(tmp3bmu8h1v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L){ (max, x) => if (x > max) x else\
    \ max }\n        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((maxElem, currentElem) => if\
    \ (currentElem > maxElem) currentElem else maxElem)\n        maxElem\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max)\
    \ elem else max)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem)\
    \ max else elem)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L){ (max, x) => if (x > max) x else\
    \ max }\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L){\n            (maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem\n        }\n        maxElem\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978473
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)(_ + _)\n        l.find(_ == max).getOrElse(max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3bmu8h1v.scala:10)\n\tat Problem.main(tmp3bmu8h1v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n\
    \        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoua4kesz.scala:9)\n\tat Problem.main(tmpoua4kesz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, elem: Long) => if (elem > max)\
    \ elem else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L){\n            case(max, element) => if (element\
    \ > max) element else max\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, current) => if (current >\
    \ max) current else max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2qg4ap__.scala:10)\n\tat Problem.main(tmp2qg4ap__.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n\
    \        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L){ (max, elem) => if (max < elem) elem else\
    \ max }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)( (max, elem) => if (max > elem)\
    \ max else elem )\n        return maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxElemIndex = l.indexOf(0)\n\
    \        for(i <- 1 to l.length){\n            if(l(i) > maxElem){\n         \
    \       maxElem = l(i)\n                maxElemIndex = i\n            }\n    \
    \    }\n        maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpo67ac_ea.scala:10:24 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                maxElem = l(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxElem\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpo67ac_ea.scala:11:29\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m                maxElemIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val maxElemIndex\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, cur) => if (max > cur) max else cur\
    \ )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)( (max: Long, elem: Long) => if (elem\
    \ > max) elem else max )\n        m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)((max, x) => if (max < x) max else x)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4qxoofs.scala:9)\n\tat Problem.main(tmpt4qxoofs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, x) => if (max < x) max else x)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp351qahrw.scala:9)\n\tat Problem.main(tmp351qahrw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L){ (max, elem) => if (elem > max)\
    \ elem else max }\n        max \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = scala.math.max(l)\n        l.find(_ == max).getOrElse(max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpx2c8vapv.scala:6:29 ------------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = scala.math.max(l)\n\
    \e[31m\e[31m  |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m  |\e[0m (x: Double, y: Double): Double\n\
    \e[31m  |\e[0m (x: Float, y: Float): Float\n\e[31m  |\e[0m (x: Long, y: Long):\
    \ Long\n\e[31m  |\e[0m (x: Int, y: Int): Int\n\e[31m  |\e[0mmatch arguments ((l\
    \ : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L) {\n            (maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem\n        }\n        maxElem\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)(_ + _)\n        l.max\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L) {\n            (max: Long, elem:\
    \ Long) => if (elem > max) elem else max\n        }\n        m\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((maxElem, elem) => if (elem\
    \ > maxElem) elem else maxElem)\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978468
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.last\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk6svbnrn.scala:11)\n\tat Problem.main(tmpk6svbnrn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, elem: Long) => if (elem > max)\
    \ elem else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L) { (max, e) => if (e > max) e else\
    \ max }\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n\
    \        l.tail.foreach(x => if (x > maxElem) maxElem = x)\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdip5mj5f.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = l.indexOfMax\n\
    \e[31m\e[31m  |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \ value indexOfMax is not a member of List[Long] - did you mean l.indexOf?\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpdip5mj5f.scala:8:53 ------------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        l.tail.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ > maxElem) maxElem = x)\n\e[31m\e[31m  |\e[0m                              \
    \               ^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                             \
    \                Reassignment to val maxElem\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxElemIndex = l.indexOf(0)\n\
    \        for(i <- 1 to l.length){\n            if(l(i) > maxElem){\n         \
    \       maxElem = l(i)\n                maxElemIndex = i\n            }\n    \
    \    }\n        maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpo67ac_ea.scala:10:24 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                maxElem = l(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxElem\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpo67ac_ea.scala:11:29\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m                maxElemIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val maxElemIndex\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978474
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, x: Long) => if (x > max) x else\
    \ max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxElemIndex = l.indexWhere(x\
    \ => x == maxElem)\n        val maxElemIndex = maxElemIndex + 1\n        l.take(maxElemIndex).max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsp7p2ygq.scala:8:12 ----------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mmaxElemIndex\e[0m = maxElemIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mmaxElemIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElemIndex\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659978476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n\
    \        l.tail.foreach(elem => {\n            if (elem > maxElem)\n         \
    \       maxElem = elem\n        })\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4tbo9a_w.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = l.indexOfMax\n\
    \e[31m\e[31m  |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \ value indexOfMax is not a member of List[Long] - did you mean l.indexOf?\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp4tbo9a_w.scala:10:24 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                maxElem = elem\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxElem\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n\
    \        l.updated(maxIndex, maxElem)\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1lc2326e.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = l.indexOfMax\n\
    \e[31m\e[31m  |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \ value indexOfMax is not a member of List[Long] - did you mean l.indexOf?\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659978478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L){ (max, x) => if (x > max) x else\
    \ max }\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvg6gpdwv.scala:10)\n\tat Problem.main(tmpvg6gpdwv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, x) => if (max < x) max else x)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp351qahrw.scala:9)\n\tat Problem.main(tmp351qahrw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)(_ + _)\n        l.max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem)\
    \ max else elem)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => math.max(max,\
    \ elem))\n        maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, x: Long) => if (x > max) x else\
    \ max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = scala.math.max(l)\n        l.indexOf(max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4srk_xwe.scala:6:29 ------------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = scala.math.max(l)\n\
    \e[31m\e[31m  |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m  |\e[0m (x: Double, y: Double): Double\n\
    \e[31m  |\e[0m (x: Float, y: Float): Float\n\e[31m  |\e[0m (x: Long, y: Long):\
    \ Long\n\e[31m  |\e[0m (x: Int, y: Int): Int\n\e[31m  |\e[0mmatch arguments ((l\
    \ : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659978446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L){ (max, elem) => if (elem >\
    \ max) elem else max }\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, elem) => if (elem > max) elem else\
    \ max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)((max, element) => if (element > max) element\
    \ else max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, elem: Long) => if (elem > max)\
    \ elem else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem) => if (elem >\
    \ max) elem else max }\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)((max, elem) => if (elem > max) elem\
    \ else max)\n        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)(_ + _)\n        l.max\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L) {\n            (maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem\n        }\n        maxElem\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)( (max,x) => if (x > max) x else max\
    \ )\n        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L) { (max, e) => if (e > max) e else\
    \ max }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L){ (max, x) => if (x > max) x else\
    \ max }\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.last\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk6svbnrn.scala:11)\n\tat Problem.main(tmpk6svbnrn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n\
    \        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoua4kesz.scala:9)\n\tat Problem.main(tmpoua4kesz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L){ (max, e) => if (e > max) e else\
    \ max }\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoua4kesz.scala:9)\n\tat Problem.main(tmpoua4kesz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((maxElem, elem) => if (elem\
    \ > maxElem) elem else maxElem)\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978468
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)( (max, x) => if (x > max) x else\
    \ max )\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L){ (max, x) => if (max < x) max else x }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprw64mcz1.scala:9)\n\tat Problem.main(tmprw64mcz1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = scala.math.max(l)\n        l.indexOf(max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4srk_xwe.scala:6:29 ------------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = scala.math.max(l)\n\
    \e[31m\e[31m  |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m  |\e[0m (x: Double, y: Double): Double\n\
    \e[31m  |\e[0m (x: Float, y: Float): Float\n\e[31m  |\e[0m (x: Long, y: Long):\
    \ Long\n\e[31m  |\e[0m (x: Int, y: Int): Int\n\e[31m  |\e[0mmatch arguments ((l\
    \ : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659978446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, elem: Long) => if (elem > max)\
    \ elem else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem) =>\n        \
    \    if (max < elem) elem else max\n        }\n        maxElem\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L){ (max, elem) => if (elem >\
    \ max) elem else max }\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem)\
    \ max else elem)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max)\
    \ elem else max)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, elem) => if (max < elem)\
    \ max else elem)\n        max \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2gjhck5q.scala:10)\n\tat Problem.main(tmp2gjhck5q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = 0\n       \
    \ for (i <- 0 until l.length) {\n            if (l(i) > maxElem) {\n         \
    \       maxElem = l(i)\n                maxIndex = i\n            }\n        }\n\
    \        maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpa6dnc53u.scala:10:24 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                maxElem = l(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxElem\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpa6dnc53u.scala:11:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m                maxIndex\
    \ = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.last\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk6svbnrn.scala:11)\n\tat Problem.main(tmpk6svbnrn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxElemIndex = l.indexWhere(x\
    \ => x == maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n        val\
    \ maxElemIndex = l.lastIndexWhere(x => x == maxElem)\n        val maxElemIndex\
    \ = l.lastIndexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n  \
    \      val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxEle\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp776wtqg3.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp776wtqg3.scala:8:12\
    \ ----------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxElemIndex\e[0m = l.indexOf(maxElem)\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mmaxElemIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElemIndex\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp776wtqg3.scala:9:12 ----------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxElemIndex\e[0m = l.lastIndexWhere(\e[36mx\e\
    [0m => x == maxElem)\n\e[31m\e[31m  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mmaxElemIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElemIndex\e\
    [0m\n\e[31m  |\e[0m\n\e[31m  |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp776wtqg3.scala:10:12 ---------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxElemIndex\e[0m = l.lastIndexOf(maxElem)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxElemIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElemIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp776wtqg3.scala:11:12 ---------------------------\e[0m\e[0m\n\e\
    [31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxElemIndex\e[0m = l.indexOf(maxElem)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxElemIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElemIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ E"
  stdout: ''
  timestamp: 1659978482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n\
    \        l.tail.foreach(x => {\n            if (x > maxElem)\n               \
    \ maxElem = x\n        })\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8cnuq5gl.scala:7:25 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = l.indexOfMax\n\
    \e[31m\e[31m  |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m \
    \ value indexOfMax is not a member of List[Long] - did you mean l.indexOf?\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp8cnuq5gl.scala:10:24 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m                maxElem = x\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val maxElem\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxElemIndex = l.indexOf(0)\n\
    \        val maxElemIndexList = l.toList\n        val maxElemIndexListSize = maxElemIndexList.length\n\
    \        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndex\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr0fh7ldu.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxElemIndexListSize\e[0m\
    \ = maxElemIndexListSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxElemIndexListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxElemIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr0fh7ldu.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxElemIndexListSize\e[0m\
    \ = maxElemIndexListSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxElemIndexListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxElemIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr0fh7ldu.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxElemIndexListSize\e[0m\
    \ = maxElemIndexListSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxElemIndexListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxElemIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr0fh7ldu.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxElemIndexListSize\e[0m\
    \ = maxElemIndexListSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxElemIndexListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxElemIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr0fh7l"
  stdout: ''
  timestamp: 1659978483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, elem: Long) => if (elem > max)\
    \ elem else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, x: Long) => if (x > max) x else\
    \ max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, x: Long) => if (x > max) x else\
    \ max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem)\
    \ max else elem)\n        maxElem\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)( (max, x) => if (x > max) x else\
    \ max )\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)(_ + _)\n        l.max\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, element) => if (element > max) element\
    \ else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.head\n        val maxElemIndex = l.indexOf(0)\n\
    \        val maxElemIndex2 = l.indexOf(maxElem)\n        val maxElemIndex3 = l.indexOf(maxElem)\n\
    \        val maxElemIndex4 = l.indexOf(maxElem)\n        val maxElemIndex5 = l.indexOf(maxElem)\n\
    \        val maxElemIndex6 = l.indexOf(maxElem)\n        val maxElemIndex7 = l.indexOf(maxElem)\n\
    \        val maxElemIndex8 = l.indexOf(maxElem)\n        val maxElemIndex9 = l.indexOf(maxElem)\n\
    \        val maxElemIndex10 = l.indexOf(maxElem)\n        val maxElemIndex11 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex12 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex13 = l.indexOf(maxElem)\n        val maxElemIndex14 = l.indexOf(maxElem)\n\
    \        val maxElemIndex15 = l.indexOf(maxElem)\n        val maxElemIndex16 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex17 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex18 = l.indexOf(maxElem)\n        val maxElemIndex19 = l.indexOf(maxElem)\n\
    \        val maxElemIndex20 = l.indexOf(maxElem)\n        val maxElemIndex21 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex22 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex23 = l.indexOf(maxElem)\n        val maxElemIndex24 = l.indexOf(maxElem)\n\
    \        val maxElemIndex25 = l.indexOf(maxElem)\n        val maxElemIndex26 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex27 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex28 = l.indexOf(maxElem)\n        val maxElemIndex29 = l.indexOf(maxElem)\n\
    \        val maxElemIndex30 = l.indexOf(maxElem)\n        val maxElemIndex31 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex32 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex33 = l.indexOf(maxElem)\n        val maxElemIndex34 = l.indexOf(maxElem)\n\
    \        val maxElemIndex35 = l.indexOf(maxElem)\n        val maxElemIndex36 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex37 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex38 = l.indexOf(maxElem)\n        val maxElemIndex39 = l.indexOf(maxElem)\n\
    \        val maxElemIndex40 = l.indexOf(maxElem)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjxxulkwp.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max: Long, elem: Long) => if (elem > max)\
    \ elem else max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)((max, elem) => if (max < elem) elem else\
    \ max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)(_ > _) ? _ : _\n        l.foldLeft(max)(_\
    \ > _) ? _ : _\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1nrbfgcn.scala:6:42 ------------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = l.foldLeft(\e\
    [31m0L\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m  |\e[0m                            \
    \              ^\e[0m\n\e[31m  |\e[0m     Missing parameter type\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m     I could not infer the type of the parameter _$3 of expanded\
    \ function:\n\e[31m  |\e[0m     _$3 => l.foldLeft(\e[31m0L\e[0m)((_$1, _$2) =>\
    \ _$1 > _$2) ? _$3:.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1nrbfgcn.scala:6:33\
    \ ---------------------\e[0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = l.foldLeft(\e[31m0L\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m  |\e[0m         \
    \                        ^^^^^\e[0m\n\e[31m  |\e[0m                          \
    \       Found:    Boolean\n\e[31m  |\e[0m                                 Required:\
    \ Long\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1nrbfgcn.scala:7:33\
    \ ------------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        l.foldLeft(max)(_\
    \ > _) ? _ : _\n\e[31m\e[31m  |\e[0m                                 ^\e[0m\n\e\
    [31m  |\e[0m     Missing parameter type\n\e[31m  |\e[0m\n\e[31m  |\e[0m     I\
    \ could not infer the type of the parameter _$6 of expanded function:\n\e[31m\
    \  |\e[0m     _$6 => l.foldLeft(max)((_$4, _$5) => _$4 > _$5) ? _$6:.\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)((max, elem) => math.max(max, elem))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        l.indexOf(max)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwzwnbta.scala:10)\n\tat Problem.main(tmpjwzwnbta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L) { (max, x) => if (x > max) x else max }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, elem) => if (max > elem) max else\
    \ elem )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L){\n            case (max, x) => if (max <\
    \ x) max else x\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq47c1z2i.scala:11)\n\tat Problem.main(tmpq47c1z2i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L){\n            case (acc, x) => if (acc >\
    \ x) acc else x\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, x) => if (max < x) max else x)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp351qahrw.scala:9)\n\tat Problem.main(tmp351qahrw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = scala.math.max(l)\n        l.find(_ == max).getOrElse(max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpx2c8vapv.scala:6:29 ------------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = scala.math.max(l)\n\
    \e[31m\e[31m  |\e[0m                  ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m  |\e[0m (x: Double, y: Double): Double\n\
    \e[31m  |\e[0m (x: Float, y: Float): Float\n\e[31m  |\e[0m (x: Long, y: Long):\
    \ Long\n\e[31m  |\e[0m (x: Int, y: Int): Int\n\e[31m  |\e[0mmatch arguments ((l\
    \ : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659978467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val m = l.foldLeft(0L){ (max, x) => if (max < x) max else\
    \ x }\n        m\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_sy7t5__.scala:10)\n\tat Problem.main(tmp_sy7t5__.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)((max, elem) => if (max < elem) elem else\
    \ max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        l.foldLeft(0L)( (max, elem) => if (elem > max) elem else\
    \ max )\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val maxElem = l.foldLeft(0L)( (maxElem, elem) => if (elem\
    \ > maxElem) elem else maxElem)\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
    \ : Long = {\n        val max = l.foldLeft(0L)((max, current) => math.max(max,\
    \ current))\n        math.max(max, l.last)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
