language: scala
name: HumanEval_92_any_int
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || (x == x + z && y == y + z && z == z + x)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp2dhk5fo.scala:12)\n\tat Problem.main(tmpp2dhk5fo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isAllInteger = (x % 1 ==\
    \ 0 && y % 1 == 0 && z % 1 == 0)\n        isInteger && isAllInteger\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw7q88p03.scala:18)\n\tat Problem.main(tmpw7q88p03.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = sum.toString.toInt\n        val isEqual = sum == x + y\
    \ + z\n        val isAllIntegers = isInteger.toString.toInt == 3\n        isEqual\
    \ && isAllIntegers\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"6.0\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.anyInt(tmplu_lrhl1.scala:10)\n\
    \tat Problem$.main(tmplu_lrhl1.scala:16)\n\tat Problem.main(tmplu_lrhl1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isEqual = sum == x + y + z\n\
    \        val isAllInteger = (x % 1 == 0) &&\n                             (y %\
    \ 1 == 0) &&\n                             (z % 1 == 0)\n        isInteger ||\
    \ isEqual || isAllInteger\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9j7_8rw8.scala:19)\n\tat Problem.main(tmp9j7_8rw8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = sum.toString.toInt\n        val isSum = sum.toString.toInt\n\
    \        val isSumOfThree = x + y + z.toString.toInt\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n        val isSumOfThreeAndAllAreIntegers\
    \ = isSumOfThree == isInteger && isInteger == isSum\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3e7xh42t.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllAreIntegers\e\
    [0m = isSumOfThree == isInteger && isInteger == isSum\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfThreeAndAllAreIntegers is already defined as \e[33mvalue\e\
    [0m \e[35misSumOfThreeAndAllAreIntegers\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3e7xh42t.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllAreIntegers\e\
    [0m = isSumOfThree == isInteger && isInteger == isSum\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfThreeAndAllAreIntegers is already defined as \e[33mvalue\e\
    [0m \e[35misSumOfThreeAndAllAreIntegers\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3e7xh42t.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllAreIntegers\e\
    [0m = isSumOfThree == isInteger && isInteger == isSum\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumOfThreeAndAllAreIntegers is already defined as \e[33mvalue\e\
    [0m \e[35misSumOfThreeAndAllAreIntegers\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3e7xh42t.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36misSumOfThreeAndAllAreIntegers\e\
    [0m = isSumOfThree == isInteger && isInteger == isSum\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isEqual = sum == x + y + z\n\
    \        val isAllInteger = (x % 1 == 0) &&\n                           (y % 1\
    \ == 0) &&\n                           (z % 1 == 0)\n        isInteger && isEqual\
    \ && isAllInteger\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqx32nbc1.scala:21)\n\tat Problem.main(tmpqx32nbc1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = sum.toInt == sum\n        val isAllInteger = isInteger\
    \ && x.toInt == x.toInt && y.toInt == y.toInt && z.toInt == z.toInt\n        isAllInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa713b8lv.scala:17)\n\tat Problem.main(tmpa713b8lv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = x + y == z\n\
    \        isInteger && isEqual\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwjb33tbi.scala:15)\n\tat Problem.main(tmpwjb33tbi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == (x +\
    \ y + z))\n        val isAllInteger = (isInteger && isSum)\n        isAllInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgmrhx0uc.scala:17)\n\tat Problem.main(tmpgmrhx0uc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x)\n      \
    \  val isDifferent = (x != sum)\n        val isDifferent2 = (y != sum)\n     \
    \   val isDifferent3 = (z != sum)\n        isInteger && isSum && isDifferent &&\
    \ isDifferent2 && isDifferent3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpth3ze2c5.scala:18)\n\tat Problem.main(tmpth3ze2c5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && x == (x\
    \ + z) && x == (y + z)) || (x == (x - y) && x == (x - z) && x == (y - z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsnm6cxc6.scala:12)\n\tat Problem.main(tmpsnm6cxc6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == (x +\
    \ y + z))\n        val isAllInteger = (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n\
    \        isInteger && isSum && isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj6r6zr56.scala:19)\n\tat Problem.main(tmpj6r6zr56.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x.toInt\
    \ + y.toInt + z.toInt)\n        isInteger && isSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpylvgq2ta.scala:18)\n\tat Problem.main(tmpylvgq2ta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = sum.toString.toInt == sum\n        val isEqual = x + y\
    \ == z\n        val isAllInteger = x.toString.toInt == y.toString.toInt == z.toString.toInt\n\
    \        isInteger && isEqual && isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4f7qj4dw.scala:12:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = x.toString.toInt\
    \ == y.toString.toInt == z.toString.toInt\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Boolean and Int cannot be compared with\
    \ == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isSum = (sum == x + y +\
    \ z)\n        val isAllInteger = (isInteger && isSum)\n        isAllInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4cqcksgy.scala:18)\n\tat Problem.main(tmp4cqcksgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) && (y\
    \ == z) && (z == sum)\n        isInteger && isEqual\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp7fy68gy.scala:15)\n\tat Problem.main(tmpp7fy68gy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x+y) && (y == y+z)\
    \ && (z == z+x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ysuzodl.scala:12)\n\tat Problem.main(tmp8ysuzodl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) && (y\
    \ == z)\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpog6jf7jd.scala:15)\n\tat Problem.main(tmpog6jf7jd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x ==\
    \ z + y) && (y == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rrukwj1.scala:12)\n\tat Problem.main(tmp6rrukwj1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      if (sum == 0) true\n        else if (!(sum % 1 == 0)) false\n        else\
    \ if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n      \
    \  else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum % 1 == 0)) false\n        else if (!(sum % 1 == 0)) false\n\
    \        else if (!(sum\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0i0j8qwk.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0i0j8qwk.scala:66:17\
    \ ------------------------\e[0m\e[0m\n\e[31m66 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (!(sum\n\e[31m\e[31m   |\e[0m                 ^^^^^\e[0m\n\e[31m \
    \  |\e[0m      value unary_! is not a member of Float - did you mean sum.unary_+?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y + z) && (x == y\
    \ + z) && (x == y + z)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8jdmolvg.scala:12)\n\tat Problem.main(tmp8jdmolvg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z))\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8qx7g93f.scala:12)\n\tat Problem.main(tmp8qx7g93f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x + y\
    \ + z)\n        val isAllInteger = (isInteger && isSum)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_wefwjjn.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = (isInteger\
    \ && isSum)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misAllInteger is already defined as \e[33mvalue\e[0m \e[35misAllInteger\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659979365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isAllInteger = (x % 1 ==\
    \ 0 && y % 1 == 0 && z % 1 == 0)\n        isInteger && isAllInteger\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw7q88p03.scala:18)\n\tat Problem.main(tmpw7q88p03.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y + z) || (x == z)\
    \ || (y == z)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp10n0h687.scala:12)\n\tat Problem.main(tmp10n0h687.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5mpl6mw.scala:12)\n\tat Problem.main(tmpd5mpl6mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z))\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8qx7g93f.scala:12)\n\tat Problem.main(tmp8qx7g93f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isEqual = sum == x + y + z\n\
    \        val isAllInteger = (x % 1 == 0) &&\n                           (y % 1\
    \ == 0) &&\n                           (z % 1 == 0)\n        isInteger && isEqual\
    \ && isAllInteger\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqx32nbc1.scala:21)\n\tat Problem.main(tmpqx32nbc1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y + z) && (x == y\
    \ || x == z)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeh15n331.scala:12)\n\tat Problem.main(tmpeh15n331.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) && (y\
    \ == z)\n        val isAllInteger = (x % 1 == 0) && (y % 1 == 0) && (z % 1 ==\
    \ 0)\n        isInteger && isEqual && isAllInteger\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0869yjth.scala:16)\n\tat Problem.main(tmp0869yjth.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (y == y\
    \ + z) && (z == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptj8is7ug.scala:12)\n\tat Problem.main(tmptj8is7ug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y + z) || (x == z\
    \ + y) || (y == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpff36kbeo.scala:14)\n\tat Problem.main(tmpff36kbeo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x ==\
    \ z + y) && (y == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rrukwj1.scala:12)\n\tat Problem.main(tmp6rrukwj1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && x == (x\
    \ + z) && x == (y + z)) || \n        (y == (x + y) && y == (x + z) && y == (y\
    \ + z)) || \n        (z == (x + y) && z == (x + z) && z == (y + z))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0rcka2lf.scala:14)\n\tat Problem.main(tmp0rcka2lf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x ==\
    \ z + y)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_7e_ta0.scala:12)\n\tat Problem.main(tmpg_7e_ta0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x)\n\
    \        val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdwnnfld9.scala:16)\n\tat Problem.main(tmpdwnnfld9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (y == y\
    \ + z) && (z == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptj8is7ug.scala:12)\n\tat Problem.main(tmptj8is7ug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isSum = (sum == x + y +\
    \ z)\n        val isEqual = (x == y + z)\n        isInteger && isSum && isEqual\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz8dl836.scala:16)\n\tat Problem.main(tmppz8dl836.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isEqual = sum == x + y + z\n\
    \        isInteger && isEqual\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3zyva_1f.scala:17)\n\tat Problem.main(tmp3zyva_1f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x ==\
    \ z + y)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_7e_ta0.scala:12)\n\tat Problem.main(tmpg_7e_ta0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = sum.toString.toInt\n        val isEqual = sum == x + y\
    \ + z\n        val isInt = isInteger.toString.toInt\n        val isEqualOrInt\
    \ = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n        val\
    \ isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.toString.toInt\n\
    \        val isEqualOrInt = isEqual || isInt\n        val isInt = isInteger.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuq5ucl9u.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInteger.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuq5ucl9u.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36misEqualOrInt\e[0m = isEqual || isInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0misEqualOrInt is already defined as \e[33mvalue\e[0m \e[35misEqualOrInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuq5ucl9u.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInteger.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0misInt is already defined as \e[33mvalue\e[0m \e[35misInt\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuq5ucl9u.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36misEqualOrInt\e[0m = isEqual || isInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0misEqualOrInt is already defined as \e[33mvalue\e[0m \e[35misEqualOrInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuq5ucl9u.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36misInt\e[0m = isInteger.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0misInt is already defined as \e[33mvalue\e[0m \e["
  stdout: ''
  timestamp: 1659979370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt % 1 == 0)\n        val isEqual = (x == sum)\
    \ && (y == sum) && (z == sum)\n        val isAllInteger = (x.toInt == sum) &&\
    \ (y.toInt == sum) && (z.toInt == sum)\n        val isAllEqual = (x == sum) &&\
    \ (y == sum) && (z == sum)\n        isInteger || isEqual || isAllInteger || isAllEqual\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgmp20y_b.scala:18)\n\tat Problem.main(tmpgmp20y_b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (y == y\
    \ + z) && (z == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptj8is7ug.scala:12)\n\tat Problem.main(tmptj8is7ug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt)\n        val isSum = (sum == (x + y + z))\n\
    \        val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_zukl_5.scala:12:38 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = (isInteger\
    \ && isSum)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            value && is not a member of Int\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x)\n\
    \        val isDifferent = (sum != x)\n        val isSumAndDifferent = (sum !=\
    \ x) && (sum != y)\n        val isSumAndDifferentAndInteger = (sum != x) && (sum\
    \ != y) && (sum != z)\n        val isSumAndDifferentAndIntegerAndIsInteger = (sum\
    \ != x) && (sum != y) && (sum != z) && (sum.toInt % 1 == 0)\n        val isSumAndDifferentAndIntegerAndIsIntegerAndIsInteger\
    \ = (sum != x) && (sum != y) && (sum != z) && (sum.toInt % 1 == 0) && (sum.toInt\
    \ % 1 == 0)\n        val isSumAndDifferentAndIntegerAndIsIntegerAndIsIntegerAndIsInteger\
    \ = (sum != x) && (sum != y) && (sum != z) && (sum.toInt % 1 == 0) && (sum.toInt\
    \ % 1 == 0) && (sum.toInt % 1 == 0)\n        val isSumAndDifferentAndIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsInteger\
    \ = (sum != x) && (sum != y) && (sum != z) && (sum.toInt % 1 == 0) && (sum.toInt\
    \ % 1 == 0) && (sum.toInt % 1 == 0) && (sum.toInt % 1 == 0)\n        val isSumAndDifferentAndIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsInteger\
    \ = (sum != x) && (sum != y) && (sum != z) && (sum.toInt % 1 == 0) && (sum.toInt\
    \ % 1 == 0) && (sum.toInt % 1 == 0) && (sum.toInt % 1 == 0) && (sum.toInt % 1\
    \ == 0)\n        val isSumAndDifferentAndIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsInteger\
    \ = (sum != x) && (sum != y) && (sum != z) && (sum.toInt % 1 == 0) && (sum.toInt\
    \ % 1 == 0) && (sum.toInt % 1 == 0) && (sum.toInt % 1 == 0) && (sum.toInt % 1\
    \ == 0) && (sum.toInt % 1 == 0)\n        val isSumAndDifferentAndIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsInteger\
    \ = (sum != x) && (sum != y) && (sum != z) && (sum.toInt % 1 == 0) && (sum.toInt\
    \ % 1 == 0) && (sum.toInt % 1 == 0) && (sum.toInt % 1 == 0) && (sum.toInt % 1\
    \ == 0) && (sum.toInt % 1 == 0) && (\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgfb4u_fk.scala:21:313 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misSumAndDifferentAndIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsIntegerAndIsInteger\e\
    [0m = (sum != x) && (sum != y) && (sum != z) && (sum.toInt % \e[31m1\e[0m == \e\
    [31m0\e[0m) && (sum.toInt % \e[31m1\e[0m == \e[31m0\e[0m) && (sum.toInt % \e[31m1\e\
    [0m == \e[31m0\e[0m) && (sum.toInt % \e[31m1\e[0m == \e[31m0\e[0m) && (sum.toInt\
    \ % \e[31m1\e[0m == \e[31m0\e[0m) && (sum.toInt % \e[31m1\e[0m == \e[31m0\e[0m)\
    \ && (\n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgfb4u_fk.scala:22:5 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x)\n      \
    \  val isSum2 = (sum == y)\n        val isSum3 = (sum == z)\n        val isSum4\
    \ = (sum == x + y)\n        val isSum5 = (sum == x + z)\n        val isSum6 =\
    \ (sum == y + z)\n        val isSum7 = (sum == x + y + z)\n        val isSum8\
    \ = (sum == x + y + z)\n        val isSum9 = (sum == x + y + z)\n        val isSum10\
    \ = (sum == x + y + z)\n        val isSum11 = (sum == x + y + z)\n        val\
    \ isSum12 = (sum == x + y + z)\n        val isSum13 = (sum == x + y + z)\n   \
    \     val isSum14 = (sum == x + y + z)\n        val isSum15 = (sum == x + y +\
    \ z)\n        val isSum16 = (sum == x + y + z)\n        val isSum17 = (sum ==\
    \ x + y + z)\n        val isSum18 = (sum == x + y + z)\n        val isSum19 =\
    \ (sum == x + y + z)\n        val isSum20 = (sum == x + y + z)\n        val isSum21\
    \ = (sum == x + y + z)\n        val isSum22 = (sum == x + y + z)\n        val\
    \ isSum23 = (sum == x + y + z)\n        val isSum24 = (sum == x + y + z)\n   \
    \     val isSum25 = (sum == x + y + z)\n        val isSum26 = (sum == x + y +\
    \ z)\n        val isSum27 = (sum == x + y + z)\n        val isSum28 = (sum ==\
    \ x + y + z)\n        val isSum29 = (sum == x + y + z)\n        val isSum30 =\
    \ (sum == x + y + z)\n        val isSum31 = (sum == x + y + z)\n        val isSum32\
    \ = (sum == x + y + z)\n        val isSum33 = (sum == x + y + z)\n        val\
    \ isSum34 = (sum == x + y + z)\n        val isSum35 = (sum == x + y + z)\n   \
    \     val isSum36 = (sum == x + y + z)\n        val isSum37 = (sum == x + y +\
    \ z)\n        val isSum38 = (sum == x + y + z)\n        val isSum39 = (sum ==\
    \ x + y + z)\n        val isSum40 = (sum == x + y + z)\n        val isSum41 =\
    \ (sum == x + y + z)\n        val isSum42 = (sum == x + y + \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpeixnx5j1.scala:52:37 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36misSum42\e[0m = (sum == x\
    \ + y + \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e\
    [31m   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeixnx5j1.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1) == 0\n        val isSum = (sum == x + y + z)\n\
    \        val isAllInteger = (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n       \
    \ isInteger && isSum && isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm2r8vgss.scala:19)\n\tat Problem.main(tmpm2r8vgss.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x ==\
    \ z + y) && (y == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rrukwj1.scala:12)\n\tat Problem.main(tmp6rrukwj1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt) match {\n            case x if x >= 0 && x\
    \ <= 2147483647 => true\n            case x if x >= -2147483648 && x <= 2147483647\
    \ => true\n            case x if x >= -2147483648 && x <= 2147483646 => true\n\
    \            case x if x >= -2147483648 && x <= 2147483645 => true\n         \
    \   case x if x >= -2147483648 && x <= 2147483644 => true\n            case x\
    \ if x >= -2147483648 && x <= 2147483643 => true\n            case x if x >= -2147483648\
    \ && x <= 2147483642 => true\n            case x if x >= -2147483648 && x <= 2147483641\
    \ => true\n            case x if x >= -2147483648 && x <= 2147483640 => true\n\
    \            case x if x >= -2147483647 && x <= 2147483646 => true\n         \
    \   case x if x >= -2147483647 && x <= 2147483645 => true\n            case x\
    \ if x >= -2147483647 && x <= 2147483644 => true\n            case x if x >= -2147483647\
    \ && x <= 2147483643 => true\n            case x if x >= -2147483647 && x <= 2147483642\
    \ => true\n            case x if x >= -2147483647 && x <= 2147483641 => true\n\
    \            case x if x >= -2147483647 && x <= 2147483640 => true\n         \
    \   case x if x >= -2147483646 && x <= 2147483645 => true\n            case x\
    \ if x >= -2147483646 && x <= 2147483644 => true\n            case x if x >= -2147483646\
    \ && x <= 2147483643 => true\n            case x if x >= -2147483646 && x <= 2147483642\
    \ => true\n            case x if x >= -2147483646 && x <= 2147483641 => true\n\
    \            case x if x >= -2147483646 && x <= 2147483640 => true\n         \
    \   case x if x >= -2147483645 && x <= 2147483644 => true\n            case x\
    \ if x >= -2147483645 && x <= 2147483643 => true\n            case x if x >= -2147483645\
    \ && x <= 2147483642 => true\n            case x if x >= -2147483645 && x <= 2147483641\
    \ => true\n            case x if \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpid6g1zvz.scala:37:21 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m \n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpid6g1zvz.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpid6g1zvz.scala:52:1\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpid6g1zvz.scala:39:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m39 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659979370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) && (y\
    \ == z) && (z == sum)\n        isInteger && isEqual\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp7fy68gy.scala:15)\n\tat Problem.main(tmpp7fy68gy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5mpl6mw.scala:12)\n\tat Problem.main(tmpd5mpl6mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y || x == z || y == z)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi1el7y6t.scala:12)\n\tat Problem.main(tmpi1el7y6t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) && (y\
    \ == z) && (z == sum)\n        isInteger && isEqual\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp7fy68gy.scala:15)\n\tat Problem.main(tmpp7fy68gy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isAllInteger = (x % 1 ==\
    \ 0 && y % 1 == 0 && z % 1 == 0)\n        isInteger && isAllInteger\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw7q88p03.scala:18)\n\tat Problem.main(tmpw7q88p03.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5mpl6mw.scala:12)\n\tat Problem.main(tmpd5mpl6mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n      \
    \  val isDifferent = (sum != x)\n        val isSumAndDifferent = (isSum && isDifferent)\n\
    \        val isSumAndInteger = (isSum && isInteger)\n        val isSumAndNotInteger\
    \ = (isSum && (!isInteger))\n        val isNotSumAndInteger = (!isSum && isInteger)\n\
    \        val isNotSumAndNotInteger = (!isSum && (!isInteger))\n        val isSumAndNotDifferent\
    \ = (isSum && (!isDifferent))\n        val isNotSumAndDifferent = (!isSum && (!isDifferent))\n\
    \        val isSumAndNotInteger = (isSum && (!isInteger))\n        val isNotSumAndInteger\
    \ = (!isSum && isInteger)\n        val isSumAndInteger = (isSum && isInteger)\n\
    \        val isNotSumAndNotInteger = (!isSum && (!isInteger))\n        val isSumAndNotDifferent\
    \ = (isSum && (!isDifferent))\n        val isNotSumAndDifferent = (!isSum && (!isDifferent))\n\
    \        val isSumAndNotInteger = (isSum && (!isInteger))\n        val isNotSumAndInteger\
    \ = (!isSum && isInteger)\n        val isSumAndInteger = (isSum && isInteger)\n\
    \        val isNotSumAndNotInteger = (!isSum && (!isInteger))\n        val isSumAndNotDifferent\
    \ = (isSum && (!isDifferent))\n        val isNotSumAndDifferent = (!isSum && (!isDifferent))\n\
    \        val isSumAndNotInteger = (isSum && (!isInteger))\n        val isNotSumAndInteger\
    \ = (!isSum && isInteger)\n        val isSumAndInteger = (isSum && isInteger)\n\
    \        val isNotSumAndNotInteger = (!isSum && (!isInteger))\n        val isSumAndNotDifferent\
    \ = (isSum && (!isDifferent))\n        val isNotSumAndDifferent = (!isSum && (!isDifferent))\n\
    \        val isSumAndNotInteger = (isSum && (!isInteger))\n        val isNotSumAndInteger\
    \ = (!isSum && isInteger)\n        val isSumAndInteger = (isSum && isInteger)\n\
    \        val isNotSumAndNotInteg\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmx_3je7q.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmx_3je7q.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36misSumAndNotInteger\e[0m = (isSum && (!isInteger))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misSumAndNotInteger is already defined as \e[33mvalue\e[0m \e[35misSumAndNotInteger\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmx_3je7q.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36misNotSumAndInteger\e[0m = (!isSum &&\
    \ isInteger)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNotSumAndInteger is already defined as \e[33mvalue\e[0m\
    \ \e[35misNotSumAndInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmx_3je7q.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misSumAndInteger\e[0m = (isSum\
    \ && isInteger)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misSumAndInteger is already defined as \e[33mvalue\e[0m \e\
    [35misSumAndInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmx_3je7q.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misNotSumAndNotInteger\e\
    [0m = (!isSum && (!isInteger))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNotSumAndNotInteger is already defined as \e[33mvalue\e\
    [0m \e[35misNotSumAndNotInteger\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods mus"
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = sum.toInt\n        val intSum2 = intSum.toInt\n        val\
    \ intSum3 = intSum2.toInt\n        val intSum4 = intSum3.toInt\n        val intSum5\
    \ = intSum4.toInt\n        val intSum6 = intSum5.toInt\n        val intSum7 =\
    \ intSum6.toInt\n        val intSum8 = intSum7.toInt\n        val intSum9 = intSum8.toInt\n\
    \        val intSum10 = intSum9.toInt\n        val intSum11 = intSum10.toInt\n\
    \        val intSum12 = intSum11.toInt\n        val intSum13 = intSum12.toInt\n\
    \        val intSum14 = intSum13.toInt\n        val intSum15 = intSum14.toInt\n\
    \        val intSum16 = intSum15.toInt\n        val intSum17 = intSum16.toInt\n\
    \        val intSum18 = intSum17.toInt\n        val intSum19 = intSum18.toInt\n\
    \        val intSum20 = intSum19.toInt\n        val intSum21 = intSum20.toInt\n\
    \        val intSum22 = intSum21.toInt\n        val intSum23 = intSum22.toInt\n\
    \        val intSum24 = intSum23.toInt\n        val intSum25 = intSum24.toInt\n\
    \        val intSum26 = intSum25.toInt\n        val intSum27 = intSum26.toInt\n\
    \        val intSum28 = intSum27.toInt\n        val intSum29 = intSum28.toInt\n\
    \        val intSum30 = intSum29.toInt\n        val intSum31 = intSum30.toInt\n\
    \        val intSum32 = intSum31.toInt\n        val intSum33 = intSum32.toInt\n\
    \        val intSum34 = intSum33.toInt\n        val intSum35 = intSum34.toInt\n\
    \        val intSum36 = intSum35.toInt\n        val intSum37 = intSum36.toInt\n\
    \        val intSum38 = intSum37.toInt\n        val intSum39 = intSum38.toInt\n\
    \        val intSum40 = intSum39.toInt\n        val intSum41 = intSum40.toInt\n\
    \        val intSum42 = intSum41.toInt\n        val intSum43 = intSum42.toInt\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0kvadvic.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0kvadvic.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979375
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb70sksk.scala:12)\n\tat Problem.main(tmpvb70sksk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt).toFloat\n        val isSum = (sum.toInt).toFloat\
    \ == sum\n        val isEqual = (isInteger && isSum)\n        isEqual\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbppkau29.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misEqual\e[0m = (isInteger\
    \ && isSum)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       value && is not a member of Float\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi9u_irhh.scala:12)\n\tat Problem.main(tmpi9u_irhh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isAllIntegers = (x % 1 == 0)\
    \ || (y % 1 == 0) || (z % 1 == 0)\n        isInteger && isAllIntegers\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8j70r4r5.scala:17)\n\tat Problem.main(tmp8j70r4r5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979377
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (y == y\
    \ + z) && (z == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptj8is7ug.scala:12)\n\tat Problem.main(tmptj8is7ug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = sum.toInt\n        val intSum2 = intSum * intSum\n       \
    \ val intSum3 = intSum2 * intSum\n        val intSum4 = intSum3 * intSum\n   \
    \     val intSum5 = intSum4 * intSum\n        val intSum6 = intSum5 * intSum\n\
    \        val intSum7 = intSum6 * intSum\n        val intSum8 = intSum7 * intSum\n\
    \        val intSum9 = intSum8 * intSum\n        val intSum10 = intSum9 * intSum\n\
    \        val intSum11 = intSum10 * intSum\n        val intSum12 = intSum11 * intSum\n\
    \        val intSum13 = intSum12 * intSum\n        val intSum14 = intSum13 * intSum\n\
    \        val intSum15 = intSum14 * intSum\n        val intSum16 = intSum15 * intSum\n\
    \        val intSum17 = intSum16 * intSum\n        val intSum18 = intSum17 * intSum\n\
    \        val intSum19 = intSum18 * intSum\n        val intSum20 = intSum19 * intSum\n\
    \        val intSum21 = intSum20 * intSum\n        val intSum22 = intSum21 * intSum\n\
    \        val intSum23 = intSum22 * intSum\n        val intSum24 = intSum23 * intSum\n\
    \        val intSum25 = intSum24 * intSum\n        val intSum26 = intSum25 * intSum\n\
    \        val intSum27 = intSum26 * intSum\n        val intSum28 = intSum27 * intSum\n\
    \        val intSum29 = intSum28 * intSum\n        val intSum30 = intSum29 * intSum\n\
    \        val intSum31 = intSum30 * intSum\n        val intSum32 = intSum31 * intSum\n\
    \        val intSum33 = intSum32 * intSum\n        val intSum34 = intSum33 * intSum\n\
    \        val intSum35 = intSum34 * intSum\n        val intSum36 = intSum35 * intSum\n\
    \        val intSum37 = intSum36 * intSum\n        val intSum38 = intSum37 * intSum\n\
    \        val intSum39 = intSum38 * intSum\n        val intSum40 = intSum39 * intSum\n\
    \        val intSum41 = int\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsemlbfy4.scala:50:23 ------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mintSum41\e[0m = int\n\e\
    [31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m          \
    \             Not found: int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsemlbfy4.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) && (y\
    \ == z)\n        val isAllInteger = (x % 1 == 0) && (y % 1 == 0) && (z % 1 ==\
    \ 0)\n        isInteger && isEqual && isAllInteger\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0869yjth.scala:16)\n\tat Problem.main(tmp0869yjth.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y || x == z) && x.toInt\
    \ == y.toInt && x.toInt == z.toInt\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp05o9upck.scala:12)\n\tat Problem.main(tmp05o9upck.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x+y) && (y == y+z)\
    \ && (z == z+x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ysuzodl.scala:12)\n\tat Problem.main(tmp8ysuzodl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x+y) && (y == y+z)\
    \ && (z == z+x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ysuzodl.scala:12)\n\tat Problem.main(tmp8ysuzodl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1) == 0\n        val isEqual = sum == x + y + z\n\
    \        val isAllInteger = (x % 1 == 0) &&\n                             (y %\
    \ 1 == 0) &&\n                             (z % 1 == 0)\n        isInteger ||\
    \ isEqual || isAllInteger\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp616b3yr_.scala:19)\n\tat Problem.main(tmp616b3yr_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt).isInstanceOf[Int]\n        val isEqual = sum\
    \ == (x + y + z)\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl_c765gn.scala:16)\n\tat Problem.main(tmpl_c765gn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isAllInteger = (x % 1 ==\
    \ 0 && y % 1 == 0 && z % 1 == 0)\n        isInteger && isAllInteger\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw7q88p03.scala:18)\n\tat Problem.main(tmpw7q88p03.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y + z) || (x == y\
    \ + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x ==\
    \ y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x\
    \ == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) ||\
    \ (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z)\
    \ || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y +\
    \ z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x ==\
    \ y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x\
    \ == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) ||\
    \ (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z)\
    \ || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y +\
    \ z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x ==\
    \ y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x\
    \ == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) ||\
    \ (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z)\
    \ || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y +\
    \ z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x ==\
    \ y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x\
    \ == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) ||\
    \ (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z)\
    \ || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y +\
    \ z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x ==\
    \ y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x\
    \ == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) ||\
    \ (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z)\
    \ || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y +\
    \ z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x ==\
    \ y + z) || (x == y + \n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxtvhtlrf.scala:9:2049 --------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        (x == y + z) || (x == y + z) || (x == y + z) ||\
    \ (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z)\
    \ || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y +\
    \ z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x ==\
    \ y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x\
    \ == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) ||\
    \ (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z)\
    \ || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y +\
    \ z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x ==\
    \ y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x\
    \ == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) ||\
    \ (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z)\
    \ || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y +\
    \ z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x ==\
    \ y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x\
    \ == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) ||\
    \ (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z)\
    \ || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y +\
    \ z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x ==\
    \ y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x\
    \ == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) ||\
    \ (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z)\
    \ || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y +\
    \ z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x ==\
    \ y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x == y + z) || (x\
    \ == y + z) || (x == y + z) || (x == y +"
  stdout: ''
  timestamp: 1659979377
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x ==\
    \ z + y) && (y == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rrukwj1.scala:12)\n\tat Problem.main(tmp6rrukwj1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x ==\
    \ z + y) && (y == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rrukwj1.scala:12)\n\tat Problem.main(tmp6rrukwj1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isSum = (sum.toInt == x\
    \ + y + z)\n        val isAllIntegers = (isInteger && isSum)\n        isAllIntegers\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2g5y4vss.scala:18)\n\tat Problem.main(tmp2g5y4vss.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb70sksk.scala:12)\n\tat Problem.main(tmpvb70sksk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n      \
    \  val isSum2 = (sum == y)\n        val isSum3 = (sum == z)\n        val isSum4\
    \ = (sum == x + y)\n        val isSum5 = (sum == x + z)\n        val isSum6 =\
    \ (sum == y + z)\n        val isSum7 = (sum == x + y + z)\n        val isSum8\
    \ = (sum == x + y + z)\n        val isSum9 = (sum == x + y + z)\n        val isSum10\
    \ = (sum == x + y + z)\n        val isSum11 = (sum == x + y + z)\n        val\
    \ isSum12 = (sum == x + y + z)\n        val isSum13 = (sum == x + y + z)\n   \
    \     val isSum14 = (sum == x + y + z)\n        val isSum15 = (sum == x + y +\
    \ z)\n        val isSum16 = (sum == x + y + z)\n        val isSum17 = (sum ==\
    \ x + y + z)\n        val isSum18 = (sum == x + y + z)\n        val isSum19 =\
    \ (sum == x + y + z)\n        val isSum20 = (sum == x + y + z)\n        val isSum21\
    \ = (sum == x + y + z)\n        val isSum22 = (sum == x + y + z)\n        val\
    \ isSum23 = (sum == x + y + z)\n        val isSum24 = (sum == x + y + z)\n   \
    \     val isSum25 = (sum == x + y + z)\n        val isSum26 = (sum == x + y +\
    \ z)\n        val isSum27 = (sum == x + y + z)\n        val isSum28 = (sum ==\
    \ x + y + z)\n        val isSum29 = (sum == x + y + z)\n        val isSum30 =\
    \ (sum == x + y + z)\n        val isSum31 = (sum == x + y + z)\n        val isSum32\
    \ = (sum == x + y + z)\n        val isSum33 = (sum == x + y + z)\n        val\
    \ isSum34 = (sum == x + y + z)\n        val isSum35 = (sum == x + y + z)\n   \
    \     val isSum36 = (sum == x + y + z)\n        val isSum37 = (sum == x + y +\
    \ z)\n        val isSum38 = (sum == x + y + z)\n        val isSum39 = (sum ==\
    \ x + y + z)\n        val isSum40 = (sum == x + y + z)\n        val isSum41 =\
    \ (sum == x + y + z)\n        val isSum42 = (sum == x + y + \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpigc2zto2.scala:52:37 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36misSum42\e[0m = (sum == x\
    \ + y + \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e\
    [31m   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpigc2zto2.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z))\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8qx7g93f.scala:12)\n\tat Problem.main(tmp8qx7g93f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x)\n      \
    \  val isSum2 = (sum == y)\n        val isSum3 = (sum == z)\n        val isSum4\
    \ = (sum == x + y)\n        val isSum5 = (sum == x + z)\n        val isSum6 =\
    \ (sum == y + z)\n        val isSum7 = (sum == x + y + z)\n        val isSum8\
    \ = (sum == x * y)\n        val isSum9 = (sum == x * z)\n        val isSum10 =\
    \ (sum == y * z)\n        val isSum11 = (sum == x * y + z)\n        val isSum12\
    \ = (sum == x * z + y)\n        val isSum13 = (sum == y * z + x)\n        val\
    \ isSum14 = (sum == x * y + z + y)\n        val isSum15 = (sum == x * z + y +\
    \ x)\n        val isSum16 = (sum == y * z + x + y)\n        val isSum17 = (sum\
    \ == x * y + z + z)\n        val isSum18 = (sum == x * z + y + z)\n        val\
    \ isSum19 = (sum == y * z + x + z)\n        val isSum20 = (sum == x * y + z +\
    \ y + z)\n        val isSum21 = (sum == x * z + y + z + x)\n        val isSum22\
    \ = (sum == y * z + x + z + y)\n        val isSum23 = (sum == x * y + z + z +\
    \ x)\n        val isSum24 = (sum == x * z + y + z + z)\n        val isSum25 =\
    \ (sum == y * z + x + z + z)\n        val isSum26 = (sum == x * y + z + z + y\
    \ + x)\n        val isSum27 = (sum == x * z + y + z + y + z)\n        val isSum28\
    \ = (sum == y * z + x + z + y + z)\n        val isSum29 = (sum == x * y + z +\
    \ z + y + z + x)\n        val isSum30 = (sum == x * z + y + z + y + z + z)\n \
    \       val isSum31 = (sum == y * z + x + z + y + z + z)\n        val isSum32\
    \ = (sum == x * y + z + z + y + z + x + y)\n        val isSum33 = (sum == x *\
    \ z + y + z + y + z + x + z)\n        val isSum34 = (sum == y * z + x + z + y\
    \ + z + x + z)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqmfs82y.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x)\n      \
    \  val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_1m7425.scala:16)\n\tat Problem.main(tmpx_1m7425.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x ==\
    \ z + y) && (y == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rrukwj1.scala:12)\n\tat Problem.main(tmp6rrukwj1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt)\n        val isSum = (sum == (x + y + z))\n\
    \        val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_zukl_5.scala:12:38 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = (isInteger\
    \ && isSum)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            value && is not a member of Int\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * sum)\n\
    \        val intSum3 = math.round(sum * sum * sum)\n        val intSum4 = math.round(sum\
    \ * sum * sum * sum)\n        val intSum5 = math.round(sum * sum * sum * sum *\
    \ sum)\n        val intSum6 = math.round(sum * sum * sum * sum * sum * sum)\n\
    \        val intSum7 = math.round(sum * sum * sum * sum * sum * sum * sum)\n \
    \       val intSum8 = math.round(sum * sum * sum * sum * sum * sum * sum * sum)\n\
    \        val intSum9 = math.round(sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum)\n        val intSum10 = math.round(sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum)\n        val intSum11 = math.round(sum * sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum)\n        val intSum12\
    \ = math.round(sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum)\n        val intSum13 = math.round(sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum)\n        val intSum14\
    \ = math.round(sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum * sum)\n        val intSum15 = math.round(sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum)\n        val intSum16 = math.round(sum * sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum)\n        val intSum17 = math.round(sum * sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum * sum)\n        val intSum18 = math.round(sum\
    \ * sum * sum * sum * sum * \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphtrqofjh.scala:27:63 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mintSum18\e[0m = math.round(sum\
    \ * sum * sum * sum * sum * \n\e[31m\e[31m   |\e[0m                          \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphtrqofjh.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = sum.toInt\n        val intSum2 = intSum * intSum\n       \
    \ val intSum3 = intSum2 * intSum\n        val intSum4 = intSum3 * intSum\n   \
    \     val intSum5 = intSum4 * intSum\n        val intSum6 = intSum5 * intSum\n\
    \        val intSum7 = intSum6 * intSum\n        val intSum8 = intSum7 * intSum\n\
    \        val intSum9 = intSum8 * intSum\n        val intSum10 = intSum9 * intSum\n\
    \        val intSum11 = intSum10 * intSum\n        val intSum12 = intSum11 * intSum\n\
    \        val intSum13 = intSum12 * intSum\n        val intSum14 = intSum13 * intSum\n\
    \        val intSum15 = intSum14 * intSum\n        val intSum16 = intSum15 * intSum\n\
    \        val intSum17 = intSum16 * intSum\n        val intSum18 = intSum17 * intSum\n\
    \        val intSum19 = intSum18 * intSum\n        val intSum20 = intSum19 * intSum\n\
    \        val intSum21 = intSum20 * intSum\n        val intSum22 = intSum21 * intSum\n\
    \        val intSum23 = intSum22 * intSum\n        val intSum24 = intSum23 * intSum\n\
    \        val intSum25 = intSum24 * intSum\n        val intSum26 = intSum25 * intSum\n\
    \        val intSum27 = intSum26 * intSum\n        val intSum28 = intSum27 * intSum\n\
    \        val intSum29 = intSum28 * intSum\n        val intSum30 = intSum29 * intSum\n\
    \        val intSum31 = intSum30 * intSum\n        val intSum32 = intSum31 * intSum\n\
    \        val intSum33 = intSum32 * intSum\n        val intSum34 = intSum33 * intSum\n\
    \        val intSum35 = intSum34 * intSum\n        val intSum36 = intSum35 * intSum\n\
    \        val intSum37 = intSum36 * intSum\n        val intSum38 = intSum37 * intSum\n\
    \        val intSum39 = intSum38 * intSum\n        val intSum40 = intSum39 * intSum\n\
    \        val intSum41 = int\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsemlbfy4.scala:50:23 ------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mintSum41\e[0m = int\n\e\
    [31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m          \
    \             Not found: int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsemlbfy4.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1) == 0\n        val isSum = (sum == x + y + z)\n\
    \        val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6o8nnbi2.scala:18)\n\tat Problem.main(tmp6o8nnbi2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x)\n      \
    \  val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_1m7425.scala:16)\n\tat Problem.main(tmpx_1m7425.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * sum)\n\
    \        val intSum3 = math.round(sum * sum * sum)\n        val intSum4 = math.round(sum\
    \ * sum * sum * sum)\n        val intSum5 = math.round(sum * sum * sum * sum *\
    \ sum)\n        val intSum6 = math.round(sum * sum * sum * sum * sum * sum)\n\
    \        val intSum7 = math.round(sum * sum * sum * sum * sum * sum * sum)\n \
    \       val intSum8 = math.round(sum * sum * sum * sum * sum * sum * sum * sum)\n\
    \        val intSum9 = math.round(sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum)\n        val intSum10 = math.round(sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum)\n        val intSum11 = math.round(sum * sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum)\n        val intSum12\
    \ = math.round(sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum)\n        val intSum13 = math.round(sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum)\n        val intSum14\
    \ = math.round(sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum * sum)\n        val intSum15 = math.round(sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum)\n        val intSum16 = math.round(sum * sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum * sum)\n        val intSum17 = math.round(sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum * sum\
    \ * sum * sum * sum * sum * sum * sum * sum * sum)\n        val intSum18 = math.round(sum\
    \ * sum * sum * \n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2dpkd54_.scala:27:51 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mintSum18\e[0m = math.round(sum\
    \ * sum * sum * \n\e[31m\e[31m   |\e[0m                                      \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2dpkd54_.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = sum.toInt\n        val intSum2 = intSum * intSum\n       \
    \ val intSum3 = intSum2 * intSum\n        val intSum4 = intSum3 * intSum\n   \
    \     val intSum5 = intSum4 * intSum\n        val intSum6 = intSum5 * intSum\n\
    \        val intSum7 = intSum6 * intSum\n        val intSum8 = intSum7 * intSum\n\
    \        val intSum9 = intSum8 * intSum\n        val intSum10 = intSum9 * intSum\n\
    \        val intSum11 = intSum10 * intSum\n        val intSum12 = intSum11 * intSum\n\
    \        val intSum13 = intSum12 * intSum\n        val intSum14 = intSum13 * intSum\n\
    \        val intSum15 = intSum14 * intSum\n        val intSum16 = intSum15 * intSum\n\
    \        val intSum17 = intSum16 * intSum\n        val intSum18 = intSum17 * intSum\n\
    \        val intSum19 = intSum18 * intSum\n        val intSum20 = intSum19 * intSum\n\
    \        val intSum21 = intSum20 * intSum\n        val intSum22 = intSum21 * intSum\n\
    \        val intSum23 = intSum22 * intSum\n        val intSum24 = intSum23 * intSum\n\
    \        val intSum25 = intSum24 * intSum\n        val intSum26 = intSum25 * intSum\n\
    \        val intSum27 = intSum26 * intSum\n        val intSum28 = intSum27 * intSum\n\
    \        val intSum29 = intSum28 * intSum\n        val intSum30 = intSum29 * intSum\n\
    \        val intSum31 = intSum30 * intSum\n        val intSum32 = intSum31 * intSum\n\
    \        val intSum33 = intSum32 * intSum\n        val intSum34 = intSum33 * intSum\n\
    \        val intSum35 = intSum34 * intSum\n        val intSum36 = intSum35 * intSum\n\
    \        val intSum37 = intSum36 * intSum\n        val intSum38 = intSum37 * intSum\n\
    \        val intSum39 = intSum38 * intSum\n        val intSum40 = intSum39 * intSum\n\
    \        val intSum41 = int\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsemlbfy4.scala:50:23 ------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mintSum41\e[0m = int\n\e\
    [31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m          \
    \             Not found: int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsemlbfy4.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = x != y && y !=\
    \ z && z != sum\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplrjqq5oe.scala:17)\n\tat Problem.main(tmplrjqq5oe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt) match {\n            case x if x < 0 || x >\
    \ Integer.MAX_VALUE => false\n            case y if y < 0 || y > Integer.MAX_VALUE\
    \ => false\n            case z if z < 0 || z > Integer.MAX_VALUE => false\n  \
    \          case _ => true\n        }\n        val isSum = x + y + z == sum\n \
    \       isInteger && isSum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_spubpr.scala:21)\n\tat Problem.main(tmp8_spubpr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      if (sum == x.toInt + y.toInt + z.toInt) {\n            return true\n  \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8131kyld.scala:19)\n\tat Problem.main(tmp8131kyld.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = sum.toInt == sum\n        val isEqual = x + y == z\n  \
    \      val isAllInteger = isInteger && isEqual\n        !isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpla_h_b1s.scala:17)\n\tat Problem.main(tmpla_h_b1s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt)\n        val isSum = (sum == (x + y + z).toInt)\n\
    \        val isAllIntegers = (isInteger && isSum)\n        isAllIntegers\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw0_czr8e.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misAllIntegers\e[0m = (isInteger\
    \ && isSum)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value && is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt).toFloat == sum\n        val isAllIntegers =\
    \ (x.toInt == x.toFloat && y.toInt == y.toFloat && z.toInt == z.toFloat)\n   \
    \     isInteger && isAllIntegers\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdlgcmt09.scala:18)\n\tat Problem.main(tmpdlgcmt09.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == z + y) && (y == z + x) && (z == x + y) && (z ==\
    \ x + z)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1mdm8aox.scala:12)\n\tat Problem.main(tmp1mdm8aox.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isSum = (sum == x)\n      \
    \  val isDifferent = (x != sum)\n        val isDifferent2 = (z != sum)\n     \
    \   val isDifferent3 = (y != sum)\n        val isDifferent4 = (x != y)\n     \
    \   val isDifferent5 = (x != z)\n        val isDifferent6 = (y != z)\n       \
    \ val isDifferent7 = (z != y)\n        val isDifferent8 = (x != y)\n        val\
    \ isDifferent9 = (x != z)\n        val isDifferent10 = (y != z)\n        val isDifferent11\
    \ = (z != y)\n        val isDifferent12 = (x != y)\n        val isDifferent13\
    \ = (x != z)\n        val isDifferent14 = (y != z)\n        val isDifferent15\
    \ = (z != y)\n        val isDifferent16 = (x != y)\n        val isDifferent17\
    \ = (x != z)\n        val isDifferent18 = (y != z)\n        val isDifferent19\
    \ = (z != y)\n        val isDifferent20 = (x != y)\n        val isDifferent21\
    \ = (z != y)\n        val isDifferent22 = (x != z)\n        val isDifferent23\
    \ = (y != z)\n        val isDifferent24 = (z != y)\n        val isDifferent25\
    \ = (x != z)\n        val isDifferent26 = (y != z)\n        val isDifferent27\
    \ = (z != y)\n        val isDifferent28 = (x != z)\n        val isDifferent29\
    \ = (y != z)\n        val isDifferent30 = (z != y)\n        val isDifferent31\
    \ = (x != z)\n        val isDifferent32 = (y != z)\n        val isDifferent33\
    \ = (z != y)\n        val isDifferent34 = (x != z)\n        val isDifferent35\
    \ = (y != z)\n        val isDifferent36 = (z != y)\n        val isDifferent37\
    \ = (x != z)\n        val isDifferent38 = (y != z)\n        val isDifferent39\
    \ = (z != y)\n        val isDifferent40 = (x != z)\n        val isDifferent41\
    \ = (y != z)\n        val isDifferent42 = (z != y)\n        val isDifferent43\
    \ = (x != z)\n        val isDifferent44 = (y != z)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmple7ia0yi.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isEqual = (x == sum) && (y\
    \ == sum) && (z == sum)\n        isInteger && isEqual\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoinorkk2.scala:15)\n\tat Problem.main(tmpoinorkk2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = x != y && y !=\
    \ z && z != sum\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplrjqq5oe.scala:17)\n\tat Problem.main(tmplrjqq5oe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb70sksk.scala:12)\n\tat Problem.main(tmpvb70sksk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979377
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1) == 0\n        val isSumOfTwo = (sum == (x + y\
    \ + z)) && isInteger\n        val isSumOfThree = (sum == (x + y + z)) && !isInteger\n\
    \        val isSumOfFour = (sum == (x + y + z)) && !isInteger && !isSumOfTwo\n\
    \        val isSumOfFive = (sum == (x + y + z)) && !isInteger && !isSumOfTwo &&\
    \ !isSumOfThree\n        val isSumOfSix = (sum == (x + y + z)) && !isInteger &&\
    \ !isSumOfTwo && !isSumOfThree && !isSumOfFour\n        val isSumOfSeven = (sum\
    \ == (x + y + z)) && !isInteger && !isSumOfTwo && !isSumOfThree && !isSumOfFour\
    \ && !isSumOfFive\n        val isSumOfEight = (sum == (x + y + z)) && !isInteger\
    \ && !isSumOfTwo && !isSumOfThree && !isSumOfFour && !isSumOfFive && !isSumOfSix\n\
    \        val isSumOfNine = (sum == (x + y + z)) && !isInteger && !isSumOfTwo &&\
    \ !isSumOfThree && !isSumOfFour && !isSumOfFive && !isSumOfSix && !isSumOfSeven\n\
    \        val isSumOfTen = (sum == (x + y + z)) && !isInteger && !isSumOfTwo &&\
    \ !isSumOfThree && !isSumOfFour && !isSumOfFive && !isSumOfSix && !isSumOfSeven\
    \ && !isSumOfEight\n        val isSumOfEleven = (sum == (x + y + z)) && !isInteger\
    \ && !isSumOfTwo && !isSumOfThree && !isSumOfFour && !isSumOfFive && !isSumOfSix\
    \ && !isSumOfSeven && !isSumOfEight && !isSumOfNine\n        val isSumOfTwelve\
    \ = (sum == (x + y + z)) && !isInteger && !isSumOfTwo && !isSumOfThree && !isSumOfFour\
    \ && !isSumOfFive && !isSumOfSix && !isSumOfSeven && !isSumOfEight && !isSumOfNine\
    \ && !isSumOfTen\n        val isSumOfThirteen = (sum == (x + y + z)) && !isInteger\
    \ && !isSumOfTwo && !isSumOfThree && !\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8kwbhvsf.scala:22:100 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misSumOfThirteen\e[0m = (sum\
    \ == (x + y + z)) && !isInteger && !isSumOfTwo && !isSumOfThree && !\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                           Not found: !\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8kwbhvsf.scala:23:5 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5mpl6mw.scala:12)\n\tat Problem.main(tmpd5mpl6mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (y == y\
    \ + z) && (x == x + z)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzrf57ele.scala:12)\n\tat Problem.main(tmpzrf57ele.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y + z) || (x == y\
    \ - z) || (x == z + y) || (x == z - y) || (y == z + x) || (y == z - x) || (z ==\
    \ x + y) || (z == x - y) || (z == y + x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezk936eg.scala:14)\n\tat Problem.main(tmpezk936eg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y || x == z) && (y\
    \ == z || y == x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdkl5rily.scala:12)\n\tat Problem.main(tmpdkl5rily.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      if (sum == x || sum == y || sum == z) true\n        else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6t95e1lx.scala:14)\n\tat Problem.main(tmp6t95e1lx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = sum.toInt == sum\n        val isSum = x + y + z == sum\n\
    \        val isEqual = x + y + z == sum\n        val isEqual2 = x + y == z\n \
    \       val isEqual3 = x + y == z\n        val isEqual4 = x + y == z\n       \
    \ val isEqual5 = x + y == z\n        val isEqual6 = x + y == z\n        val isEqual7\
    \ = x + y == z\n        val isEqual8 = x + y == z\n        val isEqual9 = x +\
    \ y == z\n        val isEqual10 = x + y == z\n        val isEqual11 = x + y ==\
    \ z\n        val isEqual12 = x + y == z\n        val isEqual13 = x + y == z\n\
    \        val isEqual14 = x + y == z\n        val isEqual15 = x + y == z\n    \
    \    val isEqual16 = x + y == z\n        val isEqual17 = x + y == z\n        val\
    \ isEqual18 = x + y == z\n        val isEqual19 = x + y == z\n        val isEqual20\
    \ = x + y == z\n        val isEqual21 = x + y == z\n        val isEqual22 = x\
    \ + y == z\n        val isEqual23 = x + y == z\n        val isEqual24 = x + y\
    \ == z\n        val isEqual25 = x + y == z\n        val isEqual26 = x + y == z\n\
    \        val isEqual27 = x + y == z\n        val isEqual28 = x + y == z\n    \
    \    val isEqual29 = x + y == z\n        val isEqual30 = x + y == z\n        val\
    \ isEqual31 = x + y == z\n        val isEqual32 = x + y == z\n        val isEqual33\
    \ = x + y == z\n        val isEqual34 = x + y == z\n        val isEqual35 = x\
    \ + y == z\n        val isEqual36 = x + y == z\n        val isEqual37 = x + y\
    \ == z\n        val isEqual38 = x + y == z\n        val isEqual39 = x + y == z\n\
    \        val isEqual40 = x + y == z\n        val isEqual41 = x + y == z\n    \
    \    val isEqual42 = x + y == z\n        val isEqual43 = x + y == z\n        val\
    \ isEqual44 = x + y == z\n        val isEqual45 = x + y == z\n        val isEqual46\
    \ = x + y == z\n        val isEqual47 = x + y == z\n        val isEqual48 = x\
    \ + y == z\n        val isEqual49 = x + y == z\n        val is\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpga_wa6me.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpga_wa6me.scala:62:5 ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && x == (x\
    \ + z) && x == (y + z)) || (x == (x - y) && x == (x - z) && x == (y - z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsnm6cxc6.scala:12)\n\tat Problem.main(tmpsnm6cxc6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y || x == z) && x.toInt\
    \ == y.toInt && x.toInt == z.toInt\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp05o9upck.scala:12)\n\tat Problem.main(tmp05o9upck.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isAllInteger = (x % 1 == 0)\
    \ &&\n                           (y % 1 == 0) &&\n                           (z\
    \ % 1 == 0)\n        isInteger && isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpetsiju7o.scala:20)\n\tat Problem.main(tmpetsiju7o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt) match {\n            case x if x < 0 => false\n\
    \            case x if x > 0 => true\n            case _ => false\n        }\n\
    \        isInteger && isInteger(x) && isInteger(y) && isInteger(z)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpssifo4wo.scala:15:21 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        isInteger && isInteger(x) && isInteger(y) &&\
    \ isInteger(z)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     \e[33mvalue\e[0m \e[35misInteger\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpssifo4wo.scala:15:37\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        isInteger &&\
    \ isInteger(x) && isInteger(y) && isInteger(z)\n\e[31m\e[31m   |\e[0m        \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                \e[33mvalue\e[0m \e[35misInteger\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpssifo4wo.scala:15:53 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        isInteger && isInteger(x) && isInteger(y) &&\
    \ isInteger(z)\n\e[31m\e[31m   |\e[0m                                        \
    \             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \e\
    [33mvalue\e[0m \e[35misInteger\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n      \
    \  val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89if4h03.scala:16)\n\tat Problem.main(tmp89if4h03.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5mpl6mw.scala:12)\n\tat Problem.main(tmpd5mpl6mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y + z) && (x == y\
    \ + z) && (x == y + z)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8jdmolvg.scala:12)\n\tat Problem.main(tmp8jdmolvg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n      \
    \  val isSum2 = (sum == y)\n        val isSum3 = (sum == z)\n        isInteger\
    \ && isSum && isSum2 && isSum3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzy18lik0.scala:17)\n\tat Problem.main(tmpzy18lik0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) && (y\
    \ == z)\n        val isSum = (sum == x + y + z)\n        isInteger && isEqual\
    \ && isSum\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4l408duq.scala:16)\n\tat Problem.main(tmp4l408duq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt) match {\n            case x if x < 0 => false\n\
    \            case x if x > 0 => true\n            case y if y < 0 => false\n \
    \           case y if y > 0 => true\n            case z if z < 0 => false\n  \
    \          case z if z > 0 => true\n            case _ => false\n        }\n \
    \       isInteger\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph64iw93c.scala:23)\n\tat Problem.main(tmph64iw93c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (y == y\
    \ + z) && (x == x + z)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzrf57ele.scala:12)\n\tat Problem.main(tmpzrf57ele.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5mpl6mw.scala:12)\n\tat Problem.main(tmpd5mpl6mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt)\n        val isEqual = sum == x + y + z\n \
    \       val isAllInteger = (isInteger && isEqual)\n        isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaggh0k7s.scala:12:38 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = (isInteger\
    \ && isEqual)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value && is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x+y) && (x == x+z)\
    \ && (y == y+z) && (x == z+y) && (y == z+x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfvx0_jp.scala:12)\n\tat Problem.main(tmppfvx0_jp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x ==\
    \ z + y) && (y == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rrukwj1.scala:12)\n\tat Problem.main(tmp6rrukwj1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = sum.toInt == sum\n        val isEqual = x + y == z\n  \
    \      val isAllInteger = isInteger && isEqual\n        isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsl92vh4d.scala:16)\n\tat Problem.main(tmpsl92vh4d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = sum.toString.toInt\n        val isSum = sum == x + y +\
    \ z\n        val isAllInteger = isInteger && isSum\n        val isAllInteger =\
    \ isAllInteger && isInteger.toDouble == sum\n        isAllInteger\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl49nd0u2.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = isAllInteger\
    \ && isInteger.toDouble == sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misAllInteger is already defined as \e[33mvalue\e[0m \e[35misAllInteger\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpl49nd0u2.scala:12:37 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = isInteger && isSum\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           value && is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      if (sum == x.toInt + y.toInt + z.toInt)\n            true\n        else\n\
    \            false\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvjj9qlfx.scala:19)\n\tat Problem.main(tmpvjj9qlfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5mpl6mw.scala:12)\n\tat Problem.main(tmpd5mpl6mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5mpl6mw.scala:12)\n\tat Problem.main(tmpd5mpl6mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      if (sum == 0 || sum == 1)\n            true\n        else\n           \
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd7zxzwk3.scala:16)\n\tat Problem.main(tmpd7zxzwk3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = sum.toInt\n        val intSum2 = intSum * intSum\n       \
    \ val intSum3 = intSum2 * intSum\n        val intSum4 = intSum3 * intSum\n   \
    \     val intSum5 = intSum4 * intSum\n        val intSum6 = intSum5 * intSum\n\
    \        val intSum7 = intSum6 * intSum\n        val intSum8 = intSum7 * intSum\n\
    \        val intSum9 = intSum8 * intSum\n        val intSum10 = intSum9 * intSum\n\
    \        val intSum11 = intSum10 * intSum\n        val intSum12 = intSum11 * intSum\n\
    \        val intSum13 = intSum12 * intSum\n        val intSum14 = intSum13 * intSum\n\
    \        val intSum15 = intSum14 * intSum\n        val intSum16 = intSum15 * intSum\n\
    \        val intSum17 = intSum16 * intSum\n        val intSum18 = intSum17 * intSum\n\
    \        val intSum19 = intSum18 * intSum\n        val intSum20 = intSum19 * intSum\n\
    \        val intSum21 = intSum20 * intSum\n        val intSum22 = intSum21 * intSum\n\
    \        val intSum23 = intSum22 * intSum\n        val intSum24 = intSum23 * intSum\n\
    \        val intSum25 = intSum24 * intSum\n        val intSum26 = intSum25 * intSum\n\
    \        val intSum27 = intSum26 * intSum\n        val intSum28 = intSum27 * intSum\n\
    \        val intSum29 = intSum28 * intSum\n        val intSum30 = intSum29 * intSum\n\
    \        val intSum31 = intSum30 * intSum\n        val intSum32 = intSum31 * intSum\n\
    \        val intSum33 = intSum32 * intSum\n        val intSum34 = intSum33 * intSum\n\
    \        val intSum35 = intSum34 * intSum\n        val intSum36 = intSum35 * intSum\n\
    \        val intSum37 = intSum36 * intSum\n        val intSum38 = intSum37 * intSum\n\
    \        val intSum39 = intSum38 * intSum\n        val intSum40 = intSum39 * intSum\n\
    \        val intSum41 = int\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsemlbfy4.scala:50:23 ------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mintSum41\e[0m = int\n\e\
    [31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m          \
    \             Not found: int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsemlbfy4.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (y == y\
    \ + z) && (z == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptj8is7ug.scala:12)\n\tat Problem.main(tmptj8is7ug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x ==\
    \ z + y) && (y == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rrukwj1.scala:12)\n\tat Problem.main(tmp6rrukwj1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt)\n        val isSum = (sum == (x + y + z))\n\
    \        val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_zukl_5.scala:12:38 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = (isInteger\
    \ && isSum)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            value && is not a member of Int\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x)\n\
    \        val isAllInteger = (isInteger && isSum)\n        val isAllIntegerAndNotSum\
    \ = (isInteger && !isSum)\n        isAllInteger || isAllIntegerAndNotSum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwwlxex2l.scala:18)\n\tat Problem.main(tmpwwlxex2l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5mpl6mw.scala:12)\n\tat Problem.main(tmpd5mpl6mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && x == (x\
    \ + z) && x == (y + z)) || (x == (x - y) && x == (x - z) && x == (y - z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsnm6cxc6.scala:12)\n\tat Problem.main(tmpsnm6cxc6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (y == y\
    \ + z) && (z == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptj8is7ug.scala:12)\n\tat Problem.main(tmptj8is7ug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = sum.toInt\n        val intSum2 = intSum * intSum\n       \
    \ val intSum3 = intSum2 * intSum\n        val intSum4 = intSum3 * intSum\n   \
    \     val intSum5 = intSum4 * intSum\n        val intSum6 = intSum5 * intSum\n\
    \        val intSum7 = intSum6 * intSum\n        val intSum8 = intSum7 * intSum\n\
    \        val intSum9 = intSum8 * intSum\n        val intSum10 = intSum9 * intSum\n\
    \        val intSum11 = intSum10 * intSum\n        val intSum12 = intSum11 * intSum\n\
    \        val intSum13 = intSum12 * intSum\n        val intSum14 = intSum13 * intSum\n\
    \        val intSum15 = intSum14 * intSum\n        val intSum16 = intSum15 * intSum\n\
    \        val intSum17 = intSum16 * intSum\n        val intSum18 = intSum17 * intSum\n\
    \        val intSum19 = intSum18 * intSum\n        val intSum20 = intSum19 * intSum\n\
    \        val intSum21 = intSum20 * intSum\n        val intSum22 = intSum21 * intSum\n\
    \        val intSum23 = intSum22 * intSum\n        val intSum24 = intSum23 * intSum\n\
    \        val intSum25 = intSum24 * intSum\n        val intSum26 = intSum25 * intSum\n\
    \        val intSum27 = intSum26 * intSum\n        val intSum28 = intSum27 * intSum\n\
    \        val intSum29 = intSum28 * intSum\n        val intSum30 = intSum29 * intSum\n\
    \        val intSum31 = intSum30 * intSum\n        val intSum32 = intSum31 * intSum\n\
    \        val intSum33 = intSum32 * intSum\n        val intSum34 = intSum33 * intSum\n\
    \        val intSum35 = intSum34 * intSum\n        val intSum36 = intSum35 * intSum\n\
    \        val intSum37 = intSum36 * intSum\n        val intSum38 = intSum37 * intSum\n\
    \        val intSum39 = intSum38 * intSum\n        val intSum40 = intSum39 * intSum\n\
    \        val intSum41 = int\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsemlbfy4.scala:50:23 ------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mintSum41\e[0m = int\n\e\
    [31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m          \
    \             Not found: int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsemlbfy4.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isSum = (sum == x + y +\
    \ z)\n        val isAllInteger = (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n  \
    \      isInteger && isSum && isAllInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplt8h7vn3.scala:19)\n\tat Problem.main(tmplt8h7vn3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && x == (x\
    \ + z) && x == (y + z)) || (x == (x - y) && x == (x - z) && x == (y - z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsnm6cxc6.scala:12)\n\tat Problem.main(tmpsnm6cxc6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (x ==\
    \ z + y) && (y == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rrukwj1.scala:12)\n\tat Problem.main(tmp6rrukwj1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y + z) || (x == z)\
    \ || (y == z)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp10n0h687.scala:12)\n\tat Problem.main(tmp10n0h687.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (x == x\
    \ + z) && (y == y + z) && (x == y + z) && (x == z + y) && (y == z + x) && (z ==\
    \ x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2du_6fwm.scala:12)\n\tat Problem.main(tmp2du_6fwm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isSum = (sum.toInt == sum.toInt)\n\
    \        val isAllInteger = (isInteger && isSum)\n        isAllInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi2gsb7jn.scala:18)\n\tat Problem.main(tmpi2gsb7jn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979393
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x.toInt\
    \ + y.toInt + z.toInt)\n        isInteger && isSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpylvgq2ta.scala:18)\n\tat Problem.main(tmpylvgq2ta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isSum = (sum.toInt == x\
    \ + y + z)\n        isInteger && isSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdvcijoz9.scala:17)\n\tat Problem.main(tmpdvcijoz9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = sum.toString.toInt\n        val isSum = sum == x + y +\
    \ z\n        val isEqual = sum == x + y + z\n        val isEqual2 = sum == x +\
    \ y\n        val isEqual3 = sum == x\n        val isEqual4 = sum == y\n      \
    \  val isEqual5 = sum == z\n        val isEqual6 = sum == x + y + z\n        val\
    \ isEqual7 = sum == x + y\n        val isEqual8 = sum == x\n        val isEqual9\
    \ = sum == y\n        val isEqual10 = sum == z\n        val isEqual11 = sum ==\
    \ x + y + z\n        val isEqual12 = sum == x + y\n        val isEqual13 = sum\
    \ == x\n        val isEqual14 = sum == y\n        val isEqual15 = sum == z\n \
    \       val isEqual16 = sum == x + y + z\n        val isEqual17 = sum == x + y\n\
    \        val isEqual18 = sum == x\n        val isEqual19 = sum == y\n        val\
    \ isEqual20 = sum == z\n        val isEqual21 = sum == x + y + z\n        val\
    \ isEqual22 = sum == x + y\n        val isEqual23 = sum == x\n        val isEqual24\
    \ = sum == y\n        val isEqual25 = sum == z\n        val isEqual26 = sum ==\
    \ x + y + z\n        val isEqual27 = sum == x + y\n        val isEqual28 = sum\
    \ == x\n        val isEqual29 = sum == y\n        val isEqual30 = sum == z\n \
    \       val isEqual31 = sum == x + y + z\n        val isEqual32 = sum == x + y\n\
    \        val isEqual33 = sum == x\n        val isEqual34 = sum == y\n        val\
    \ isEqual35 = sum == z\n        val isEqual36 = sum == x + y + z\n        val\
    \ isEqual37 = sum == x + y\n        val isEqual38 = sum == x\n        val isEqual39\
    \ = sum == y\n        val isEqual40 = sum == z\n        val isEqual41 = sum ==\
    \ x + y + z\n        val isEqual42 = sum == x + y\n        val isEqual43 = sum\
    \ == x\n        val isEqual44 = sum == y\n        val isEqual45 = sum == z\n \
    \       val isEqual46 = sum == x + y + z\n        val isEqual47 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8vxxnmg4.scala:58:23 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \e[36misEqual47\e[0m = \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8vxxnmg4.scala:59:5 ---------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y + z) && (x == y\
    \ + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x ==\
    \ y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x\
    \ == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) &&\
    \ (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z)\
    \ && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y +\
    \ z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x ==\
    \ y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x\
    \ == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) &&\
    \ (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z)\
    \ && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y +\
    \ z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x ==\
    \ y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x\
    \ == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) &&\
    \ (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z)\
    \ && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y +\
    \ z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x ==\
    \ y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x\
    \ == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) &&\
    \ (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z)\
    \ && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y +\
    \ z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x ==\
    \ y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x\
    \ == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) &&\
    \ (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z)\
    \ && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y +\
    \ z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x ==\
    \ y + z) && (x == y + \n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl5dqgu0u.scala:9:2049 --------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        (x == y + z) && (x == y + z) && (x == y + z) &&\
    \ (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z)\
    \ && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y +\
    \ z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x ==\
    \ y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x\
    \ == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) &&\
    \ (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z)\
    \ && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y +\
    \ z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x ==\
    \ y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x\
    \ == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) &&\
    \ (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z)\
    \ && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y +\
    \ z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x ==\
    \ y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x\
    \ == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) &&\
    \ (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z)\
    \ && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y +\
    \ z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x ==\
    \ y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x\
    \ == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) &&\
    \ (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z)\
    \ && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y +\
    \ z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x ==\
    \ y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x == y + z) && (x\
    \ == y + z) && (x == y + z) && (x == y +"
  stdout: ''
  timestamp: 1659979392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = (x == y) && (y\
    \ == z)\n        val isSum = (sum == sum)\n        val isEqualOrSum = (isEqual\
    \ || isSum)\n        isInteger && isEqualOrSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3eteybo.scala:19)\n\tat Problem.main(tmpp3eteybo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + y) && y == (y + z) && z == (x + z))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5mpl6mw.scala:12)\n\tat Problem.main(tmpd5mpl6mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt % 1 == 0)\n        val isSum = (sum == x + y\
    \ + z)\n        val isAllInteger = (isInteger && isSum)\n        isAllInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfeuc81k5.scala:17)\n\tat Problem.main(tmpfeuc81k5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt % 1 == 0)\n        val isEqual = sum == x +\
    \ y + z\n        val isAllInteger = (x % 1 == 0) &&\n                        \
    \     (y % 1 == 0) &&\n                             (z % 1 == 0)\n        isInteger\
    \ || isEqual || isAllInteger\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) ==\
    \ (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg5vqy0jj.scala:19)\n\tat Problem.main(tmpg5vqy0jj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979393
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt) match {\n            case x if x < 0 => false\n\
    \            case x if x == 0 => true\n            case x if x > 0 => true\n \
    \           case _ => false\n        }\n        isInteger\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsgoatlmq.scala:20)\n\tat Problem.main(tmpsgoatlmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val intSum = math.round(sum)\n        val intSum2 = math.round(sum * 2)\n\
    \        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpor5khvrk.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (x + y)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1atebe9.scala:12)\n\tat Problem.main(tmpa1atebe9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == y + z) || (x == y\
    \ - z) || (x == z + y) || \n        (x == y - z) || (x == z + y) || \n       \
    \ (x == y + z) || (x == y - z) || (x == z + y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprf5hhkm8.scala:16)\n\tat Problem.main(tmprf5hhkm8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt == sum)\n        val isEqual = x.toInt == y\
    \ || x.toInt == z || y.toInt == z\n        isInteger && isEqual\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiq_x5e4s.scala:15)\n\tat Problem.main(tmpiq_x5e4s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum.toInt)\n        val isEqual = sum == x + y + z\n \
    \       val isAllIntegers = isInteger && isEqual\n        val isNotAllIntegers\
    \ = !isInteger\n        isAllIntegers && isNotAllIntegers\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg0tkq8v2.scala:12:38 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36misAllIntegers\e[0m = isInteger\
    \ && isEqual\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value && is not a member of Int\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg0tkq8v2.scala:13:31 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36misNotAllIntegers\e[0m =\
    \ !isInteger\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  value unary_! is not a member of Int - did you mean isInteger.unary_+?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n\
    \        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y &&\
    \ y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z +\
    \ x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x ==\
    \ x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z &&\
    \ z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n    \
    \    (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y ==\
    \ y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) ||\
    \ \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x + y\
    \ && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x == x + y && y\
    \ == y + z && z == z + x) || \n        (x == x + y && y == y + z && z == z + x)\
    \ || \n        (x == x + y && y == y + z && z == z + x) || \n        (x == x +\
    \ y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z && z ==\
    \ z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n        (x\
    \ == x + y && y == y + z && z == z + x) || \n        (x == x + y && y == y + z\
    \ && z == z + x) || \n        (x == x + y && y == y + z && z == z + x) || \n \
    \       (x == x + y && y == y + z && z == z + x) || \n        (x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr2wgt3y7.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr2wgt3y7.scala:39:9 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \        (x\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:\
    \    (x : Float)\n\e[31m   |\e[0m         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        val sum = x + y + z\n  \
    \      val isInteger = (sum % 1 == 0)\n        val isAllIntegers = (x % 1 == 0)\
    \ || (y % 1 == 0) || (z % 1 == 0)\n        isInteger && isAllIntegers\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n\
    \    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8j70r4r5.scala:17)\n\tat Problem.main(tmp8j70r4r5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979377
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == (x + y) && y == (x\
    \ + z) && z == (y + z)) || (x == (x + z) && y == (y + z) && z == (x + y))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvb70sksk.scala:12)\n\tat Problem.main(tmpvb70sksk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979377
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y) && (y == y\
    \ + z) && (z == z + x)\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptj8is7ug.scala:12)\n\tat Problem.main(tmptj8is7ug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    def anyInt(x :\
    \ Float, y : Float, z : Float) : Boolean = {\n        (x == x + y && y == y +\
    \ z && z == z + x) || (x == x + z && y == y + z && z == z + x)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n \
    \   assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l,\
    \ (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp2dhk5fo.scala:12)\n\tat Problem.main(tmpp2dhk5fo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979359
