name: HumanEval_107_even_odd_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a tuple that has the number of even and\
  \ odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n\
  \    // Example 1:\n    // Explanation:\n    // Integer palindrome are 1, 2, 3.\
  \ one of them is even, and two of them are odd.\n    // Example 2:\n    // Explanation:\n\
  \    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
  \ and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned\
  \ tuple has the number of even and odd integer palindromes respectively.\n    def\
  \ evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l,\
  \ 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l,\
  \ 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l,\
  \ 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l,\
  \ 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n"
completions: ["        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        for(i <- 1 to n) {\n      \
    \      val reverse = i.toString.reverse\n            val isEven = reverse.startsWith(i\
    \ / 2)\n            val isOdd = reverse.startsWith(i % 2)\n            if(isEven)\
    \ {\n                evenPalindromes += i\n                evenPalindromeCount\
    \ += 1\n            }\n            if(isOdd) {\n                oddPalindromes\
    \ += i\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      val evenPalindrome = evenPalindromes.toList\n        val oddPalindrome\
    \ = oddPalindromes.toList\n        val evenPalindromeTuple = evenPalindrome.toSeq.sortBy(_).reverse\n\
    \        val oddPalindromeTuple = oddPalindrome.toSeq.sortBy(_).reverse\n    \
    \    val evenPalindromeTupleCount = evenPalindromeTuple.count\n        val oddPalindromeTupleCount\
    \ = oddPalindromeTuple.count\n        (evenPalindromeTupleCount, oddPalindromeTupleCount)",
  "        val evenPalindrome = mutable.ListBuffer.empty[Long]\n        val oddPalindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val odd = mutable.ListBuffer.empty[Long]\n        val palindrome = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenCount =\
    \ mutable.ListBuffer.empty[Long]\n        val oddCount = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCount2 = mutable.ListBuffer.empty[Long]\n        val oddCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenCount4 = mutable.ListBuffer.empty[Long]\n        val oddCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val palindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n) {\n                if (i % 10 == j % 10) {\n\
    \                    evenPalindromes += i\n                    oddPalindromes\
    \ += j\n                    even += 1\n                    odd += 1\n        \
    \            j = 0\n                } else {\n                    j += 1\n   \
    \             }\n            }\n            i += 1\n            j = 0\n      \
    \  }\n        Tuple2(even, odd)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeMax = 0\n       \
    \ val oddPalindromeMax = 0\n        val evenPalindromeMin = 0\n        val oddPalindromeMin\
    \ = 0\n        val evenPalindromeSumOfEven = 0\n        val oddPalindromeSumOfEven\
    \ = 0\n        val evenPalindromeSumOfOdd = 0\n        val oddPalindromeSumOfOdd\
    \ = 0\n        val evenPalindromeMaxOfEven = 0\n        val oddPalindromeMaxOfEven\
    \ = 0\n        val evenPalindromeMinOfOdd = 0\n        val oddPalindromeMinOfOdd\
    \ = 0\n        val evenPalindromeMaxOfOdd = 0\n        val oddPalindromeMaxOfOdd\
    \ = 0\n        val evenPalindromeMinOfEven = 0\n        val oddPalindromeMinOfEven\
    \ = 0\n        val evenPalindromeMaxOfEven = 0\n        val oddPalindromeMaxOfEven\
    \ = 0\n        val evenPalindromeMinOfOdd = 0\n        val oddPalindromeMinOfOdd\
    \ = 0\n        val evenPalindromeMaxOfOdd = 0\n        val oddPalindromeMaxOfOdd\
    \ = 0\n        val evenPalindromeMinOfEven = 0\n        val oddPalindromeMinOfEven\
    \ = 0\n        val evenPalindromeMaxOfEven = 0\n        val oddPalindromeMaxOfEven\
    \ = 0\n        val evenPalindromeMinOfOdd = 0\n        val oddPalindromeMinOfOdd\
    \ = 0\n        val evenPalindromeMaxOfOdd = 0\n        val oddPalindromeMaxOfOdd\
    \ = 0\n        val evenPalindromeMinOfEven = 0\n        val oddPalindromeMinOfEven\
    \ = 0\n        val evenPalindromeMaxOfEven = 0\n        val oddPalindromeMaxOfEven\
    \ = 0\n        val evenPalindromeMinOfOdd = 0\n        val oddPalindromeMinOfOdd\
    \ = 0\n", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        var even = 0\n        var odd\
    \ = 0\n        var palindrome = 0\n        var evenPalindrome = 0\n        var\
    \ oddPalindrome = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount2 = 0\n        var oddPalindromeCount2 =\
    \ 0\n        var evenPalindromeCount3 = 0\n        var oddPalindromeCount3 = 0\n\
    \        var evenPalindromeCount4 = 0\n        var oddPalindromeCount4 = 0\n \
    \       var evenPalindromeCount5 = 0\n        var oddPalindromeCount5 = 0\n  \
    \      var evenPalindromeCount6 = 0\n        var oddPalindromeCount6 = 0\n   \
    \     var evenPalindromeCount7 = 0\n        var oddPalindromeCount7 = 0\n    \
    \    var evenPalindromeCount8 = 0\n        var oddPalindromeCount8 = 0\n     \
    \   var evenPalindromeCount9 = 0\n        var oddPalindromeCount9 = 0\n      \
    \  var evenPalindromeCount10 = 0\n        var oddPalindromeCount10 = 0\n     \
    \   var evenPalindromeCount11 = 0\n        var oddPalindromeCount11 = 0\n    \
    \    var evenPalindromeCount12 = 0\n        var oddPalindromeCount12 = 0\n   \
    \     var evenPalindromeCount13 = 0\n        var oddPalindromeCount13 = 0\n  \
    \      var evenPalindromeCount14 = 0\n        var oddPalindromeCount14 = 0\n \
    \       var evenPalindromeCount15 = 0\n        var oddPalindromeCount15 = 0\n\
    \        var evenPalindromeCount16 = 0\n        var oddPalindromeCount16 = 0\n\
    \        var evenPalindromeCount17 = 0\n        var oddPalindromeCount17 = 0\n\
    \        var evenPalindromeCount18 = 0\n        var oddPalindromeCount18 = 0\n\
    \        var evenPalindromeCount19 = 0\n        var oddPalindromeCount19 = 0\n\
    \        var evenPalindromeCount20 = 0\n        var oddPalindromeCount20 = 0\n\
    \        var evenPalindromeCount21 = 0\n        var oddPalindromeCount21 = 0\n\
    \        var evenPalindromeCount22 = 0\n        var oddPalindromeCount22 = 0\n\
    \        var evenPalindromeCount23 = 0\n        var oddPalindromeCount23 = 0\n\
    \        var evenPalindromeCount24 = 0\n        var oddPalindromeCount24 = 0\n\
    \        var evenP", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            val evenPalindrome = x %\
    \ 2 == 0\n            val oddPalindrome = x % 2 != 0\n            if (evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        val evenPalindromeTuple = evenPalindromes.toList\n\
    \        val oddPalindromeTuple = oddPalindromes.toList\n        evenPalindromeTuple.size\
    \ -> oddPalindromeTuple.size", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse = mutable.ListBuffer[Long]()\n       \
    \ val oddPalindromeCountReverse = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverse =\
    \ mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = mutable.ListBuffer[Long]()\n        val oddP", "        var even = 0\n   \
    \     var odd = 0\n        var palindrome = 0\n        var evenPalindrome = 0\n\
    \        var oddPalindrome = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount2 = 0\n        var oddPalindromeCount2\
    \ = 0\n        var evenPalindromeCount3 = 0\n        var oddPalindromeCount3 =\
    \ 0\n        var evenPalindromeCount4 = 0\n        var oddPalindromeCount4 = 0\n\
    \        var evenPalindromeCount5 = 0\n        var oddPalindromeCount5 = 0\n \
    \       var evenPalindromeCount6 = 0\n        var oddPalindromeCount6 = 0\n  \
    \      var evenPalindromeCount7 = 0\n        var oddPalindromeCount7 = 0\n   \
    \     var evenPalindromeCount8 = 0\n        var oddPalindromeCount8 = 0\n    \
    \    var evenPalindromeCount9 = 0\n        var oddPalindromeCount9 = 0\n     \
    \   var evenPalindromeCount10 = 0\n        var oddPalindromeCount10 = 0\n    \
    \    var evenPalindromeCount11 = 0\n        var oddPalindromeCount11 = 0\n   \
    \     var evenPalindromeCount12 = 0\n        var oddPalindromeCount12 = 0\n  \
    \      var evenPalindromeCount13 = 0\n        var oddPalindromeCount13 = 0\n \
    \       var evenPalindromeCount14 = 0\n        var oddPalindromeCount14 = 0\n\
    \        var evenPalindromeCount15 = 0\n        var oddPalindromeCount15 = 0\n\
    \        var evenPalindromeCount16 = 0\n        var oddPalindromeCount16 = 0\n\
    \        var evenPalindromeCount17 = 0\n        var oddPalindromeCount17 = 0\n\
    \        var evenPalindromeCount18 = 0\n        var oddPalindromeCount18 = 0\n\
    \        var evenPalindromeCount19 = 0\n        var oddPalindromeCount19 = 0\n\
    \        var evenPalindromeCount20 = 0\n        var oddPalindromeCount20 = 0\n\
    \        var evenPalindromeCount21 = 0\n        var oddPalindromeCount21 = 0\n\
    \        var evenPalindromeCount22 = 0\n        var oddPalindromeCount22 = 0\n\
    \        var evenPalindromeCount23 = 0\n        var oddPalindromeCount23 = 0\n\
    \        var evenPalindromeCount24 = 0\n        var oddPalindromeCount24 = 0\n\
    \        var evenP", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        for(i <- 1 to n){\n       \
    \     val reverse = i.toString.reverse\n            val evenPalindrome = reverse.equals(reverse)\n\
    \            val oddPalindrome = reverse.equals(reverse.reverse)\n           \
    \ if(evenPalindrome){\n                evenPalindromes += i\n                evenPalindromeCount\
    \ += 1\n            }\n            if(oddPalindrome){\n                oddPalindromes\
    \ += i\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      Tuple2(evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n        evenPalindromeRange\
    \ foreach { x =>\n            val reversed = x.reverse\n            if (x == reversed)\
    \ {\n                evenPalindromeCount += 1\n                evenPalindromes\
    \ += x\n            } else {\n                oddPalindromeCount += 1\n      \
    \          oddPalindromes += x\n            }\n        }\n        Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        for(i <-\
    \ 1 to n) {\n            val evenPalindrome = i.toString.reverse.equals(i.toString)\n\
    \            val oddPalindrome = i.toString.reverse.equals(i.toString.reverse)\n\
    \            if(evenPalindrome && oddPalindrome) {\n                evenPalindromes\
    \ += i\n                oddPalindromes += i\n            }\n        }\n      \
    \  (evenPalindromes.size, oddPalindromes.size)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n        evenPalindromeRange\
    \ foreach { x =>\n            val reversed = x.reverse\n            if (reversed\
    \ == x) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromes += x\n          \
    \      oddPalindromeCount += 1\n            }\n        }\n        evenPalindromeCount\
    \ -> evenPalindromeCount\n        oddPalindromeCount -> oddPalindromeCount", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x => x %\
    \ 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val reversed\
    \ = x.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            } else {\n     \
    \           oddPalindromes += x\n                oddPalindromeCount += 1\n   \
    \         }\n        }\n        evenPalindromeCount -> evenPalindromeCount\n \
    \       oddPalindromeCount -> oddPalindromeCount", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = range(1, n).filter(x => x % 2 != 0)\n        evenPalindromeRange\
    \ foreach { x =>\n            val reversed = x.reverse\n            if (x == reversed)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            }\n        }\n        oddPalindromeRange foreach { x =>\n\
    \            val reversed = x.reverse\n            if (x == reversed) {\n    \
    \            oddPalindromes += x\n                oddPalindromeCount += 1\n  \
    \          }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCountPer = 0\n        val oddPalindromeCountPer\
    \ = 0\n        val evenPalindromeCountPerPer = 0\n        val oddPalindromeCountPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPer = 0\n        val oddPalindromeCountPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPerPerPer = 0\n        val\
    \ oddPalindromeCountPerPerPerPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPerPerPerPerPer = 0\n    \
    \    val evenPalindromeCountPerPerPerPerPerPerPerPerPerPerPer = 0\n        val\
    \ oddPalindromeCountPerPerPerPerPerPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPerPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPerPerPerPerPerPerPerPer =\
    \ 0\n        val evenPalindromeCountPerPerPerPerPerPerPerPerPerPerPerPerPer =\
    \ 0\n        val oddPalindromeCountPerPerPerPerPerPerPerPerPerPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPerPerPerPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPerPerPerPerPerPerPerPerPerPer\
    \ = 0\n        val evenP", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        var even = 0\n    \
    \    var odd = 0\n        var i = 0\n        var j = 0\n        while (i < n)\
    \ {\n            while (j < n) {\n                if (i % 10 == j % 10) {\n  \
    \                  evenPalindromes += i\n                    oddPalindromes +=\
    \ j\n                }\n                j += 1\n            }\n            i +=\
    \ 1\n            evenPalindromes.clear()\n            oddPalindromes.clear()\n\
    \        }\n        evenPalindromes.toList.sortWith(_ < _).length\n        oddPalindromes.toList.sortWith(_\
    \ < _).length", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n\
    \        val oddPalindromeCount = 0\n        val evenPalindromeCountTmp = 0\n\
    \        val oddPalindromeCountTmp = 0\n        val evenPalindromeCountTmp2 =\
    \ 0\n        val oddPalindromeCountTmp2 = 0\n        val evenPalindromeCountTmp3\
    \ = 0\n        val oddPalindromeCountTmp3 = 0\n        val evenPalindromeCountTmp4\
    \ = 0\n        val oddPalindromeCountTmp4 = 0\n        val evenPalindromeCountTmp5\
    \ = 0\n        val oddPalindromeCountTmp5 = 0\n        val evenPalindromeCountTmp6\
    \ = 0\n        val oddPalindromeCountTmp6 = 0\n        val evenPalindromeCountTmp7\
    \ = 0\n        val oddPalindromeCountTmp7 = 0\n        val evenPalindromeCountTmp8\
    \ = 0\n        val oddPalindromeCountTmp8 = 0\n        val evenPalindromeCountTmp9\
    \ = 0\n        val oddPalindromeCountTmp9 = 0\n        val evenPalindromeCountTmp10\
    \ = 0\n        val oddPalindromeCountTmp10 = 0\n        val evenPalindromeCountTmp11\
    \ = 0\n        val oddPalindromeCountTmp11 = 0\n        val evenPalindromeCountTmp12\
    \ = 0\n        val oddPalindromeCountTmp12 = 0\n        val evenPalindromeCountTmp13\
    \ = 0\n        val oddPalindromeCountTmp13 = 0\n        val evenPalindromeCountTmp14\
    \ = 0\n        val oddPalindromeCountTmp14 = 0\n        val evenPalindromeCountTmp15\
    \ = 0\n        val oddPalindromeCountTmp15 = 0\n        val evenPalindromeCountTmp16\
    \ = 0\n        val oddPalindromeCountTmp16 = 0\n        val evenPalindromeCountTmp17\
    \ = 0\n        val oddPalindromeCountTmp17 = 0\n        val evenPalindromeCountTmp18\
    \ = 0\n        val oddPalindrome", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        var evenPalindrome = 0\n        var oddPalindrome = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindro", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = 1\
    \ to n\n        val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach\
    \ { x =>\n            val reversed = x.reverse\n            if (x == reversed)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromes += x\n          \
    \      oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while(i <\
    \ n) {\n            while(j < n) {\n                if(i % 10 == j % 10) {\n \
    \                   if(i % 10 == 0 && j % 10 != 0) {\n                       \
    \ evenPalindromes += i\n                        odd += 1\n                   \
    \ } else if(i % 10 != 0 && j % 10 == 0) {\n                        evenPalindromes\
    \ += i\n                        even += 1\n                    } else {\n    \
    \                    evenPalindromes += i\n                        evenPalindromes\
    \ += j\n                        odd += 1\n                        even += 1\n\
    \                    }\n                    j++\n                } else {\n  \
    \                  j++\n                }\n            }\n            i += 1\n\
    \            j = 0\n        }\n        (even, odd)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeCount2 = 0\n        val oddPalindromeCount2\
    \ = 0\n        val evenPalindromeCount3 = 0\n        val oddPalindromeCount3 =\
    \ 0\n        val evenPalindromeCount4 = 0\n        val oddPalindromeCount4 = 0\n\
    \        val evenPalindromeCount5 = 0\n        val oddPalindromeCount5 = 0\n \
    \       val evenPalindromeCount6 = 0\n        val oddPalindromeCount6 = 0\n  \
    \      val evenPalindromeCount7 = 0\n        val oddPalindromeCount7 = 0\n   \
    \     val evenPalindromeCount8 = 0\n        val oddPalindromeCount8 = 0\n    \
    \    val evenPalindromeCount9 = 0\n        val oddPalindromeCount9 = 0\n     \
    \   val evenPalindromeCount10 = 0\n        val oddPalindromeCount10 = 0\n    \
    \    val evenPalindromeCount11 = 0\n        val oddPalindromeCount11 = 0\n   \
    \     val evenPalindromeCount12 = 0\n        val oddPalindromeCount12 = 0\n  \
    \      val evenPalindromeCount13 = 0\n        val oddPalindromeCount13 = 0\n \
    \       val evenPalindromeCount14 = 0\n        val oddPalindromeCount14 = 0\n\
    \        val evenPalindromeCount15 = 0\n        val oddPalindromeCount15 = 0\n\
    \        val evenPalindromeCount16 = 0\n        val oddPalindromeCount16 = 0\n\
    \        val evenPalindromeCount17 = 0\n        val oddPalindromeCount17 = 0\n\
    \        val evenPalindromeCount18 = 0\n        val oddPalindromeCount18 = 0\n\
    \        val evenPalindromeCount19 = 0\n        val oddPalindromeCount19 = 0\n\
    \        val evenPalindromeCount20 = 0\n        val oddPalindromeCount20 = 0\n\
    \        val evenPalindromeCount21 = 0\n        val oddPalindromeCount21 = 0\n\
    \        val evenPalindromeCount22 = 0\n        val oddPalindrome", "        val\
    \ evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = range(1, n).filter(x => x % 2 != 0)\n        evenPalindromeRange\
    \ foreach { x =>\n            val reverse = x.reverse\n            if (reverse\
    \ == x) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            }\n        }\n        oddPalindromeRange foreach { x =>\n\
    \            val reverse = x.reverse\n            if (reverse == x) {\n      \
    \          oddPalindromes += x\n                oddPalindromeCount += 1\n    \
    \        }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var evenPalindrome = 0\n        var oddPalindrome\
    \ = 0\n        var i = 0\n        var j = 0\n        while (i < n) {\n       \
    \     val temp = i\n            while (temp > 0) {\n                val remainder\
    \ = temp % 10\n                if (remainder == 0) {\n                    evenPalindrome\
    \ = evenPalindrome + 1\n                    evenPalindromes += evenPalindrome\n\
    \                    temp = temp / 10\n                } else {\n            \
    \        oddPalindrome = oddPalindrome + 1\n                    oddPalindromes\
    \ += oddPalindrome\n                    temp = temp / 10\n                }\n\
    \            }\n            i = i + 1\n        }\n        val evenPalindromeCount\
    \ = evenPalindromes.toList.length\n        val oddPalindromeCount = oddPalindromes.toList.length\n\
    \        val evenPalindromeTuple = Tuple2(evenPalindromeCount, evenPalindromes.toList)\n\
    \        val oddPalindromeTuple = Tuple2(oddPalindromeCount, oddPalindromes.toList)\n\
    \        return (evenPalindromeTuple, oddPalindromeTuple)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.", "        val evenPalindrome = mutable.Set[Long]()\n\
    \        val oddPalindrome = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val oddPalindromeTuplesSet = mutable.Set[Tuple2[Long, Long]]()\n       \
    \ val evenPalindromeTuplesSet2 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ oddPalindromeTuplesSet2 = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet3\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet3 = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuplesSet4 = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeTuplesSet4 = mutable.Set[Tuple2[Long, Long]]()\n   \
    \     val evenPalindromeTuplesSet5 = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val oddPalindromeTuplesSet5 = mutable.Set[Tuple2[Long, Long]]()\n        val\
    \ evenPalindromeTuplesSet6 = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet6\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuplesSet7 =\
    \ mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuplesSet7 = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuplesSet8 = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeTuplesSet8 = mutable.Set[Tuple2[Long, Long]]", "   \
    \     val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        var even = 0\n        var odd = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var evenPalindrome\
    \ = 0\n        var oddPalindrome = 0\n        var evenPalindromeCount = 0\n  \
    \      var oddPalindromeCount = 0\n        var evenPalindromeCount2 = 0\n    \
    \    var oddPalindromeCount2 = 0\n        var evenPalindromeCount3 = 0\n     \
    \   var oddPalindromeCount3 = 0\n        var evenPalindromeCount4 = 0\n      \
    \  var oddPalindromeCount4 = 0\n        var evenPalindromeCount5 = 0\n       \
    \ var oddPalindromeCount5 = 0\n        var evenPalindromeCount6 = 0\n        var\
    \ oddPalindromeCount6 = 0\n        var evenPalindromeCount7 = 0\n        var oddPalindromeCount7\
    \ = 0\n        var evenPalindromeCount8 = 0\n        var oddPalindromeCount8 =\
    \ 0\n        var evenPalindromeCount9 = 0\n        var oddPalindromeCount9 = 0\n\
    \        var evenPalindromeCount10 = 0\n        var oddPalindromeCount10 = 0\n\
    \        var evenPalindromeCount11 = 0\n        var oddPalindromeCount11 = 0\n\
    \        var evenPalindromeCount12 = 0\n        var oddPalindromeCount12 = 0\n\
    \        var evenPalindromeCount13 = 0\n        var oddPalindromeCount13 = 0\n\
    \        var evenPalindromeCount14 = 0\n        var oddPalindromeCount14 = 0\n\
    \        var evenPalindromeCount15 = 0\n        var oddPalindromeCount15 = 0\n\
    \        var evenPalindromeCount16 = 0\n        var oddPalindromeCount16 = 0\n\
    \        var evenPalindromeCount17 = 0\n        var oddPalindromeCount17 = 0\n\
    \        var evenPalindromeCount18 = 0\n        var oddPalindromeCount18 = 0\n\
    \        var evenPalindromeCount19 = 0\n        var oddPalindromeCount19 = 0\n\
    \        var evenPalindromeCount20 = 0\n        var oddPalindromeCount20 = 0\n\
    \        var evenPalindromeCount21 = 0\n        var oddPalindromeCount21 = 0\n\
    \        var evenPalindromeCount22 = 0\n        var oddPalindromeCount22 = 0\n\
    \        var evenPalindro", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = 1\
    \ to n\n        val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach\
    \ { x =>\n            val reversed = x.reverse\n            if (x == reversed)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromes += x\n          \
    \      oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindrome = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindrome = mutable.ListBuffer.empty[Long]\n        for(i <-\
    \ 1 to n){\n            val reverse = i.toString.reverse\n            val isEven\
    \ = reverse.startsWith(i)\n            if(isEven){\n                evenPalindrome\
    \ += i\n            }else{\n                oddPalindrome += i\n            }\n\
    \        }\n        Tuple2(evenPalindrome.size, oddPalindrome.size)", "      \
    \  val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse = mutable.ListBuffer[Long]()\n       \
    \ val oddPalindromeCountReverse = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse3 = mutable.ListBuffer[Long]()\n      \
    \  val oddPalindromeCountReverse3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse5 = mutable.ListBuffer[Long]()\n      \
    \  val oddPalindromeCountReverse5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse7 = mutable.ListBuffer[Long]()\n      \
    \  val oddPalindromeCountReverse7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse9 = mutable.ListBuffer[Long]()\n      \
    \  val oddPalindromeCountReverse9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCountReverse10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountReverse10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountReverse11 = mutable.ListBuffer[Long]()\n     \
    \   val oddPalindromeCountReverse11 = mut", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountMap\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap = new\
    \ mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap2 = new mutable.HashMap[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = new mutable.HashMap[Long, Long]()\n\
    \        val evenPalindromeCountMap3 = new mutable.HashMap[Long, Long]()\n   \
    \     val oddPalindromeCountMap3 = new mutable.HashMap[Long, Long]()\n       \
    \ val evenPalindromeCountMap4 = new mutable.HashMap[Long, Long]()\n        val\
    \ oddPalindromeCountMap4 = new mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap5\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap5 = new\
    \ mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap6 = new mutable.HashMap[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = new mutable.HashMap[Long, Long]()\n\
    \        val evenPalindromeCountMap7 = new mutable.HashMap[Long, Long]()\n   \
    \     val oddPalindromeCountMap7 = new mutable.HashMap[Long, Long]()\n       \
    \ val evenPalindromeCountMap8 = new mutable.HashMap[Long, Long]()\n        val\
    \ oddPalindromeCountMap8 = new mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap9\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap9 = new\
    \ mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap10 = new mutable.HashMap[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = new mutable.HashMap[Long, Long]()\n\
    \        val evenPalindromeCountMap11 = new mutable.HashMap[Long, Long]()\n  \
    \      val oddPalindromeCountMap11 = new mutable.HashMap[Long, Long]()\n", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCountEven = 0\n        val oddPalindromeCountEven\
    \ = 0\n        val evenPalindromeCountOdd = 0\n        val oddPalindromeCountOdd\
    \ = 0\n        val evenPalindromeCountEvenOdd = 0\n        val oddPalindromeCountEvenOdd\
    \ = 0\n        val evenPalindromeCountOddOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOddOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOdd = 0\n   \
    \     val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddEvenOdd = 0\n      \
    \  val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOddOddEvenOdd = 0\n     \
    \   val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddEvenOddOddEvenOdd = 0\n\
    \        val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOddOddOddEvenOddOddEvenOdd\
    \ = 1\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddOddEvenOddOddEvenOddOdd\
    \ = 1\n        val evenPalindromeCountOddEvenOddOddEvenOdd", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeRange = range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = range(1, n).filter(x => x % 2 != 0)\n        for (i <-\
    \ evenPalindromeRange) {\n            val reverse = i.reverse\n            if\
    \ (reverse == i) {\n                evenPalindromes += i\n                evenPalindromeCount\
    \ += 1\n            }\n        }\n        for (i <- oddPalindromeRange) {\n  \
    \          val reverse = i.reverse\n            if (reverse == i) {\n        \
    \        oddPalindromes += i\n                oddPalindromeCount += 1\n      \
    \      }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "   \
    \     val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var even = 0\n        var odd = 0\n  \
    \      var i = 0\n        var j = 0\n        while(i < n) {\n            while(j\
    \ < n) {\n                if(i % 10 == j % 10) {\n                    evenPalindromes\
    \ += i\n                    oddPalindromes += j\n                    j++\n   \
    \             }\n                else {\n                    j++\n           \
    \     }\n            }\n            even++\n            odd++\n            i +=\
    \ 1\n            j = 0\n        }\n        (evenPalindromes.size, oddPalindromes.size)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountList\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList2 = mutable.Set[Long]()\n        val oddPalindromeCountList2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList3 = mutable.Set[Long]()\n        val evenPalindromeCountList4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList5 = mutable.Set[Long]()\n        val oddPalindromeCountList5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList6 = mutable.Set[Long]()\n        val evenPalindromeCountList7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList8 = mutable.Set[Long]()\n        val oddPalindromeCountList8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList9 = mutable.Set[Long]()\n        val evenPalindromeCountList10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList11 = mutable.Set[Long]()\n        val oddPalindromeCountList11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList12 = mutable.Set[Long]()\n        val evenPalindromeCountList13\
    \ = mutable.Set[Long]()", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        for(i <- 1 to n){\n       \
    \     val reverse = i.toString.reverse\n            val isEven = reverse.startsWith(i\
    \ / 2)\n            if(isEven){\n                evenPalindromes += i\n      \
    \          evenPalindromeCount += 1\n            }else{\n                oddPalindromes\
    \ += i\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      Tuple2(evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        var evenPalindromeCountIndex = 0\n   \
    \     var oddPalindromeCountIndex = 0\n        for(i <- 1 to n) {\n          \
    \  val evenPalindrome = i.toString.reverse.equals(i.toString)\n            val\
    \ oddPalindrome = i.toString.reverse.equals(i.toString.reverse)\n            if(evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += i\n                evenPalindromeCount\
    \ += i\n                evenPalindromeCountIndex += 1\n            } else if(evenPalindrome)\
    \ {\n                evenPalindromes += i\n                evenPalindromeCount\
    \ += i\n                evenPalindromeCountIndex += 1\n            } else if(oddPalindrome)\
    \ {\n                oddPalindromes += i\n                oddPalindromeCount +=\
    \ i\n                oddPalindromeCountIndex += 1\n            }\n        }\n\
    \        val evenPalindromeCount = evenPalindromeCount.toList\n        val oddPalindromeCount\
    \ = oddPalindromeCount.toList\n        val evenPalindromes = evenPalindromes.toList\n\
    \        val oddPalindromes = oddPalindromes.toList\n        val evenPalindromeCountIndex\
    \ = evenPalindromeCountIndex.toList\n        val oddPalindromeCountIndex = oddPalindromeCountIndex.toList\n\
    \        val evenPalindromeCountTuple = evenPalindromeCount.zip(evenPalindromeCountIndex).map(x\
    \ => (x._1, x._2)).toList\n        val oddPalindromeCountTuple = oddPalindromeCount.zip(oddPalindromeCountIndex).map(x\
    \ => (x._1, x._2)).toList\n        val evenPalindromeTuple = evenPalindromes.zip(evenPalindromeCountIndex).map(x\
    \ => (x._1, x._2)).toList\n        val oddPalindromeTuple = oddPalindromes.zip(oddPalindromeCountIndex).map(x\
    \ => (x._1, x._2)).to", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountPerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRange = mutable.Set[Long]()\n     \
    \   val oddPalindromeCountPerRangePerRange = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromeCountEven = 0\n  \
    \      val oddPalindromeCountEven = 0\n        val evenPalindromeCountOdd = 0\n\
    \        val oddPalindromeCountOdd = 0\n        val palindromeCountEven = 0\n\
    \        val palindromeCountOdd = 0\n        val evenPalindromeCountEvenEven =\
    \ 0\n        val oddPalindromeCountEvenEven = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountOddOdd = 0\n        val palindromeCountEvenEven\
    \ = 0\n        val palindromeCountOddOdd = 0\n        val evenPalindromeCountEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountOddOdd = 0\n        val palindromeCountEvenEvenEven\
    \ = 0\n        val palindromeCountOddOdd = 0\n        val evenPalindromeCountEvenOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOdd = 0\n        val evenPalindromeCountOddOddOdd\
    \ = 0\n        val oddPalindromeCountOddOddOdd = 0\n        val palindromeCountEvenEvenEven\
    \ = 0\n        val palindromeCountOddOddOdd = 0\n        val evenPalindromeCountEvenOddOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddOdd = 0\n        val evenPalindromeCountOddOddOddOdd\
    \ = 0\n        val oddPalindromeCountOddOddOddOdd = 0\n        val palindromeCountEvenEvenEvenEven\
    \ = 0\n        val palindromeCountOddOddOddOdd = 0\n        val evenPalindromeCountEvenOddOddOddOdd\
    \ = 0\n        val odd", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversed = x.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       oddPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (x == reversed) {\n                oddPalindromes += x\n     \
    \           oddPalindromeCount += 1\n            }\n        }\n        evenPalindromeCount\
    \ -> oddPalindromeCount", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = 1\
    \ to n\n        val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach\
    \ { x =>\n            val reversed = x.reverse\n            if (x == reversed)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            }\n        }\n        oddPalindromeRange foreach { x =>\n\
    \            val reversed = x.reverse\n            if (x == reversed) {\n    \
    \            oddPalindromes += x\n                oddPalindromeCount += 1\n  \
    \          }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindrome = mutable.Set[Long]()\n        val oddPalindrome =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountEven\
    \ = 0\n        val oddPalindromeCountEven = 0\n        val evenPalindromeCountOdd\
    \ = 0\n        val oddPalindromeCountOdd = 0\n        val evenPalindromeCountEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOdd = 0\n        val evenPalindromeCountOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddEvenOdd = 0\n        val evenPalindromeCountOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOdd = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddEvenOdd = 0\n        val\
    \ evenPalindromeCountOddEvenOddOddEvenOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOdd = 0\n   \
    \     val oddPalindromeCountEvenOddOddEvenOddOddEvenOddEvenOdd = 0\n        val\
    \ evenPalindromeCountOddEvenOddOddEvenOddOddEvenOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOddOddOddEvenOddEvenOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddOddEvenOddOddEvenOddEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOddOddOddEvenOdd", "  \
    \      val evenPalindrome = mutable.Set[Long]()\n        val oddPalindrome = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = 1 to n\n        val oddPalindromeRange = 1 to\
    \ n\n        evenPalindromeRange foreach { x =>\n            val reverse = x.toString.reverse\n\
    \            if (reverse == x) {\n                evenPalindrome += x\n      \
    \          evenPalindromeCount += 1\n            }\n        }\n        oddPalindromeRange\
    \ foreach { x =>\n            val reverse = x.toString.reverse\n            if\
    \ (reverse == x) {\n                oddPalindrome += x\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCountPerRange = mutable.Set[Long]()\n       \
    \ val oddPalindromeCountPerRange = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCountEven = 0\n        val oddPalindromeCountEven\
    \ = 0\n        val evenPalindromeCountOdd = 0\n        val oddPalindromeCountOdd\
    \ = 0\n        val evenPalindromeCountEvenOdd = 0\n        val oddPalindromeCountEvenOdd\
    \ = 0\n        val evenPalindromeCountOddOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOddOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOdd = 0\n   \
    \     val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddEvenOdd = 0\n      \
    \  val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOddOddEvenOdd = 0\n     \
    \   val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddEvenOddOddEvenOdd = 0\n\
    \        val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOddOddOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddOddEvenOddOddEvenOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenO", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n       \
    \ val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountPerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRange = mutable.Set[Long]()\n     \
    \   val oddPalindromeCountPerRangePerRange = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange", " \
    \       val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        var even = 0\n        var odd = 0\n  \
    \      for(i <- 1 to n){\n            val str = i.toString\n            val reverse\
    \ = str.tail.reverse\n            val isEven = str == reverse\n            val\
    \ isOdd = !str == reverse\n            if(isEven){\n                even += 1\n\
    \                evenPalindrome += i\n            }\n            if(isOdd){\n\
    \                odd += 1\n                oddPalindrome += i\n            }\n\
    \        }\n        (even, odd)", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = 1\
    \ to n\n        val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach\
    \ { x =>\n            val reverse = x.toString.reverse\n            if (reverse\
    \ == x)\n                evenPalindromes += x\n            else\n            \
    \    oddPalindromes += x\n        }\n        evenPalindromeCount += evenPalindromes.length\n\
    \        oddPalindromeCount += oddPalindromes.length\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountPerRange\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCountPerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRange", "        var even =\
    \ 0\n        var odd = 0\n        var palindrome = 0\n        var evenPalindrome\
    \ = 0\n        var oddPalindrome = 0\n        var evenPalindromeCount = 0\n  \
    \      var oddPalindromeCount = 0\n        var evenPalindromeCount2 = 0\n    \
    \    var oddPalindromeCount2 = 0\n        var evenPalindromeCount3 = 0\n     \
    \   var oddPalindromeCount3 = 0\n        var evenPalindromeCount4 = 0\n      \
    \  var oddPalindromeCount4 = 0\n        var evenPalindromeCount5 = 0\n       \
    \ var oddPalindromeCount5 = 0\n        var evenPalindromeCount6 = 0\n        var\
    \ oddPalindromeCount6 = 0\n        var evenPalindromeCount7 = 0\n        var oddPalindromeCount7\
    \ = 0\n        var evenPalindromeCount8 = 0\n        var oddPalindromeCount8 =\
    \ 0\n        var evenPalindromeCount9 = 0\n        var oddPalindromeCount9 = 0\n\
    \        var evenPalindromeCount10 = 0\n        var oddPalindromeCount10 = 0\n\
    \        var evenPalindromeCount11 = 0\n        var oddPalindromeCount11 = 0\n\
    \        var evenPalindromeCount12 = 0\n        var oddPalindromeCount12 = 0\n\
    \        var evenPalindromeCount13 = 0\n        var oddPalindromeCount13 = 0\n\
    \        var evenPalindromeCount14 = 0\n        var oddPalindromeCount14 = 0\n\
    \        var evenPalindromeCount15 = 0\n        var oddPalindromeCount15 = 0\n\
    \        var evenPalindromeCount16 = 0\n        var oddPalindromeCount16 = 0\n\
    \        var evenPalindromeCount17 = 0\n        var oddPalindromeCount17 = 0\n\
    \        var evenPalindromeCount18 = 0\n        var oddPalindromeCount18 = 0\n\
    \        var evenPalindromeCount19 = 0\n        var oddPalindromeCount19 = 0\n\
    \        var evenPalindromeCount20 = 0\n        var oddPalindromeCount20 = 0\n\
    \        var evenPalindromeCount21 = 0\n        var oddPalindromeCount21 = 0\n\
    \        var evenPalindromeCount22 = 0\n        var oddPalindromeCount22 = 0\n\
    \        var evenPalindromeCount23 = 0\n        var oddPalindromeCount23 = 0\n\
    \        var evenPalindromeCount24 = 0\n        var oddPalindromeCount24 = 0\n\
    \        var evenP", "        val evenPalindrome = mutable.Set[Long]()\n     \
    \   val oddPalindrome = mutable.Set[Long]()\n        var even = 0\n        var\
    \ odd = 0\n        var i = 0\n        var j = 0\n        while (i < n) {\n   \
    \         while (j < n) {\n                if (i % 10 == j % 10) {\n         \
    \           evenPalindrome += i\n                    oddPalindrome += j\n    \
    \                j++\n                }\n                else {\n            \
    \        j++\n                }\n            }\n            even++\n         \
    \   odd++\n            i += 1\n            j = 0\n        }\n        val evenPalindromeCount\
    \ = evenPalindrome.size\n        val oddPalindromeCount = oddPalindrome.size\n\
    \        val evenPalindromeTuple = evenPalindrome.map(i => (i, evenPalindromeCount)).toList\n\
    \        val oddPalindromeTuple = oddPalindrome.map(i => (i, oddPalindromeCount)).toList\n\
    \        val evenPalindromeTuple2 = evenPalindromeTuple.sortBy(_._1).reverse\n\
    \        val oddPalindromeTuple2 = oddPalindromeTuple.sortBy(_._1).reverse\n \
    \       val evenPalindromeTuple3 = evenPalindromeTuple2.take(evenPalindromeTuple2.size\
    \ - evenPalindromeCount)\n        val oddPalindromeTuple3 = oddPalindromeTuple2.take(oddPalindromeTuple2.size\
    \ - oddPalindromeCount)\n        val evenPalindromeTuple4 = evenPalindromeTuple3.map(i\
    \ => (i._1, i._2))\n        val oddPalindromeTuple4 = oddPalindromeTuple3.map(i\
    \ => (i._1, i._2))\n        val evenPalindromeTuple5 = evenPalindromeTuple4.sortBy(_._1).reverse\n\
    \        val oddPalindromeTuple5 = oddPalindromeTuple4.sortBy(_._1).reverse\n\
    \        val evenPalindromeTuple6 = evenPalindromeTuple5.take(evenPalindromeTuple5.size\
    \ - evenPalindromeCount)\n        val oddPalindromeTuple6 = oddPalindromeTuple5.take(oddPalindromeTuple5.size\
    \ - oddPalindromeCount)\n        val evenPalindromeTuple7 = evenPalindromeTuple6.map(i\
    \ => (i._1, i._2))\n        val oddP", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts = mutable.Set[Long]()\n        val oddPalindromeCounts\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPair = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPair = mutable.Set[Long]()\n        val evenPalindromeCountPairs\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairs = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPair = mutable.Set[Long]()\n        val oddPalindromeCountPair\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPairs = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPairs = mutable.Set[Long]()\n        val evenPalindromeCountPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairs = mutable.Set[Long]()\n        val oddPalindromeCountPairs\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPair = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPair = mutable.Set[Long]()\n        val evenPalindromeCountPairs\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairs = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPair = mutable.Set[Long]()\n        val oddPalindromeCountPair\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPairs = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPairs = mutable.Set[Long]()\n        val evenPalindromeCountPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairs = mutable.Set[Long]()\n", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCountEven = 0\n        val oddPalindromeCountEven\
    \ = 0\n        val evenPalindromeCountOdd = 0\n        val oddPalindromeCountOdd\
    \ = 0\n        val evenPalindromeCountEvenOdd = 0\n        val oddPalindromeCountEvenOdd\
    \ = 0\n        val evenPalindromeCountOddOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountEvenOddEven = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountEvenOddOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountEvenOddEven = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountEvenOddEven = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountEvenOddEven = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountEvenOddEven = 0\n        val oddPalindromeCountEvenOddOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOdd = 0\n        val oddPalindromeCountEvenOddEven\
    \ = 0\n        val evenPalindromeCountEvenOddOdd = 0\n        val oddPalindromeCountEvenOddEvenOdd\
    \ = 0\n", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            val evenPalindrome = x %\
    \ 2 == 0\n            val oddPalindrome = x % 2 != 0\n            if (evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        for\
    \ (i <- 1 to n) {\n            val reversedString = reverseString(String.valueOf(i))\n\
    \            if (reversedString.equals(String.valueOf(i))) {\n               \
    \ evenPalindromes += i\n                evenPalindromeCount += 1\n           \
    \ } else {\n                oddPalindromes += i\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount.sum, oddPalindromeCount.sum)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountList\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList2 = mutable.Set[Long]()\n        val oddPalindromeCountList2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList3 = mutable.Set[Long]()\n        val evenPalindromeCountList4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList5 = mutable.Set[Long]()\n        val oddPalindromeCountList5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList6 = mutable.Set[Long]()\n        val evenPalindromeCountList7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList8 = mutable.Set[Long]()\n        val oddPalindromeCountList8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList9 = mutable.Set[Long]()\n        val evenPalindromeCountList10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList11 = mutable.Set[Long]()\n        val oddPalindromeCountList11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList12 = mutable.Set[Long]()\n        val evenPalindromeCountList13\
    \ = mutable.Set[Long]()", "        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        var evenCount\
    \ = 0\n        var oddCount = 0\n        for(i <- 1 to n) {\n            val str\
    \ = i.toString\n            val reverseStr = str.reverse\n            val isEven\
    \ = reverseStr == str\n            if(isEven) {\n                evenPalindromes\
    \ += i\n                evenCount += 1\n            } else {\n               \
    \ oddPalindromes += i\n                oddCount += 1\n            }\n        }\n\
    \        Tuple2(evenCount, oddCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        for(i <-\
    \ 1 to n by 2){\n            val reverse = i.toString.reverse\n            val\
    \ isEven = reverse.startsWith(i)\n            val isOdd = reverse.endsWith(i)\n\
    \            if(isEven){\n                evenPalindromes += i\n            }\n\
    \            if(isOdd){\n                oddPalindromes += i\n            }\n\
    \        }\n        (evenPalindromes.size, oddPalindromes.size)", "        val\
    \ evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x => x %\
    \ 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val reversed\
    \ = x.reverse\n            if (x == reversed) {\n                evenPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromeCount += 1\n      \
    \      }\n        }\n        evenPalindromeCount -> evenPalindromeCount\n    \
    \    oddPalindromeCount -> oddPalindromeCount", "        val evenPalindromes =\
    \ mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = 1 to n\n        val oddPalindromeRange = 1 to\
    \ n\n        evenPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (x == reversed) {\n                evenPalindromeCount += 1\n\
    \                evenPalindromes += x\n            } else {\n                oddPalindromeCount\
    \ += 1\n                oddPalindromes += x\n            }\n        }\n      \
    \  (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes =\
    \ mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        var even = 0\n        var odd\
    \ = 0\n        var evenPalindrome = 0\n        var oddPalindrome = 0\n       \
    \ var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var even", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        var evenPalindrome = 0\n        var oddPalindrome = 0\n        var i\
    \ = 0\n        var j = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount2 = 0\n        var oddPalindromeCount2 =\
    \ 0\n        var evenPalindromeCount3 = 0\n        var oddPalindromeCount3 = 0\n\
    \        var evenPalindromeCount4 = 0\n        var oddPalindromeCount4 = 0\n \
    \       var evenPalindromeCount5 = 0\n        var oddPalindromeCount5 = 0\n  \
    \      var evenPalindromeCount6 = 0\n        var oddPalindromeCount6 = 0\n   \
    \     var evenPalindromeCount7 = 0\n        var oddPalindromeCount7 = 0\n    \
    \    var evenPalindromeCount8 = 0\n        var oddPalindromeCount8 = 0\n     \
    \   var evenPalindromeCount9 = 0\n        var oddPalindromeCount9 = 0\n      \
    \  var evenPalindromeCount10 = 0\n        var oddPalindromeCount10 = 0\n     \
    \   var evenPalindromeCount11 = 0\n        var oddPalindromeCount11 = 0\n    \
    \    var evenPalindromeCount12 = 0\n        var oddPalindromeCount12 = 0\n   \
    \     var evenPalindromeCount13 = 0\n        var oddPalindromeCount13 = 0\n  \
    \      var evenPalindromeCount14 = 0\n        var oddPalindromeCount14 = 0\n \
    \       var evenPalindromeCount15 = 0\n        var oddPalindromeCount15 = 0\n\
    \        var evenPalindromeCount16 = 0\n        var oddPalindromeCount16 = 0\n\
    \        var evenPalindromeCount17 = 0\n        var oddPalindromeCount17 = 0\n\
    \        var evenPalindromeCount18 = 0\n        var oddPalindromeCount18 = 0\n\
    \        var evenPalindromeCount19 = 0\n        var oddPalindromeCount19 = 0\n\
    \        var evenPalindromeCount20 = 0\n        var oddPalindromeCount20 = 0\n\
    \        var evenPalindromeCount21 = 0\n        var oddPalindromeCount21 = 0\n\
    \        var evenPalindromeCount22 = 0\n        var oddPalindromeCount22 = 0\n\
    \        var evenPalindromeCount23 = 0\n        var oddPalindromeCount", "   \
    \     val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var even = 0\n        var odd = 0\n  \
    \      var i = 0\n        var j = 0\n        while (i < n) {\n            while\
    \ (j < n) {\n                if (i % 10 == j % 10) {\n                    evenPalindromes\
    \ += i\n                    oddPalindromes += j\n                    j++\n   \
    \             } else {\n                    j++\n                }\n         \
    \   }\n            even++\n            odd++\n            i += 1\n           \
    \ j = 0\n        }\n        val evenPalindrome = evenPalindromes.toList\n    \
    \    val oddPalindrome = oddPalindromes.toList\n        return (evenPalindrome.size,\
    \ oddPalindrome.size)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        var even = 0\n        var odd\
    \ = 0\n        var palindrome = 0\n        var evenPalindrome = 0\n        var\
    \ oddPalindrome = 0\n        var evenOdd = 0\n        var evenOddPalindrome =\
    \ 0\n        var oddOddPalindrome = 0\n        var evenOddOdd = 0\n        var\
    \ oddOddOddPalindrome = 0\n        var evenOddOddOdd = 0\n        var oddOddOddOddPalindrome\
    \ = 0\n        var evenOddOddOddOdd = 0\n        var oddOddOddOddOddPalindrome\
    \ = 0\n        var evenOddOddOddOddOdd = 0\n        var oddOddOddOddOddOddPalindrome\
    \ = 0\n        var evenOddOddOddOddOddOdd = 0\n        var oddOddOddOddOddOddOddPalindrome\
    \ = 0\n        var evenOddOddOddOddOddOddOdd = 0\n        var oddOddOddOddOddOddOddOddPalindrome\
    \ = 0\n        var evenOddOddOddOddOddOddOddOdd = 0\n        var oddOddOddOddOddOddOddOddPalindrome\
    \ = 0\n        var evenOddOddOddOddOddOddOddOdd = 0\n        var oddOddOddOddOddOddOddOddOddPalindrome\
    \ = 0\n        var evenOddOddOddOddOddOddOddOddOdd = 0\n        var oddOddOddOddOddOddOddOddOddOddPalindrome\
    \ = 0\n        var evenOddOddOddOddOddOddOddOddOdd = 0\n        var oddOddOddOddOddOddOddOddOddOddPalindrome\
    \ = 0\n        var evenOddOddOddOddOddOddOddOddOddOdd = 0\n        var oddOddOddOddOddOddOddOddOddOddOddPalindrome\
    \ = 0\n        var evenOddOddOddOddOddOddOddOddOddOddOdd = 0\n        var oddOddOddOddOddOddOddO",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x => x %\
    \ 2 != 0)\n        for (x <- evenPalindromeRange) {\n            val reversed\
    \ = x.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       for (x <- oddPalindromeRange) {\n            val reversed = x.reverse\n\
    \            if (x == reversed) {\n                oddPalindromes += x\n     \
    \           oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        var even = 0\n        var odd = 0\n        var\
    \ evenPalindrome = 0\n        var oddPalindrome = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount2 =\
    \ 0\n        var oddPalindromeCount2 = 0\n        var evenPalindromeCount3 = 0\n\
    \        var oddPalindromeCount3 = 0\n        var evenPalindromeCount4 = 0\n \
    \       var oddPalindromeCount4 = 0\n        var evenPalindromeCount5 = 0\n  \
    \      var oddPalindromeCount5 = 0\n        var evenPalindromeCount6 = 0\n   \
    \     var oddPalindromeCount6 = 0\n        var evenPalindromeCount7 = 0\n    \
    \    var oddPalindromeCount7 = 0\n        var evenPalindromeCount8 = 0\n     \
    \   var oddPalindromeCount8 = 0\n        var evenPalindromeCount9 = 0\n      \
    \  var oddPalindromeCount9 = 0\n        var evenPalindromeCount10 = 0\n      \
    \  var oddPalindromeCount10 = 0\n        var evenPalindromeCount11 = 0\n     \
    \   var oddPalindromeCount11 = 0\n        var evenPalindromeCount12 = 0\n    \
    \    var oddPalindromeCount12 = 0\n        var evenPalindromeCount13 = 0\n   \
    \     var oddPalindromeCount13 = 0\n        var evenPalindromeCount14 = 0\n  \
    \      var oddPalindromeCount14 = 0\n        var evenPalindromeCount15 = 0\n \
    \       var oddPalindromeCount15 = 0\n        var evenPalindromeCount16 = 0\n\
    \        var oddPalindromeCount16 = 0\n        var evenPalindromeCount17 = 0\n\
    \        var oddPalindromeCount17 = 0\n        var evenPalindromeCount18 = 0\n\
    \        var oddPalindromeCount18 = 0\n        var evenPalindromeCount19 = 0\n\
    \        var oddPalindromeCount19 = 0\n        var evenPalindromeCount20 = 0\n\
    \        var oddPalindromeCount20 = 0\n        var evenPalindromeCount21 = 0\n\
    \        var oddPalindromeCount21 = 0\n        var evenPalindromeCount22 = 0\n\
    \        var oddPalindromeCount22 = 0\n        var evenPalindromeCount23 = 0\n\
    \        var oddPalindromeCount23 = 0\n        var evenPalindromeCount24 = 0\n\
    \        var oddPalindromeCount24 = 0\n        var evenPalindromeCount25 = 0\n",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = 0\n    \
    \    val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x => x %\
    \ 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val evenPalindrome\
    \ = x to (x - 1)\n            evenPalindromes += evenPalindrome\n            evenPalindromeCount\
    \ += 1\n        }\n        oddPalindromeRange foreach { x =>\n            val\
    \ oddPalindrome = x to (x - 1)\n            oddPalindromes += oddPalindrome\n\
    \            oddPalindromeCount += 1\n        }\n        val evenPalindromeTuple\
    \ = evenPalindromes.toList\n        val oddPalindromeTuple = oddPalindromes.toList\n\
    \        val evenPalindromeTupleCount = evenPalindromeTuple.size\n        val\
    \ oddPalindromeTupleCount = oddPalindromeTuple.size\n        val evenPalindromeTupleSum\
    \ = evenPalindromeTuple.sum\n        val oddPalindromeTupleSum = oddPalindromeTuple.sum\n\
    \        val evenPalindromeTupleAverage = evenPalindromeTupleSum / evenPalindromeTupleCount\n\
    \        val oddPalindromeTupleAverage = oddPalindromeTupleSum / oddPalindromeTupleCount\n\
    \        val evenPalindromeTupleVariance = evenPalindromeTuple.map(x => (x - evenPalindromeTupleAverage)\
    \ * (x - evenPalindromeTupleAverage)).sum\n        val oddPalindromeTupleVariance\
    \ = oddPalindromeTuple.map(x => (x - oddPalindromeTupleAverage) * (x - oddPalindromeTupleAverage)).sum\n\
    \        val evenPalindromeTupleStandardDeviation = math.sqrt(evenPalindromeTupleVariance)\n\
    \        val oddPalindromeTupleStandardDeviation = math.sqrt(oddPalindromeTupleVariance)\n\
    \        val evenPalindromeTupleVarianceStandardDeviation = math.sqrt(evenPalindromeTupleVariance\
    \ / even", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n   \
    \     val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeSum2 = 0\n      \
    \  val oddPalindromeSum2 = 0\n        val evenPalindromeSum3 = 0\n        val\
    \ oddPalindromeSum3 = 0\n        val evenPalindromeSum4 = 0\n        val oddPalindromeSum4\
    \ = 0\n        val evenPalindromeSum5 = 0\n        val oddPalindromeSum5 = 0\n\
    \        val evenPalindromeSum6 = 0\n        val oddPalindromeSum6 = 0\n     \
    \   val evenPalindromeSum7 = 0\n        val oddPalindromeSum7 = 0\n        val\
    \ evenPalindromeSum8 = 0\n        val oddPalindromeSum8 = 0\n        val evenPalindromeSum9\
    \ = 0\n        val oddPalindromeSum9 = 0\n        val evenPalindromeSum10 = 0\n\
    \        val oddPalindromeSum10 = 0\n        val evenPalindromeSum11 = 0\n   \
    \     val oddPalindromeSum11 = 0\n        val evenPalindromeSum12 = 0\n      \
    \  val oddPalindromeSum12 = 0\n        val evenPalindromeSum13 = 0\n        val\
    \ oddPalindromeSum13 = 0\n        val evenPalindromeSum14 = 0\n        val oddPalindromeSum14\
    \ = 0\n        val evenPalindromeSum15 = 0\n        val oddPalindromeSum15 = 0\n\
    \        val evenPalindromeSum16 = 0\n        val oddPalindromeSum16 = 0\n   \
    \     val evenPalindromeSum17 = 0\n        val oddPalindromeSum17 = 0\n      \
    \  val evenPalindromeSum18 = 0\n        val oddPalindromeSum18 = 0\n        val\
    \ evenPalindromeSum19 = 0\n        val oddPalindromeSum19 = 0\n        val evenPalindromeSum20\
    \ = 0\n        val oddPalindromeSum20 = 0\n        val evenPalindromeSum21 = 0\n\
    \        val oddPalindromeSum21", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n        val\
    \ evenPalindromeAverage = 0\n        val oddPalindromeAverage = 0\n        val\
    \ evenPalindromeMedian = 0\n        val oddPalindromeMedian = 0\n        val evenPalindromeMax\
    \ = 0\n        val oddPalindromeMax = 0\n        val evenPalindromeMin = 0\n \
    \       val oddPalindromeMin = 0\n        val evenPalindromeSumSquare = 0\n  \
    \      val oddPalindromeSumSquare = 0\n        val evenPalindromeAverageSquare\
    \ = 0\n        val oddPalindromeAverageSquare = 0\n        val evenPalindromeMedianSquare\
    \ = 0\n        val oddPalindromeMedianSquare = 0\n        val evenPalindromeMaxSquare\
    \ = 0\n        val oddPalindromeMaxSquare = 0\n        val evenPalindromeMinSquare\
    \ = 0\n        val oddPalindromeMinSquare = 0\n        val evenPalindromeSumSquareRoot\
    \ = 0\n        val oddPalindromeSumSquareRoot = 0\n        val evenPalindromeAverageSquareRoot\
    \ = 0\n        val oddPalindromeAverageSquareRoot = 0\n        val evenPalindromeMedianSquareRoot\
    \ = 0\n        val oddPalindromeMedianSquareRoot = 0\n        val evenPalindromeMaxSquareRoot\
    \ = 0\n        val oddPalindromeMaxSquareRoot = 0\n        val evenPalindromeMinSquareRoot\
    \ = 0\n        val oddPalindromeMinSquareRoot = 0\n        val evenPalindromeSumSquareRoot2\
    \ = 0\n        val oddPalindromeSumSquareRoot2 = 0\n        val evenPalindromeAverageSquareRoot2\
    \ = 0\n        val oddPalindromeAverageSquareRoot2 = 0\n        val evenPalindromeMedianSquareRoot2\
    \ = 0\n        val oddPalindromeMedianSquareRoot2 = 0\n        val evenPalindromeMaxSquareRoot2\
    \ = 0\n        val oddPalindromeMaxSquareRoot2 = 0\n        val evenPalindromeMinSquareRoot2\
    \ = 0\n        val odd", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer", "        var even =\
    \ 0\n        var odd = 0\n        var evenPalindrome = 0\n        var oddPalindrome\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var even",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCountPerRange = mutable.Set[Long]()\n       \
    \ val oddPalindromeCountPerRange = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.", "        val evenPalindromes = mutable.ListBuffer[Long]()\n   \
    \     val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeCountEven = 0\n        val oddPalindromeCountEven = 0\n\
    \        val evenPalindromeCountOdd = 0\n        val oddPalindromeCountOdd = 0\n\
    \        val evenPalindromeCountEvenEven = 0\n        val oddPalindromeCountEvenOdd\
    \ = 0\n        val evenPalindromeCountOddOdd = 0\n        val oddPalindromeCountOddEven\
    \ = 0\n        val evenPalindromeCountOddOdd = 0\n        val oddPalindromeCountEvenEven\
    \ = 0\n        val evenPalindromeCountOddOdd = 0\n        val oddPalindromeCountEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEven = 0\n        val oddPalindromeCountEvenOdd\
    \ = 0\n        val evenPalindromeCountOddOdd = 0\n        val evenPalindromeCountEvenEven\
    \ = 0\n        val oddPalindromeCountEvenOdd = 1\n        val evenPalindromeCountOddEven\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val evenPalindromeCountEvenEven = 1\n        val oddPalindromeCountOddEven\
    \ = 1\n        val evenPalindromeCountOddOdd = 1\n        val oddPalindromeCountEvenEven\
    \ = 1\n        val evenPalindromeCountOddOdd = 1\n        val evenPalindromeCountEvenEven\
    \ = 1\n        val oddPalindromeCountOddEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val evenPalindromeCountEvenEven = 1\n        val oddPalindromeCountOddEven\
    \ = 1\n        val evenPalindromeCountOddOdd = 1\n", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = 1 to n\n        val oddPalindromeRange = 1 to\
    \ n\n        evenPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            val isEven = x % 2 == 0\n            if (isEven) {\n            \
    \    evenPalindromes += x\n                evenPalindromeCount += 1\n        \
    \    } else {\n                oddPalindromes += x\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        var evenPalindrome = 0\n        var oddPalindrome\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount2 = 0\n        var oddPalindromeCount2 = 0\n \
    \       var evenPalindromeCount3 = 0\n        var oddPalindromeCount3 = 0\n  \
    \      var evenPalindromeCount4 = 0\n        var oddPalindromeCount4 = 0\n   \
    \     var evenPalindromeCount5 = 0\n        var oddPalindromeCount5 = 0\n    \
    \    var evenPalindromeCount6 = 0\n        var oddPalindromeCount6 = 0\n     \
    \   var evenPalindromeCount7 = 0\n        var oddPalindromeCount7 = 0\n      \
    \  var evenPalindromeCount8 = 0\n        var oddPalindromeCount8 = 0\n       \
    \ var evenPalindromeCount9 = 0\n        var oddPalindromeCount9 = 0\n        var\
    \ evenPalindromeCount10 = 0\n        var oddPalindromeCount10 = 0\n        var\
    \ evenPalindromeCount11 = 0\n        var oddPalindromeCount11 = 0\n        var\
    \ evenPalindromeCount12 = 0\n        var oddPalindromeCount12 = 0\n        var\
    \ evenPalindromeCount13 = 0\n        var oddPalindromeCount13 = 0\n        var\
    \ evenPalindromeCount14 = 0\n        var oddPalindromeCount14 = 0\n        var\
    \ evenPalindromeCount15 = 0\n        var oddPalindromeCount15 = 0\n        var\
    \ evenPalindromeCount16 = 0\n        var oddPalindromeCount16 = 0\n        var\
    \ evenPalindromeCount17 = 0\n        var oddPalindromeCount17 = 0\n        var\
    \ evenPalindromeCount18 = 0\n        var oddPalindromeCount18 = 0\n        var\
    \ evenPalindromeCount19 = 0\n        var oddPalindromeCount19 = 0\n        var\
    \ evenPalindromeCount20 = 0\n        var oddPalindromeCount20 = 0\n        var\
    \ evenPalindromeCount21 = 0\n        var oddPalindromeCount21 = 0\n        var\
    \ evenPalindromeCount22 = 0\n        var oddPalindromeCount22 = 0\n        var\
    \ evenPalindromeCount23 = 0\n        var oddPalindromeCount23 = 0\n        var\
    \ evenPalindrome", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reverse = x.reverse\n            if (reverse == x) {\n                evenPalindromeCount\
    \ += 1\n                evenPalindromes += x\n            } else {\n         \
    \       oddPalindromeCount += 1\n                oddPalindromes += x\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromeCount = 0\n      \
    \  val oddPalindromeCount = 0\n        val palindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n    \
    \    val palindromeCount = 0\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n    \
    \    val palindromeCount = 0\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n    \
    \    val palindromeCount = 0\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n    \
    \    val palindromeCount = 0\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n    \
    \    val palindromeCount", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCount2 =\
    \ 0\n        val oddPalindromeCount2 = 0\n        val evenPalindromeCount3 = 0\n\
    \        val oddPalindromeCount3 = 0\n        val evenPalindromeCount4 = 0\n \
    \       val oddPalindromeCount4 = 0\n        val evenPalindromeCount5 = 0\n  \
    \      val oddPalindromeCount5 = 0\n        val evenPalindromeCount6 = 0\n   \
    \     val oddPalindromeCount6 = 0\n        val evenPalindromeCount7 = 0\n    \
    \    val oddPalindromeCount7 = 0\n        val evenPalindromeCount8 = 0\n     \
    \   val oddPalindromeCount8 = 0\n        val evenPalindromeCount9 = 0\n      \
    \  val oddPalindromeCount9 = 0\n        val evenPalindromeCount10 = 0\n      \
    \  val oddPalindromeCount10 = 0\n        val evenPalindromeCount11 = 0\n     \
    \   val oddPalindromeCount11 = 0\n        val evenPalindromeCount12 = 0\n    \
    \    val oddPalindromeCount12 = 0\n        val evenPalindromeCount13 = 0\n   \
    \     val oddPalindromeCount13 = 0\n        val evenPalindromeCount14 = 0\n  \
    \      val oddPalindromeCount14 = 0\n        val evenPalindromeCount15 = 0\n \
    \       val oddPalindromeCount15 = 0\n        val evenPalindromeCount16 = 0\n\
    \        val oddPalindromeCount16 = 0\n        val evenPalindromeCount17 = 0\n\
    \        val oddPalindromeCount17 = 0\n        val evenPalindromeCount18 = 0\n\
    \        val oddPalindromeCount18 = 0\n        val evenPalindromeCount19 = 0\n\
    \        val oddPalindromeCount19 = 0\n        val evenPalindromeCount20 = 0\n\
    \        val oddPalindromeCount20 = 0\n        val evenPalindromeCount21 = 0\n\
    \        val oddPalindromeCount21 = 0\n        val evenPalindromeCount22 = 0\n\
    \        val oddPalindrome", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            val evenPalindrome = x %\
    \ 2 == 0\n            val oddPalindrome = x % 2 != 0\n            if (evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeRange = 1 to n\n        val\
    \ oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach { x =>\n  \
    \          val reversed = x.reverse\n            if (x == reversed) {\n      \
    \          evenPalindromeCount += 1\n                evenPalindromes += x\n  \
    \          } else {\n                oddPalindromeCount += 1\n               \
    \ oddPalindromes += x\n            }\n        }\n        evenPalindromeCount ->\
    \ evenPalindromes.toList.size\n        oddPalindromeCount -> oddPalindromes.toList.size",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        var evenPalindrome = 0\n\
    \        var oddPalindrome = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount2 = 0\n        var oddPalindromeCount2\
    \ = 0\n        var evenPalindromeCount3 = 0\n        var oddPalindromeCount3 =\
    \ 0\n        var evenPalindromeCount4 = 0\n        var oddPalindromeCount4 = 0\n\
    \        var evenPalindromeCount5 = 0\n        var oddPalindromeCount5 = 0\n \
    \       var evenPalindromeCount6 = 0\n        var oddPalindromeCount6 = 0\n  \
    \      var evenPalindromeCount7 = 0\n        var oddPalindromeCount7 = 0\n   \
    \     var evenPalindromeCount8 = 0\n        var oddPalindromeCount8 = 0\n    \
    \    var evenPalindromeCount9 = 0\n        var oddPalindromeCount9 = 0\n     \
    \   var evenPalindromeCount10 = 0\n        var oddPalindromeCount10 = 0\n    \
    \    var evenPalindromeCount11 = 0\n        var oddPalindromeCount11 = 0\n   \
    \     var evenPalindromeCount12 = 0\n        var oddPalindromeCount12 = 0\n  \
    \      var evenPalindromeCount13 = 0\n        var oddPalindromeCount13 = 0\n \
    \       var evenPalindromeCount14 = 0\n        var oddPalindromeCount14 = 0\n\
    \        var evenPalindromeCount15 = 0\n        var oddPalindromeCount15 = 0\n\
    \        var evenPalindromeCount16 = 0\n        var oddPalindromeCount16 = 0\n\
    \        var evenPalindromeCount17 = 0\n        var oddPalindromeCount17 = 0\n\
    \        var evenPalindromeCount18 = 0\n        var oddPalindromeCount18 = 0\n\
    \        var evenPalindromeCount19 = 0\n        var oddPalindromeCount19 = 0\n\
    \        var evenPalindromeCount20 = 0\n        var oddPalindromeCount20 = 0\n\
    \        var evenPalindromeCount21 = 0\n        var oddPalindromeCount21 = 0\n\
    \        var evenPalindromeCount22 = 0\n        var oddPalindromeCount22 = 0\n\
    \        var evenPalindromeCount23 = 0\n        var oddPalindromeCount23 = 0\n\
    \        var evenPalin", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        var even = 0\n        var odd\
    \ = 0\n        var evenPalindrome = 0\n        var oddPalindrome = 0\n       \
    \ var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount2 = 0\n        var oddPalindromeCount2 = 0\n        var evenPalindromeCount3\
    \ = 0\n        var oddPalindromeCount3 = 0\n        var evenPalindromeCount4 =\
    \ 0\n        var oddPalindromeCount4 = 0\n        var evenPalindromeCount5 = 0\n\
    \        var oddPalindromeCount5 = 0\n        var evenPalindromeCount6 = 0\n \
    \       var oddPalindromeCount6 = 0\n        var evenPalindromeCount7 = 0\n  \
    \      var oddPalindromeCount7 = 0\n        var evenPalindromeCount8 = 0\n   \
    \     var oddPalindromeCount8 = 0\n        var evenPalindromeCount9 = 0\n    \
    \    var oddPalindromeCount9 = 0\n        var evenPalindromeCount10 = 0\n    \
    \    var oddPalindromeCount10 = 0\n        var evenPalindromeCount11 = 0\n   \
    \     var oddPalindromeCount11 = 0\n        var evenPalindromeCount12 = 0\n  \
    \      var oddPalindromeCount12 = 0\n        var evenPalindromeCount13 = 0\n \
    \       var oddPalindromeCount13 = 0\n        var evenPalindromeCount14 = 0\n\
    \        var oddPalindromeCount14 = 0\n        var evenPalindromeCount15 = 0\n\
    \        var oddPalindromeCount15 = 0\n        var evenPalindromeCount16 = 0\n\
    \        var oddPalindromeCount16 = 0\n        var evenPalindromeCount17 = 0\n\
    \        var oddPalindromeCount17 = 0\n        var evenPalindromeCount18 = 0\n\
    \        var oddPalindromeCount18 = 0\n        var evenPalindromeCount19 = 0\n\
    \        var oddPalindromeCount19 = 0\n        var evenPalindromeCount20 = 0\n\
    \        var oddPalindromeCount20 = 0\n        var evenPalindromeCount21 = 0\n\
    \        var oddPalindromeCount21 = 0\n        var evenPalindromeCount22 = 0\n\
    \        var oddPalindromeCount22 = 0\n        var evenPalindromeCount23 = 0\n\
    \        var oddPalindromeCount23 = 0\n        var evenPalindromeCount24 = 0\n\
    \        var oddPalindromeCount24 = 0\n        var evenPalindromeCount25 = 0\n",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversedX = x.reverse\n            if (x == reversedX) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            } else {\n     \
    \           oddPalindromes += x\n                oddPalindromeCount += 1\n   \
    \         }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).filter(_ % 2 == 0)\n        val oddPalindromeRange = range(1, n).filter(_\
    \ % 2 != 0)\n        for (i <- evenPalindromeRange) {\n            val evenPalindrome\
    \ = i\n            val oddPalindrome = i.reverse\n            if (evenPalindrome\
    \ == oddPalindrome) {\n                evenPalindromes += evenPalindrome\n   \
    \             oddPalindromes += oddPalindrome\n                evenPalindromeCount\
    \ += 1\n                oddPalindromeCount += 1\n            } else {\n      \
    \          evenPalindromes += evenPalindrome\n                oddPalindromes +=\
    \ oddPalindrome\n                evenPalindromeCount += 1\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = 0\n    \
    \    val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).toList\n\
    \        val oddPalindromeRange = Range(1, n).toList.reverse\n        evenPalindromeRange\
    \ foreach { x =>\n            val evenPalindrome = x % 2 == 0\n            val\
    \ oddPalindrome = x % 2 != 0\n            if (evenPalindrome && oddPalindrome)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindrome = mutable.ListBuffer.empty[Long]\n        val oddPalindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n) {\n                if (i % 10 == j % 10) {\n\
    \                    evenPalindromes += i\n                    j++\n         \
    \       } else {\n                    oddPalindromes += i\n                  \
    \  j++\n                }\n            }\n            even++\n            odd++\n\
    \            i += 1\n            j = 0\n        }\n        val evenPalindrome\
    \ = evenPalindromes.toList\n        val oddPalindrome = oddPalindromes.toList\n\
    \        return (even, odd)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n) {\n                if (i % 10 == j % 10) {\n\
    \                    evenPalindromes += i\n                    oddPalindromes\
    \ += j\n                    j++\n                }\n                else {\n \
    \                   j++\n                }\n            }\n            even++\n\
    \            odd++\n            i += 1\n            j = 0\n        }\n       \
    \ val evenPalindromeCount = evenPalindromes.size\n        val oddPalindromeCount\
    \ = oddPalindromes.size\n        return (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        var even = 0\n        var odd = 0\n        var palindrome = 0\n\
    \        var evenPalindrome = 0\n        var oddPalindrome = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalin", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple2 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple2 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple3 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple3 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple4 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple4 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple5 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple5 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple6 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple6 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple7 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple7 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple8 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple8 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple9 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple9 = Tuple2(evenPalindromeCount, ", "        val\
    \ evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        var even = 0\n        var odd = 0\n        for(i <- 1 to n) {\n     \
    \       val reverse = i.toString.reverse\n            if(i.toString.equals(reverse))\
    \ {\n                even += 1\n            } else {\n                odd += 1\n\
    \            }\n        }\n        evenPalindromes += even\n        oddPalindromes\
    \ += odd\n        Tuple2(evenPalindromes.sum, oddPalindromes.sum)", "        val\
    \ evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = 0\n    \
    \    val oddPalindromeCount = 0\n        val evenPalindromeRange = 1 to n\n  \
    \      val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach {\
    \ x =>\n            val reverse = x.reverse\n            if (reverse == x) {\n\
    \                evenPalindromes += x\n                evenPalindromeCount +=\
    \ 1\n            }\n        }\n        oddPalindromeRange foreach { x =>\n   \
    \         val reverse = x.reverse\n            if (reverse == x) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        Tuple2(evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        for (i <- 1 to n) {\n            val\
    \ evenPalindrome = i.toString.reverse.equals(\"0\" * i.toString.length)\n    \
    \        val oddPalindrome = i.toString.reverse.equals(\"1\" * i.toString.length)\n\
    \            if (evenPalindrome && oddPalindrome) {\n                evenPalindromes\
    \ += i\n                oddPalindromes += i\n            } else if (evenPalindrome)\
    \ {\n                evenPalindromes += i\n            } else if (oddPalindrome)\
    \ {\n                oddPalindromes += i\n            }\n        }\n        (evenPalindromes.size,\
    \ oddPalindromes.size)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n) {\n                if (i % 10 == j % 10) {\n\
    \                    evenPalindromes += i\n                    oddPalindromes\
    \ += j\n                    i += 1\n                    j += 1\n             \
    \   } else {\n                    i += 1\n                    j += 1\n       \
    \         }\n            }\n            evenPalindromes += i\n            oddPalindromes\
    \ += i\n            i += 1\n        }\n        val evenPalindrome = evenPalindromes.toList\n\
    \        val oddPalindrome = oddPalindromes.toList\n        val evenPalindromeCount\
    \ = evenPalindrome.size\n        val oddPalindromeCount = oddPalindrome.size\n\
    \        val evenPalindromeSum = evenPalindrome.reduceLeft(_ + _)\n        val\
    \ oddPalindromeSum = oddPalindrome.reduceLeft(_ + _)\n        val evenPalindromeAverage\
    \ = evenPalindromeSum / evenPalindromeCount\n        val oddPalindromeAverage\
    \ = oddPalindromeSum / oddPalindromeCount\n        val evenPalindromeVariance\
    \ = evenPalindromeAverage * (evenPalindromeCount - 1)\n        val oddPalindromeVariance\
    \ = oddPalindromeAverage * (oddPalindromeCount - 1)\n        val evenPalindromeStandardDeviation\
    \ = math.sqrt(evenPalindromeVariance)\n        val oddPalindromeStandardDeviation\
    \ = math.sqrt(oddPalindromeVariance)\n        val evenPalindromeVariancePercentage\
    \ = evenPalindromeVariance / evenPalindromeStandardDeviation\n        val oddPalindromeVariancePercentage\
    \ = oddPalindromeVariance / oddPalindromeStandardDeviation\n        val evenPalindromeStandardDeviationPercentage\
    \ = math.sqrt(evenPalindromeVariancePercentage)\n        val oddPalindromeStandardDeviationPercentage\
    \ = math.sqrt(oddPalindromeVariancePercentage)\n        val evenPalindromeAveragePercentage\
    \ = evenPalindromeAverage / evenPalindromeStandardDeviation", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        for(i <- 1 to n) {\n            val reverse\
    \ = i.reverse\n            if(i == reverse) {\n                evenPalindromes\
    \ += i\n                evenPalindromeCount += 1\n            }\n            else\
    \ {\n                oddPalindromes += i\n                oddPalindromeCount +=\
    \ 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n        var\
    \ odd = 0\n        var i = 0\n        var j = 0\n        while (i < n) {\n   \
    \         while (j < n) {\n                if (i % 10 == j % 10) {\n         \
    \           evenPalindromes += i\n                    oddPalindromes += j\n  \
    \                  j++\n                } else {\n                    j++\n  \
    \              }\n            }\n            even++\n            odd++\n     \
    \       i += 1\n            j = 0\n        }\n        val evenPalindrome = evenPalindromes.toList\n\
    \        val oddPalindrome = oddPalindromes.toList\n        return (even, odd)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        for(i <- 1 to n){\n       \
    \     val reversedString = reverseString(i)\n            val reversedStringLength\
    \ = reversedString.length\n            val evenPalindrome = reversedString.takeWhile(_\
    \ != reversedString.last)\n            val oddPalindrome = reversedString.dropWhile(_\
    \ != reversedString.last)\n            if(evenPalindrome.length == reversedStringLength\
    \ && evenPalindrome.isEmpty == false){\n                evenPalindromes += evenPalindrome\n\
    \                evenPalindromeCount += 1\n            }\n            if(oddPalindrome.length\
    \ == reversedStringLength && oddPalindrome.isEmpty == false){\n              \
    \  oddPalindromes += oddPalindrome\n                oddPalindromeCount += 1\n\
    \            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeRange = 1 to n\n        val oddPalindromeRange\
    \ = 1 to n\n        evenPalindromeRange foreach { x =>\n            val reversed\
    \ = x.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            } else {\n     \
    \           oddPalindromes += x\n                oddPalindromeCount += 1\n   \
    \         }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while(i <\
    \ n) {\n            while(j < n) {\n                if(i % 10 == j % 10) {\n \
    \                   evenPalindromes += i\n                    oddPalindromes +=\
    \ j\n                    even += 1\n                    odd += 1\n           \
    \     }\n                j += 1\n            }\n            i += 1\n         \
    \   j = 0\n        }\n        (even, odd)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversed = x.reverse\n            if (x == reversed) {\n                evenPalindromeCount\
    \ += 1\n                evenPalindromes += x\n            }\n        }\n     \
    \   oddPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (x == reversed) {\n                oddPalindromeCount += 1\n \
    \               oddPalindromes += x\n            }\n        }\n        evenPalindromeCount\
    \ -> oddPalindromeCount", "        val evenPalindrome = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindrome = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        for(i <- 1 to n){\n       \
    \     val evenPalindrome = i.toString.reverse.equals(i.toString)\n           \
    \ val oddPalindrome = i.toString.reverse.equals(i.toString)\n            if(evenPalindrome\
    \ || oddPalindrome){\n                evenPalindromes += i\n                oddPalindromes\
    \ += i\n                evenPalindromeCount += 1\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeRange = 1 to n\n        val oddPalindromeRange\
    \ = 1 to n\n        evenPalindromeRange foreach { x =>\n            val reversed\
    \ = x.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       oddPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (x == reversed) {\n                oddPalindromes += x\n     \
    \           oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountEven\
    \ = 0\n        val oddPalindromeCountEven = 0\n        val evenPalindromeCountOdd\
    \ = 0\n        val oddPalindromeCountOdd = 0\n        val evenPalindromeCountEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOdd = 0\n        val evenPalindromeCountOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddEvenOdd = 0\n        val evenPalindromeCountOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOdd = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOdd = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOdd = 0\n       \
    \ val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddEvenOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOddOddOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddOddEvenOddOddEvenOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenO", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCounts = mutable.Set[Long]()\n\
    \        val oddPalindromeCounts = mutable.Set[Long]()\n        val evenPalindromeCountPairs\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairs = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSorted", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCounts = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountSum = mutable.ListBuffer.empty[Long]\n       \
    \ val oddPalindromeCountSum = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCountSums\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCountSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountSumsSum = mutable.ListBuffer.empty[Long]\n   \
    \     val oddPalindromeCountSumsSum = mutable.ListBuffer.empty[Long]\n       \
    \ val evenPalindromeCountSumsSums = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCountSumsSums = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCountSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCountSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCountSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCountSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCountSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCountSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCountSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCountSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCountSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCountSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val ", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n       \
    \ val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountPer\
    \ = 0\n        val oddPalindromeCountPer = 0\n        val evenPalindromeCountPerPer\
    \ = 0\n        val oddPalindromeCountPerPer = 0\n        val evenPalindromeCountPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPer = 0\n        val evenPalindromeCountPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPerPerPer = 0\n        val\
    \ evenPalindromeCountPerPerPerPerPerPerPerPerPer = 0\n        val oddPalindromeCountPerPerPerPerPerPerPerPerPer\
    \ = 0\n        val evenPalindromeCountPerPerPerPerPerPerPerPerPerPer = 0\n   \
    \     val oddPalindromeCountPerPerPerPerPerPerPerPerPerPer = 0\n        val evenPalindromeCountPerPerPerPerPerPerPerPerPerPerPer\
    \ = 0\n        val oddPalindromeCountPerPerPerPerPerPerPerPerPerPerPerPer = 0\n\
    \        val evenPalindromeCountPerPerPerPerPerPerPerPerPerPerPerPerPer = 0\n\
    \        val oddPalindromeCountPerPerPerPerPerPerPerPerPerPerPerPerPerPer = 0\n\
    \        val evenPalindromeCountPerPerPerPerPerPerPerPerPerPerPerPerPerPer = 0\n\
    \        val oddPalindromeCountPerPerPerPerPerPerPerPerPerPerPerPerPerPerPer =\
    \ 0\n        val evenPalindromeCountPer", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCount2 =\
    \ 0\n        val oddPalindromeCount2 = 0\n        val evenPalindromeCount3 = 0\n\
    \        val oddPalindromeCount3 = 0\n        val evenPalindromeCount4 = 0\n \
    \       val oddPalindromeCount4 = 0\n        val evenPalindromeCount5 = 0\n  \
    \      val oddPalindromeCount5 = 0\n        val evenPalindromeCount6 = 0\n   \
    \     val oddPalindromeCount6 = 0\n        val evenPalindromeCount7 = 0\n    \
    \    val oddPalindromeCount7 = 0\n        val evenPalindromeCount8 = 0\n     \
    \   val oddPalindromeCount8 = 0\n        val evenPalindromeCount9 = 0\n      \
    \  val oddPalindromeCount9 = 0\n        val evenPalindromeCount10 = 0\n      \
    \  val oddPalindromeCount10 = 0\n        val evenPalindromeCount11 = 0\n     \
    \   val oddPalindromeCount11 = 0\n        val evenPalindromeCount12 = 0\n    \
    \    val oddPalindromeCount12 = 0\n        val evenPalindromeCount13 = 0\n   \
    \     val oddPalindromeCount13 = 0\n        val evenPalindromeCount14 = 0\n  \
    \      val oddPalindromeCount14 = 0\n        val evenPalindromeCount15 = 0\n \
    \       val oddPalindromeCount15 = 0\n        val evenPalindromeCount16 = 0\n\
    \        val oddPalindromeCount16 = 0\n        val evenPalindromeCount17 = 0\n\
    \        val oddPalindromeCount17 = 0\n        val evenPalindromeCount18 = 0\n\
    \        val oddPalindromeCount18 = 0\n        val evenPalindromeCount19 = 0\n\
    \        val oddPalindromeCount19 = 0\n        val evenPalindromeCount20 = 0\n\
    \        val oddPalindromeCount20 = 0\n        val evenPalindromeCount21 = 0\n\
    \        val oddPalindromeCount21 = 0\n        val evenPalindromeCount22 = 0\n\
    \        val oddPalindrome", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reverse = x.toString.reverse\n            if (reverse == x) {\n            \
    \    evenPalindromes += x\n                evenPalindromeCount += 1\n        \
    \    }\n        }\n        oddPalindromeRange foreach { x =>\n            val\
    \ reverse = x.toString.reverse\n            if (reverse == x) {\n            \
    \    oddPalindromes += x\n                oddPalindromeCount += 1\n          \
    \  }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "       \
    \ val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var even = 0\n        var odd = 0\n  \
    \      var i = 0\n        var j = 0\n        while (i < n) {\n            val\
    \ temp = i\n            while (temp > 0) {\n                val remainder = temp\
    \ % 10\n                if (remainder == 0) {\n                    evenPalindromes\
    \ += i\n                    even = even + 1\n                }\n             \
    \   temp = temp / 10\n            }\n            i = 0\n            while (j <\
    \ n) {\n                val temp = j\n                while (temp > 0) {\n   \
    \                 val remainder = temp % 10\n                    if (remainder\
    \ == 0) {\n                        oddPalindromes += j\n                     \
    \   odd = odd + 1 \n                    }\n                    temp = temp / 10\n\
    \                }\n                j = 0\n            }\n            i = i +\
    \ 1\n            j = j + 1\n        }\n        val evenPalindrome = evenPalindromes.toList\n\
    \        val oddPalindrome = oddPalindromes.toList\n        val evenPalindromeCount\
    \ = evenPalindrome.size\n        val oddPalindromeCount = oddPalindrome.size\n\
    \        return (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        var even = 0\n        var odd = 0\n        var i = 0\n        var j =\
    \ 0\n        while (i < n) {\n            while (j < n) {\n                if\
    \ (j == i) {\n                    evenPalindromes += i\n                    odd\
    \ += 1\n                }\n                j += 1\n            }\n           \
    \ i += 1\n            j = 0\n        }\n        evenPalindromes.toList match {\n\
    \            case Nil => (even, odd)\n            case x => evenPalindromes.toList\
    \ match {\n                case Nil => (even, odd)\n                case y =>\
    \ evenPalindromes.toList match {\n                    case Nil => (even, odd)\n\
    \                    case z => evenPalindromes.toList match {\n              \
    \          case Nil => (even, odd)\n                        case _ => evenPalindromes.toList\
    \ match {\n                            case Nil => (even, odd)\n             \
    \               case _ => evenPalindromes.toList match {\n                   \
    \             case Nil => (even, odd)\n                                case _\
    \ => evenPalindromes.toList match {\n                                    case\
    \ Nil => (even, odd)\n                                    case _ => evenPalindromes.toList\
    \ match {\n                                        case Nil => (even, odd)\n \
    \                                       case _ => evenPalindromes.toList match\
    \ {\n                                            case Nil => (even, odd)\n   \
    \                                         case _ => evenPalindromes.toList match\
    \ {\n                                                case Nil => (even, odd)\n\
    \                                                case _ => evenPalindromes.toList\
    \ match {\n                                                    case Nil => (even,\
    \ odd)\n                                                    case _ => evenPalindromes.toList\
    \ match {\n                                                        case Nil =>\
    \ (even, odd)\n                                                        case _\
    \ => evenPalindromes.toList match {\n                                        \
    \                    case Nil => (even, odd)\n                               \
    \                             case _ => evenPalindromes.toList match {\n     \
    \                                                           case Nil => (even,\
    \ odd)\n                                                                case _\
    \ => evenPalindromes.toList match {\n                                        \
    \                            case Nil => (even, odd)\n                       \
    \                                             case _ => evenPalindromes.toList\
    \ match {\n                                                                  \
    \      case Nil => (even, odd)\n                                             \
    \                           case _ => evenPalindromes.toList match {\n       \
    \                                                                     case Nil\
    \ => (even, odd)\n", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        var even = 0\n        var odd\
    \ = 0\n        var evenPalindrome = 0\n        var oddPalindrome = 0\n       \
    \ var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var even", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap = mutable.Map[Long, Long]()\n   \
    \     val evenPalindromeCountMap2 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap2\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap3 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap3 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap4 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap4\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap5 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap5 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap6 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap6\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap7 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap7 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap8 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap8\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap9 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap9 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap10 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap10\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap11 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap12 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap12 = mutable.Map[", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountEven\
    \ = 0\n        val oddPalindromeCountEven = 0\n        val evenPalindromeCountOdd\
    \ = 0\n        val oddPalindromeCountOdd = 0\n        val evenPalindromeCountEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOdd = 0\n        val evenPalindromeCountOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddEvenOdd = 0\n        val evenPalindromeCountOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOdd = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddOddEvenOdd = 0\n        val evenPalindromeCountOddEvenOddOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOdd = 0\n       \
    \ val evenPalindromeCountOddEvenOddOddOddOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddOddOddOddEvenOdd = 0\n    \
    \    val oddPalindromeCountEvenOddOddEvenOddOddOddOddEvenOdd = 0\n        val\
    \ evenPalindromeCountOddEvenOddOddOddOddOddOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddOddOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddOddOddOddOddOddEvenOdd = 0\n\
    \        val oddPalindromeCountEvenOddOddEvenOddOddO", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n        val evenPalindromeMax\
    \ = 0\n        val oddPalindromeMax = 0\n        val evenPalindromeMin = 0\n \
    \       val oddPalindromeMin = 0\n        val evenPalindromeAvg = 0\n        val\
    \ oddPalindromeAvg = 0\n        val evenPalindromeMedian = 0\n        val oddPalindromeMedian\
    \ = 0\n        val evenPalindromeStdDev = 0\n        val oddPalindromeStdDev =\
    \ 0\n        val evenPalindromeVariance = 0\n        val oddPalindromeVariance\
    \ = 0\n        val evenPalindromeVariance2 = 0\n        val oddPalindromeVariance2\
    \ = 0\n        val evenPalindromeVariance3 = 0\n        val oddPalindromeVariance3\
    \ = 0\n        val evenPalindromeVariance4 = 0\n        val oddPalindromeVariance4\
    \ = 0\n        val evenPalindromeVariance5 = 0\n        val oddPalindromeVariance5\
    \ = 0\n        val evenPalindromeVariance6 = 0\n        val oddPalindromeVariance6\
    \ = 0\n        val evenPalindromeVariance7 = 0\n        val oddPalindromeVariance7\
    \ = 0\n        val evenPalindromeVariance8 = 0\n        val oddPalindromeVariance8\
    \ = 0\n        val evenPalindromeVariance9 = 0\n        val oddPalindromeVariance9\
    \ = 0\n        val evenPalindromeVariance10 = 0\n        val oddPalindromeVariance10\
    \ = 0\n        val evenPalindromeVariance11 = 0\n        val oddPalindromeVariance11\
    \ = 0\n        val evenPalindromeVariance12 = 0\n        val oddPalindromeVariance12\
    \ = 0\n        val evenPalindromeVariance13 = 0\n        val oddPalindromeVariance13\
    \ = 0\n        val evenPalindromeVariance14 = 0\n        val oddPalindromeVariance14\
    \ = 0\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n   \
    \     val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindrome = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindrome = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeSum = mutable.ListBuffer.empty[Long]\n        val oddPalindromeSum\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeMax = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeMax = mutable.ListBuffer.empty[Long]\n        val evenPalindromeMin\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeMin = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeSumOfSquare = mutable.ListBuffer.empty[Long]\n    \
    \    val oddPalindromeSumOfSquare = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeMaxOfSquare = mutable.ListBuffer.empty[Long]\n        val oddPalindromeMaxOfSquare\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeMinOfSquare = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeMinOfSquare = mutable.ListBuffer.empty[Long]\n     \
    \   val evenPalindromeSumOfCube = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeSumOfCube = mutable.ListBuffer.empty[Long]\n        val evenPalindromeMaxOfCube\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeMaxOfCube = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeMinOfCube = mutable.ListBuffer.empty[Long]\n      \
    \  val oddPalindromeMinOfCube = mutable.ListBuffer.empty[Long]\n        val evenPalindromeSumOfSquareOfCube\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeSumOfSquareOfCube\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeMaxOfSquareOfCube\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeMaxOfSquareOfCube\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeMin", "        val\
    \ evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = 1 to n\n        val oddPalindromeRange = 1 to\
    \ n\n        evenPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            val reversedReversed = reversed.reverse\n            if (x == reversed)\
    \ {\n                evenPalindromeCount += 1\n                if (x == reversedReversed)\
    \ {\n                    evenPalindromeCount += 1\n                }\n       \
    \     }\n        }\n        oddPalindromeRange foreach { x =>\n            val\
    \ reversed = x.reverse\n            val reversedReversed = reversed.reverse\n\
    \            if (x == reversed) {\n                oddPalindromeCount += 1\n \
    \               if (x == reversedReversed) {\n                    oddPalindromeCount\
    \ += 1\n                }\n            }\n        }\n        Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            val evenPalindrome = x %\
    \ 2 == 0\n            val oddPalindrome = x % 2 != 0\n            if (evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    var even = 0L\n        var odd = 0L\n        var i = 0\n        var j = 0\n\
    \        var evenPalindrome = 0L\n        var oddPalindrome = 0L\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n      \
    \  var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var\
    \ oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n\
    \        var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n   \
    \     var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n      \
    \  var evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var\
    \ evenPalindromeCount = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n\
    \        var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n   \
    \     var oddPalindromeCount = 0\n        var evenPalindromeCount = 0\n", "  \
    \      val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeCountEven = 0\n        val\
    \ oddPalindromeCountEven = 0\n        val evenPalindromeCountOdd = 0\n       \
    \ val oddPalindromeCountOdd = 0\n        val evenPalindromeCountEvenOdd = 0\n\
    \        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOdd = 0\n        val evenPalindromeCountOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddEvenOdd = 0\n        val evenPalindromeCountOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOdd = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOdd = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOdd = 0\n       \
    \ val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOdd = 0\n   \
    \     val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddEvenOdd = 0\n      \
    \  val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOddOddEvenOdd = 0\n     \
    \   val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddEvenOddOdd = 0\n     \
    \   val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOddOddEvenOdd = 0\n    \
    \    val oddPalindromeCountEvenOddOddEvenO", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap12 = mutable.Map[",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n       \
    \ val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountEven\
    \ = 0\n        val oddPalindromeCountEven = 0\n        val evenPalindromeCountOdd\
    \ = 0\n        val oddPalindromeCountOdd = 0\n        val evenPalindromeCountEvenEven\
    \ = 0\n        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountOddEven = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountEvenEven = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddEven\
    \ = 0\n        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddOdd\
    \ = 1\n        val oddPalindromeCountEvenEven = 1\n        val evenPalindromeCountOddO",
  "        val evenPalindrome = mutable.Set[Long]()\n        val oddPalindrome = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    var even = 0\n        var odd = 0\n        var evenPalindrome = 0\n     \
    \   var oddPalindrome = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        var evenPalindromeSum = 0\n        var oddPalindromeSum = 0\n \
    \       var evenPalindromeSumCount = 0\n        var oddPalindromeSumCount = 0\n\
    \        var evenPalindromeSumSum = 0\n        var oddPalindromeSumSum = 0\n \
    \       var evenPalindromeSumSumCount = 0\n        var oddPalindromeSumSumCount\
    \ = 0\n        var evenPalindromeSumSumSum = 0\n        var oddPalindromeSumSumSum\
    \ = 0\n        var evenPalindromeSumSumSumCount = 0\n        var oddPalindromeSumSumSumCount\
    \ = 0\n        var evenPalindromeSumSumSumSum = 0\n        var oddPalindromeSumSumSumSum\
    \ = 0\n        var evenPalindromeSumSumSumSumCount = 0\n        var oddPalindromeSumSumSumSumCount\
    \ = 0\n        var evenPalindromeSumSumSumSumSum = 0\n        var oddPalindromeSumSumSumSumSum\
    \ = 0\n        var evenPalindromeSumSumSumSumCount = 0\n        var oddPalindromeSumSumSumSumCount\
    \ = 0\n        var evenPalindromeSumSumSumSumSum = 0\n        var oddPalindromeSumSumSumSumSum\
    \ = 0\n        var evenPalindromeSumSumSumSumCount = 0\n        var oddPalindromeSumSumSumSumCount\
    \ = 0\n        var evenPalindromeSumSumSumSumSum = 0\n        var oddPalindromeSumSumSumSumSum\
    \ = 0\n        var evenPalindromeSumSumSumSumCount = 0\n        var oddPalindromeSumSumSumSumCount\
    \ = 0\n        var evenPalindromeSumSumSumSumSum = 0\n        var oddPalindromeSumSumSumSumSum\
    \ = 0\n        var evenPalindromeSumSumSumSumCount = 0\n        var oddPalindromeSumSumSumSumCount\
    \ = 0\n        var evenPalindromeSumSumSumSumSum = 0\n        var oddPalindromeSumSumSumSumSum\
    \ = 0\n        var evenPalindromeSumSumSumSumCount = 0\n        var oddPalindromeSumSumSumSumCount\
    \ = 0\n        var evenPalindromeSumSumSumSumSum = 0\n        var oddPalindromeSumSumSumSumSum\
    \ = 0\n        var evenPalindromeSumSum", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromeCountEven = 0\n  \
    \      val oddPalindromeCountEven = 0\n        val evenPalindromeCountOdd = 0\n\
    \        val oddPalindromeCountOdd = 0\n        val evenPalindromeCountEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOdd = 0\n        val evenPalindromeCountOddOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOdd = 0\n        val evenPalindromeCountOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddEvenOdd = 0\n        val evenPalindromeCountOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOdd = 0\n        val evenPalindromeCountOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOdd = 0\n       \
    \ val evenPalindromeCountOddOddEvenOddOddEvenOddOdd = 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOddOdd = 0\n\
    \        val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddEvenOddOdd = 0\n\
    \        val evenPalindromeCountOddOddEvenOddOddEvenOddOddEvenOddOddEvenOdd =\
    \ 0\n        val oddPalindromeCountEvenOddOddEvenOddOddEvenOddOddEvenOddOddEvenOdd\
    \ = 0\n        val evenPalindromeCountOddEvenOddOddEvenOddOddEvenOddOddEvenOddOddEvenOdd\
    \ = 0\n        val oddPalindromeCountEvenOddOddEvenOddO", "        var even =\
    \ 0L\n        var odd = 0L\n        var evenPalindrome = 0L\n        var oddPalindrome\
    \ = 0L\n        var evenPalindromeCount = 0L\n        var oddPalindromeCount =\
    \ 0L\n        var evenPalindromeCount2 = 0L\n        var oddPalindromeCount2 =\
    \ 0L\n        var evenPalindromeCount3 = 0L\n        var oddPalindromeCount3 =\
    \ 0L\n        var evenPalindromeCount4 = 0L\n        var oddPalindromeCount4 =\
    \ 0L\n        var evenPalindromeCount5 = 0L\n        var oddPalindromeCount5 =\
    \ 0L\n        var evenPalindromeCount6 = 0L\n        var oddPalindromeCount6 =\
    \ 0L\n        var evenPalindromeCount7 = 0L\n        var oddPalindromeCount7 =\
    \ 0L\n        var evenPalindromeCount8 = 0L\n        var oddPalindromeCount8 =\
    \ 0L\n        var evenPalindromeCount9 = 0L\n        var oddPalindromeCount9 =\
    \ 0L\n        var evenPalindromeCount10 = 0L\n        var oddPalindromeCount10\
    \ = 0L\n        var evenPalindromeCount11 = 0L\n        var oddPalindromeCount11\
    \ = 0L\n        var evenPalindromeCount12 = 0L\n        var oddPalindromeCount12\
    \ = 0L\n        var evenPalindromeCount13 = 0L\n        var oddPalindromeCount13\
    \ = 0L\n        var evenPalindromeCount14 = 0L\n        var oddPalindromeCount14\
    \ = 0L\n        var evenPalindromeCount15 = 0L\n        var oddPalindromeCount15\
    \ = 0L\n        var evenPalindromeCount16 = 0L\n        var oddPalindromeCount16\
    \ = 0L\n        var evenPalindromeCount17 = 0L\n        var oddPalindromeCount17\
    \ = 0L\n        var evenPalindromeCount18 = 0L\n        var oddPalindromeCount18\
    \ = 0L\n        var evenPalindromeCount19 = 0L\n        var oddPalindromeCount19\
    \ = 0L\n        var evenPalindromeCount20 = 0L\n        var oddPalindromeCount20\
    \ = 0L\n        var evenPalindromeCount21 = 0L\n        var oddPalindromeCount21\
    \ = 0L\n        var evenPalindromeCount22 = 0L\n        var oddPalindromeCount22\
    \ = 0L\n        var even", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeSumOfSquare = 0\n\
    \        val oddPalindromeSumOfSquare = 0\n        val evenPalindromeSumOfSquareRoot\
    \ = 0\n        val oddPalindromeSumOfSquareRoot = 0\n        val evenPalindromeSumOfSquareRootOfSquare\
    \ = 0\n        val oddPalindromeSumOfSquareRootOfSquare = 0\n        val evenPalindromeSumOfSquareRootOfSquareRoot\
    \ = 0\n        val oddPalindromeSumOfSquareRootOfSquareRoot = 0\n        val evenPalindromeSumOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val oddPalindromeSumOfSquareRootOfSquareRootOfSquare = 0\n    \
    \    val evenPalindromeSumOfSquareRootOfSquareRootOfSquareRoot = 0\n        val\
    \ oddPalindromeSumOfSquareRootOfSquareRootOfSquareRoot = 0\n        val evenPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val oddPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val evenPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val oddPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val evenPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val oddPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val evenPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val oddPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val evenPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val oddPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val evenPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n        val oddPalindromeSumOfSquareRootOfSquareRootOfSquareRootOfSquare\
    \ = 0\n", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        var evenCount = 0\n        var oddCount = 0\n\
    \        var evenPalindrome = 0\n        var oddPalindrome = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var evenPalindromeSum = 0\n\
    \        var oddPalindromeSum = 0\n        var evenPalindromeSumOfEven = 0\n \
    \       var oddPalindromeSumOfEven = 0\n        var evenPalindromeSumOfOdd = 0\n\
    \        var oddPalindromeSumOfOdd = 0\n        var evenPalindromeSumOfEvenAndOdd\
    \ = evenPalindromeSumOfEven\n        var oddPalindromeSumOfEvenAndOdd = oddPalindromeSumOfOdd\n\
    \        var evenPalindromeSumOfOddAndEven = evenPalindromeSumOfOdd\n        var\
    \ oddPalindromeSumOfOddAndEven = oddPalindromeSumOfEven\n        var evenPalindromeSumOfEvenAndOdd\
    \ = evenPalindromeSumOfEven\n        var oddPalindromeSumOfEvenAndOdd = oddPalindromeSumOfOdd\n\
    \        var evenPalindromeSumOfOddAndEven = evenPalindromeSumOfOdd\n        var\
    \ oddPalindromeSumOfOddAndEven = oddPalindromeSumOfEven\n        var evenPalindromeSumOfEvenAndOdd\
    \ = evenPalindromeSumOfEven\n        var oddPalindromeSumOfEvenAndOdd = oddPalindromeSumOfOdd\n\
    \        var evenPalindromeSumOfOddAndEven = evenPalindromeSumOfOdd\n        var\
    \ oddPalindromeSumOfOddAndEven = oddPalindromeSumOfEven\n        var evenPalindromeSumOfEvenAndOdd\
    \ = evenPalindromeSumOfEven\n        var oddPalindromeSumOfEvenAndOdd = oddPalindromeSumOfOdd\n\
    \        var evenPalindromeSumOfOddAndEven = evenPalindromeSumOfOdd\n        var\
    \ oddPalindromeSumOfOddAndEven = oddPalindromeSumOfEven\n        var evenPalindromeSumOfEvenAndOd",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).toList\n        val oddPalindromeRange = range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            if (isPalindrome(x)) {\n\
    \                evenPalindromeCount += 1\n                evenPalindromes +=\
    \ x\n            }\n        }\n        oddPalindromeRange foreach { x =>\n   \
    \         if (isPalindrome(x)) {\n                oddPalindromeCount += 1\n  \
    \              oddPalindromes += x\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindrome = mutable.Set[Long]()\n  \
    \      val oddPalindrome = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet = mutable.Set[Long]()\n        val oddPalindromeCountSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSetSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSetSet = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountSetSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSetSetSet = mutable.Set[Long]()\n   \
    \     val oddPalindromeCountSetSetSetSetSetSet = mutable.Set[Long]()\n       \
    \ val evenPalindromeCountSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSetSetSetSet =\
    \ mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSetSetSetSet =\
    \ mut", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            val evenPalindrome = x %\
    \ 2 == 0\n            val oddPalindrome = x % 2 != 0\n            if (evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = 1\
    \ to n\n        val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach\
    \ { x =>\n            val reverse = x.reverse\n            if (reverse == x) {\n\
    \                evenPalindromes += x\n                evenPalindromeCount +=\
    \ 1\n            } else {\n                oddPalindromes += x\n             \
    \   oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = "]
stop_tokens:
- "\n    }\n"
