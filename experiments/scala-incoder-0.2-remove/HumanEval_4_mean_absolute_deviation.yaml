name: HumanEval_4_mean_absolute_deviation
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given list of input numbers, calculate Mean Absolute Deviation\n \
  \   // around the mean of this dataset.\n    // Mean Absolute Deviation is the average\
  \ absolute difference between each\n    // element and a centerpoint (mean in this\
  \ case):\n    // MAD = average | x - x_mean |\n    def meanAbsoluteDeviation(numbers\
  \ : List[Float]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
  \n}\n"
completions: ["        val mean: Float = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / n", "     \
    \   val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / n", "     \
    \   val n = numbers.size\n        val mean = (numbers.sum / n).toFloat\n     \
    \   val deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.size", "        val\
    \ mean: Float = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / n", "     \
    \   val n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => math.abs(x - mean)).sum\n        sumOfDiffs / n", "     \
    \   val mean: Float = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val n = numbers.size\n        val mean = numbers.sum / n\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / n", "        val sum = 0.0\n        numbers.foreach(x\
    \ => sum += math.abs(x - mean))\n        sum / numbers.size", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / deviations.size", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => x - mean)\n      \
    \  deviations.sum / deviations.size", "        val mean: Float = numbers.sum /\
    \ numbers.length\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val sum = 0.0f\n        val mean = numbers.sum / n\n        numbers.foreach(x\
    \ => sum += (x - mean) * (x - mean))\n        sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val sumOfDiffs = numbers.map(x =>\
    \ math.abs(x - mean))\n        val sumOfDiffsSum = sumOfDiffs.sum\n        sumOfDiffsSum\
    \ / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size",
  "        val sumOfSquares = numbers.map(x => math.pow((x - mean), 2)).sum\n    \
    \    math.sqrt(sumOfSquares/numbers.length)", "        val sum = 0.0\n       \
    \ val count = 0.0\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x\
    \ => count += 1.0)\n        sum / count", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map { x => math.abs(x - mean) }\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ numbers.map(x => (x - mean).abs).sum / numbers.size", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        numbers.map(x => math.abs(x - mean)).sum\
    \ / n", "        val n = numbers.size\n        val mean = numbers.sum / n\n  \
    \      numbers.map(x => Math.abs(x - mean)).sum / n", "        val n = numbers.size\n\
    \        val mean: Float = numbers.sum / n\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val sum = 0.0f\n        numbers.foreach(x => sum += math.abs(x - numbers.sum))\n\
    \        sum / n", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n       \
    \ deviations.sum / n", "        val mean = numbers.sum / numbers.size\n      \
    \  numbers.map(x => Math.abs(x - mean)).sum / numbers.size", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => (x -\
    \ mean) * (x - mean))\n        deviations.sum / deviations.size", "        val\
    \ n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => math.abs(x - mean)).sum\n        sumOfDiffs / n", "     \
    \   val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / n", "     \
    \   val n = numbers.size\n        val sum = 0.0\n        numbers.foreach(x =>\
    \ sum += abs(x - mean))\n        sum / n", "        val n = numbers.size\n   \
    \     val mean = numbers.sum / n\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / n", "        val n = numbers.size\n     \
    \   val mean = numbers.sum / n\n        val deviations = numbers.map(x => (x -\
    \ mean) * (x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map { x\
    \ =>\n            math.abs(x - mean)\n        }\n        deviations.sum / n",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / deviations.size", "  \
    \      val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / deviations.size // average\
    \ deviation", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.size", "        val n = numbers.size\n\
    \        val sum = 0.0f\n        numbers.foreach(x => sum += math.abs(x - numbers.sum))\n\
    \        sum / n", "        val mean = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum /\
    \ deviations.size", "        val mean = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum /\
    \ deviations.size", "        val mean = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum /\
    \ deviations.size", "        val sum = 0.0f\n        numbers.foreach(x => sum\
    \ += math.abs(x - mean))\n        sum / numbers.size", "        val mean: Float\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / deviations.size", "        val mean: Float\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / deviations.size", "        val n = numbers.size\n\
    \        val sum = 0.0\n        numbers.foreach(x => sum += abs(x - mean))\n \
    \       sum / n", "        val mean: Float = numbers.sum / numbers.length\n  \
    \      val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.size\n     \
    \   val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean: Float = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.size\n     \
    \   val deviations = numbers.map(x => x - mean)\n        deviations.map(abs).sum\
    \ / deviations.size // MAD", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n  \
    \      deviations.sum / n", "        val mean = numbers.sum / numbers.size\n \
    \       val deviations = numbers.map(x => (x - mean))\n        deviations.map(x\
    \ => math.abs(x)).sum / deviations.size", "        val sumOfDifferences = numbers.map(x\
    \ => math.abs(x - numbers.mean))\n        val average = sumOfDifferences.sum /\
    \ numbers.size\n        math.abs(average - numbers.mean)", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.size\n        numbers.map(x => Math.abs(x - mean)).sum / numbers.size",
  "        val n = numbers.size\n        val sumOfSquares = numbers.map(x => Math.pow((x\
    \ - numbers.mean), 2)).sum\n        val mad = sumOfSquares / n\n        mad",
  "        val mean = numbers.sum / numbers.size\n        numbers.map(x => Math.abs(x\
    \ - mean)).sum / numbers.size", "        val sum = 0.0\n        numbers.foreach(x\
    \ => sum += math.abs(x - mean))\n        sum / numbers.size", "        val n =\
    \ numbers.size\n        val mean: Float = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / n", "        val mean:\
    \ Float = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ x - mean)\n        deviations.sum / deviations.size", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val n = numbers.size\n  \
    \      val mean = numbers.sum / n\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / n", "        val n = numbers.size\n     \
    \   val mean: Float = numbers.sum / n\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        deviations.sum / n", "        val mean: Float\
    \ = numbers.sum / numbers.length\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / deviations.length", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean: Float = numbers.sum / n\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / n", "        val mean = numbers.sum /\
    \ numbers.size\n        numbers.map(x => math.abs(x - mean)).sum / numbers.size",
  "        val n = numbers.size\n        val mean: Float = numbers.sum / n\n     \
    \   val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n", "        val n = numbers.size\n        val mean: Float = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n", "        val n = numbers.size\n        val mean = numbers.sum / n\n  \
    \      val deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / numbers.size",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map { x => math.abs(x - mean) }\n        deviations.sum / n", "  \
    \      val n = numbers.size\n        val sum = 0.0\n        numbers.foreach(x\
    \ => sum += math.abs(x - numbers.mean))\n        sum / n", "        val mean:\
    \ Float = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        deviations.sum / numbers.size", "        val\
    \ n = numbers.size\n        val mean: Float = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / n", "     \
    \   val sum = 0.0\n        numbers.foreach(x => sum += abs(x - mean))\n      \
    \  sum / numbers.size", "        val mean: Float = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / numbers.size", "        val n = numbers.size\n        val mean: Float = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n  \
    \      deviations.sum / n", "        val n = numbers.size\n        val sum = 0.0\n\
    \        val mean = 0.0\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x\
    \ => mean += x)\n        mean / n", "        val n = numbers.size\n        val\
    \ mean = numbers.sum / n\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / n", "        val n = numbers.size\n     \
    \   val sumOfSquares = numbers.map(x => math.pow((x - numbers.mean), 2)).sum\n\
    \        val average = numbers.sum / n\n        math.abs(sumOfSquares - average\
    \ * average)", "        val mean = numbers.sum / numbers.length\n        numbers.map(x\
    \ => Math.abs(x - mean)).sum / numbers.length", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => (x - mean) * (x -\
    \ mean))\n        deviations.sum / deviations.size", "        val n = numbers.size\n\
    \        val sum = 0.0\n        numbers.foreach(x => sum += abs(x - mean))\n \
    \       sum / n", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n       \
    \ deviations.sum / n", "        val sumOfSquares = numbers.map(x => math.pow((x\
    \ - numbers.sum) / numbers.size, 2)).sum\n        math.abs(sumOfSquares / numbers.size).toFloat",
  "        val mean = numbers.sum / numbers.length\n        numbers.map(x => Math.abs(x\
    \ - mean)).sum / numbers.length", "        val n = numbers.size\n        val mean\
    \ = numbers.sum / n\n        val deviations = numbers.map(x => (x - mean) * (x\
    \ - mean))\n        deviations.sum / n", "        val mean = numbers.sum / numbers.size\n\
    \        numbers.map(x => (x - mean).abs).sum / numbers.size", "        val n\
    \ = numbers.size\n        val mean: Float = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / n", " \
    \       val n = numbers.size\n        val mean = numbers.sum / n\n        val\
    \ deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size", " \
    \       val n = numbers.size\n        val sum = 0.0f\n        numbers.foreach(x\
    \ => sum += abs(x - mean))\n        sum / n", "        val n = numbers.size\n\
    \        val sum = 0.0\n        numbers.foreach(x => sum += abs(x - mean))\n \
    \       sum / n", "        val mean: Float = numbers.sum / numbers.size\n    \
    \    val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean: Float = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => x - mean)\n        deviations.sum /\
    \ deviations.size", "        val mean = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum /\
    \ deviations.size", "        val n = numbers.size\n        val sum = 0.0\n   \
    \     numbers.foreach(x => sum += math.abs(x - numbers.sum))\n        sum / n",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => math.abs(x - mean)).sum\n        sumOfDiffs / n", "     \
    \   val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        val mad = deviations.sum\
    \ / n\n        mad", "        val mean: Float = numbers.sum / numbers.size\n \
    \       val deviations = numbers.map(x => (x - mean))\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val mean: Float =\
    \ numbers.sum / n\n        val deviations = numbers.map(x => x - mean)\n     \
    \   deviations.sum / n", "        val mean = numbers.sum / numbers.size\n    \
    \    val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n", "        val n = numbers.size\n        val mean: Float = numbers.sum /\
    \ n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size",
  "        val n = numbers.size\n        val sum = 0.0\n        for (i <- 0 until\
    \ n) {\n            sum += math.abs(numbers(i) - numbers.mean)\n        }\n  \
    \      sum / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.size", "        val\
    \ mean = numbers.sum / numbers.size\n        numbers.map(x => math.abs(x - mean)).sum\
    \ / numbers.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n       \
    \ val mad = deviations.sum / n\n        mad", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        numbers.map(x => math.abs(x - mean)).sum\
    \ / n", "        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.length",
  "        val n = numbers.size\n        val sum = 0.0f\n        numbers.foreach(x\
    \ => sum += abs(x - mean))\n        sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val sumOfDiffs = numbers.map(x =>\
    \ math.abs(x - mean))\n        val mad = sumOfDiffs.sum / n\n        mad", " \
    \       val n = numbers.size\n        val mean = numbers.sum / n\n        val\
    \ deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size",
  "        val n = numbers.size\n        val mean: Float = numbers.sum / n\n     \
    \   val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / n", "     \
    \   val mean: Float = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length", "     \
    \   val n = numbers.size\n        val mean = numbers.sum / n\n        numbers.map(x\
    \ => math.abs(x - mean)).sum / n", "        val n = numbers.size\n        val\
    \ mean: Float = numbers.sum / n\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / n", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val sum = 0.0f\n\
    \        numbers.foreach(x => sum += abs(x - mean))\n        sum / n", "     \
    \   val n = numbers.size\n        val sumOfSquares = numbers.map(x => math.pow((x\
    \ - numbers.sum), 2)).sum\n        val mean = numbers.sum / n\n        val absSumOfSquares\
    \ = numbers.map(x => math.abs(x - mean)).sum\n        val MAD = absSumOfSquares\
    \ / n\n        MAD", "        val mean = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum /\
    \ deviations.size", "        val n = numbers.size\n        val mean: Float = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n       \
    \ deviations.sum / n", "        val mean: Float = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n  \
    \      deviations.sum / n", "        val sumOfSquares = numbers.map(x => math.pow((x\
    \ - mean), 2)).sum\n        math.sqrt(sumOfSquares/numbers.length)", "       \
    \ val mean: Float = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length", "     \
    \   val n = numbers.size\n        val mean: Float = numbers.sum / n\n        val\
    \ deviations = numbers.map(x => x - mean)\n        deviations.sum / n", "    \
    \    val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / n", " \
    \       val n = numbers.size\n        val sum = 0.0f\n        numbers.foreach(x\
    \ => sum += math.abs(x - numbers.sum))\n        sum / n", "        val n = numbers.size\n\
    \        val sum = 0.0\n        numbers.foreach(x => sum += abs(x - mean))\n \
    \       sum / n", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        numbers.map { x => Math.abs(x - mean) }.reduce(_ + _) / n", " \
    \       val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / deviations.size", "  \
    \      val n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => math.abs(x - mean)).sum\n        sumOfDiffs / n", "     \
    \   val n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => math.abs(x - mean))\n        val sumOfDiffsSum = sumOfDiffs.sum\n\
    \        val MAD = sumOfDiffsSum / n\n        MAD", "        val sumOfSquares\
    \ = numbers.map(x => math.pow((x - numbers.sum) / numbers.size, 2)).sum\n    \
    \    val mean = numbers.sum / numbers.size\n        math.abs(sumOfSquares - mean\
    \ * mean)", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.map(abs).sum / deviations.size", "        val\
    \ n = numbers.size\n        val mean = numbers.sum / n\n        numbers.map {\
    \ x => Math.abs(x - mean) }.reduce(_ + _) / n", "        val mean = numbers.sum\
    \ / numbers.size\n        numbers.map(x => Math.abs(x - mean)).sum / numbers.size",
  "        val n = numbers.size\n        val sumOfSquares = numbers.map(x => math.pow((x\
    \ - numbers.mean), 2)).sum\n        math.sqrt(sumOfSquares/n)", "        val n\
    \ = numbers.size\n        val sumOfSquares = numbers.map(x => math.pow((x - numbers.sum\
    \ / n), 2)).sum\n        val mean = numbers.sum / n\n        math.abs(sumOfSquares\
    \ - mean * mean)", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n       \
    \ deviations.sum / n", "        val mean = numbers.sum / numbers.size\n      \
    \  val deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / deviations.size // average absolute deviation", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val n = numbers.size\n  \
    \      val sumOfSquares = numbers.map(x => math.pow((x - numbers.sum / n), 2)).sum\n\
    \        math.abs(sumOfSquares / n)", "        val n = numbers.size\n        val\
    \ mean = numbers.sum / n\n        val deviations = numbers.map(x => (x - mean)\
    \ * (x - mean))\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val n = numbers.size\n  \
    \      val mean = numbers.sum / n\n        val deviations = numbers.map(x => (x\
    \ - mean) * (x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val sumOfDiffs = numbers.map(x =>\
    \ math.abs(x - mean)).sum\n        sumOfDiffs / n", "        val n = numbers.size\n\
    \        val mean: Float = numbers.sum / n\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / n", "        val mean:\
    \ Float = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ x - mean)\n        deviations.sum / deviations.size", "        val n = numbers.size\n\
    \        val sumOfSquares = numbers.map(x => math.pow((x - numbers.mean), 2)).sum\n\
    \        math.sqrt(sumOfSquares/n)", "        val n = numbers.size\n        val\
    \ mean = numbers.sum / n\n        val deviations = numbers.map(x => x - mean)\n\
    \        deviations.sum / n", "        val sum = 0.0\n        val mean = numbers.sum\
    \ / numbers.size\n        numbers.foreach(x => sum += math.abs(x - mean))\n  \
    \      sum / numbers.size", "        val mean: Float = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n  \
    \      deviations.sum / n", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean: Float = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n", "        val sumOfDifferences = numbers.map(x => math.abs(x - numbers.mean))\n\
    \        val sumOfSquaredDifferences = numbers.map(x => math.pow(x, 2))\n    \
    \    val sumOfDifferenceAndSquaredDifferences = sumOfDifferences zip sumOfSquaredDifferences\n\
    \        val average = sumOfDifferenceAndSquaredDifferences.sum / numbers.size\n\
    \        math.abs(average - numbers.mean)", "        val sum = 0.0\n        numbers.foreach(x\
    \ => sum += math.abs(x - numbers.mean))\n        sum / numbers.size", "      \
    \  val sumOfDifferences = numbers.map(x => math.abs(x - numbers.sum))\n      \
    \  val mean = numbers.sum / numbers.size\n        sumOfDifferences.sum / numbers.size",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / n", "     \
    \   val sum = 0.0\n        numbers.foreach(x => sum += math.abs(x - numbers.mean))\n\
    \        sum / numbers.size", "        val n = numbers.size\n        val mean\
    \ = numbers.sum / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / n", "        val mean: Float = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean))\n        deviations.map(x\
    \ => math.abs(x)).sum / deviations.size", "        val mean: Float = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val n = numbers.size\n\
    \        val sumOfSquares = numbers.map(x => math.pow((x - numbers.mean), 2)).sum\n\
    \        val mean = numbers.sum / n\n        val mad = math.abs(sumOfSquares -\
    \ n * mean * mean) / (math.sqrt(n) * math.sqrt(n))\n        mad", "        val\
    \ n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / n", "     \
    \   val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val n = numbers.size\n        val sum = 0.0\n        numbers.foreach(x => sum\
    \ += abs(x - mean))\n        sum / n", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        numbers.map(x => Math.abs(x - mean)).sum / n", "        val sum\
    \ = 0.0\n        numbers.foreach(x => sum += math.abs(x - mean))\n        sum\
    \ / numbers.size", "        val mean: Float = numbers.sum / numbers.size\n   \
    \     val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.size",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / n", " \
    \       val n = numbers.size\n        val mean = numbers.sum / n\n        val\
    \ deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum /\
    \ n"]
stop_tokens:
- "\n    }\n"
