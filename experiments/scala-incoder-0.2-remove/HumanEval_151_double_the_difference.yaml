name: HumanEval_151_double_the_difference
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return the sum of squares of the numbers\n    //\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // If the input list is empty, return 0.\n    def doubleTheDifference(lst :\
  \ List[Float]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
  \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
  \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
  \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
  \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
  \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
  \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
  \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
completions: ["        val sum = 0L\n        for(i <- 0 until lst.size) {\n      \
    \      val x = lst(i)\n            if(x % 2 == 1) {\n                sum += x\n\
    \            }\n        }\n        sum", "        val sumOfSquares = lst.map(x\
    \ => math.pow(x, 2)).sum\n        val oddSum = lst.filter(x => x % 2 != 0).sum\n\
    \        sumOfSquares + oddSum", "        val sum = 0L\n        lst.foreach(x\
    \ => if (x % 2 != 0) sum += x)\n        sum", "        val sum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            val x = lst(i)\n            if(x % 2 ==\
    \ 1) {\n                sum += x\n            }\n        }\n        sum", "  \
    \      val sum = 0L\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val sum = 0\n        for(i <- lst) {\n          \
    \  if(i % 2 != 0) sum += i\n        }\n        sum", "        val sum = 0L\n \
    \       for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n    \
    \            sum += lst(i) * lst(i)\n            }\n        }\n        return\
    \ sum", "        val sum = 0\n        val even = lst.filter(x => x % 2 == 0)\n\
    \        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n\
    \        val oddSquare = odd.map(x => x * x).sum\n        val difference = evenSum\
    \ - oddSum\n        val squareDifference = evenSquare - oddSquare\n        val\
    \ result = squareDifference + difference\n        result", "        val even =\
    \ lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum + oddSum\n        result", "        val even = lst.filter(x => x %\
    \ 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val sumOdd =\
    \ even.sum\n        val sumEven = odd.sum\n        val sumOddEven = sumOdd + sumEven\n\
    \        val sumOddEvenSquared = sumOddEven * sumOddEven\n        val sumOddEvenSquaredSum\
    \ = sumOddEvenSquared.sum\n        val sumOddEvenSquaredSumSquared = sumOddEvenSquaredSum\
    \ * sumOddEvenSquaredSum\n        val sumOddEvenSquaredSumSquaredSum = sumOddEvenSquaredSumSquared.sum\n\
    \        val sumOddEvenSquaredSumSquaredSumSquared = sumOddEvenSquaredSumSquaredSum\
    \ * sumOddEvenSquaredSumSquaredSum\n        val sumOddEvenSquaredSumSquaredSumSquaredSum\
    \ = sumOddEvenSquaredSumSquaredSumSquared.sum\n        val sumOddEvenSquaredSumSquaredSumSquaredSumSquared\
    \ = sumOddEvenSquaredSumSquaredSumSquaredSum * sumOddEvenSquaredSumSquaredSumSquaredSum\n\
    \        val sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSum = sumOddEvenSquaredSumSquaredSumSquaredSumSquared.sum\n\
    \        val sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSum = sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSum\
    \ * sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSum\n        val sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSumSquared\
    \ = sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSum * sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSum\n\
    \        val sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSumSquaredSum = sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSumSquared.sum\n\
    \        val sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSumSquaredSum = sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSumSquaredSum\
    \ * sumOddEvenSquaredSumSquaredSumSquaredSumSquaredSumSquaredSum\n", "       \
    \ var sum = 0\n        var sumOfSquares = 0\n        var even = 0\n        var\
    \ odd = 0\n        var evenIndex = 0\n        var oddIndex = 0\n        for(i\
    \ <- 0 until lst.size) {\n            if(lst(i) % 2 == 0) {\n                even\
    \ += lst(i)\n                evenIndex += 1\n            } else {\n          \
    \      odd += lst(i)\n                oddIndex += 1\n            }\n        }\n\
    \        for(i <- 0 until evenIndex) {\n            sumOfSquares += even * even\n\
    \            sum += even\n        }\n        for(i <- 0 until oddIndex) {\n  \
    \          sumOfSquares += odd * odd\n            sum += odd\n        }\n    \
    \    sumOfSquares", "        val sum = 0L\n        lst.foreach(x => if (x % 2\
    \ == 1) sum += x * x else 0)\n        sum", "        val even = lst.filter(x =>\
    \ x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val sumOdd\
    \ = odd.sum\n        val sumEven = even.sum\n        val sumOddEven = sumOdd +\
    \ sumEven\n        val sumOddEvenSquare = sumOddEven * sumOddEven\n        val\
    \ sumOddEvenSquareRoot = math.sqrt(sumOddEvenSquare)\n        sumOddEvenSquareRoot",
  "        val sum = 0L\n        for(i <- lst) {\n            if(i % 2 != 0) {\n \
    \               sum += i\n            }\n        }\n        sum", "        val\
    \ sum = 0L\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n\
    \            if(x % 2 == 0) {\n                sum += x\n            }\n     \
    \   }\n        sum", "        val sum = 0\n        val even = lst.filter(_ % 2\
    \ == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n\
    \        val oddSquare = odd.map(x => x * x).sum\n        val result = evenSum\
    \ + oddSum + evenSquare + oddSquare\n        result", "        val sum = 0L\n\
    \        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  val evenSquare = even.map(x => x * x).sum\n        val oddSquare = odd.map(x\
    \ => x * x).sum\n        val sum = evenSum + oddSum\n        val square = evenSquare\
    \ + oddSquare\n        square", "        val sum = 0L\n        for(i <- lst.indices)\
    \ {\n            if(lst(i) % 2 != 0) sum += lst(i)\n        }\n        sum", " \
    \       val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val sum = even.sum + odd.sum\n        val squareSum\
    \ = even.map(x => x * x).sum + odd.map(x => x * x).sum\n        val result = squareSum\
    \ - sum\n        result", "        val even = lst.filter(_ % 2 == 0)\n       \
    \ val odd = lst.filter(_ % 2 != 0)\n        val sumOdd = even.sum\n        val\
    \ sumEven = odd.sum\n        val sumOddEven = sumOdd + sumEven\n        val sumOddOdd\
    \ = sumOdd * sumOdd\n        val sumOddEvenOdd = sumOddEven + sumOddOdd\n    \
    \    val sumOddEvenOddOdd = sumOddEvenOdd * sumOddEvenOdd\n        val sumOddEvenOddEvenOdd\
    \ = sumOddEvenOddOdd * sumOddEvenOddOdd\n        val sumOddEvenOddEvenOddOdd =\
    \ sumOddEvenOddEvenOddOdd * sumOddEvenOddEvenOddOdd\n        val sumOddEvenOddEvenOddEvenOdd\
    \ = sumOddEvenOddEvenOddEvenOddOdd * sumOddEvenOddEvenOddEvenOddOdd\n        val\
    \ sumOddEvenOddEvenOddEvenOddEvenOdd = sumOddEvenOddEvenOddEvenOddEvenOddOdd *\
    \ sumOddEvenOddEvenOddEvenOddEvenOddOdd\n        val sumOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd * sumOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\n\
    \        val sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ * sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\n        val sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd * sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\n",
  "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n        val oddSquare\
    \ = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n        val square\
    \ = evenSquare + oddSquare\n        val result = sum * sum - square + square\n\
    \        result", "        val sum = 0L\n        lst.foreach(x => if (x % 2 ==\
    \ 1) sum += x * x else 0)\n        sum", "        val sum = 0\n        for(i <-\
    \ 0 until lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1)\
    \ {\n                sum += x * x\n            }\n        }\n        sum", " \
    \       val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  evenSum + oddSum", "        var sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            sum += lst(i) * lst(i)\n        }\n        sum", "        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSumSquare\
    \ = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val\
    \ result = evenSumSquare + oddSumSquare\n        result", "        var sum = 0L\n\
    \        var sumOfSquares = 0L\n        var odd = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n\
    \                sumOfSquares += lst(i) * lst(i)\n                odd += 1\n \
    \           }\n        }\n        if(sum == 0) {\n            return 0\n     \
    \   }\n        val result = sumOfSquares / sum\n        if(odd > 0) {\n      \
    \      result *= 2\n        }\n        result", "        val sum = 0L\n      \
    \  lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum", "    \
    \    val sum = 0L\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ ())\n        sum", "        val sumOfSquares = lst.map(x => x * x).sum\n   \
    \     val oddSum = lst.filter(x => x % 2 != 0).sum\n        sumOfSquares + oddSum",
  "        val odd = lst.filter(x => x % 2 != 0)\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val sumOdd = odd.sum\n        val sumEven = even.sum\n\
    \        val sumOddEven = sumOdd + sumEven\n        sumOddEven", "        var\
    \ sum = 0\n        var sumOfSquares = 0\n        var odd = 0\n        for(i <-\
    \ 0 until lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1)\
    \ {\n                sum += x\n                sumOfSquares += x * x\n       \
    \         odd += x\n            }\n        }\n        if(sum == 0) {\n       \
    \     return 0\n        }\n        val result = sumOfSquares / sum\n        val\
    \ oddResult = odd / sum\n        val oddResultSquare = oddResult * oddResult\n\
    \        val oddResultSquareSum = oddResultSquare * sum\n        val oddResultSquareSumOfSquares\
    \ = oddResultSquareSum * sumOfSquares\n        val oddResultSquareSumOfSquaresOfOdd\
    \ = oddResultSquareSumOfSquares * odd\n        val oddResultSquareSumOfSquaresOfOddOfOdd\
    \ = oddResultSquareSumOfSquares * oddResultSquareSumOfOdd\n        val oddResultSquareSumOfSquaresOfOddOfOddOfOdd\
    \ = oddResultSquareSumOfSquares * oddResultSquareSumOfOddOfOdd\n        val oddResultSquareSumOfSquaresOfOddOfOddOfOddOfOdd\
    \ = oddResultSquareSumOfSquares * oddResultSquareSumOfOddOfOddOfOdd\n        val\
    \ oddResultSquareSumOfSquaresOfOddOfOddOfOddOfOddOfOdd = oddResultSquareSumOfSquares\
    \ * oddResultSquareSumOfOddOfOddOfOddOfOdd\n        val oddResultSquareSumOfSquaresOfOddOfOddOfOddOfOddOfOddOfOdd\
    \ = oddResultSquareSumOfSquares * oddResultSquareSumOfOddOfOddOfOddOfOddOfOdd\n\
    \        val oddResultSquareSumOfSquaresOfOddOfOddOfOddOfOddOfOddOfOddOfOdd =\
    \ oddResultSquareSumOfSquares * oddResultSquareSumOfOddOfOddOfOddOfOddOfOddOfOdd\n\
    \        val oddResultSquareSumOfSquaresOfOddOfOddOfOddOfOddOfOddOfOddOfOddOfOdd\
    \ = oddResultSquareSumOfSquares * oddResultSquareSumOfOddOfOddOfOddOfOddOfOddOfOddOfOdd\n\
    \        val oddResultSquareSumOfSquaresOfOddOfOddOfOddOfO", "        val sum\
    \ = 0L\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val evenSquare = even.map(x => x * x).sum\n        val oddSquare = odd.map(x\
    \ => x * x).sum\n        val sum = evenSum + oddSum\n        val square = evenSquare\
    \ + oddSquare\n        sum * sum - square", "        val even = lst.filter(_ %\
    \ 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val result = even.sum\
    \ + odd.sum\n        result", "        val sum = 0L\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val evenSumSquareOdd = evenSumSquare\
    \ + oddSumSquare\n        val oddSumSquareOdd = evenSumSquare - oddSumSquare\n\
    \        val evenSumSquareEven = evenSumSquare - evenSumSquare\n        val oddSumSquareEven\
    \ = oddSumSquare - oddSumSquare\n        val evenSumSquareOddEven = evenSumSquareOdd\
    \ + evenSumSquareEven\n        val oddSumSquareOddEven = oddSumSquareOdd + oddSumSquareEven\n\
    \        val evenSumSquareOddOdd = evenSumSquareOdd - evenSumSquareOdd\n     \
    \   val oddSumSquareOddOdd = oddSumSquareOdd - oddSumSquareOdd\n        val evenSumSquareEvenOdd\
    \ = evenSumSquareEven - evenSumSquareOdd\n        val oddSumSquareEvenOdd = oddSumSquareEven\
    \ - oddSumSquareOdd\n        val evenSumSquareOddEvenOdd = evenSumSquareOddEven\
    \ + evenSumSquareEvenOdd\n        val oddSumSquareOddEvenOdd = oddSumSquareOddEven\
    \ + oddSumSquareEvenOdd\n        val evenSumSquareOddOddOdd = evenSumSquareOddOdd\
    \ - evenSumSquareOddOdd\n        val oddSumSquareOddOddOdd = oddSumSquareOddOdd\
    \ - oddSumSquareOddOdd\n        val evenSumSquareEvenEvenOdd = evenSumSquareEvenOdd\
    \ - evenSumSquareEvenOdd\n        val oddSumSquareEvenEvenOdd = oddSumSquareEvenEvenOdd\
    \ - oddSumSquareEvenEvenOdd\n        val evenSumSquareOddOddEvenOdd = evenSumSquareOddOddEvenOdd\
    \ + evenSumSquareEvenOdd\n        val oddSumSquareOddOddEvenOdd = oddSumSquareOddOddEvenOdd\
    \ + oddSumSquareEvenOdd\n        val evenSumSquareEvenEvenEvenOdd = evenSumSquareEvenEvenOdd\
    \ - evenSumSquareEvenEvenOdd\n        val oddSum", "        val sum = 0\n    \
    \    for(i <- lst) {\n            if (i % 2 != 0) sum += i\n        }\n      \
    \  sum", "        val sumOfSquares = lst.map(x => x * x).sum\n        val sumOfOdds\
    \ = lst.filter(x => x % 2 != 0).sum\n        sumOfSquares + sumOfOdds", "    \
    \    val sumOfSquares = lst.foldLeft(0.0f){ (sum, num) =>\n            if (num\
    \ % 2 == 1) sum + num * num\n            else sum\n        }\n        sumOfSquares\
    \ * (sumOfSquares - 1)", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 != 0) {\n                sum += lst(i)\n      \
    \      }\n        }\n        sum", "        val sum = 0L\n        for(i <- lst.indices)\
    \ {\n            sum += lst(i) * lst(i)\n        }\n        sum", "        val\
    \ sum = 0\n        for(i <- lst) {\n            val x = if (i % 2 == 1) i * 2\
    \ else i\n            sum += x\n        }\n        sum", "        val sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            val x = lst(i)\n          \
    \  if(x % 2 == 1) sum += x\n        }\n        sum", "        val sum = 0L\n \
    \       for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n    \
    \            sum += lst(i)\n            }\n        }\n        sum", "        val\
    \ sum : Long = 0\n        lst.foreach(x => if (x % 2 != 0) sum += x * x else 0)\n\
    \        sum", "        val sumOfSquares = lst.foldLeft(0.0f){ (sum, num) =>\n\
    \            if (num > 0) sum + num * num\n            else sum\n        }\n \
    \       sumOfSquares * (sumOfSquares - 1.0f)", "        var sum = 0\n        var\
    \ sumOfSquares = 0\n        for(i <- 0 until lst.size) {\n            val x =\
    \ lst(i)\n            if(x % 2 == 1) {\n                sum += x\n           \
    \     sumOfSquares += x * x\n            }\n        }\n        sumOfSquares",
  "        val sum = 0L\n        val even = lst.filter(x => x % 2 == 0)\n        val\
    \ odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n\
    \        val oddSum = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n\
    \        return sum", "        var sum = 0L\n        var sumSquare = 0L\n    \
    \    lst.foreach(x => if (x % 2 != 0) sum += x)\n        lst.foreach(x => sumSquare\
    \ += x * x)\n        if (sum > 0) sumSquare\n        else 0L", "        val even\
    \ = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n\
    \        val sumEven = even.sum\n        val sumOdd = odd.sum\n        val sumOddEven\
    \ = sumEven + sumOdd\n        val sumOddEvenSquared = sumOddEven * sumOddEven\n\
    \        val sumOddEvenSquaredOdd = sumOddEvenSquared * odd\n        val sumOddEvenSquaredEven\
    \ = sumOddEvenSquared * even\n        val sumOddEvenSquaredOddEven = sumOddEvenSquaredOdd\
    \ * sumOddEvenSquaredEven\n        val sumOddEvenSquaredOddEvenOdd = sumOddEvenSquaredOddEven\
    \ * sumOddEvenSquaredOdd\n        val sumOddEvenSquaredOddEvenEven = sumOddEvenSquaredOddEven\
    \ * sumOddEvenSquaredEven\n        val sumOddEvenSquaredOddEvenEvenOdd = sumOddEvenSquaredOddEvenEven\
    \ * sumOddEvenSquaredOddEvenOdd\n        val sumOddEvenSquaredOddEvenEvenEven\
    \ = sumOddEvenSquaredOddEvenEven * sumOddEvenSquaredEvenEven\n        val sumOddEvenSquaredOddEvenEvenEvenOdd\
    \ = sumOddEvenSquaredOddEvenEvenOdd * sumOddEvenSquaredOddEvenEvenOdd\n      \
    \  val sumOddEvenSquaredOddEvenEvenEvenEven = sumOddEvenSquaredOddEvenEvenEven\
    \ * sumOddEvenSquaredOddEvenEvenEven\n        val sumOddEvenSquaredOddEvenEvenEvenEvenEvenOdd\
    \ = sumOddEvenSquaredOddEvenEvenEvenEvenOdd * sumOddEvenSquaredOddEvenEvenEvenOdd\n\
    \        val sumOddEvenSquaredOddEvenEvenEvenEvenEvenEven = sumOddEvenSquaredOddEvenEvenEvenEven\
    \ * sumOddEvenSquaredOddEvenEvenEvenEven\n        val sumOddEvenSquaredOddEvenEvenEvenEvenEvenEvenOdd\
    \ = sumOddEvenSquaredOddEvenEvenEvenEvenEvenOdd * sumOddEvenSquaredOddEvenEvenEvenEvenOdd\n\
    \        val sumOddEvenSquared", "        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val sum = evenSum + oddSum\n        return sum", "        val sumOfSquares\
    \ = lst.map(x => math.pow(x, 2)).sum\n        val oddSum = lst.filter(x => x %\
    \ 2 != 0).sum\n        sumOfSquares + oddSum", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val sum = 0L\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 != 0) {\n   \
    \             sum += lst(i)\n            }\n        }\n        sum", "       \
    \ val sum = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2\
    \ != 0) {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        val sum = 0L\n        val even = lst.filter(x => x % 2 == 0)\n        val\
    \ odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.sum\n        val\
    \ oddSum = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n      \
    \  val oddSquare = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n\
    \        val square = evenSquare + oddSquare\n        sum * sum - square", " \
    \       val sum = 0L\n        for(i <- lst) {\n            sum += i * i\n    \
    \    }\n        sum", "        val sum = 0L\n        for(i <- lst) {\n       \
    \     if(i % 2 != 0) {\n                sum += i\n            }\n        }\n \
    \       sum", "        val sum = 0\n        for(i <- lst) {\n            if(i\
    \ % 2 != 0) {\n                sum += i\n            }\n        }\n        sum",
  "        val sum = 0L\n        for(i <- lst) {\n            val x = if (i % 2 ==\
    \ 1) i else 0\n            sum += x\n        }\n        sum", "        var sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            sum += lst(i) * lst(i)\n\
    \        }\n        sum", "        val sum = 0L\n        for(i <- lst.filter(_\
    \ % 2 == 1))\n            sum += i\n        sum", "        val sumOfSquares =\
    \ lst.foldLeft(0.0f) { (sum, element) =>\n            if (element % 2 == 1) sum\
    \ + element * element\n            else sum\n        }\n        sumOfSquares *\
    \ sumOfSquares", "        var sum = 0L\n        var sumOfSquares = 0L\n      \
    \  var i = 0\n        while (i < lst.size) {\n            if (lst(i) % 2 == 1)\
    \ {\n                sum += lst(i)\n                sumOfSquares += lst(i) * lst(i)\n\
    \            }\n            i += 1\n        }\n        if (sum == 0) {\n     \
    \       return 0\n        }\n        return sumOfSquares / sum", "        val\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 ==\
    \ 1) {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        var sum = 0\n        var sumSquare = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 != 0) {\n                sum += lst(i)\n      \
    \          sumSquare += lst(i) * lst(i)\n            }\n        }\n        sum\
    \ * sum", "        val sum = 0\n        lst.foreach(x => if (x % 2 != 0) sum +=\
    \ x * x else ())\n        sum", "        val sum = 0L\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n\
    \        val oddSquare = odd.map(x => x * x).sum\n        val sum = evenSum +\
    \ oddSum\n        val square = evenSquare + oddSquare\n        square * sum",
  "        var sum = 0\n        var sumOfSquares = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 != 0) {\n              \
    \  sum += x\n                sumOfSquares += x * x\n            }\n        }\n\
    \        sumOfSquares", "        val sum = 0L\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i) * lst(i)\n\
    \            }\n        }\n        sum", "        val sum = 0\n        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val evenSum = even.foldLeft(0)(_ + _)\n        val oddSum = odd.foldLeft(0)(_\
    \ + _)\n        val sum = evenSum + oddSum\n        sum", "        val sum = 0L\n\
    \        for(i <- lst) {\n            val isOdd = i % 2 != 0\n            if(isOdd)\
    \ {\n                sum += i\n            }\n        }\n        sum", "     \
    \   val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd =\
    \ lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum =\
    \ odd.sum\n        val evenSquare = even.map(x => x * x).sum\n        val oddSquare\
    \ = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n        val square\
    \ = evenSquare + oddSquare\n        val result = sum * sum - square + square\n\
    \        result", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n\
    \            if(lst(i) <> 0.0F && lst(i) <> 0.0D) {\n                sum += lst(i)\
    \ * lst(i)\n            }\n        }\n        sum", "        val sum = 0\n   \
    \     lst.foreach(x => if (x % 2 == 1) sum += x*x else 0)\n        sum", "   \
    \     val sum = 0L\n        for(i <- lst) {\n            if(i % 2 != 0) {\n  \
    \              sum += i\n            }\n        }\n        sum", "        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val sum = even.sum + odd.sum\n        val result = sum * sum\n\
    \        result / 2", "        val sum = 0L\n        lst.foreach(x => if (x %\
    \ 2 == 1) sum += x * x else ())\n        sum", "        val sum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n                sum\
    \ += lst(i)\n            }\n        }\n        sum", "        val sum = 0L\n \
    \       for(i <- lst) {\n            if(i % 2 == 1) {\n                sum +=\
    \ i\n            }\n        }\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => if (x % 2 != 0) sum += x * x else ())\n        sum", "        val sum = 0\n\
    \        lst.foreach(x => if (x % 2 != 0) sum += x * x else ())\n        sum",
  "        val sum = 0\n        val odd = new mutable.HashSet[Float]()\n        lst.foreach(x\
    \ => if (x % 2 == 1) odd.add(x) else sum += x)\n        odd.toList.map(x => x\
    \ * x).sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n    \
    \        val num = lst(i)\n            if(num > 0) {\n                sum += num\
    \ * num\n            }\n        }\n        sum", "        val sum = 0L\n     \
    \   val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n\
    \        val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSquare\
    \ = even.map(x => x * x).sum\n        val oddSquare = odd.map(x => x * x).sum\n\
    \        val evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum\
    \ * oddSum\n        val evenSquareSum = evenSquare + evenSumSquare\n        val\
    \ oddSquareSum = oddSquare + oddSumSquare\n        val evenSumSquareSum = evenSumSquare\
    \ + evenSquareSum\n        val oddSumSquareSum = oddSumSquare + oddSquareSum\n\
    \        val evenSquareSumSquare = evenSumSquareSum + evenSquareSum\n        val\
    \ oddSquareSumSquare = oddSumSquareSum + oddSquareSum\n        val evenSquareSumSquareSum\
    \ = evenSquareSumSquare + evenSquareSumSquare\n        val oddSumSquareSumSquare\
    \ = oddSumSquareSum + oddSquareSumSquare\n        val evenSquareSumSquareSumSquare\
    \ = evenSquareSumSquareSum + evenSquareSumSquareSum\n        val oddSumSquareSumSquareSum\
    \ = oddSumSquareSumSquare + oddSquareSumSquareSum\n        val evenSquareSumSquareSumSquareSum\
    \ = evenSquareSumSquareSumSquare + evenSquareSumSquareSumSquare\n        val oddSumSquareSumSquareSumSquare\
    \ = oddSumSquareSumSquareSum + oddSquareSumSquareSumSquare\n        val evenSquareSumSquareSumSquareSumSquare\
    \ = evenSquareSumSquareSumSquareSumSquare + evenSquareSumSquareSumSquareSumSquare\n\
    \        val oddSumSquareSumSquareSumSquareSum = oddSumSquareSumSquareSumSquareSum\
    \ + oddSquareSumSquareSumSquareSumSquare\n        val evenSquareSumSquareSumSquareSumSquare\
    \ = evenSquareSumSquareSumSquareSumSquare + evenSquareSumSquareSumSquareSumSquare\n\
    \        val oddSumSquareSumSquareSumSquareSumSquare = oddSumSquareSumSquareSumSquareSumSquare\
    \ + oddSquareSumSquareSumSquareSumSquareSum\n        val evenSquareSumSquareSumSquareSumSquareSum\
    \ = evenSquareSumSquareSumSquareSumSquareSum + evenSquareSumSquareSumSquareSumSquareSum\n\
    \        val oddSumSquareSumSquareSumSquareSumSquareSum = oddSumSquareSumSquareSumSquareSumSquareSum\
    \ + oddSquareSumSquareSumSquareSumSquareSumSquare\n        ", "        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n\
    \                sum += lst(i)\n            }\n        }\n        sum", "    \
    \    val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        val\
    \ sumOfSquares = evenSum * evenSum + oddSum * oddSum\n        sumOfSquares", " \
    \       val sum = 0\n        for(i <- lst) {\n            if(i % 2 == 1) {\n \
    \               sum += i\n            }\n        }\n        sum", "        val\
    \ sum = 0\n        for(i <- lst) {\n            if(i % 2 != 0) {\n           \
    \     sum += i\n            }\n        }\n        sum", "        val sum = 0L\n\
    \        for(i <- lst) {\n            val x = if (i % 2 == 1) i * 2 else i\n \
    \           sum += x\n        }\n        sum", "        val sum = 0L\n       \
    \ for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n          \
    \      sum += lst(i)\n            }\n        }\n        sum", "        val sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n   \
    \         if(x % 2 == 1) {\n                sum += x\n            }\n        }\n\
    \        sum", "        val sum = 0\n        for(i <- lst) {\n            val\
    \ n = if (i < 0) 0 else i\n            sum += n*n\n        }\n        sum", " \
    \       val sum = 0L\n        for(i <- 0 until lst.size) {\n            val x\
    \ = lst(i)\n            if(x % 2 == 1) {\n                sum += x\n         \
    \   }\n        }\n        sum", "        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.sum\n        val oddSum = odd.sum\n        val evenSumSquare = evenSum\
    \ * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val evenSumSquareOdd\
    \ = evenSumSquare + oddSumSquare\n        val evenSumSquareOddSum = evenSumSquareOdd\
    \ * evenSumSquareOdd\n        val evenSumSquareOddSumSquare = evenSumSquareOddSum\
    \ * evenSumSquareOddSum\n        val evenSumSquareOddSumSquareOdd = evenSumSquareOddSumSquare\
    \ * evenSumSquareOddSumSquare\n        val evenSumSquareOddSumSquareOddSum = evenSumSquareOddSumSquareOdd\
    \ * evenSumSquareOddSumSquareOdd\n        val evenSumSquareOddSumSquareOddSumSquare\
    \ = evenSumSquareOddSumSquareOddSum * evenSumSquareOddSumSquareOddSum\n      \
    \  val evenSumSquareOddSumSquareOddSumSquareOdd = evenSumSquareOddSumSquareOddSumSquare\
    \ * evenSumSquareOddSumSquareOddSumSquare\n        val evenSumSquareOddSumSquareOddSumSquareOddSum\
    \ = evenSumSquareOddSumSquareOddSumSquareOdd * evenSumSquareOddSumSquareOddSumSquareOdd\n\
    \        val evenSumSquareOddSumSquareOddSumSquareOddSumSquare = evenSumSquareOddSumSquareOddSumSquareOddSum\
    \ * evenSumSquareOddSumSquareOddSumSquareOddSum\n        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ = evenSumSquareOddSumSquareOddSumSquareOddSumSquare * evenSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\n\
    \        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum = evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\
    \ * evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\n        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSumSquare\
    \ = evenSumSquareOddSumSquareOdd", "        val sum = 0L\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else ())\n        sum", "        val sum : Long\
    \ = lst.foldLeft(0)((sum, num) => sum + num * num)\n        val sumOfSquares :\
    \ Long = lst.foldLeft(0)((sum, num) => sum + num * num)\n        val sumOfSquareOdd\
    \ : Long = lst.foldLeft(0)((sum, num) => if (num % 2 == 1) sum + num * num else\
    \ sum)\n        sumOfSquareOdd - sumOfSquares * sum", "        val sum = 0\n \
    \       for(i <- lst) if(i % 2 == 1) sum += i\n        sum", "        val odd\
    \ = mutable.Set[Float]()\n        val even = mutable.Set[Float]()\n        lst.foreach(x\
    \ => if (x % 2 != 0) even += x)\n        lst.foreach(x => if (x % 2 == 0) odd\
    \ += x)\n        val sumOdd = odd.sum\n        val sumEven = even.sum\n      \
    \  val sumOddEven = sumOdd + sumEven\n        val sumOddEvenSquare = sumOddEven\
    \ * sumOddEven\n        val sumOddEvenSquareRoot = math.sqrt(sumOddEvenSquare)\n\
    \        sumOddEvenSquareRoot", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1) {\n    \
    \            sum += x\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 != 0) {\n\
    \                sum += lst(i)\n            }\n        }\n        sum", "    \
    \    val sum = 0L\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n\
    \            if(x % 2 == 1) {\n                sum += x * x\n            }\n \
    \       }\n        sum", "        val even = lst.filter(x => x % 2 == 0)\n   \
    \     val odd = lst.filter(x => x % 2 != 0)\n        val sum = even.sum + odd.sum\n\
    \        val squareSum = even.map(x => x * x).sum + odd.map(x => x * x).sum\n\
    \        val squareSumOdd = even.map(x => x * x).sum + odd.map(x => x * x).sum\n\
    \        val squareSumEven = even.map(x => x * x).sum + odd.map(x => x * x).sum\n\
    \        val squareSumOddEven = even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum\n        val squareSumOddEvenOdd = even.map(x =>\
    \ x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x\
    \ => x * x).sum\n        val squareSumOddEvenOddEven = even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n    \
    \        val x = lst(i)\n            if(x % 2 == 1) {\n                sum +=\
    \ x\n            }\n        }\n        sum", "        val sum = 0L\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSquare\
    \ = even.map(x => x * x).sum\n        val oddSquare = odd.map(x => x * x).sum\n\
    \        val result = evenSum + oddSum + evenSquare + oddSquare\n        result",
  "        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val sum = even.sum + odd.sum\n        val result = sum\
    \ * sum\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  if (evenSum == 0 || oddSum == 0) {\n            result\n        } else {\n\
    \            result\n        }", "        val sum = 0L\n        val evenSum =\
    \ 0L\n        val oddSum = 0L\n        for(i <- 0 until lst.size) {\n        \
    \    if(lst(i) % 2 == 0) {\n                evenSum += lst(i)\n            }\n\
    \            else {\n                oddSum += lst(i)\n            }\n       \
    \ }\n        val result = evenSum + oddSum\n        if(lst.size == 0) {\n    \
    \        result\n        }\n        else {\n            result\n        }", " \
    \       val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val sumOdd = even.sum\n        val sumEven = odd.sum\n\
    \        val sumOddEven = sumOdd + sumEven\n        val sumOddEvenSquare = sumOddEven\
    \ * sumOddEven\n        val sumOddEvenSquareOdd = sumOddEvenSquare * odd\n   \
    \     val sumOddEvenSquareEven = sumOddEvenSquare * even\n        val sumOddEvenSquareOddEven\
    \ = sumOddEvenSquareOdd + sumOddEvenSquareEven\n        val sumOddEvenSquareOddEvenOdd\
    \ = sumOddEvenSquareOddEven + sumOddEvenSquareOdd\n        val sumOddEvenSquareOddEvenEven\
    \ = sumOddEvenSquareOddEvenOdd + sumOddEvenSquareOddEvenEven\n        val sumOddEvenSquareOddEvenEvenOdd\
    \ = sumOddEvenSquareOddEvenEvenOdd + sumOddEvenSquareOddEvenEvenOdd\n        val\
    \ sumOddEvenSquareOddEvenEvenEven = sumOddEvenSquareOddEvenEvenEvenOdd + sumOddEvenSquareOddEvenEvenEvenEven\n\
    \        val sumOddEvenSquareOddEvenEvenEvenOdd = sumOddEvenSquareOddEvenEvenEvenOdd\
    \ + sumOddEvenSquareOddEvenEvenEvenOdd\n        val sumOddEvenSquareOddEvenEvenEvenEven\
    \ = sumOddEvenSquareOddEvenEvenEvenEvenOdd + sumOddEvenSquareOddEvenEvenEvenEven\n\
    \        val sumOddEvenSquareOddEvenEvenEvenEvenOdd = sumOddEvenSquareOddEvenEvenEvenOdd\
    \ + sumOddEvenSquareOddEvenEvenEvenOdd\n        val sumOddEvenSquareOddEvenEvenEvenEven\
    \ = sumOddEvenSquareOddEvenEvenEvenEvenOdd + sumOddEvenSquareOddEvenEvenEvenEven\n\
    \        val sumOddEvenSquareOddEvenEvenEvenEvenOdd = sumOddEvenSquareOddEvenEvenEvenOdd\
    \ + sumOddEvenSquareOddEvenEvenEvenOdd\n        val sumOddEvenSquareOddEvenEvenEvenEvenEven\
    \ = sumOddEvenSquareOddEvenEvenEvenEvenO", "        val even = lst.filter(x =>\
    \ x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.sum\n        val oddSum = odd.sum\n        val evenSumSquare = evenSum\
    \ * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val result =\
    \ evenSumSquare + oddSumSquare\n        result", "        val sum = 0\n      \
    \  for(i <- 0 until lst.size) {\n            val x = lst(i)\n            if(x\
    \ % 2 == 1) {\n                sum += x\n            }\n        }\n        sum",
  "        val sum : Long = 0\n        val nums = lst.filter(_ % 2 == 1)\n       \
    \ for(i <- nums) {\n            sum += i\n        }\n        return sum", "  \
    \      val sum = 0L\n        val even = lst.filter(x => x % 2 == 0)\n        val\
    \ odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.sum\n        val\
    \ oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n        val\
    \ oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare + oddSumSquare\n\
    \        return sum", "        val sum = 0L\n        for(i <- lst) {\n       \
    \     if(i % 2 != 0) {\n                sum += i\n            }\n        }\n \
    \       return sum", "        var sum = 0\n        var sumOfSquares = 0\n    \
    \    for(i <- 0 until lst.size) {\n            val x = lst(i)\n            if(x\
    \ % 2 == 1) {\n                sum += x\n                sumOfSquares += x * x\n\
    \            }\n        }\n        if(sum == 0) {\n            return 0\n    \
    \    }\n        return sumOfSquares / sum", "        val sum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n                sum\
    \ += lst(i)\n            }\n        }\n        sum", "        val sum = 0L\n \
    \       for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n    \
    \            sum += lst(i)\n            }\n        }\n        sum", "        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val sum = even.sum + odd.sum\n        val result = sum * sum\n\
    \        result", "        var sum = 0\n        var sumOfSquares = 0\n       \
    \ var currentSum = 0\n        var currentSumOfSquares = 0\n        var currentNum\
    \ = 0\n        var currentNumSquares = 0\n        var currentNumSquareSum = 0\n\
    \        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquareSumOfSquares = 0\n        var currentNumSquareSumOfSquares\
    \ = 0\n        var currentNumSquare", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n                sum\
    \ += lst(i)\n            }\n        }\n        sum", "        val sum = 0\n  \
    \      for(i <- lst) if(i % 2 != 0) sum += i\n        sum", "        val sumOfSquares\
    \ = lst.map(x => math.pow(x, 2)).sum\n        val sumOfOdds = lst.filter(x =>\
    \ x % 2 != 0).sum\n        sumOfSquares + sumOfOdds", "        val sum = 0\n \
    \       for(i <- lst.filter(_ % 2 != 0).toList)\n            sum += i\n      \
    \  sum", "        val sumOfSquares = lst.foldLeft(0.0f) { (sum, num) =>\n    \
    \        if (num % 2 == 1) sum + num * num\n            else sum\n        }\n\
    \        sumOfSquares * sumOfSquares", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1)\
    \ sum += x\n        }\n        sum", "        val sum = 0\n        for(i <- 0\
    \ until lst.size) {\n            if(lst(i) % 2 != 0) {\n                sum +=\
    \ lst(i) * lst(i)\n            }\n        }\n        sum", "        val sumOfSquares\
    \ = lst.foldLeft(0.0f) { (sum, elem) =>\n            if (elem % 2 == 1) sum +\
    \ elem * elem\n            else sum\n        }\n        sumOfSquares * sumOfSquares",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i)\
    \ % 2 != 0) {\n                sum += lst(i) * lst(i)\n            }\n       \
    \ }\n        sum", "        val odd = lst.filter(x => x % 2 != 0).sum\n      \
    \  val even = lst.filter(x => x % 2 == 0).sum\n        odd + even", "        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val sumOdd = odd.sum\n        val sumEven = even.sum\n      \
    \  val sumOddEven = sumOdd + sumEven\n        val sumOddEvenSquared = sumOddEven\
    \ * sumOddEven\n        val sumOddEvenSquaredSum = sumOddEvenSquared.sum\n   \
    \     val sumOddEvenSquaredSumSquare = sumOddEvenSquaredSum * sumOddEvenSquaredSum\n\
    \        val sumOddEvenSquaredSumSquareSum = sumOddEvenSquaredSumSquare * sumOddEvenSquaredSumSquare\n\
    \        val sumOddEvenSquaredSumSquareSumSquare = sumOddEvenSquaredSumSquareSum\
    \ * sumOddEvenSquaredSumSquareSum\n        val sumOddEvenSquaredSumSquareSumSquareSum\
    \ = sumOddEvenSquaredSumSquareSumSquare * sumOddEvenSquaredSumSquareSumSquare\n\
    \        val sumOddEvenSquaredSumSquareSumSquareSumSquare = sumOddEvenSquaredSumSquareSumSquareSum\
    \ * sumOddEvenSquaredSumSquareSumSquare\n        val sumOddEvenSquaredSumSquareSumSquareSumSquareSum\
    \ = sumOddEvenSquaredSumSquareSumSquareSum * sumOddEvenSquaredSumSquareSumSquareSum\n\
    \        val sumOddEvenSquaredSumSquareSumSquareSumSquareSumSquare = sumOddEvenSquaredSumSquareSumSquareSumSquare\
    \ * sumOddEvenSquaredSumSquareSumSquareSumSquare\n        val sumOddEvenSquaredSumSquareSumSquareSumSquareSumSquareSum\
    \ = sumOddEvenSquaredSumSquareSumSquareSumSquare * sumOddEvenSquaredSumSquareSumSquareSumSquareSum\n\
    \        val sumOddEvenSquaredSumSquareSumSquareSumSquareSumSquareSum = sumOddEvenSquaredSumSquareSumSquareSumSquare\
    \ * sumOddEvenSquaredSumSquareSumSquareSumSquareSum\n        val sumOddEvenSquaredSumSquareSumSquareSumSquareSumSquareSum\
    \ = sumOddEvenSquaredSumSquareSumSquareSumSquare * sumOddEvenSquaredSumSquareSumSquareSumSquareSum\n\
    \        val sumOddEvenSquaredSumSquareSumSquareSumSquareSumSquareSumSquare =\
    \ sumOddEvenSquaredSumSquareSumSquareSumSquare", "        val sum = 0\n      \
    \  lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum", "    \
    \    var sum = 0\n        var sumOfSquares = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n                sumOfSquares += x * x\n            }\n        }\n\
    \        if(sum == 0) {\n            return 0\n        }\n        sumOfSquares\
    \ - (sum * sum)", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n\
    \            if(lst(i) %2 != 0) {\n                sum += lst(i)\n           \
    \ }\n        }\n        sum", "        val sumOfSquares = lst.map(x => x * x).sum\n\
    \        val sumOfOdds = lst.filter(x => x % 2 != 0).sum\n        sumOfSquares\
    \ + sumOfOdds", "        val sum = 0L\n        lst.foreach(x => if (x % 2 == 1)\
    \ sum += x * x else 0)\n        sum", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1)\
    \ {\n                sum += x\n            }\n        }\n        sum", "     \
    \   val sum = 0\n        for(i <- lst) {\n            val x = if (i % 2 == 0)\
    \ i else 0\n            sum += x\n        }\n        sum", "        val sum =\
    \ 0\n        val evenSum = 0\n        val oddSum = 0\n        for(i <- lst) {\n\
    \            if(i % 2 == 0) {\n                evenSum += i\n            } else\
    \ {\n                oddSum += i\n            }\n        }\n        val evenSumSquare\
    \ = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val\
    \ sumOfSquares = evenSumSquare + oddSumSquare\n        sumOfSquares", "      \
    \  val sum = 0L\n        for(i <- 0 until lst.size) {\n            if(lst(i) %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ return sum", "        val sum = 0L\n        for(i <- lst) {\n            val\
    \ x = if (i % 2 == 1) i else 0\n            sum += x\n        }\n        sum",
  "        val sumOfSquares = lst.foldLeft(0.0f) { (sum, elem) => sum + math.pow(elem,\
    \ 2.0) }\n        sumOfSquares * (sumOfSquares - lst.size)", "        val even\
    \ = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n\
    \        val sumOdd = even.sum\n        val sumEven = odd.sum\n        val sumOddEven\
    \ = sumOdd + sumEven\n        val sumOddEvenSquare = sumOddEven * sumOddEven\n\
    \        val sumOddEvenSquareRoot = math.sqrt(sumOddEvenSquare)\n        sumOddEvenSquareRoot",
  "        val sumOfSquares = lst.foldLeft(0.0f) { (sum, element) =>\n           \
    \ val square = math.pow(element, 2)\n            if (element % 2 == 1) sum + square\n\
    \            else sum\n        }\n        sumOfSquares * sumOfSquares", "    \
    \    val sum = 0L\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumSquare = evenSum * evenSum\n        val oddSumSquare\
    \ = oddSum * oddSum\n        val result = evenSumSquare + oddSumSquare\n     \
    \   result", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val sumOfSquares = evenSum * evenSum + oddSum * oddSum\n        sumOfSquares",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            if(lst(i)\
    \ % 2 != 0) {\n                sum += lst(i)\n            }\n        }\n     \
    \   sum", "        val sum = 0L\n        for(i <- lst) {\n            val isOdd\
    \ = i % 2 != 0\n            if(isOdd) sum += i\n        }\n        sum", "   \
    \     val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val evens = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odd.sum\n        val result = evenSum + oddSum\n        val result = if (evenSum\
    \ == 0) 0 else result\n        result", "        val even = lst.filter(x => x\
    \ % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val sumEven\
    \ = even.sum\n        val sumOdd = odd.sum\n        val sumOddSquare = sumOdd\
    \ * sumOdd\n        val sumEvenSquare = sumEven * sumEven\n        val result\
    \ = sumEvenSquare + sumOddSquare\n        result", "        val sum = 0\n    \
    \    val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x =>\
    \ x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n        val oddSum\
    \ = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n        sum",
  "        val sum = 0L\n        for(i <- lst) {\n            sum += i * i\n     \
    \   }\n        sum", "        var sum = 0\n        var sumOfSquares = 0\n    \
    \    for(i <- 0 until lst.size) {\n            val x = lst(i)\n            if(x\
    \ % 2 == 1) {\n                sum += x\n                sumOfSquares += x * x\n\
    \            }\n        }\n        if(sum == 0) {\n            return 0\n    \
    \    }\n        sumOfSquares", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1) {\n    \
    \            sum += x\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n    \
    \        if(x % 2 == 1) sum += x * x\n        }\n        sum", "        val sum\
    \ = 0L\n        val odd = mutable.Set[Float]()\n        lst.foreach(x => if (x\
    \ % 2 != 0) odd += x)\n        odd.foreach(x => sum += x * x)\n        sum", " \
    \       var sum = 0L\n        var sumOfSquares = 0L\n        var i = 0\n     \
    \   while (i < lst.size) {\n            if (lst(i) % 2 == 1) {\n             \
    \   sum += lst(i)\n                sumOfSquares += lst(i) * lst(i)\n         \
    \   }\n            i += 1\n        }\n        if (sum == 0) {\n            return\
    \ 0\n        }\n        return sumOfSquares / sum", "        val sum = 0L\n  \
    \      for(i <- 0 until lst.size) {\n            val x = lst(i)\n            if(x\
    \ % 2 == 1) {\n                sum += x\n            }\n        }\n        sum",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            val x =\
    \ lst(i)\n            if(x % 2 == 1) {\n                sum += x\n           \
    \ }\n        }\n        sum", "        val sum = 0L\n        lst.foreach(x =>\
    \ if (x % 2 != 0) sum += x * x else ())\n        sum", "        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            val n = lst(i)\n          \
    \  if(n >= 0) sum += n * n\n        }\n        sum", "        val sum = 0\n  \
    \      val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n        val\
    \ oddSum = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n     \
    \   return sum", "        val sum = 0L\n        val even = lst.filter(x => x %\
    \ 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val sum = evenSum + oddSum\n        return sum", "        val sum = 0\n\
    \        for(i <- lst) {\n            if(i % 2 == 1) {\n                sum +=\
    \ i\n            }\n        }\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => if (x % 2 != 0) sum += x * x else ())\n        sum", "        val sum = 0L\n\
    \        lst.foreach(x => if (x % 2 == 1) sum += x * x else ())\n        sum",
  "        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val sum = even.sum + odd.sum\n        val result = if\
    \ (sum > 0) sum else 0\n        result", "        val sum = 0L\n        lst.foreach(x\
    \ => if (x % 2 != 0) sum += x)\n        sum", "        val sumOfSquares = lst.map(x\
    \ => math.pow(x, 2)).sum\n        val sumOfOdds = lst.filter(x => x % 2 != 0).sum\n\
    \        sumOfSquares + sumOfOdds", "        val sum = 0L\n        for(i <- lst)\
    \ {\n            val isOdd = i % 2 != 0\n            if(isOdd) {\n           \
    \     sum += i\n            }\n        }\n        return sum", "        val even\
    \ = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n\
    \        val sum = even.sum + odd.sum\n        val result = sum * sum\n      \
    \  val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSumSquare\
    \ = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val\
    \ evenSumSquareOdd = evenSumSquare * oddSum\n        val oddSumSquareOdd = oddSumSquare\
    \ * evenSum\n        val evenSumSquareEven = evenSumSquare * evenSum\n       \
    \ val oddSumSquareEven = oddSumSquare * oddSum\n        val evenSumSquareOddOdd\
    \ = evenSumSquareOdd * oddSum\n        val oddSumSquareOddEven = oddSumSquareOdd\
    \ * evenSum\n        val evenSumSquareEvenOdd = evenSumSquareEven * oddSum\n \
    \       val oddSumSquareEvenOdd = oddSumSquareEven * evenSum\n        val evenSumSquareEvenEven\
    \ = evenSumSquareEven * evenSum\n        val oddSumSquareEvenEven = oddSumSquareEven\
    \ * oddSum\n        val evenSumSquareEvenOddOdd = evenSumSquareEvenOdd * oddSum\n\
    \        val oddSumSquareEvenOddEven = oddSumSquareEvenOdd * evenSum\n       \
    \ val evenSumSquareEvenEvenOdd = evenSumSquareEvenEven * oddSum\n        val oddSumSquareEvenEvenOdd\
    \ = oddSumSquareEvenEven * evenSum\n        val evenSumSquareEvenEvenEven = evenSumSquareEvenEven\
    \ * evenSum\n        val oddSumSquareEvenEvenEven = oddSumSquareEvenEven * oddSum\n\
    \        val evenSumSquareEvenEvenOddOdd = evenSumSquareEvenEvenOdd * oddSum\n\
    \        val oddSumSquareEvenOddEven = oddSumSquareEvenOddEven * evenSum\n   \
    \     val evenSumSquareEvenOddEven = evenSumSquareEvenOddEven * evenSum\n    \
    \    val oddSumSquareEvenOddEven = oddSumSquareEvenOddEven * oddSum\n        val\
    \ evenSumSquareOddOddEven = evenSumSquareOddOddEven * evenSum\n        val oddSumSquareOddEvenOdd\
    \ = oddSumSquareOddEvenOdd * oddSum\n        val evenSumSquareOddEvenEven = evenSumSquareOdd",
  "        val sum = 0L\n        for(i <- lst) {\n            if(i % 2 == 1) {\n \
    \               sum += i\n            }\n        }\n        return sum", "   \
    \     val evens = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = evens.sum\n        val oddSum = odd.sum\n        val\
    \ result = evenSum + oddSum\n        result", "        val sum = 0\n        for(i\
    \ <- lst) {\n            if(i % 2 != 0) {\n                sum += i\n        \
    \    }\n        }\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1) {\n    \
    \            sum += x\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i) <> 0.0) {\n\
    \                sum += lst(i) * lst(i)\n            }\n        }\n        sum",
  "        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val sumOdd = even.sum\n        val sumEven = odd.sum\n\
    \        val sumOddEven = sumOdd + sumEven\n        val sumOddEvenSquared = sumOddEven\
    \ * sumOddEven\n        val sumOddEvenSquaredSum = sumOddEvenSquared.sum\n   \
    \     val sumOddEvenSquaredSumSquare = sumOddEvenSquaredSum * sumOddEvenSquaredSum\n\
    \        val sumOddEvenSquaredSumSquareSum = sumOddEvenSquaredSumSquare * sumOddEvenSquaredSum\n\
    \        val sumOddEvenSquaredSumSquareSumSquare = sumOddEvenSquaredSumSquareSum\
    \ * sumOddEvenSquaredSumSquare\n        val sumOddEvenSquaredSumSquareSumSquareSum\
    \ = sumOddEvenSquaredSumSquareSumSquare * sumOddEvenSquaredSumSquareSum\n    \
    \    val sumOddEvenSquaredSumSquareSumSquareSumSquare = sumOddEvenSquaredSumSquareSumSquareSum\
    \ * sumOddEvenSquaredSumSquareSumSquare\n        val sumOddEvenSquaredSumSquareSumSquareSumSquareSum\
    \ = sumOddEvenSquaredSumSquareSumSquareSumSquare * sumOddEvenSquaredSumSquareSumSquareSum\n\
    \        val sumOddEvenSquaredSumSquareSumSquareSumSquareSumSquare = sumOddEvenSquaredSumSquareSumSquareSumSquare\
    \ * sumOddEvenSquaredSumSquareSumSquareSumSquare\n        val sumOddEvenSquaredSumSquareSumSquareSumSquareSumSquareSum\
    \ = sumOddEvenSquaredSumSquareSumSquareSumSquare * sumOddEvenSquaredSumSquareSumSquareSumSquareSum\n\
    \        val sumOddEvenSquaredSumSquareSumSquareSumSquareSumSquareSum = sumOddEvenSquaredSumSquareSumSquareSumSquare\
    \ * sumOddEvenSquaredSumSquareSumSquareSumSquareSum\n        val sumOddEvenSquaredSumSquareSumSquareSumSquareSumSquareSum\
    \ = sumOddEvenSquaredSumSquareSumSquareSumSquare * sumOddEvenSquaredSumSquareSumSquareSumSquareSumSquare\n\
    \        val sumOddEvenSquaredSumSquareSumSquareSumSquareSumSquareSumSquare =\
    \ sumOddEvenSquaredSumSquareSumSquareSumSquare * ", "        var sum = 0L\n  \
    \      var sumOfSquares = 0L\n        for(i <- 0 until lst.size) {\n         \
    \   sum += lst(i)\n            sumOfSquares += lst(i) * lst(i)\n        }\n  \
    \      if(sumOfSquares == 0) return 0\n        sumOfSquares -= sum * sum\n   \
    \     sumOfSquares /= lst.size\n        sumOfSquares *= sumOfSquares\n       \
    \ sumOfSquares /= lst.size\n        sumOfSquares", "        val sum = 0\n    \
    \    val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        val\
    \ evenSquare = even.map(x => x * x).sum\n        val oddSquare = odd.map(x =>\
    \ x * x).sum\n        val result = evenSum + oddSum - evenSquare - oddSquare\n\
    \        result", "        val even = lst.filter(x => x % 2 == 0)\n        val\
    \ odd = lst.filter(x => x % 2 != 0)\n        val sum = even.sum + odd.sum\n  \
    \      val squareSum = even.map(x => x * x).sum + odd.map(x => x * x).sum\n  \
    \      val squareSumOdd = even.map(x => x * x).sum + odd.map(x => x * x).sum\n\
    \        val squareSumEven = even.map(x => x * x).sum + odd.map(x => x * x).sum\n\
    \        val squareSumOddEven = even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum\n        val squareSumOddEvenOdd = even.map(x =>\
    \ x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x\
    \ => x * x).sum\n        val squareSumOddEvenOddEven = even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n    \
    \        val x = lst(i)\n            if(x % 2 == 1) {\n                sum +=\
    \ x\n            }\n        }\n        sum", "        val sum = 0\n        val\
    \ even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x => x % 2\
    \ != 0)\n        val evenSum = even.map(x => x * x).sum\n        val oddSum =\
    \ odd.map(x => x * x).sum\n        val result = evenSum + oddSum\n        result",
  "        val sum = 0L\n        for(i <- 0 until lst.size) {\n            val x =\
    \ lst(i)\n            if(x % 2 == 1) {\n                sum += x\n           \
    \ }\n        }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val f = lst(i)\n            if(f < 0 || f % 1 != 0) {\n     \
    \           sum += f\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        lst.foreach(x => if (x % 2 != 0) sum += x * x else ())\n      \
    \  sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n       \
    \     if(lst(i) % 2 != 0) {\n                sum += lst(i)\n            }\n  \
    \      }\n        sum", "        var sum = 0\n        var sumSquare = 0\n    \
    \    var odd = 0\n        var even = 0\n        var evenSquare = 0\n        var\
    \ oddSquare = 0\n        var evenSquare = 0\n        var oddSquare = 0\n     \
    \   var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare = 0\n\
    \        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n        var oddSquare\
    \ = 0\n        var evenSquare = 0\n        var oddSquare = 0\n        var evenSquare\
    \ = 0\n        var oddSquare = 0\n        var evenSquare = 0\n", "        val\
    \ sumOfSquares = lst.foldLeft(0.0f) { (sum, elem) => sum + elem*elem }\n     \
    \   sumOfSquares - (lst.filter(x => x % 2 != 0).sum * lst.filter(x => x % 2 !=\
    \ 0).sum)", "        val sum = 0L\n        val even = lst.filter(x => x % 2 ==\
    \ 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum = even.map(x\
    \ => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val result\
    \ = evenSum + oddSum\n        result", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1)\
    \ {\n                sum += x * x\n            }\n        }\n        sum", " \
    \       val sum = 0\n        for(i <- lst) {\n            val isOdd = i % 2 !=\
    \ 0\n            if(isOdd) sum += i\n        }\n        sum", "        val sum\
    \ = 0L\n        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1)\
    \ {\n                sum += lst(i)\n            }\n        }\n        return sum",
  "        val sum = 0L\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ ())\n        sum", "        val sum = 0\n        val even = lst.filter(x =>\
    \ x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val result = evenSum + oddSum\n        result", "        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            val x = lst(i)\n          \
    \  if(x % 2 == 1) {\n                sum += x * x\n            }\n        }\n\
    \        sum", "        var sum = 0L\n        var sumSquare = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            val x = lst(i)\n            if(x % 2 ==\
    \ 1) {\n                sum += x\n                sumSquare += x * x\n       \
    \     }\n        }\n        if(sumSquare == 0) {\n            return 0L\n    \
    \    }\n        return sum * sum / sumSquare", "        val sum = 0L\n       \
    \ for(i <- 0 until lst.size) {\n            val x = lst(i)\n            if(x %\
    \ 2 == 1) {\n                sum += x\n            }\n        }\n        sum",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val n =\
    \ lst(i)\n            if(n % 2 == 1) {\n                sum += n * n\n       \
    \     }\n        }\n        sum", "        val sum = 0L\n        for(i <- 0 until\
    \ lst.size) {\n            if(lst(i) %2 == 1) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        val even = lst.filter(x => x\
    \ % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val sumOdd\
    \ = even.sum\n        val sumEven = odd.sum\n        val sumOddEven = sumOdd +\
    \ sumEven\n        val sumOddOdd = sumOdd * sumOdd\n        val sumOddEvenOdd\
    \ = sumOddEven + sumOddOdd\n        val sumOddEvenOddOdd = sumOddEvenOdd * sumOddEvenOdd\n\
    \        val sumOddEvenOddEvenOdd = sumOddEvenOddOdd * sumOddEvenOddOdd\n    \
    \    val sumOddEvenOddEvenOddOdd = sumOddEvenOddEvenOddOdd * sumOddEvenOddEvenOddOdd\n\
    \        val sumOddEvenOddEvenOddEvenOdd = sumOddEvenOddEvenOddOddEvenOdd * sumOddEvenOddEvenOddEvenOdd\n\
    \        val sumOddEvenOddEvenOddEvenOddEvenOdd = sumOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ * sumOddEvenOddEvenOddEvenOddEvenOdd\n        val sumOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd * sumOddEvenOddEvenOddEvenOddEvenOddEvenOdd\n\
    \        val sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ * sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\n        val sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd * sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\n\
    \        val sumOddEvenOddEvenOddEvenO", "        val sum = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            if(lst(i) % 2 != 0) {\n                sum\
    \ += lst(i)\n            }\n        }\n        sum", "        val sum = 0\n  \
    \      lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum"]
stop_tokens:
- "\n    }\n"
