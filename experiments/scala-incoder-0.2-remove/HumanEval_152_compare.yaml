name: HumanEval_152_compare
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // I think we all remember that feeling when the result of some long-awaited\n\
  \    // event is finally known. The feelings and thoughts you have at that moment\
  \ are\n    // definitely worth noting down and comparing.\n    // Your task is to\
  \ determine if a person correctly guessed the results of a number of matches.\n\
  \    // You are given two arrays of scores and guesses of equal length, where each\
  \ index shows a match. \n    // Return an array of the same length denoting how\
  \ far off each guess was. If they have guessed correctly,\n    // the value is 0,\
  \ and if not, the value is the absolute difference between the guess and the score.\n\
  \    // example:\n    def compare(game : List[Long], guess : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
completions: ["        val guesses = guess.toList\n        val scores = game.toList\n\
    \        val guessesWithScores = guesses.zip(scores)\n        val guessesWithScoresSortedByScore\
    \ = guessesWithScores.sortBy(_._2)\n        val guessesWithScoresSortedByGuess\
    \ = guessesWithScoresSortedByScore.map(x => (x._1, x._2))\n        val guessesWithScoresSortedByGuessWithCorrect\
    \ = guessesWithScoresSortedByGuess.filter(_._1 == 0)\n        val guessesWithScoresSortedByGuessWithIncorrect\
    \ = guessesWithScoresSortedByGuess.filter(_._1 == 1)\n        val guessesWithScoresSortedByGuessWithCorrectAndIncorrect\
    \ = guessesWithScoresSortedByGuessWithCorrect ++ guessesWithScoresSortedByGuessWithIncorrect\n\
    \        val guessesWithScoresSortedByGuessWithCorrectAndCorrect = guessesWithScoresSortedByGuessWithCorrect\
    \ ++ guessesWithScoresSortedByGuessWithCorrect\n        val guessesWithScoresSortedByGuessWithCorrectAndIncorrectAndCorrect\
    \ = guessesWithScoresSortedByGuessWithCorrectAndIncorrect ++ guessesWithScoresSortedByGuessWithCorrectAndCorrect\n\
    \        val guessesWithScoresSortedByGuessWithCorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSortedByGuessWithCorrectAndIncorrectAndCorrect ++ guessesWithScoresSortedByGuessWithCorrectAndIncorrectAndIncorrect\n\
    \        val guessesWithScoresSortedByGuessWithCorrectAndIncorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSortedByGuessWithCorrectAndIncorrectAndIncorrectAndCorrect\
    \ ++ guessesWithScoresSortedByGuessWithCorrectAndIncorrectAndIncorrectAndIncorrect\n\
    \        val guessesWithScoresSortedByGuessWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSortedByGuessWithCorrectAndIncorrectAndIncorrectAndIncorrectAndCorrect\
    \ ++ guessesWithScoresSortedByGuessWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrect\n\
    \        val guessesWithScoresSortedByGuessWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSortedByGuessWithCorrectAndIncorrectAnd", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreKeys = gameScoreMap.keys\n        val guessScoreKeys = guessScoreMap.keys\n\
    \        val gameScoreValues = gameScoreMap.values.toList\n        val guessScoreValues\
    \ = guessScoreMap.values.toList\n        val gameScoreKeysSet = gameScoreKeys.toSet\n\
    \        val guessScoreKeysSet = guessScoreKeys.toSet\n        val gameScoreValuesSet\
    \ = gameScoreValues.toSet\n        val guessScoreValuesSet = guessScoreValues.toSet\n\
    \        val gameScoreKeysSetSet = gameScoreKeysSet.toSet\n        val guessScoreKeysSetSet\
    \ = guessScoreKeysSet.toSet\n        val gameScoreValuesSetSet = gameScoreValuesSet.toSet\n\
    \        val guessScoreValuesSetSet = guessScoreValuesSet.toSet\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.toSet\n        val guessScoreKeysSetSetSet = guessScoreKeysSetSet.toSet\n\
    \        val gameScoreValuesSetSetSet = gameScoreValuesSetSet.toSet\n        val\
    \ guessScoreValuesSetSetSet = guessScoreValuesSetSet.toSet\n        val gameScoreKeysSetSetSetSet\
    \ = gameScoreKeysSetSetSet.toSet\n        val guessScoreKeysSetSetSetSet = guessScoreKeysSetSetSet.toSet\n\
    \        val gameScoreValuesSetSetSetSet = gameScoreValuesSetSet.toSet\n     \
    \   val guessScoreValuesSetSetSet = guessScoreValuesSetSet.toSet\n        val\
    \ gameScoreKeysSetSetSetSetSet = gameScoreKeysSetSetSet.toSet\n        val guessScoreKeysSetSetSetSet\
    \ = guessScoreKeysSetSetSet.toSet\n        val gameScoreValuesSetSetSetSet = gameScoreValuesSetSet.toSet\n\
    \        val guessScoreValuesSetSetSet = guessScoreValuesSetSet.toSet\n      \
    \  val gameScoreKeysSetSetSetSetSet = gameScoreKeysSetSetSet.toSet\n        val\
    \ guessScoreKeysSetSetSetSet = guessScoreKeysSetSetSet.toSet\n        val gameScoreValuesSetSetSetSet",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesCorrect = guessesScores.filter(_._1\
    \ == gameScores.keys)\n        val guessesWrong = guessesScores.filter(_._1 !=\
    \ gameScores.keys)\n        val guessesDiff = guessesWrong.map { case (score,\
    \ index) => Math.abs(score - gameScores.get(score)) }\n        guessesCorrect.map\
    \ { case (score, index) => 0 }\n        ++ guessesDiff", "        val gameLen\
    \ = game.size\n        val guessLen = guess.size\n        val result = new Array[Long](guessLen)\n\
    \        var i = 0\n        while (i < guessLen) {\n            val gameScore\
    \ = game(i)\n            val guessScore = guess(i)\n            val diff = Math.abs(guessScore\
    \ - gameScore)\n            result(i) = diff\n            i += 1\n        }\n\
    \        result", '        // Your code here', "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreCount = gameScores.count\n\
    \        val guessScoreCount = guessScores.count\n        val gameScoreSum = gameScores.sum\n\
    \        val guessScoreSum = guessScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - guessScoreSum\n        val guessScoreDiff = guessScoreSum - gameScoreSum\n\
    \        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n   \
    \     val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n   \
    \     val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n      \
    \  val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n      \
    \  val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n        val\
    \ guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n        val\
    \ gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n        val guessScoreDiffPercent\
    \ = guessScoreDiff / guessScoreCount * 100\n        val gameScoreDiffPercent =\
    \ gameScoreDiff / gameScoreCount * 100\n        val guessScoreDiffPercent = guessScoreDiff\
    \ / guessScoreCount * 100\n        val gameScoreDiffPercent = gameScoreDiff /\
    \ gameScoreCount * 100\n        val guessScoreDiffPercent = guessScoreDiff / guessScoreCount\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n\
    \        val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n\
    \        val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n   \
    \     val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n   \
    \     val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n      \
    \  val guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n      \
    \  val gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n        val\
    \ guessScoreDiffPercent = guessScoreDiff / guessScoreCount * 100\n        val\
    \ gameScoreDiffPercent = gameScoreDiff / gameScoreCount * 100\n        val guessScoreDiffPercent\
    \ = guessScoreDiff / guessScoreCount * 100\n        val gameScoreDiff", "    \
    \    val gameScores = game.zipWithIndex.map{ case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map{ case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesCorrect = guessesScores.zip(gameScores).map\
    \ { case (guess, gameScore) => if (guess == gameScore) 0 else Math.abs(guess -\
    \ gameScore) }\n        guessesCorrect.toList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.sum\n \
    \       val guessScore = guessScores.sum\n        val gameDiff = gameScore - guessScore\n\
    \        val gameDiffs = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0 else Math.abs(gameDiff - guessScore)\n\
    \        }\n        gameDiffs.toList", "        // your code here\n        val\
    \ gameScores = game.zipWithIndex.map{case (score, index) => score}\n        val\
    \ guessScores = guess.zipWithIndex.map{case (score, index) => score}\n       \
    \ val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach{case (score,\
    \ index) => gameScoreList += score}\n        guessScoreMap.foreach{case (score,\
    \ index) => guessScoreList += score}\n        val gameScores = gameScoreList.toList\n\
    \        val guessScores = guessScoreList.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach{case (score, index) => gameScoreList += score}\n\
    \        guessScoreMap.foreach{case (score, index) => guessScoreList += score}\n\
    \        val gameScores = gameScoreList.toList\n        val guessScores = guessScoreList.toList\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach{case (score,\
    \ index) => gameScoreList += score}\n        guessScoreMap.foreach{case (score,\
    \ index) => guessScoreList += score}\n        val gameScores = gameScoreList.toList\n\
    \        val guessScores = guessScoreList.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach{case (score, index) => gameScoreList += score}\n\
    \        guessScoreMap.foreach{case (score, index) => guessScoreList += score}\n\
    \        val gameScores = gameScoreList.toList\n        val guessScores = guessScoreList.toList\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList", "        val gameScores = game.map(x => if (x ==\
    \ 0) 0 else x)\n        val guessScores = guess.map(x => if (x == 0) 0 else x)\n\
    \        val diffs = gameScores zip guessScores\n        diffs.map(x => if (x._1\
    \ == x._2) 0 else x._1 - x._2)", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = new mutable.ListBuffer[Long]()\n        val guessesScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) =>\n            val guess\
    \ = guessesScoreMap(index)\n            val difference = if (guess == score) 0\
    \ else abs(guess - score)\n            gameScoreList += difference\n         \
    \   guessesScoreList += difference\n        }\n        gameScoreList.take(guessesScoreList.size)",
  "        val guesses = guess.map(x => Math.abs(x - game(x)))\n        guesses.toList",
  "        val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ result: List[Long] = guesses.map(guess => {\n            val score = scores.get(guess)\n\
    \            if (score == -1L) -1L\n            else Math.abs(score - guess)\n\
    \        }).toList\n        result", "        val guesses = guess.toSet\n    \
    \    val scores = game.toSet\n        val diffs = mutable.ArrayBuffer.empty[Long]\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if(guess == None) diffs += abs(score - score)\n            else diffs\
    \ += abs(guess - score)\n        }\n        diffs.toList", "        val guesses\
    \ = guess.map(x => Math.abs(x - game))\n        val correct = game.zip(guesses).map(x\
    \ => if (x._1 == x._2) 0 else x._1 - x._2)\n        correct.toList", "       \
    \ val gameScores = game.zipWithIndex.map { case (score, index) => score -> index\
    \ }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score -> index }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexes\
    \ = guessesScores.map { case (score, index) => index -> index }.toMap\n      \
    \  val guessesWithIndexesWithScores = guessesWithIndexes.map { case (score, index)\
    \ => index -> score }.toMap\n        val guessesWithIndexesWithIndexes = guessesWithIndexes.map\
    \ { case (score, index) => index -> index }.toMap\n        val guessesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexes.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithScores = guessesWithIndexesWithIndexesWithIndexes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexes.map { case (score, index)\
    \ => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val differences = guessScores.zip(gameScores).map { case (guess, game)\
    \ => math.abs(guess - game) }\n        val difference = differences.sum\n    \
    \    differences.toList", "        val guesses = guess.toList\n        val scores\
    \ = game.toList\n        val guessesCount = guesses.size\n        val scoresCount\
    \ = scores.size\n        val result = new Array[Long](guessesCount)\n        var\
    \ i = 0\n        while (i < guessesCount) {\n            val guess = guesses(i)\n\
    \            val score = scores(i)\n            val difference = abs(guess - score)\n\
    \            result(i) = difference\n            i += 1\n        }\n        result",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessScoreSet =\
    \ guessScores.toSet\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSetMap =\
    \ gameScores.toSetMap\n        val guessScoreSetMap = guessScores.toSetMap\n \
    \       val gameScoreSetSet = gameScores.toSetSet\n        val guessScoreSetSet\
    \ = guessScores.toSetSet\n        val gameScoreSetList = gameScores.toSetList\n\
    \        val guessScoreSetList = guessScores.toSetList\n        val gameScoreSetMap\
    \ = gameScores.toSetMap\n        val guessScoreSetMap = guessScores.toSetMap\n\
    \        val gameScoreSetSetMap = gameScores.toSetSetMap\n        val guessScoreSetSetMap\
    \ = guessScores.toSetSetMap\n        val gameScoreSetSetSetMap = gameScores.toSetSetSetMap\n\
    \        val guessScoreSetSetSetMap = guessScores.toSetSetSetMap\n        val\
    \ gameScoreSetSetSetSetMap = gameScores.toSetSetSetSetMap\n        val guessScoreSetSetSetSetMap\
    \ = guessScores.toSetSetSetSetMap\n        val gameScoreSetSetSetSetSetMap = gameScores.toSetSetSetSetSetMap\n\
    \        val guessScoreSetSetSetSetSetMap = guessScores.toSetSetSetSetSetMap\n\
    \        val gameScoreSetSetSetSetSetSetMap = gameScores.toSetSetSetSetSetSetMap\n\
    \        val guessScoreSetSetSetSetSetSetMap = guessScores.toSetSetSetSetSetSetMap\n\
    \        val gameScoreSetSetSetSetSetSetSetMap = gameScores.toSetSetSetSetSetSetSetMap\n\
    \        val guessScoreSetSetSetSetSetSetSetMap = guessScores.toSetSetSetSetSetSetSetMap\n\
    \        val gameScoreSetSetSetSetSetSetSetSetMap = gameScores.toSetSetSetSetSetSetSetSetMap\n\
    \        val guessScoreSetSetSetSetSetSetSetSetMap = guessScores.toSetSetSetSetSetSetSetSetMap\n\
    \        val game", "        val guessesWithScore = game.zip(guess)\n        val\
    \ guessesWithScoreSortedByScore = guessesWithScore.sortBy(_._1)\n        val guessesWithScoreSortedByGuess\
    \ = guessesWithScore.sortBy(_._2)\n        val guessesWithScoreSortedByGuess =\
    \ guessesWithScoreSortedByGuess.map(_._1 - _._2)\n        val guessesWithScoreSortedByGuess\
    \ = guessesWithScoreSortedByGuess.filter(_ > 0)\n        val guessesWithScoreSortedByGuess\
    \ = guessesWithScoreSortedByGuess.map(_ / guessesWithScoreSortedByGuess.size)\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(_\
    \ / guessesWithScoreSortedByGuess.size)\n        val guessesWithScoreSortedByGuess\
    \ = guessesWithScoreSortedByGuess.filter(_ > 0)\n        val guessesWithScoreSortedByGuess\
    \ = guessesWithScoreSortedByGuess.map(_ / guessesWithScoreSortedByGuess.size)\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(_\
    \ / guessesWithScoreSortedByGuess.size)\n        val guessesWithScoreSortedByGuess\
    \ = guessesWithScoreSortedByGuess.filter(_ > 0)\n        val guessesWithScoreSortedByGuess\
    \ = guessesWithScoreSortedByGuess.map(_ / guessesWithScoreSortedByGuess.size)\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(_\
    \ / guessesWithScoreSortedByGuess.size)\n        val guessesWithScoreSortedByGuess\
    \ = guessesWithScoreSortedByGuess.filter(_ > 0)\n        val guessesWithScoreSortedByGuess\
    \ = guessesWithScoreSortedByGuess.map(_ / guessesWithScoreSortedByGuess.size)\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWith", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val gameScoreMap = gameScores.toSeq.sortBy(_._1).reverse.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessScoreMap =\
    \ guessScores.toSeq.sortBy(_._1).reverse.map { case (score, index) => index ->\
    \ score }.toMap\n        val gameScoreArray = gameScoreMap.values\n        val\
    \ guessScoreArray = guessScoreMap.values\n        val gameScoreArrayLength = gameScoreArray.length\n\
    \        val guessScoreArrayLength = guessScoreArray.length\n        val gameScoreArrayCopy\
    \ = gameScoreArray.clone()\n        val guessScoreArrayCopy = guessScoreArray.clone()\n\
    \        val gameScoreArrayCopyLength = gameScoreArrayCopy.length\n        val\
    \ guessScoreArrayCopyLength = guessScoreArrayCopy.length\n        val gameScoreArrayCopyLength\
    \ = gameScoreArrayCopyLength\n        val guessScoreArrayCopyLength = guessScoreArrayCopyLength\n\
    \        val gameScoreArrayCopyLength = gameScoreArrayCopyLength\n        val\
    \ guessScoreArrayCopyLength = guessScoreArrayCopyLength\n        val gameScoreArrayCopyLength\
    \ = gameScoreArrayCopyLength\n        val guessScoreArrayCopyLength = guessScoreArrayCopyLength\n\
    \        val gameScoreArrayCopyLength = gameScoreArrayCopyLength\n        val\
    \ guessScoreArrayCopyLength = guessScoreArrayCopyLength\n        val gameScoreArrayCopyLength\
    \ = gameScoreArrayCopyLength\n        val guessScoreArrayCopyLength = guessScoreArrayCopyLength\n\
    \        val gameScoreArrayCopyLength = gameScoreArrayCopyLength\n        val\
    \ guessScoreArrayCopyLength = guessScoreArrayCopyLength\n        val gameScoreArrayCopyLength\
    \ = gameScoreArrayCopyLength\n        val guessScoreArrayCopyLength = guessScoreArrayCopyLength\n\
    \        val gameScoreArrayCopyLength = gameScoreArrayCopyLength\n        val\
    \ guessScoreArrayCopyLength = guessScoreArrayCopyLength\n        val gameScoreArrayCopyLength\
    \ = gameScoreArrayCopyLength\n        val guessScoreArrayCopyLength = guessScoreArrayCopyLength\n\
    \        val gameScoreArrayCopyLength = gameScoreArrayCopyLength\n        val\
    \ guessScoreArrayCopyLength = guessScoreArrayCopyLength\n        val gameScoreArrayCopyLength\
    \ = gameScoreArrayCopyLength\n        val guessScoreArrayCopyLength = guessScoreArrayCopyLength\n\
    \        val gameScoreArrayCopyLength = gameScoreArrayCopyLength\n        val\
    \ guessScoreArrayCopy", "        val gameScores = game.zipWithIndex.map{case (score,\
    \ index) => score}\n        val guessScores = guess.zipWithIndex.map{case (score,\
    \ index) => score}\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n     \
    \   val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}\n        val gameScoreMap = gameScores.toMap\n    \
    \    val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}\n        val gameScoreMap = gameScores.toMap\n    \
    \    val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}\n        val gameScoreMap = gameScores.toMap\n    \
    \    val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}\n        val gameScoreMap = gameScores.toMap\n    \
    \    val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}\n        val gameScoreMap = gameScores.toMap\n    \
    \    val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}\n        val guessScores = guessScoreList.map", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n     \
    \   val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreKeySetSize\
    \ = gameScore", "        val guesses = guess.toList\n        val scores = game.toList\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n    \
    \    while(i < guessesCount) {\n            val guess = guesses(i)\n         \
    \   val score = scores(i)\n            val diff = Math.abs(guess - score)\n  \
    \          result.add(diff)\n            i += 1\n        }\n        return result.toList",
  "        val gameSet = game.distinct\n        val guessSet = guess.distinct\n  \
    \      val result = gameSet.zip(guessSet).map { case (game, guess) => Math.abs(guess\
    \ - game) }\n        result.toList", "        val gameScores = game.zipWithIndex.map{\
    \ case (score, index) => score }.toList\n        val guessScores = guess.zipWithIndex.map{\
    \ case (score, index) => score }.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMap2 = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap2 = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMap3 = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap3 = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMap4 = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap4 = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMap5 = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap5 = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMap6 = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap6 = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMap7 = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap7 = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMap8 = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap8 = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMap9 = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap9 = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMap10 = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap10 = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMap11 = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap11 = guess", '        // Your code here', "        val\
    \ gameScores = game.map(x => if (x == -1) 0 else x)\n        val guessScores =\
    \ guess.map(x => if (x == -1) 0 else x)\n        val diffs = gameScores zip guessScores\n\
    \        val diffsSorted = diffs.sortBy(_._1).reverse\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffsSortedWithZeros\
    \ = diffsSorted.map(x => (x._1 - x._2, x._2))\n        val diffs", "        val\
    \ gameScores = game.zipWithIndex.map{case (score, index) => score}\n        val\
    \ guessesScores = guess.zipWithIndex.map{case (score, index) => score}\n     \
    \   val guessesDiff = guessesScores.zip(gameScores).map{case (guess, score) =>\
    \ Math.abs(guess - score)}\n        guessesDiff.map{case (guess, score) => if\
    \ (guess == score) 0 else Math.abs(guess - score)}", "        // TODO: Implement\
    \ this function\n        val game = game.sorted\n        val guess = guess.sorted\n\
    \        val diffs = mutable.ArrayBuffer.empty[Long]\n        val gameSize = game.size\n\
    \        val guessSize = guess.size\n        val gameIndex = 0\n        val guessIndex\
    \ = 0\n        while (gameIndex < gameSize && guessIndex < guessSize) {\n    \
    \        if (game(gameIndex) == guess(guessIndex)) {\n                diffs +=\
    \ abs(game(gameIndex) - guess(guessIndex))\n                gameIndex += 1\n \
    \               guessIndex += 1\n            } else if (game(gameIndex) < guess(guessIndex))\
    \ {\n                gameIndex += 1\n            } else {\n                guessIndex\
    \ += 1\n            }\n        }\n        diffs", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, score) => (guess - score) }\n        guessesDiff.zipWithIndex.map\
    \ { case (guess, index) => (if (guess == 0) 0 else abs(guess - game(index)) )\
    \ }", "        val gameScores = game.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val guessScores = guess.zipWithIndex.map { case (score, index)\
    \ => score }\n        val differences = gameScores zip guessScores\n        differences.map\
    \ { case (guess, score) =>\n            if (guess == score) 0 else Math.abs(guess\
    \ - score)\n        }", "        val guesses = guess.toList\n        val scores\
    \ = game.toList\n        val result = guesses.zip(scores).map { case (guess, score)\
    \ =>\n            if (guess == score) {\n                0\n            } else\
    \ {\n                Math.abs(guess - score)\n            }\n        }\n     \
    \   result.toList", "        val gameScores = game.map(x => if (x == 0) 0 else\
    \ x)\n        val guessScores = guess.map(x => if (x == 0) 0 else x)\n       \
    \ val diffs = guessScores.zip(gameScores).map(x => if (x._1 == x._2) 0 else abs(x._1\
    \ - x._2))\n        diffs.toList", "        val guesses = guess.toList\n     \
    \   val scores = game.toList\n        val guessesCount = guesses.size\n      \
    \  val scoresCount = scores.size\n        val result = new Array[Long](guessesCount)\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val diff = Math.abs(guess\
    \ - score)\n            result(i) = diff\n            i += 1\n        }\n    \
    \    result", "        val gameScores = game.zipWithIndex.map{ case (score, index)\
    \ => score }.toList\n        val guessesScores = guess.zipWithIndex.map{ case\
    \ (score, index) => score }.toList\n        val gameScore = gameScores.sum\n \
    \       val guessesScore = guessesScores.sum\n        val diffs = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        diffs.toList", " \
    \       val gameScores = game.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val guessScores = guess.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val diffs = guessScores.zip(gameScores).map{case (guess, game) => math.abs(guess\
    \ - game)}\n        diffs.toList", "        val guesses = guess.toList\n     \
    \   val scores = game.toList\n        val guessesCount = guesses.size\n      \
    \  val scoresCount = scores.size\n        val result = new Array[Long](guessesCount)\n\
    \        var i = 0\n        while (i < guessesCount) {\n            var j = 0\n\
    \            while (j < scoresCount) {\n                if (guesses(i) == scores(j))\
    \ {\n                    result(i) = guesses(i) - scores(j)\n                \
    \    j++\n                }\n                else {\n                    result(i)\
    \ = abs(guesses(i) - scores(j))\n                }\n                j++\n    \
    \        }\n            i++\n        }\n        result", "        val guessesCount\
    \ = guess.size\n        val gameCount = game.size\n        val result = new Array[Long](guessesCount)\n\
    \        val gameScores = game.zipWithIndex.map(_._2)\n        val guessesScores\
    \ = guess.zipWithIndex.map(_._2)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        guessesScoreMap.foreach\
    \ {\n            case (guess, score) =>\n                val gameScore = gameScoreMap.get(guess)\n\
    \                if (gameScore == score) {\n                    result(0)\n  \
    \              } else {\n                    val diff = abs(gameScore - score)\n\
    \                    result(diff)\n                }\n        }\n        result",
  "        val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val result = new Array[Long](guessesCount)\n        var i = 0\n        while\
    \ (i < guessesCount) {\n            val guess = guesses(i)\n            val score\
    \ = scores(i)\n            val difference = guess - score\n            result(i)\
    \ = difference\n            i += 1\n        }\n        result", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreKeys = gameScoreMap.keys\n        val guessScoreKeys = guessScoreMap.keys\n\
    \        val gameScoreValues = gameScoreMap.values.toList\n        val guessScoreValues\
    \ = guessScoreMap.values.toList\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = ", "        val\
    \ gameScores = game.map(x => if (x == 0) 0 else x)\n        val guessScores =\
    \ guess.map(x => if (x == 0) 0 else x)\n        val diffs = gameScores zip guessScores\n\
    \        diffs.map(x => if (x._1 == 0) 0 else x._1 - x._2)", "        val gameScores\
    \ = game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessesScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val diffs\
    \ = guessesScores.zip(gameScores).map{case (guess, game) => math.abs(guess - game)}\n\
    \        diffs.toList", "        val guessesWithScore = game.zip(guess)\n    \
    \    val guessesWithScoreSortedByScore = guessesWithScore.sortBy(_._1)\n     \
    \   val guessesWithScoreSortedByGuess = guessesWithScore.sortBy(_._2)\n      \
    \  val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x =>\
    \ (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.to",
  "        val guesses = guess.map(x => abs(x - game))\n        val correct = guesses.filter(x\
    \ => x == 0)\n        val wrong = guesses.filter(x => x != 0)\n        correct.toList\
    \ ++ wrong.toList", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score -> index }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val game", "        val guesses = guess.toSet\n        val scores = game.toSet\n\
    \        val result: List[Long] = guesses.map(x => if (scores.contains(x)) 0 else\
    \ abs(x - scores.head))\n        result", "        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val result = guesses.zip(scores).map\
    \ {\n            case (guess, score) => if (guess == score) 0 else abs(guess -\
    \ score)\n        }\n        result.toList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => guess - game }\n        guessesDiff.map { case (guess,\
    \ game) => guess }", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScore = gameScores.sum\n        val guessScore\
    \ = guessScores.sum\n        val diffs = guessScores.zip(gameScores).map { case\
    \ (guess, game) => math.abs(guess - game) }\n        diffs.toList", "        val\
    \ guesses = guess.toList\n        val scores = game.toList\n        val guessesWithScores\
    \ = guesses.zip(scores)\n        val guessesWithScoresSorted = guessesWithScores.sortBy(_._1).reverse\n\
    \        val guessesWithScoresSortedWithCorrect = guessesWithScoresSorted.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedWithIncorrect = guessesWithScoresSorted.filter(_._2\
    \ != 0)\n        val guessesWithScoresSortedWithCorrectAndIncorrect = guessesWithScoresSorted.filter(_._2\
    \ == 0 && _._2 != 0)\n        val guessesWithScoresSortedWithCorrectAndCorrect\
    \ = guessesWithScoresSorted.filter(_._2 == 0 && _._2 == 0)\n        val guessesWithScoresSortedWithCorrectAndIncorrectAndCorrect\
    \ = guessesWithScoresSorted.filter(_._2 == 0 && _._2 != 0 && _._2 == 0)\n    \
    \    val guessesWithScoresSortedWithCorrectAndIncorrectAndIncorrect = guessesWithScoresSorted.filter(_._2\
    \ == 0 && _._2 != 0 && _._2 != 0)\n        val guessesWithScoresSortedWithCorrectAndCorrectAndIncorrect\
    \ = guessesWithScoresSorted.filter(_._2 == 0 && _._2 != 0 && _._2 == 0 && _._2\
    \ != 0)\n        val guessesWithScoresSortedWithCorrectAndCorrectAndCorrectAndIncorrect\
    \ = guessesWithScoresSorted.filter(_._2 == 0 && _._2 != 0 && _._2 == 0 && _._2\
    \ != 0 && _._2 != 0)\n        val guessesWithScoresSortedWithCorrectAndCorrectAndIncorrectAndCorrect\
    \ = guessesWithScoresSorted.filter(_._2 == 0 && _._2 != 0 && _._2 == 0 && _._2\
    \ != 0 && _._2 != 0 && _._2 == 0)\n        val guessesWithScoresSortedWithCorrectAndCorrectAndIncorrectAndIncorrectAndCorrect\
    \ = guessesWithScoresSorted.filter(_._2 == 0 && _._2 != 0 && _._2 == 0 && _._2\
    \ != 0 && _._2 != 0 && _._2 != 0 && _._2 == 0 && _._2 != 0)\n        val guessesWithScoresSortedWithCorrectAndCorrectAndCorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSorted.filter(_._2 == 0 && _._2 != 0 && _._2 == 0 && _._2\
    \ != 0 && _._2 != 0 && _._2 != 0 && ", "        val scores : List[Long] = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guesses : List[Long] = guess.zipWithIndex.map\
    \ { case (guess, index) => guess }\n        val guessesWithScores : List[(Long,\
    \ Long)] = guesses.zipWithIndex.map { case (guess, index) => (guess, scores(index))\
    \ }\n        val guessesWithScoresWithIndices : List[(Long, Long, Int)] = guessesWithScores.zipWithIndex.map\
    \ { case (guess, score, index) => (guess, score, index) }\n        val guessesWithScoresWithIndicesAndIndices\
    \ : List[(Long, Long, Int, Int)] = guessesWithScoresWithIndices.zipWithIndex.map\
    \ { case (guess, score, index, index2) => (guess, score, index, index2) }\n  \
    \      val guessesWithScoresWithIndicesAndIndicesAndIndices : List[(Long, Long,\
    \ Int, Int, Int)] = guessesWithScoresWithIndicesAndIndices.zipWithIndex.map {\
    \ case (guess, score, index, index2, index3) => (guess, score, index, index2,\
    \ index3) }\n        val guessesWithScoresWithIndicesAndIndicesAndIndicesAndIndices\
    \ : List[(Long, Long, Int, Int, Int, Int)] = guessesWithScoresWithIndicesAndIndicesAndIndices.zipWithIndex.map\
    \ { case (guess, score, index, index2, index3, index4) => (guess, score, index,\
    \ index2, index3, index4) }\n        val guessesWithScoresWithIndicesAndIndicesAndIndicesAndIndicesAndIndicesAndIndices\
    \ : List[(Long, Long, Int, Int, Int, Int, Int)] = guessesWithScoresWithIndicesAndIndicesAndIndicesAndIndices.zipWithIndex.map\
    \ { case (guess, score, index, index2, index3, index4, index5) => (guess, score,\
    \ index, index2, index3, index4, index5) }\n        val guessesWithScoresWithIndicesAndIndicesAndIndicesAndIndicesAndIndicesAndIndicesAndIndices\
    \ : List[(Long, Long, Int, Int, Int, Int, Int, Int)] = guessesWithScoresWithIndicesAndIndicesAndIndicesAndIndicesAndIndices.zipWithIndex.map\
    \ { case (guess, score, index, index2, index3, index4, index5, index6) => (guess,\
    \ score, index, index2, index3, index4, index5, index6) }\n        val guessesWithScoresWithIndicesAndIndicesAndIndicesAndIndices",
  "        val gameScores = game.zipWithIndex.map{ case (score, index) => score }.toList\n\
    \        val guessScores = guess.zipWithIndex.map{ case (score, index) => score\
    \ }.toList\n        val gameScoreMap = gameScores.zipWithIndex.map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessScoreMap = guessScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toList\n        val guessScoreList =\
    \ guessScores.zipWithIndex.map{ case (score, index) => index -> score }.toList\n\
    \        val gameScoreSet = gameScores.zipWithIndex.map{ case (score, index) =>\
    \ index -> score }.toSet\n        val guessScoreSet = guessScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toSet\n        val gameScoreMap = gameScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val guessScoreMap = guessScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toList\n        val guessScoreList =\
    \ guessScores.zipWithIndex.map{ case (score, index) => index -> score }.toList\n\
    \        val gameScoreSet = gameScores.zipWithIndex.map{ case (score, index) =>\
    \ index -> score }.toSet\n        val guessScoreSet = guessScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toSet\n        val gameScoreMap = gameScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val guessScoreMap = guessScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toList\n        val guessScoreList =\
    \ guessScores.zipWithIndex.map{ case (score, index) => index -> score }.toList\n\
    \        val gameScoreSet = gameScores.zipWithIndex.map{ case (score, index) =>\
    \ index -> score }.toSet\n        val guessScoreSet = guessScores.zipWithIndex.map{\
    \ case (score, index) => ", "        val gameSet = game.distinct\n        val\
    \ guessSet = guess.distinct\n        val gameSetSize = gameSet.size\n        val\
    \ guessSetSize = guessSet.size\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSet", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.sum\n \
    \       val guessScore = guessScores.sum\n        val differences = guessScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        differences.toList",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = ", "        val gameScores = game.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score }\n        val gameScoreCount = gameScores.count\n        val guessesScoreCount\
    \ = guessesScores.count\n        val gameScoreDiff = gameScoreCount - guessesScoreCount\n\
    \        val guessesScoreDiff = guessesScoreCount - gameScoreCount\n        val\
    \ gameScoreDiffList = gameScoreDiff.toList.map(x => gameScoreDiff.minus(x))\n\
    \        val guessesScoreDiffList = guessesScoreDiff.toList.map(x => guessesScoreDiff.minus(x))\n\
    \        val gameScoreDiffSum = gameScoreDiffList.sum\n        val guessesScoreDiffSum\
    \ = guessesScoreDiffList.sum\n        val gameScoreDiffSumAbs = gameScoreDiffSum.abs\n\
    \        val guessesScoreDiffSumAbs = guessesScoreDiffSum.abs\n        val gameScoreDiffSumAbsArray\
    \ = gameScoreDiffSumAbs.toArray\n        val guessesScoreDiffSumAbsArray = guessesScoreDiffSumAbs.toArray\n\
    \        val gameScoreDiffSumAbsArrayLength = gameScoreDiffSumAbsArray.length\n\
    \        val guessesScoreDiffSumAbsArrayLength = guessesScoreDiffSumAbsArray.length\n\
    \        val gameScoreDiffSumAbsArrayLength = gameScoreDiffSumAbsArrayLength\n\
    \        val guessesScoreDiffSumAbsArrayLength = guessesScoreDiffSumAbsArrayLength\n\
    \        val gameScoreDiffSumAbsArrayLength = gameScoreDiffSumAbsArrayLength\n\
    \        val guessesScoreDiffSumAbsArrayLength = guessesScoreDiffSumAbsArrayLength\n\
    \        val gameScoreDiffSumAbsArrayLength = gameScoreDiffSumAbsArrayLength\n\
    \        val guessesScoreDiffSumAbsArrayLength = guessesScoreDiffSumAbsArrayLength\n\
    \        val gameScoreDiffSumAbsArrayLength = gameScoreDiffSumAbsArrayLength\n\
    \        val guessesScoreDiffSumAbsArrayLength = guessesScoreDiffSumAbsArrayLength\n\
    \        val gameScoreDiffSumAbsArrayLength = gameScoreDiffSumAbsArrayLength\n\
    \        val guessesScoreDiffSumAbsArrayLength = guessesScoreDiffSumAbsArrayLength\n\
    \        val gameScoreDiffSumAbsArrayLength = gameScoreDiffSumAbsArrayLength\n\
    \        val guessesScoreDiffSumAbsArrayLength = ", "        val gameScores =\
    \ game.map(x => if (x == 0) 0 else x)\n        val guessScores = guess.map(x =>\
    \ if (x == 0) 0 else x)\n        val gameScore = gameScores.sum\n        val guessScore\
    \ = guessScores.sum\n        val diffs = guessScores.zip(gameScores).map(x =>\
    \ if (x._1 == 0) 0 else x._1 - x._2)\n        diffs.toList", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet\
    \ = guessesScores.toSet\n        val gameScoreList = gameScores.toList\n     \
    \   val guessesScoreList = guessesScores.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreSetMap\
    \ = gameScores.toMap.toSet\n        val guessesScoreSetMap = guessesScores.toMap.toSet\n\
    \        val gameScoreSetMapList = gameScores.toMap.toList.toSet\n        val\
    \ guessesScoreSetMapList = guessesScores.toMap.toList.toSet\n        val gameScoreSetMapMap\
    \ = gameScores.toMap.toMap.toSet\n        val guessesScoreSetMapMap = guessesScores.toMap.toMap.toSet\n\
    \        val gameScoreSetMapMapList = gameScores.toMap.toMap.toList.toSet\n  \
    \      val guessesScoreSetMapMapList = guessesScores.toMap.toMap.toList.toSet\n\
    \        val gameScoreSetMapMapMap = gameScores.toMap.toMap.toMap.toSet\n    \
    \    val guessesScoreSetMapMapMap = guessesScores.toMap.toMap.toMap.toSet\n  \
    \      val gameScoreSetMapMapMapList = gameScores.toMap.toMap.toMap.toList.toSet\n\
    \        val guessesScoreSetMapMapMapList = guessesScores.toMap.toMap.toMap.toList.toSet\n\
    \        val gameScoreSetMapMapMapMap = gameScores.toMap.toMap.toMap.toMap.toSet\n\
    \        val guessesScoreSetMapMapMapMap = guessesScores.toMap.toMap.toMap.toMap.toSet\n\
    \        val gameScoreSetMapMapMapMapList = gameScores.toMap.toMap.toMap.toMap.toList.toSet\n\
    \        val guessesScoreSetMapMapMapMapList = guessesScores.toMap.toMap.toMap.toMap.toList.toSet\n\
    \        val gameScoreSetMapMapMapMapMap = gameScores.toMap.toMap.toMap.toMap.toMap.toSet\n\
    \        val guessesScoreSetMapMapMapMapMapList = guessesScores.toMap.toMap.toMap.toMap.toList.toSet\n\
    \        ", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        guessesDiff.toList",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessesDiff = guessesScores.zip(gameScores).map { case (guess,\
    \ gameScore) => math.abs(guess - gameScore) }\n        guessesDiff.toList", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.map(x => math.abs(x\
    \ - _))\n        val guessesScores = guess.map(x => math.abs(x - _))\n       \
    \ val guessesCorrect = guessesScores.zip(gameScores).filter(_._1 == 0).map(_._2)\n\
    \        val guessesWrong = guessesScores.zip(gameScores).filter(_._1 == 0).map(_._1)\n\
    \        guessesCorrect ++ guessesWrong", "        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val diffs = guesses.map { guess =>\n\
    \            val score = scores.get(guess)\n            if (score == null) 0 else\
    \ abs(guess - score)\n        }\n        diffs.toList", "        val guesses =\
    \ guess.toSet\n        val scores = game.toSet\n        val guessesWithScore =\
    \ guesses.map(x => (x, scores(x)))\n        val guessesWithScoreSortedByScore\
    \ = guessesWithScore.sortBy(_._2)\n        val guessesWithScoreSortedByScoreReversed\
    \ = guessesWithScoreSortedByScore.reverse\n        val guessesWithScoreSortedByScoreReversedWithCorrect\
    \ = guessesWithScoreSortedByScoreReversed.filter(_._1 == 0)\n        val guessesWithScoreSortedByScoreReversedWithCorrectReversed\
    \ = guessesWithScoreSortedByScoreReversedWithCorrect.map(x => x._1)\n        val\
    \ guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScore = guessesWithScoreSortedByScoreReversedWithCorrectReversed.sortBy(_._2)\n\
    \        val guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScoreReversed\
    \ = guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScoreReversedWithCorrect\
    \ = guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScoreReversed.filter(_._1\
    \ == 0)\n        val guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScoreReversedWithCorrectReversed\
    \ = guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScoreReversedWithCorrect.map(x\
    \ => x._1)\n        val guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScoreReversedWithCorrectReversedSortedByScore\
    \ = guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScoreReversedWithCorrectReversed.sortBy(_._2)\n\
    \        val guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScoreReversedWithCorrectReversedSortedByScoreReversed\
    \ = guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScoreReversedWithCorrectReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScoreReversedWithCorrectReversedSortedByScoreReversedWithCorrect\
    \ = guessesWithScoreSortedByScoreReversedWithCorrectReversedSortedByScoreReversedWithCorrectReversedSortedByScoreReversedWithCorrect.map(x\
    \ => x._1)\n        val guessesWithScoreSortedByScoreReversedWithCorrectReversed",
  "        val scores : List[Long] = game.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val guesses : List[Long] = guess.zipWithIndex.map { case (guess,\
    \ index) => guess }\n        val guessesCorrect : List[Long] = guesses.filter(x\
    \ => x == game(index))\n        val guessesIncorrect : List[Long] = guesses.filter(x\
    \ => x != game(index))\n        val guessesCorrect : Long = guessesCorrect.length\n\
    \        val guessesIncorrect : Long = guessesIncorrect.length\n        val guessesCorrect\
    \ : Long = guessesCorrect.length\n        val guessesIncorrect : Long = guessesIncorrect.length\n\
    \        val guessesCorrect : Long = guessesCorrect.length\n        val guessesIncorrect\
    \ : Long = guessesIncorrect.length\n        val guessesCorrect : Long = guessesCorrect.length\n\
    \        val guessesIncorrect : Long = guessesIncorrect.length\n        val guessesCorrect\
    \ : Long = guessesCorrect.length\n        val guessesIncorrect : Long = guessesIncorrect.length\n\
    \        val guessesCorrect : Long = guessesCorrect.length\n        val guessesIncorrect\
    \ : Long = guessesIncorrect.length\n        val guessesCorrect : Long = guessesCorrect.length\n\
    \        val guessesIncorrect : Long = guessesIncorrect.length\n        val guessesCorrect\
    \ : Long = guessesCorrect.length\n        val guessesIncorrect : Long = guessesIncorrect.length\n\
    \        val guessesCorrect : Long = guessesCorrect.length\n        val guessesIncorrect\
    \ : Long = guessesIncorrect.length\n        val guessesCorrect : Long = guessesCorrect.length\n\
    \        val guessesIncorrect : Long = guessesIncorrect.length\n        val guessesCorrect\
    \ : Long = guessesCorrect.length\n        val guessesIncorrect : Long = guessesIncorrect.length\n\
    \        val guessesCorrect : Long = guessesCorrect.length\n        val guessesIncorrect\
    \ : Long = guessesIncorrect.length\n        val guessesCorrect : Long = guessesCorrect.length\n\
    \        val guessesIncorrect : Long = guessesIncorrect.length\n        val guessesCorrect\
    \ : Long = guessesCorrect.length\n        val guessesIncorrect : Long = guessesIncorrect.length\n\
    \        val guessesCorre", "        val gameScores = game.zipWithIndex.map {\
    \ case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val diffs = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        diffs.toList", " \
    \       val guesses = guess.toList\n        val scores = game.toList\n       \
    \ val result = guesses.zip(scores).map { case (guess, score) =>\n            if\
    \ (guess == score) 0\n            else Math.abs(guess - score)\n        }\n  \
    \      result.toList", "        val guesses = guess.toList\n        val scores\
    \ = game.toList\n        val result = guesses.zip(scores).map {\n            case\
    \ (guess, score) => (guess - score)\n        }\n        result", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val diffs = guessScores.zip(gameScores).map { case (guess, game) => math.abs(guess\
    \ - game) }\n        diffs.toList", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val diffs = gameScores diff guessScores\n\
    \        diffs.zipWithIndex.map{case (diff, index) => diff}.toList", "       \
    \ val guessesWithScore = game.zip(guess)\n        val guessesWithScoreSortedByScore\
    \ = guessesWithScore.sortBy(_._1)\n        val guessesWithScoreSortedByGuess =\
    \ guessesWithScore.sortBy(_._2)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.toList\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.to",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index }.toMap\n \
    \       val guessesWithScoreAndIndex = guess.zip(game).map { case (guess, score)\
    \ => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndGuess = guess.zip(game).map\
    \ { case (guess, score, index, guess) => guess -> score -> index -> score -> guess\
    \ }.toMap\n        val guessesWithScoreAndIndexAndScoreAndGuessAndGuess = guess.zip(game).map\
    \ { case (guess, score, index, guess) => guess -> score -> index -> score -> guess\
    \ -> guess }.toMap\n        val guessesWithScoreAndIndexAndScoreAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score, index, guess) => guess -> score\
    \ -> index -> score -> guess -> guess -> guess }.toMap\n        val guessesWithScoreAndIndexAndScoreAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score, index, guess) => guess -> score\
    \ -> index -> score -> guess -> guess -> guess -> guess }.toMap\n        val guessesWithScoreAndIndexAndScoreAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score, index, guess) => guess -> score\
    \ -> index -> score -> guess -> guess -> guess -> guess -> guess }.toMap\n   \
    \     val guessesWithScoreAndIndexAndScoreAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score, index, guess) => guess -> score\
    \ -> index -> score -> guess -> guess -> guess -> guess -> guess -> guess -> guess\
    \ }.toMap\n        val guessesWithScoreAndIndexAndScoreAndGuess", "        val\
    \ gameScores = game.zipWithIndex.map { case (score, index) => score }\n      \
    \  val guessScores = guess.zipWithIndex.map { case (score, index) => score }\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreKeys = gameScoreMap.keys\n        val guessScoreKeys = guessScoreMap.keys\n\
    \        val gameScoreValues = gameScoreMap.values\n        val guessScoreValues\
    \ = guessScoreMap.values\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        ", "        val guesses = guess.toList\n   \
    \     val scores = game.toList\n        val guessesCount = guesses.size\n    \
    \    val scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemainingIndex = guessesRemaining - 1\n\
    \        val scoresRemainingIndex = scoresRemaining - 1\n        val guessesRemainingScore\
    \ = scores.get(guessesRemainingIndex)\n        val scoresRemainingScore = scores.get(scoresRemainingIndex)\n\
    \        val guessesRemainingGuess = guesses.get(guessesRemainingIndex)\n    \
    \    val scoresRemainingGuess = guesses.get(scoresRemainingIndex)\n        val\
    \ guessesRemainingGuessIndex = guessesRemainingIndex - 1\n        val scoresRemainingGuessIndex\
    \ = scoresRemainingIndex - 1\n        val guessesRemainingGuessScore = scores.get(guessesRemainingGuessIndex)\n\
    \        val scoresRemainingGuessScore = scores.get(scoresRemainingGuessIndex)\n\
    \        val guessesRemainingGuessGuess = guesses.get(guessesRemainingGuessIndex)\n\
    \        val scoresRemainingGuessGuess = guesses.get(scoresRemainingGuessIndex)\n\
    \        val guessesRemainingGuessGuessIndex = guessesRemainingGuessIndex - 1\n\
    \        val scoresRemainingGuessGuessIndex = scoresRemainingGuessIndex - 1\n\
    \        val guessesRemainingGuessGuessScore = scores.get(guessesRemainingGuessGuessIndex)\n\
    \        val scoresRemainingGuessGuessScore = scores.get(scoresRemainingGuessGuessIndex)\n\
    \        val guessesRemainingGuessGuessGuess = guesses.get(guessesRemainingGuessGuessIndex)\n\
    \        val scoresRemainingGuessGuessGuess = guesses.get(scoresRemainingGuessGuessIndex)\n\
    \        val guessesRemainingGuessGuessGuessIndex = guessesRemainingGuessGuessIndex\
    \ - 1\n        val scoresRemainingGuessGuessGuessIndex = scoresRemainingGuessGuessGuessIndex\
    \ - 1\n        val guessesRemainingGuessGuessGuessScore = scores.get(guessesRemainingGuessGuessGuessIndex)\n\
    \        val scoresRemainingGuessGuessGuessScore = scores.get(scoresRemainingGuessGuessGuessIndex)\n\
    \        val guessesRemainingGuessGuessGuess", "        val guessesCount = guess.size\n\
    \        val gameCount = game.size\n        val result = new Array[Long](guessesCount)\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guess(i)\n            val game = game(i)\n            val diff = abs(guess\
    \ - game)\n            result(i) = diff\n            i += 1\n        }\n     \
    \   result", "        val guesses = guess.toList\n        val scores = game.toList\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val guessesToScores = guesses.zip(scores)\n        val scoresToGuesses\
    \ = scores.zip(guesses)\n        val guessesToGuesses = guesses.zip(guesses)\n\
    \        val guessesToGuessesCount = guessesToGuesses.size\n        val scoresToGuessesCount\
    \ = scoresToGuesses.size\n        val guessesToGuessesToScores = guessesToGuesses.zip(scoresToGuesses)\n\
    \        val scoresToGuessesToGuesses = scoresToGuesses.zip(guessesToGuesses)\n\
    \        val guessesToGuessesToGuessesCount = guessesToGuessesToScores.size\n\
    \        val scoresToGuessesToGuessesCount = scoresToGuessesToGuesses.size\n \
    \       val guessesToGuessesToGuessesToScores = guessesToGuessesToGuesses.zip(scoresToGuessesToGuesses)\n\
    \        val scoresToGuessesToGuessesToGuesses = scoresToGuessesToGuesses.zip(guessesToGuessesToGuesses)\n\
    \        val guessesToGuessesToGuessesToGuessesCount = guessesToGuessesToGuessesToScores.size\n\
    \        val scoresToGuessesToGuessesToGuessesCount = scoresToGuessesToGuessesToGuesses.size\n\
    \        val guessesToGuessesToGuessesToGuessesToScores = guessesToGuessesToGuessesToGuesses.zip(scoresToGuessesToGuessesToGuesses)\n\
    \        val scoresToGuessesToGuessesToGuessesToGuessesCount = scoresToGuessesToGuessesToGuessesToGuesses.size\n\
    \        val guessesToGuessesToGuessesToGuessesToGuessesCount = guessesToGuessesToGuessesToGuessesToScores.size\n\
    \        val guessesToGuessesToGuessesToGuessesToGuessesToScores = guessesToGuessesToGuessesToGuesses",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessScoreSet = guessScoreList.distinct\n\
    \        val gameScoreList = gameScoreSet.map { score => gameScoreMap.getOrElse(score,0)\
    \ }\n        val guessScoreList = guessScoreSet.map { score => guessScoreMap.getOrElse(score,0)\
    \ }\n        val gameScoreList = gameScoreList.sortBy(-_)\n        val guessScoreList\
    \ = guessScoreList.sortBy(-_)\n        val gameScoreList = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreList = guessScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreList = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreList = guessScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreList = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreList = guessScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreList = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreList = guessScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreList = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreList = guessScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreList = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreList = guessScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreList = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreList = guessScoreList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreList = gameScoreList.zipWithIndex.map\
    \ { case (score, ", "        val gameScores = game.map(x => math.abs(x - _))\n\
    \        val guessesScores = guess.map(x => math.abs(x - _))\n        val guessesCorrect\
    \ = guessesScores.zip(gameScores).filter(_._1 == 0).map(_._2)\n        val guessesWrong\
    \ = guessesScores.zip(gameScores).filter(_._1 == 0).map(_._1)\n        guessesCorrect\
    \ ++ guessesWrong", "        val guessesWithScore = game.zip(guess)\n        val\
    \ guessesWithScoreWithCorrect = guessesWithScore\n            .filter(x => x._2\
    \ == x._1)\n            .map(x => (x._2, x._1))\n        val guessesWithScoreWithIncorrect\
    \ = guessesWithScore\n            .filter(x => x._2 != x._1)\n            .map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreWithCorrectAndIncorrect = guessesWithScoreWithCorrect\
    \ ++ guessesWithScoreWithIncorrect\n        val guessesWithScoreWithCorrectAndCorrect\
    \ = guessesWithScoreWithCorrect ++ guessesWithScoreWithCorrect\n        val guessesWithScoreWithCorrectAndIncorrectAndCorrect\
    \ = guessesWithScoreWithCorrectAndIncorrect ++ guessesWithScoreWithCorrectAndCorrect\n\
    \        val guessesWithScoreWithCorrectAndIncorrectAndIncorrect = guessesWithScoreWithCorrectAndIncorrect\
    \ ++ guessesWithScoreWithIncorrectAndIncorrect\n        val guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndCorrect\
    \ = guessesWithScoreWithCorrectAndIncorrectAndIncorrect ++ guessesWithScoreWithCorrectAndIncorrectAndCorrect\n\
    \        val guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndIncorrect =\
    \ guessesWithScoreWithCorrectAndIncorrectAndIncorrect ++ guessesWithScoreWithIncorrectAndIncorrectAndIncorrect\n\
    \        val guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndIncorrectAndCorrect\
    \ = guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndIncorrect ++ guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndCorrect\n\
    \        val guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndIncorrect ++ guessesWithScoreWithIncorrectAndIncorrectAndIncorrectAndIncorrect\n\
    \        val guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrectAndCorrect\
    \ = guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrect\
    \ ++ guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndIncorrectAndCorrect\n\
    \        val guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoreWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrect\
    \ ++ guessesWithScoreWithIncorrectAndIncorrectAndIncorrectAndIncorrect", "   \
    \     val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ result = guesses.zip(scores).map { case (guess, score) =>\n            if (guess\
    \ == score) 0 else Math.abs(guess - score)\n        }\n        result.toList",
  "        val gameLen = game.length\n        val guessLen = guess.length\n      \
    \  val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.filter(_._1\
    \ == 1).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1 ==\
    \ 1).map(_._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        guessScoreMap.foreach { case (guess, score) =>\n\
    \            val gameScore = gameScoreMap.get(guess)\n            if (gameScore\
    \ == null) {\n                result(guess) = 0\n            } else {\n      \
    \          result(guess) = math.abs(guess - gameScore)\n            }\n      \
    \  }\n        result", "        // your code here\n        val gameArray = game.toArray\n\
    \        val guessArray = guess.toArray\n        val gameLength = gameArray.length\n\
    \        val guessLength = guessArray.length\n        val gameArrayLength = gameArray.length\n\
    \        val guessArrayLength = guessArray.length\n        val gameArrayLength\
    \ = gameArray.length\n        val guessArrayLength = guessArray.length\n     \
    \   val gameArrayLength = gameArray.length\n        val guessArrayLength = guessArray.length\n\
    \        val gameArrayLength = gameArray.length\n        val guessArrayLength\
    \ = guessArray.length\n        val gameArrayLength = gameArray.length\n      \
    \  val guessArrayLength = guessArray.length\n        val gameArrayLength = gameArray.length\n\
    \        val guessArrayLength = guessArray.length\n        val gameArrayLength\
    \ = gameArray.length\n        val guessArrayLength = guessArray.length\n     \
    \   val gameArrayLength = gameArray.length\n        val guessArrayLength = guessArray.length\n\
    \        val gameArrayLength = gameArray.length\n        val guessArrayLength\
    \ = guessArray.length\n        val gameArrayLength = gameArray.length\n      \
    \  val guessArrayLength = guessArray.length\n        val gameArrayLength = gameArray.length\n\
    \        val guessArrayLength = guessArray.length\n        val gameArrayLength\
    \ = gameArray.length\n        val guessArrayLength = guessArray.length\n     \
    \   val gameArrayLength = gameArray.length\n        val guessArrayLength = guessArray.length\n\
    \        val gameArrayLength = gameArray.length\n        val guessArrayLength\
    \ = guessArray.length\n        val gameArrayLength = gameArray.length\n      \
    \  val guessArrayLength = guessArray.length\n        val gameArrayLength = gameArray.length\n\
    \        val guessArrayLength = guessArray.length\n        val gameArrayLength\
    \ = gameArray.length\n        val guessArrayLength = guessArray.length\n     \
    \   val gameArrayLength = gameArray.length\n        val guessArrayLength = guessArray.length\n\
    \        val gameArrayLength = gameArray.length\n        val guessArrayLength\
    \ = guessArray.length\n        val gameArrayLength = gameArray.length\n      \
    \  val guessArrayLength = guessArray.length\n        val gameArrayLength = gameArray.length\n\
    \        val guessArrayLength = guessArray.length\n        val gameArrayLength\
    \ = gameArray.length\n        val guessArrayLength = guessArray.length\n     \
    \   val gameArrayLength = gameArray.length\n        val guessArrayLength = guessArray.length\n\
    \        val gameArrayLength = gameArray.length\n        val guessArrayLength\
    \ = guessArray.length\n        val gameArrayLength = gameArray.length\n      \
    \  val guessArrayLength = guessArray.length\n        val gameArrayLength = gameArray.length\n\
    \        val guessArrayLength = guessArray.length\n        val gameArrayLength\
    \ = ", "        val guesses = guess.toList\n        val scores = game.toList\n\
    \        val guessesWithScores = guesses.zip(scores)\n        val guessesWithScoresSorted\
    \ = guessesWithScores.sortBy(_._1)\n        val guessesWithScoresSortedReversed\
    \ = guessesWithScoresSorted.reverse\n        val guessesWithScoresSortedReversedWithCorrect\
    \ = guessesWithScoresSortedReversed.takeWhile(_._2 == 0).reverse\n        val\
    \ guessesWithScoresSortedReversedWithCorrectWithIndex = guessesWithScoresSortedReversedWithCorrect.zipWithIndex\n\
    \        val guessesWithScoresSortedReversedWithCorrectWithIndexSorted = guessesWithScoresSortedReversedWithCorrectWithIndex.sortBy(_._1)\n\
    \        val guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrect\
    \ = guessesWithScoresSortedReversedWithCorrectWithIndexSorted.takeWhile(_._2 ==\
    \ 1).reverse\n        val guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrectWithIndex\
    \ = guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrect.zipWithIndex\n\
    \        val guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrectWithIndexSorted\
    \ = guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrectWithIndex.sortBy(_._1)\n\
    \        val guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrectWithIndexSortedWithCorrect\
    \ = guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrectWithIndexSortedWithCorrect.takeWhile(_._2\
    \ == 2).reverse\n        val guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrectWithIndexSortedWithCorrectWithIndex\
    \ = guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrectWithIndexSortedWithCorrect.zipWithIndex\n\
    \        val guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrectWithIndexSortedWithCorrectWithIndexSorted\
    \ = guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrectWithIndexSortedWithCorrectWithIndex.sortBy(_._1)\n\
    \        val guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrectWithIndexSortedWithCorrectWithIndexSortedWithCorrect\
    \ = guessesWithScoresSortedReversedWithCorrectWithIndexSortedWithCorrectWithIndexSortedWithCorrectWithIndexSortedWithCorrect.takeWhile(_._2\
    \ == 3).reverse\n        val guessesWithScoresSorted", "        val guesses =\
    \ guess.toSet\n        val scores = game.toSet\n        val results = new mutable.ArrayList[Long]()\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if(guess == None) results += abs(score - game(0))\n            else\
    \ results += abs(guess - score)\n        }\n        results", "        val gameScores\
    \ = game.map(x => if (x == 0) 0 else x)\n        val guessScores = guess.map(x\
    \ => if (x == 0) 0 else x)\n        val diffs = guessScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        diffs.toList", "    \
    \    val scores : List[Long] = game.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val guesses : List[Long] = guess.zipWithIndex.map { case (guess,\
    \ index) => guess }\n        val guessesWithScores : List[(Long, Long)] = guesses.zipWithIndex.map\
    \ { case (guess, index) => (score, guess) }\n        val guessesWithScoreAndIndex\
    \ : List[(Long, Long, Int)] = guessesWithScores.zipWithIndex.map { case (score,\
    \ guess, index) => (score, guess, index) }\n        val guessesWithScoreAndIndexAndGuessed\
    \ : List[(Long, Long, Int, Boolean)] = guessesWithScoreAndIndex.map { case (score,\
    \ guess, index, guessed) => (score, guess, index, guessed) }\n        val guessesWithScoreAndIndexAndGuessedAndGame\
    \ : List[(Long, Long, Int, Boolean, List[Long])] = guessesWithScoreAndIndexAndGuessed.map\
    \ { case (score, guess, index, guessed, game) => (score, guess, index, guessed,\
    \ game) }\n        val guessesWithScoreAndIndexAndGuessedAndGameAndGuessed : List[(Long,\
    \ Long, Int, Boolean, List[Long], List[Long])] = guessesWithScoreAndIndexAndGuessed.map\
    \ { case (score, guess, index, guessed, game, guessed) => (score, guess, index,\
    \ guessed, game, guessed) }\n        guessesWithScoreAndIndexAndGuessedAndGameAndGuessed.map\
    \ { case (score, guess, index, guessed, game, guessed, guessesWithScoreAndIndexAndGuessedAndGameAndGuessed)\
    \ =>\n            val guessesWithScoreAndIndexAndGuessedAndGameAndGuessedAndGuessedAndGuessedAndGuessed\
    \ : List[(Long, Long, Int, Boolean, List[Long], List[Long], List[Long], List[Long])]\
    \ = guessesWithScoreAndIndexAndGuessedAndGameAndGuessed.map { case (score, guess,\
    \ index, guessed, game, guessed, guessesWithScoreAndIndexAndGuessedAndGameAndGuessedAndGuessed)\
    \ =>\n                val guessesWithScoreAndIndexAndGuessedAndGameAndGuessedAndGuessedAndGuessedAndGuessedAndGuessed\
    \ : List[(Long, Long, Int, Boolean, List[Long", '        // Your code here', " \
    \       // Your code here\n        val gameScore = game.zipWithIndex.filter(_._1\
    \ == 1).map(_._2)\n        val guessScore = guess.zipWithIndex.filter(_._1 ==\
    \ 1).map(_._2)\n        val gameScoreList = gameScore.toList\n        val guessScoreList\
    \ = guessScore.toList\n        val gameScoreMap = gameScoreList.zipWithIndex.toMap\n\
    \        val guessScoreMap = guessScoreList.zipWithIndex.toMap\n        val gameScoreSet\
    \ = gameScoreList.map(x => gameScoreMap.get(x))\n        val guessScoreSet = guessScoreList.map(x\
    \ => guessScoreMap.get(x))\n        val gameScoreSetSet = gameScoreSet.union(guessScoreSet)\n\
    \        val gameScoreSetSetSet = gameScoreSetSet.toSet\n        val gameScoreSetSetSetSet\
    \ = gameScoreSetSetSet.toSet\n        val gameScoreSetSetSetSetSet = gameScoreSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSet = gameScoreSetSetSetSetSet.toSet\n  \
    \      val gameScoreSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSetSetSetSetSetSet",
  "        val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val guessesPerScore = guessesCount / scoresCount\n        val guessesPerGame\
    \ = guessesCount / gameCount\n        val guessesPerGameAbs = guessesPerGame -\
    \ guessesPerScore\n        val guessesPerScoreAbs = guessesPerScore - guessesPerGame\n\
    \        val guessesPerGameAbsDiff = guessesPerGameAbs.toList\n        val guessesPerScoreAbsDiff\
    \ = guessesPerScoreAbs.toList\n        val guessesPerGameAbsDiffDiff = guessesPerGameAbsDiff.zip(guessesPerScoreAbsDiff).map\
    \ {\n            case (diff, diff2) => diff - diff2\n        }\n        val guessesPerScoreAbsDiffDiff\
    \ = guessesPerScoreAbsDiff.zip(guessesPerGameAbsDiff).map {\n            case\
    \ (diff, diff2) => diff - diff2\n        }\n        val guessesPerGameAbsDiffDiffDiff\
    \ = guessesPerGameAbsDiffDiff.zip(guessesPerScoreAbsDiffDiff).map {\n        \
    \    case (diff, diff2) => diff - diff2\n        }\n        val guessesPerGameAbsDiffDiffDiff\
    \ = guessesPerGameAbsDiffDiff.zip(guessesPerScoreAbsDiffDiff).map {\n        \
    \    case (diff, diff2) => diff - diff2\n        }\n        val guessesPerGameAbsDiffDiffDiff\
    \ = guessesPerGameAbsDiffDiff.zip(guessesPerScoreAbsDiffDiff).map {\n        \
    \    case (diff, diff2) => diff - diff2\n        }\n        val guessesPerGameAbsDiffDiffDiff\
    \ = guessesPerGameAbsDiffDiff.zip(guessesPerScoreAbsDiffDiff).map {\n        \
    \    case (diff, diff2) => diff - diff2\n        }\n        val guessesPerGameAbsDiffDiffDiff\
    \ = guessesPerGameAbsDiffDiff.zip(guessesPerScoreAbsDiffDiff).map {\n        \
    \    case (diff, diff2) => diff - diff2\n        }\n        val guessesPerGameAbsDiffDiffDiff\
    \ = guessesPerGameAbsDiffDiff.zip(guessesPerScoreAbsDiffDiff).map {\n        \
    \    case (diff, diff2) => diff - diff2\n", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScores = gameScoreList.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessesScores = guessesScoreList.zipWithIndex.map {\
    \ case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScores = gameScoreList.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessesScores = guessesScoreList.zipWithIndex.map {\
    \ case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScores = gameScoreList.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessesScores = guessesScoreList.zipWithIndex.map {\
    \ case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScores = gameScoreList.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessesScores = guessesScoreList.zipWithIndex.map {\
    \ case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScores = gameScoreList.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guesses", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.foldLeft(0)(_\
    \ + _)\n        val guessScore = guessScores.foldLeft(0)(_ + _)\n        val difference\
    \ = guessScore - gameScore\n        val differences = guessScores.zip(gameScores).map\
    \ { case (guess, game) => guess - game }\n        differences.toList", "     \
    \   val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScore = gameScores.sum\n        val guessScore = guessScores.sum\n\
    \        val difference = guessScore - gameScore\n        val differences = guessScores.zip(gameScores).map\
    \ { case (guess, game) =>\n            if (guess == game) {\n                0\n\
    \            } else {\n                Math.abs(guess - game)\n            }\n\
    \        }\n        differences.toList", "        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.ArrayList[Long]()\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if(guess == None) results += Math.abs(score - game(0))\n        \
    \    else results += Math.abs(guess - score)\n        }\n        results", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScoreSet = gameScores.toSet\n        val guessScoreSet\
    \ = guessScores.toSet\n        val gameScoreDiff = gameScores.toList.zip(guessScores).map\
    \ { case (score, guess) => abs(guess - score) }\n        val gameScoreDiffSet\
    \ = gameScoreDiff.toSet\n        val gameScoreDiffSet2 = gameScoreDiff.zip(guessScores).map\
    \ { case (score, guess) => abs(guess - score) }\n        val gameScoreDiffSet3\
    \ = gameScoreDiff.zip(guessScores).map { case (score, guess) => abs(guess - score)\
    \ }\n        val gameScoreDiffSet4 = gameScoreDiff.zip(guessScores).map { case\
    \ (score, guess) => abs(guess - score) }\n        val gameScoreDiffSet5 = gameScoreDiff.zip(guessScores).map\
    \ { case (score, guess) => abs(guess - score) }\n        val gameScoreDiffSet6\
    \ = gameScoreDiff.zip(guessScores).map { case (score, guess) => abs(guess - score)\
    \ }\n        val gameScoreDiffSet7 = gameScoreDiff.zip(guessScores).map { case\
    \ (score, guess) => abs(guess - score) }\n        val gameScoreDiffSet8 = gameScoreDiff.zip(guessScores).map\
    \ { case (score, guess) => abs(guess - score) }\n        val gameScoreDiffSet9\
    \ = gameScoreDiff.zip(guessScores).map { case (score, guess) => abs(guess - score)\
    \ }\n        val gameScoreDiffSet10 = gameScoreDiff.zip(guessScores).map { case\
    \ (score, guess) => abs(guess - score) }\n        val gameScoreDiffSet11 = gameScoreDiff.zip(guessScores).map\
    \ { case (score, guess) => abs(guess - score) }\n        val gameScoreDiffSet12\
    \ = gameScoreDiff.zip(guessScores).map { case (score, guess) => abs(guess - score)\
    \ }\n        val gameScoreDiffSet13 = gameScoreDiff.zip(guessScores).map { case\
    \ (score, guess) => abs(guess - score) }\n        val gameScoreDiffSet14 = gameScoreDiff.zip(guessScores).map\
    \ { case (score, guess) => abs(guess - score) }\n        val gameScoreDiffSet15\
    \ = gameScoreDiff.", "        val gameScores = game.zipWithIndex.map(x => x._2)\n\
    \        val guessScores = guess.zipWithIndex.map(x => x._2)\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        ", '        // Your code here', '        // Your code here', "      \
    \  val guesses = guess.toList\n        val scores = game.toList\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new Array[Long](guessesCount)\n        var i = 0\n        while (i < guessesCount)\
    \ {\n            val guess = guesses(i)\n            val score = scores(i)\n \
    \           val difference = guess - score\n            result(i) = difference\n\
    \            i += 1\n        }\n        result", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.sum\n \
    \       val guessScore = guessScores.sum\n        val gameScoreDiff = gameScore\
    \ - guessScore\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map {\
    \ case (diff, index) => diff }\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n\
    \        val gameScoreDiffsSumAbs = gameScoreDiffsSum.abs\n        val gameScoreDiffsSumAbsArray\
    \ = gameScoreDiffsSumAbs.toArray\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArray.length\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiffsSumAbsArrayLength\
    \ = gameScoreDiffsSumAbsArrayLength\n        val gameScoreDiff", "        val\
    \ gameScores = game.zipWithIndex.map{ case (score, index) => score }\n       \
    \ val guessScores = guess.zipWithIndex.map{ case (score, index) => score }\n \
    \       val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreKeys = gameScoreMap.keys\n        val guessScoreKeys = guessScoreMap.keys\n\
    \        val gameScoreValues = gameScoreMap.values.toList\n        val guessScoreValues\
    \ = guessScoreMap.values.toList\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = ", "        val\
    \ gameLength = game.size\n        val guessLength = guess.size\n        val result\
    \ = new Array[Long](guessLength)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSet = gameScores.toSet\n\
    \        val ", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithScores\
    \ = guessesScores.map { case (score, index) => gameScores(index) -> score }\n\
    \        val guessesWithIndexes = guessesWithScores.map { case (score, index)\
    \ => index -> score }\n        val guessesWithScoreAndIndex = guessesWithIndexes.map\
    \ { case (score, index) => score -> index }\n        val guessesWithScoreAndIndexSorted\
    \ = guessesWithScoreAndIndex.sortBy(_._1)\n        val guessesWithScoreAndIndexSortedReversed\
    \ = guessesWithScoreAndIndexSorted.reverse\n        val guessesWithScoreAndIndexSortedReversedSorted\
    \ = guessesWithScoreAndIndexSortedReversed.sortBy(_._1)\n        val guessesWithScoreAndIndexSortedReversedSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedReversedSorted.map { case (score, index) =>\
    \ index -> score }\n        val guessesWithScoreAndIndexSortedReversedSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedReversedSortedWithIndex.sortBy(_._1)\n     \
    \   val guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndex =\
    \ guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndex.map { case\
    \ (score, index) => index -> score }\n        val guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSorted.sortBy(_._1)\n\
    \        val guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndex.map\
    \ { case (score, index) => index -> score }\n        val guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._1)\n\
    \        val guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.map\
    \ { case (score, index) => index -> score }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guessesScores.map { case (score, index) => index\
    \ -> score }\n        val guessesWithIndexes = guessesWithScores.map { case (score,\
    \ index) => index -> guess }\n        val guessesWithIndexesWithScores = guessesWithIndexes.map\
    \ { case (score, index) => index -> gameScores(index) }\n        val guessesWithIndexesWithScoresWithIndex\
    \ = guessesWithIndexesWithScores.map { case (score, index, gameScore) => index\
    \ -> gameScore }\n        val guessesWithIndexesWithScoresWithIndexAndScore =\
    \ guessesWithIndexesWithScoresWithIndex.map { case (score, index, gameScore) =>\
    \ index -> gameScore(index) }\n        val guessesWithIndexesWithScoresWithIndexAndScoreWithIndex\
    \ = guessesWithIndexesWithScoresWithIndexAndScore.map { case (score, index, gameScore)\
    \ => index -> gameScore(index) }\n        val guessesWithIndexesWithScoresWithIndexAndScoreWithIndexAndScore\
    \ = guessesWithIndexesWithScoresWithIndexAndScoreWithIndex.map { case (score,\
    \ index, gameScore) => index -> gameScore(index) }\n        val guessesWithIndexesWithScoresWithIndexAndScoreWithIndexAndScoreWithIndex\
    \ = guessesWithIndexesWithScoresWithIndexAndScoreWithIndexAndScore.map { case\
    \ (score, index, gameScore) => index -> gameScore(index) }\n        val guessesWithIndexesWithScoresWithIndexAndScoreWithIndexAndScoreWithIndexAndScore\
    \ = guessesWithIndexesWithScoresWithIndexAndScoreWithIndexAndScoreWithIndex.map\
    \ { case (score, index, gameScore) => index -> gameScore(index) }\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndScoreWithIndexAndScoreWithIndexAndScoreWithIndex\
    \ = guessesWithIndexesWithScoresWithIndexAndScoreWithIndexAndScoreWithIndexAndScore.map\
    \ { case (score, index, gameScore) => index -> gameScore(index) }\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndScoreWithIndexAndScoreWithIndexAndScoreWithIndexAndScore\
    \ = ", "        val guesses = guess.toList\n        val scores = game.toList\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val result = new Array[Long](guessesCount)\n        var i = 0\n     \
    \   while (i < guessesCount) {\n            val guess = guesses(i)\n         \
    \   val score = scores(i)\n            val difference = abs(guess - score)\n \
    \           result(i) = difference\n            i += 1\n        }\n        result",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val diffs = guessesScores.zip(gameScores).map { case (guess, game)\
    \ => math.abs(guess - game) }\n        diffs.toList", "        val gameScores\
    \ = game.zipWithIndex.map{case (score, index) => score}\n        val guessesScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}\n        val gameScore\
    \ = gameScores.sum\n        val guessesScore = guessesScores.sum\n        val\
    \ differences = guessesScores.zip(gameScores).map{case (guess, game) => math.abs(guess\
    \ - game)}\n        differences.toList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val diffs = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        diffs.toList", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score }\n        val differences = guessesScores.zip(gameScores).map { case\
    \ (guess, game) => math.abs(guess - game) }\n        differences.toList", "  \
    \      val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithScores = guessesScores.map\
    \ { case (score, index) => gameScores(index) -> score }\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }\n        val\
    \ guessesWithScoreAndIndex = guessesWithIndexes.map { case (score, index) => (score,\
    \ index) }\n        val guessesWithScoreAndIndexSorted = guessesWithScoreAndIndex.sortBy(_._1).reverse\n\
    \        val guessesWithScoreAndIndexSortedWithIndex = guessesWithScoreAndIndexSorted.map\
    \ { case (score, index) => (score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndex.sortBy(_._1).reverse\n        val\
    \ guessesWithScoreAndIndexSortedWithIndexSortedWithIndex = guessesWithScoreAndIndexSortedWithIndexSortedWithIndex.map\
    \ { case (score, index) => (score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndex.sortBy(_._1).reverse\n\
    \        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndex.map\
    \ { case (score, index) => (score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._1).reverse\n\
    \        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.map\
    \ { case (score, index) => (score, index._2) }\n        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._1).reverse\n\
    \        val guessesWithScoreAndIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScore", "        val guesses = guess.toList\n        val scores\
    \ = game.toList\n        val guessesWithScores = guesses.zip(scores)\n       \
    \ val guessesWithScoresSorted = guessesWithScores.sortBy(_._1)\n        val guessesWithScoresSortedReversed\
    \ = guessesWithScoresSorted.reverse\n        val guessesWithScoresSortedReversedWithCorrect\
    \ = guessesWithScoresSortedReversed.filter(_._2 == 0)\n        val guessesWithScoresSortedReversedWithIncorrect\
    \ = guessesWithScoresSortedReversed.filter(_._2 != 0)\n        val guessesWithScoresSortedReversedWithCorrectAndIncorrect\
    \ = guessesWithScoresSortedReversedWithCorrect ++ guessesWithScoresSortedReversedWithIncorrect\n\
    \        val guessesWithScoresSortedReversedWithCorrectAndCorrect = guessesWithScoresSortedReversedWithCorrect\
    \ ++ guessesWithScoresSortedReversedWithCorrect\n        val guessesWithScoresSortedReversedWithCorrectAndIncorrectAndCorrect\
    \ = guessesWithScoresSortedReversedWithCorrectAndIncorrect ++ guessesWithScoresSortedReversedWithCorrectAndCorrect\n\
    \        val guessesWithScoresSortedReversedWithCorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSortedReversedWithCorrectAndIncorrectAndCorrect ++ guessesWithScoresSortedReversedWithCorrectAndIncorrectAndIncorrect\n\
    \        val guessesWithScoresSortedReversedWithCorrectAndIncorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSortedReversedWithCorrectAndIncorrectAndIncorrectAndIncorrect\
    \ ++ guessesWithScoresSortedReversedWithCorrectAndIncorrectAndIncorrectAndIncorrect\n\
    \        val guessesWithScoresSortedReversedWithCorrectAndIncorrectAndIncorrectAndIncorrectAndCorrect\
    \ = guessesWithScoresSortedReversedWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrect\
    \ ++ guessesWithScoresSortedReversedWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrectAndCorrect\n\
    \        val guessesWithScoresSortedReversedWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSortedReversedWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrect\
    \ ++ guessesWithScoresSortedReversedWithCorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrectAndIncorrect\n\
    \        ", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessesCorrect = guessesScores.zip(gameScores).map\
    \ { case (guess, score) =>\n            if (guess == score) 0 else Math.abs(guess\
    \ - score)\n        }\n        guessesCorrect.toList", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList =\
    \ new mutable.ListBuffer[Long]()\n        val gameScoreMapKeys = gameScoreMap.keySet\n\
    \        val guessScoreMapKeys = guessScoreMap.keySet\n        gameScoreMapKeys.foreach(gameScoreList.+=)\n\
    \        guessScoreMapKeys.foreach(guessScoreList.+=)\n        val gameScoreMapValues\
    \ = gameScoreMap.values.toList\n        val guessScoreMapValues = guessScoreMap.values.toList\n\
    \        val gameScoreMapValuesMap = gameScoreMapValues.toMap\n        val guessScoreMapValuesMap\
    \ = guessScoreMapValues.toMap\n        val gameScoreMapValuesMapKeys = gameScoreMapValuesMap.keySet\n\
    \        val guessScoreMapValuesMapKeys = guessScoreMapValuesMap.keySet\n    \
    \    gameScoreMapValuesMapKeys.foreach(gameScoreMapValuesList.+=)\n        guessScoreMapValuesMapKeys.foreach(guessScoreMapValuesList.+=)\n\
    \        val gameScoreMapValuesMapValues = gameScoreMapValuesMap.values.toList\n\
    \        val guessScoreMapValuesMapValues = guessScoreMapValuesMap.values.toList\n\
    \        val gameScoreMapValuesMapValuesMap = gameScoreMapValuesMapValues.toMap\n\
    \        val guessScoreMapValuesMapValuesMap = guessScoreMapValuesMapValues.toMap\n\
    \        val gameScoreMapValuesMapValuesMapKeys = gameScoreMapValuesMapValuesMap.keySet\n\
    \        val guessScoreMapValuesMapValuesMapKeys = guessScoreMapValuesMapValuesMap.keySet\n\
    \        gameScoreMapValuesMapValuesMapKeys.foreach(gameScoreMapValuesMapValuesList.+=)\n\
    \        guessScoreMapValuesMapValuesMapKeys.foreach(guessScoreMapValuesMapValuesList.+=)\n\
    \        val gameScoreMapValuesMapValuesMapValues = gameScoreMapValuesMapValuesMap.values.toList\n\
    \        val guessScoreMapValuesMapValuesMapValues = guessScoreMapValuesMapValuesMap.values.toList\n\
    \        val gameScoreMapValuesMapValuesMapValuesMap = gameScoreMapValuesMapValuesMapValues.toMap\n\
    \        val guessScoreMapValuesMapValuesMapValues", "        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessesScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val gameScoreMap\
    \ = gameScores.zipWithIndex.map{case (score, index) => index.toLong -> score}.toMap\n\
    \        val guessesScoreMap = guessesScores.zipWithIndex.map{case (score, index)\
    \ => index.toLong -> score}.toMap\n        val gameScoreArray = gameScores.zipWithIndex.map{case\
    \ (score, index) => index.toLong -> score}.toArray\n        val guessesScoreArray\
    \ = guessesScores.zipWithIndex.map{case (score, index) => index.toLong -> score}.toArray\n\
    \        val gameScoreSet = gameScores.zipWithIndex.map{case (score, index) =>\
    \ index.toLong -> score}.toSet\n        val guessesScoreSet = guessesScores.zipWithIndex.map{case\
    \ (score, index) => index.toLong -> score}.toSet\n        val gameScoreMap = gameScores.zipWithIndex.map{case\
    \ (score, index) => index.toLong -> score}.toMap\n        val guessesScoreMap\
    \ = guessesScores.zipWithIndex.map{case (score, index) => index.toLong -> score}.toMap\n\
    \        val gameScoreArray = gameScores.zipWithIndex.map{case (score, index)\
    \ => index.toLong -> score}.toArray\n        val guessesScoreArray = guessesScores.zipWithIndex.map{case\
    \ (score, index) => index.toLong -> score}.toArray\n        val gameScoreSet =\
    \ gameScores.zipWithIndex.map{case (score, index) => index.toLong -> score}.toSet\n\
    \        val guessesScoreSet = guessesScores.zipWithIndex.map{case (score, index)\
    \ => index.toLong -> score}.toSet\n        val gameScoreMap = gameScores.zipWithIndex.map{case\
    \ (score, index) => index.toLong -> score}.toMap\n        val guessesScoreMap\
    \ = guessesScores.zipWithIndex.map{case (score, index) => index.toLong -> score}.toMap\n\
    \        val gameScoreArray = gameScores.zipWithIndex.map{case (score, index)\
    \ => index.toLong -> score}.toArray\n        val guessesScoreArray = guessesScores.zipWithIndex.map{case\
    \ (score, index) => index", "        // Your code here\n        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesScores = guess.zipWithIndex.map { case (score, index) => index\
    \ -> score }.toMap\n        val gameScore = gameScores.map { case (index, score)\
    \ => score }.toList\n        val guessesScore = guessesScores.map { case (index,\
    \ score) => score }.toList\n        val gameScoreDiff = gameScore zip guessesScore\
    \ map { case (gameScore, guessesScore) => Math.abs(gameScore - guessesScore) }\n\
    \        gameScoreDiff.map { case (gameScoreDiff, index) => gameScoreDiff -> index\
    \ }.toList", "        val gameScores = game.zipWithIndex.map{ case (score, index)\
    \ => score }\n        val guessScores = guess.zipWithIndex.map{ case (score, index)\
    \ => score }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val guesses = guess.toSet\n    \
    \    val scores = game.toSet\n        val result: List[Long] = guesses.map{g =>\
    \ if (scores.contains(g)) 0 else abs(g - scores.head)}\n        result", "   \
    \     val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScores.toList\n     \
    \   val guessesScoreList = guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessesScoreSet = guessesScores.toSet\n        val gameScoreMap =\
    \ gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n      \
    \  val gameScoreList = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val ", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessesScores = guess.zipWithIndex.map { case\
    \ (score, index) => score }\n        val guessesCorrect = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => guess == game }\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => Math.abs(guess - game) }\n        guessesCorrect ++\
    \ guessesDiff", "        val guesses = guess.toSet\n        val scores = game.toSet\n\
    \        val result: List[Long] = guesses.map(guess => if (scores.contains(guess))\
    \ 0 else abs(guess - scores.head))\n        result", "        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val result = guesses.zip(scores).map\
    \ { case (guess, score) =>\n            if (guess == score) {\n              \
    \  0\n            } else {\n                Math.abs(guess - score)\n        \
    \    }\n        }\n        result", "        val guesses = guess.toList\n    \
    \    val scores = game.toList\n        val result = guesses.zip(scores).map {\n\
    \            case (guess, score) => if (guess == score) 0 else abs(guess - score)\n\
    \        }\n        result.toList", "        val guessesWithScores = game.zip(guess)\n\
    \        val guessesWithScoresSortedByScore = guessesWithScores.sortBy(_._1)\n\
    \        val guessesWithScoresSortedByGuess = guessesWithScoresSortedByScore.sortBy(_._2)\n\
    \        val guessesWithScoresSortedByGuessWithCorrect = guessesWithScoresSortedByGuess.filter(_._1\
    \ == _._2)\n        val guessesWithScoresSortedByGuessWithCorrectWithCorrect =\
    \ guessesWithScoresSortedByGuessWithCorrect.filter(_._1 == 0)\n        val guessesWithScoresSortedByGuessWithCorrectWithIncorrect\
    \ = guessesWithScoresSortedByGuessWithCorrect.filter(_._1 == _._2)\n        val\
    \ guessesWithScoresSortedByGuessWithIncorrectWithCorrect = guessesWithScoresSortedByGuessWithCorrect.filter(_._1\
    \ == 0)\n        val guessesWithScoresSortedByGuessWithIncorrectWithIncorrect\
    \ = guessesWithScoresSortedByGuessWithCorrect.filter(_._1 == _._2)\n        val\
    \ guessesWithScoresSortedByGuessWithCorrectWithIncorrect = guessesWithScoresSortedByGuessWithCorrect.filter(_._1\
    \ == 0)\n        val guessesWithScoresSortedByGuessWithIncorrectWithCorrect =\
    \ guessesWithScoresSortedByGuessWithCorrect.filter(_._1 == 0)\n        val guessesWithScoresSortedByGuessWithCorrectWithCorrect\
    \ = guessesWithScoresSortedByGuessWithCorrect.filter(_._1 == 0)\n        val guessesWithScoresSortedByGuessWithIncorrectWithIncorrect\
    \ = guessesWithScoresSortedByGuessWithCorrect.filter(_._1 == 0)\n        val guessesWithScoresSortedByGuessWithCorrectWithCorrect\
    \ = guessesWithScoresSortedByGuessWithCorrect.filter(_._1 == 0)\n        val guessesWithScoresSortedByGuessWithIncorrectWithIncorrect\
    \ = guessesWithScoresSortedByGuessWithCorrect.filter(_._1 == 0)\n        val guessesWithScoresSortedByGuessWithCorrectWithCorrect\
    \ = guessesWithScoresSortedByGuessWithCorrect.filter(_._1 == 0)\n        val guessesWithScoresSortedByGuessWithIncorrectWithIncorrect\
    \ = guessesWithScoresSortedByGuessWithCorrect.filter(_", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val differences\
    \ = guessScores.zip(gameScores).map { case (guess, game) => math.abs(guess - game)\
    \ }\n        val correct = differences.filter(_ == 0).length\n        val wrong\
    \ = differences.filter(_ != 0).length\n        val result = (correct + wrong).toList\n\
    \        result", "        val gameScores = game.zipWithIndex.map{case (score,\
    \ index) => score}.toList\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreList.filter(gameScoreSet.contains)\n       \
    \ val guessScoreList = guessScoreList.filter(guessScoreSet.contains)\n       \
    \ val gameScoreList = gameScoreList.map(gameScoreMap(_))\n        val guessScoreList\
    \ = guessScoreList.map(guessScoreMap(_))\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreList = gameScoreList.zipWithIndex.filter(_._2\
    \ % 2 == 0).map{case (score, index) => score}.toList\n        val guessScoreList\
    \ = guessScoreList.zipWithIndex.filter(_._2 % 2 == 0).map{case (score, index)\
    \ => score}.toList\n        val gameScoreList = gameScoreList.zipWithIndex.filter(_._2\
    \ % 2 == 1).map{case (score, index) => score}.toList\n        val guessScoreList\
    \ = guessScoreList.zipWithIndex.filter(_._2 % 2 == 1).map{case (score, index)\
    \ => score}.toList\n        val gameScoreList = gameScoreList.zipWithIndex.filter(_._2\
    \ % 2 == 0).filter(_._2 % 2 == 1).map{case (score, index) => score}.toList\n \
    \       val guessScoreList = guessScoreList.zipWithIndex.filter(_._2 % 2 == 0).filter(_._2\
    \ % 2 == 1).map{case (score, index) => score}.toList\n        val gameScoreList\
    \ = gameScoreList.zipWithIndex.filter(_._2 % 2 == 1).filter(_._2 % 2 == 0).map{case\
    \ (score, index) => score}.toList\n        val guessScoreList = guessScoreList.zipWithIndex.filter(_._2\
    \ % 2 == 1).filter(_._2 % 2 == 0).map{case (score, index) => score}.toList\n \
    \       val gameScoreList = gameScoreList.zipWithIndex.filter(_._", "        val\
    \ guesses = guess.toList\n        val scores = game.toList\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new Array[Long](guessesCount)\n        var i = 0\n        while (i < guessesCount)\
    \ {\n            val guess = guesses(i)\n            val score = scores(i)\n \
    \           val diff = Math.abs(guess - score)\n            result(i) = diff\n\
    \            i += 1\n        }\n        result", '        // your code here',
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesScores = guessesScores.filter(_._2\
    \ > gameScores.size)\n        val guessesScores = guessesScores.map { case (score,\
    \ index) => (gameScores(score) - gameScores(index)) }\n        guessesScores.toList",
  "        val gameScores = game.zipWithIndex.map{case (score, index) => score}\n\
    \        val guessScores = guess.zipWithIndex.map{case (score, index) => score}\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreKeys = gameScoreMap.keySet\n        val guessScoreKeys =\
    \ guessScoreMap.keySet\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.sum\n \
    \       val guessScore = guessScores.sum\n        val differences = guessScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        val correct = differences.filter(x\
    \ => x == 0).length\n        val wrong = differences.filter(x => x != 0).length\n\
    \        val result = if (correct == guessScore) 0 else wrong\n        gameScores.zip(guesses).map\
    \ { case (score, guess) => math.abs(guess - score) }", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val differences\
    \ = gameScores zip guessScores\n        val correct = differences.filter(_._1\
    \ == 0)\n        val wrong = differences.filter(_._1 == 1)\n        val result\
    \ = correct.map(_._2).zip(wrong.map(_._2)).map { case (correct, wrong) => Math.abs(correct\
    \ - wrong) }\n        result", "        val guesses = guess.toSet\n        val\
    \ scores = game.toSet\n        val diffs = guesses.map { guess =>\n          \
    \  val score = scores.get(guess)\n            if (score == None) 0 else abs(guess\
    \ - score)\n        }\n        diffs.toList", "        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val result = guesses.zip(scores).map\
    \ { case (guess, score) =>\n            if (guess == score) {\n              \
    \  0\n            } else {\n                Math.abs(guess - score)\n        \
    \    }\n        }\n        result", "        val scores = new mutable.HashMap[Int,\
    \ Long]()\n        val guesses = new mutable.HashMap[Int, Long]()\n        val\
    \ scoreDiff = new mutable.HashMap[Int, Long]()\n        val guesseDiff = new mutable.HashMap[Int,\
    \ Long]()\n        val scoreDiff2 = new mutable.HashMap[Int, Long]()\n       \
    \ val guesseDiff2 = new mutable.HashMap[Int, Long]()\n        val scoreDiff3 =\
    \ new mutable.HashMap[Int, Long]()\n        val guesseDiff3 = new mutable.HashMap[Int,\
    \ Long]()\n        val scoreDiff4 = new mutable.HashMap[Int, Long]()\n       \
    \ val guesseDiff4 = new mutable.HashMap[Int, Long]()\n        val scoreDiff5 =\
    \ new mutable.HashMap[Int, Long]()\n        val guesseDiff5 = new mutable.HashMap[Int,\
    \ Long]()\n        val scoreDiff6 = new mutable.HashMap[Int, Long]()\n       \
    \ val guesseDiff6 = new mutable.HashMap[Int, Long]()\n        val scoreDiff7 =\
    \ new mutable.HashMap[Int, Long]()\n        val guesseDiff7 = new mutable.HashMap[Int,\
    \ Long]()\n        val scoreDiff8 = new mutable.HashMap[Int, Long]()\n       \
    \ val guesseDiff8 = new mutable.HashMap[Int, Long]()\n        val scoreDiff9 =\
    \ new mutable.HashMap[Int, Long]()\n        val guesseDiff9 = new mutable.HashMap[Int,\
    \ Long]()\n        val scoreDiff10 = new mutable.HashMap[Int, Long]()\n      \
    \  val guesseDiff10 = new mutable.HashMap[Int, Long]()\n        val scoreDiff11\
    \ = new mutable.HashMap[Int, Long]()\n        val guesseDiff11 = new mutable.HashMap[Int,\
    \ Long]()\n        val scoreDiff12 = new mutable.HashMap[Int, Long]()\n      \
    \  val guesseDiff12 = new mutable.HashMap[Int, Long]()\n        val scoreDiff13\
    \ = new mutable.HashMap[Int, Long]()\n        val guesseDiff13 = new mutable.HashMap[Int,\
    \ Long]()\n        val scoreDiff14 = new mutable.HashMap[Int, Long]()\n      \
    \  val guesseDiff14 = new mutable.HashMap[Int, Long]()\n        val scoreDiff15\
    \ = new mutable.HashMap[Int, Long]()\n        val guesseDiff15 = new ", "    \
    \    val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessesDiff = guessesScores.zip(gameScores).map { case (guess,\
    \ game) => math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map { case\
    \ (diff, index) => diff }", "        val gameScores = game.zipWithIndex.map {\
    \ case (score, index) => score -> index }.toMap\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }.toList\n        val guessesScore = guessesScores.map\
    \ { case (score, index) => score }.toList\n        val gameScores = gameScores.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guessesScores.map { case (score, index) => score -> index }.toMap\n        val\
    \ gameScore = gameScores.map { case (score, index) => score }.toList\n       \
    \ val guessesScore = guessesScores.map { case (score, index) => score }.toList\n\
    \        val gameScores = gameScores.map { case (score, index) => score -> index\
    \ }.toMap\n        val guessesScores = guessesScores.map { case (score, index)\
    \ => score -> index }.toMap\n        val gameScore = gameScores.map { case (score,\
    \ index) => score }.toList\n        val guessesScore = guessesScores.map { case\
    \ (score, index) => score }.toList\n        val gameScores = gameScores.map {\
    \ case (score, index) => score -> index }.toMap\n        val guessesScores = guessesScores.map\
    \ { case (score, index) => score -> index }.toMap\n        val gameScore = gameScores.map\
    \ { case (score, index) => score }.toList\n        val guessesScore = guessesScores.map\
    \ { case (score, index) => score }.toList\n        val gameScores = gameScores.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guessesScores.map { case (score, index) => score -> index }.toMap\n        val\
    \ gameScore = gameScores.map { case (score, index) => score }.toList\n       \
    \ val guessesScore = guessesScores.map { case (score, index) => score }.toList\n\
    \        val gameScores = gameScores.map { case (score, index) => score -> index\
    \ }.toMap\n        val guessesScores = guessesScores.map { case (score, index)\
    \ => score -> index }.toMap\n        val gameScore = gameScores.map { case (score,\
    \ index) => score }.toList\n        val ", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n   \
    \     val guessesWithScores = guessesScores.map { case (score, index) => gameScores(index)\
    \ -> score }\n        val guessesWithIndexes = guessesWithScores.map { case (score,\
    \ index) => index -> score }\n        val guessesWithScoreAndIndex = guessesWithIndexes.map\
    \ { case (score, index) => score -> index }\n        val guessesWithScoreAndIndexSorted\
    \ = guessesWithScoreAndIndex.sortBy(_._1)\n        val guessesWithScoreAndIndexSortedReversed\
    \ = guessesWithScoreAndIndexSorted.reverse\n        val guessesWithScoreAndIndexSortedReversedSorted\
    \ = guessesWithScoreAndIndexSortedReversed.sortBy(_._2)\n        val guessesWithScoreAndIndexSortedReversedSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedReversedSorted.map { case (score, index) =>\
    \ index -> score }\n        val guessesWithScoreAndIndexSortedReversedSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedReversedSortedWithIndex.sortBy(_._1)\n     \
    \   val guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndex =\
    \ guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndex.map { case\
    \ (score, index) => index -> score }\n        val guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSorted.sortBy(_._2)\n\
    \        val guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndex.map\
    \ { case (score, index) => index -> score }\n        val guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._2)\n\
    \        val guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.map\
    \ { case (score, index) => index -> score }", "        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val guessesCount = guesses.size\n \
    \       val scoresCount = scores.size\n        val result = new Array[Long](guessesCount)\n\
    \        val guessesIndex = 0\n        val scoresIndex = 0\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        while (guessesIndex\
    \ < guessesCount && scoresIndex < scoresCount) {\n            if (guesses(guessesIndex)\
    \ == scores(scoresIndex)) {\n                result(guessesIndex) = results(guessesIndex)\n\
    \                guessesIndex += 1\n                scoresIndex += 1\n       \
    \     } else if (guesses(guessesIndex) < scores(scoresIndex)) {\n            \
    \    result(guessesIndex) = results(guessesIndex) - abs(scores(scoresIndex) -\
    \ guesses(guessesIndex))\n                guessesIndex += 1\n            } else\
    \ {\n                result(guessesIndex) = abs(guesses(guessesIndex) - scores(scoresIndex))\n\
    \                scoresIndex += 1\n            }\n        }\n        result",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n       \
    \ val guessScoreList = guessScoreMap.toList\n        val gameScoreSet = gameScoreList.map(x\
    \ => x._2)\n        val guessScoreSet = guessScoreList.map(x => x._2)\n      \
    \  val gameScoreMap = gameScoreSet.zip(guessScoreSet).map(x => (x._1, x._2 - x._1)).toMap\n\
    \        val gameScoreList = gameScoreMap.toList\n        val gameScoreSet = gameScoreList.map(x\
    \ => x._2)\n        val gameScoreMap = gameScoreSet.zip(guessScoreSet).map(x =>\
    \ (x._1, x._2 - x._1)).toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.map(x => x._2)\n        val gameScoreMap\
    \ = gameScoreSet.zip(guessScoreSet).map(x => (x._1, x._2 - x._1)).toMap\n    \
    \    val gameScoreList = gameScoreMap.toList\n        val gameScoreSet = gameScoreList.map(x\
    \ => x._2)\n        val gameScoreMap = gameScoreSet.zip(guessScoreSet).map(x =>\
    \ (x._1, x._2 - x._1)).toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.map(x => x._2)\n        val gameScoreMap\
    \ = gameScoreSet.zip(guessScoreSet).map(x => (x._1, x._2 - x._1)).toMap\n    \
    \    val gameScoreList = gameScoreMap.toList\n        val gameScoreSet = gameScoreList.map(x\
    \ => x._2)\n        val gameScoreMap = gameScoreSet.zip(guessScoreSet).map(x =>\
    \ (x._1, x._2 - x._1)).toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.map(x => x._2)\n        val gameScoreMap\
    \ = gameScoreSet.zip(guessScoreSet).map(x => (x._1, x._2 - x._1)).toMap\n    \
    \    val gameScoreList = gameScoreMap.toList\n        val gameScoreSet = gameScoreList.map(x\
    \ => x._2)\n        val gameScoreMap = gameScoreSet.zip(guess", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesDiff\
    \ = guessesScores.zip(gameScores).map { case (guess, score) =>\n            if\
    \ (guess == score) 0 else math.abs(guess - score)\n        }\n        guessesDiff.toList",
  "        val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ results = new mutable.ArrayBuffer[Long]()\n        val correct = guesses.filter(x\
    \ => x == scores(0))\n        val wrong = guesses.filter(x => x != scores(0))\n\
    \        val diff = wrong.map(x => Math.abs(x - scores(0))) \n        diff foreach\
    \ { x => results += x }\n        correct foreach { x => results += 0 }\n     \
    \   results", "        val gameLen = game.size\n        val guessLen = guess.size\n\
    \        val result = new Array[Long](guessLen)\n        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n\
    \        val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScore", "        val guesses = guess.map(x => Math.abs(x - game(x)))\n\
    \        guesses.toList", "        val guesses = guess.toList\n        val scores\
    \ = game.toList\n        val guessesCount = guesses.size\n        val scoresCount\
    \ = scores.size\n        val results = new mutable.ArrayList[Long](guessesCount)\n\
    \        val guessesDiff = new mutable.ArrayList[Long](guessesCount)\n       \
    \ val scoresDiff = new mutable.ArrayList[Long](scoresCount)\n        val guessesDiffCount\
    \ = new mutable.ArrayList[Long](guessesCount)\n        val scoresDiffCount = new\
    \ mutable.ArrayList[Long](scoresCount)\n        val guessesDiffCount2 = new mutable.ArrayList[Long](guessesCount)\n\
    \        val scoresDiffCount2 = new mutable.ArrayList[Long](scoresCount)\n   \
    \     val guessesDiffCount3 = new mutable.ArrayList[Long](guessesCount)\n    \
    \    val scoresDiffCount3 = new mutable.ArrayList[Long](scoresCount)\n       \
    \ val guessesDiffCount4 = new mutable.ArrayList[Long](guessesCount)\n        val\
    \ scoresDiffCount4 = new mutable.ArrayList[Long](scoresCount)\n        val guessesDiffCount5\
    \ = new mutable.ArrayList[Long](guessesCount)\n        val scoresDiffCount5 =\
    \ new mutable.ArrayList[Long](scoresCount)\n        val guessesDiffCount6 = new\
    \ mutable.ArrayList[Long](guessesCount)\n        val scoresDiffCount6 = new mutable.ArrayList[Long](scoresCount)\n\
    \        val guessesDiffCount7 = new mutable.ArrayList[Long](guessesCount)\n \
    \       val scoresDiffCount7 = new mutable.ArrayList[Long](scoresCount)\n    \
    \    val guessesDiffCount8 = new mutable.ArrayList[Long](guessesCount)\n     \
    \   val scoresDiffCount8 = new mutable.ArrayList[Long](scoresCount)\n        val\
    \ guessesDiffCount9 = new mutable.ArrayList[Long](guessesCount)\n        val scoresDiffCount9\
    \ = new mutable.ArrayList[Long](scoresCount)\n        val guessesDiffCount10 =\
    \ new mutable.ArrayList[Long](guessesCount)\n        val scoresDiffCount10 = new\
    \ mutable.ArrayList[Long](scoresCount)\n        val guessesDiffCount11 = new mutable.ArrayList[Long](guessesCount)\n\
    \        val scoresDiffCount11 = new mutable.ArrayList[Long](scoresCount)\n  \
    \      val guessesDiffCount12 = new mutable.ArrayList[Long](guessesCount)\n  \
    \      val scoresDiffCount12 = new mutable.ArrayList[Long](scoresCount)\n    \
    \    val ", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n\
    \        val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScores\
    \ = gameScores.toList\n        val guessScores = guessScores.toList\n        val\
    \ gameScores = gameScores.sortBy(_._1)\n        val guessScores = guessScores.sortBy(_._1)\n\
    \        val gameScores = gameScores.reverse\n        val guessScores = guessScores.reverse\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val guessScores = guessScores.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScores = gameScores.toList\n        val guessScores\
    \ = guessScores.toList\n        val gameScores = gameScores.sortBy(_._1)\n   \
    \     val guessScores = guessScores.sortBy(_._1)\n        val gameScores = gameScores.reverse\n\
    \        val guessScores = guessScores.reverse\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guessScores.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScores = gameScores.toList\n\
    \        val guessScores = guessScores.toList\n        val gameScores = gameScores.sortBy(_._1)\n\
    \        val guessScores = guessScores.sortBy(_._1)\n        val gameScores =\
    \ gameScores.reverse\n        val guessScores = guessScores.reverse\n        val\
    \ gameScores = gameScores.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guessScores.zipWithIndex.map { case (score, index)\
    \ => score }\n        val gameScores = gameScores.toList\n        val guessScores\
    \ = guessScores.toList\n        val gameScores = gameScores.sortBy(_._1)\n   \
    \     val guessScores = guessScores.sortBy(_._1)\n        val gameScores = gameScores.reverse\n\
    \        val guessScores = guessScores.reverse\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guessScores.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScores = gameScores.toList\n\
    \        val guessScore", "        val gameScores = game.map(_.toInt)\n      \
    \  val guessScores = guess.map(_.toInt)\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.", "        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessesScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val gameScoreMap\
    \ = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n        val guessesScoreMap\
    \ = guessesScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n        val gameScoreArray\
    \ = gameScoreMap.values\n        val guessesScoreArray = guessesScoreMap.values\n\
    \        val gameScoreArrayLength = gameScoreArray.length\n        val guessesScoreArrayLength\
    \ = guessesScoreArray.length\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessesScoreArrayLength = guessesScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessesScoreArrayLength = guessesScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessesScoreArrayLength\
    \ = guessesScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessesScoreArrayLength = guessesScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessesScoreArrayLength = guessesScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessesScoreArrayLength\
    \ = guessesScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessesScoreArrayLength = guessesScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessesScoreArrayLength = guessesScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessesScoreArrayLength\
    \ = guessesScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessesScoreArrayLength = guessesScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessesScoreArrayLength = guessesScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessesScoreArrayLength\
    \ = guessesScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength\n\
    \        val guessesScoreArrayLength = guessesScoreArrayLength\n        val gameScoreArrayLength\
    \ = gameScoreArrayLength\n        val guessesScoreArrayLength = guessesScoreArrayLength\n\
    \        val gameScoreArrayLength = gameScoreArrayLength\n        val guessesScoreArrayLength\
    \ = guessesScoreArrayLength\n        val gameScoreArrayLength = gameScoreArrayLength",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score -> index }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessesScoreMap = guessesScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n\
    \        val guessesScoreKeys = guessesScoreMap.keys\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessesScoreValues = guessesScoreMap.values.toList\n\
    \        val gameScoreKeysSet = gameScoreKeys.toSet\n        val guessesScoreKeysSet\
    \ = guessesScoreKeys.toSet\n        val gameScoreValuesSet = gameScoreValues.toSet\n\
    \        val guessesScoreValuesSet = guessesScoreValues.toSet\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val gameScoreValuesSetSize = gameScoreValuesSet.size\n        val guessesScoreValuesSetSize\
    \ = guessesScoreValuesSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val gameScoreValuesSetSize\
    \ = gameScoreValuesSet.size\n        val guessesScoreValuesSetSize = guessesScoreValuesSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val gameScoreValuesSetSize = gameScoreValuesSet.size\n\
    \        val guessesScoreValuesSetSize = guessesScoreValuesSet.size\n        val\
    \ gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val gameScoreValuesSetSize = gameScoreValuesSet.size\n\
    \        val guessesScoreValuesSetSize = guessesScoreValuesSet.size\n        val\
    \ gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val gameScoreValuesSetSize = gameScoreValuesSet.size\n\
    \        val guessesScoreValuesSetSize = guessesScoreValuesSet.size\n        val\
    \ gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKey", "        val guesses = guess.toSet\n        val scores =\
    \ game.toSet\n        val guessesWithScore = guesses.map(x => (x, scores(x)))\n\
    \        val guessesWithScoreSorted = guessesWithScore.sortBy(_._1)\n        val\
    \ guessesWithScoreSortedSortedByGuess = guessesWithScoreSorted.sortBy(_._2)\n\
    \        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => x._1)\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._2))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._1))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._2))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._1))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._2))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._1))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._2))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._1))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._2))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._1))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._2))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._1))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._2))\n        val guessesWithScoreSortedSortedByGuess = guessesWithScoreSortedSortedByGuess.map(x\
    \ => (x, x._1))\n        ", "        val gameScores = game.zipWithIndex.map(x\
    \ => x._2)\n        val guessesScores = guess.zipWithIndex.map(x => x._2)\n  \
    \      val guessesCorrect = guessesScores.map(x => if (x._1 == x._2) 0 else abs(x._1\
    \ - x._2))\n        val guessesDiff = guessesScores.map(x => if (x._1 == x._2)\
    \ 0 else abs(x._1 - x._2))\n        val guessesDiff2 = guessesScores.map(x =>\
    \ if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff3 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff4 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff5 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff6 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff7 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff8 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff9 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff10 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff11 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff12 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff13 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff14 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff15 = guessesScores.map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        val guessesDiff16 = guesses",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values.toList\n\
    \        val guessScoreValues = guessScoreMap.values.toList\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = ", "        val gameScores = game.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessesDiff = guessesScores.zip(gameScores).map { case\
    \ (guess, game) => math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }", "        // Your code here\n        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreArray = gameScores.toArray\n        val guessesScoreArray =\
    \ guessesScores.toArray\n        val gameScoreArrayMap = gameScores.toMap.toArray\n\
    \        val guessesScoreArrayMap = guessesScores.toMap.toArray\n        val gameScoreArrayMap\
    \ = gameScores.toMap.toArray\n        val guessesScoreArrayMap = guessesScores.toMap.toArray\n\
    \        val gameScoreArrayMap = gameScores.toMap.toArray\n        val guessesScoreArrayMap\
    \ = guessesScores.toMap.toArray\n        val gameScoreArrayMap = gameScores.toMap.toArray\n\
    \        val guessesScoreArrayMap = guessesScores.toMap.toArray\n        val gameScoreArrayMap\
    \ = gameScores.toMap.toArray\n        val guessesScoreArrayMap = guessesScores.toMap.toArray\n\
    \        val gameScoreArrayMap = gameScores.toMap.toArray\n        val guessesScoreArrayMap\
    \ = guessesScores.toMap.toArray\n        val gameScoreArrayMap = gameScores.toMap.toArray\n\
    \        val guessesScoreArrayMap = guessesScores.toMap.toArray\n        val gameScoreArrayMap\
    \ = gameScores.toMap.toArray\n        val guessesScoreArrayMap = guessesScores.toMap.toArray\n\
    \        val gameScoreArrayMap = gameScores.toMap.toArray\n        val guessesScoreArrayMap\
    \ = guessesScores.toMap.toArray\n        val gameScoreArrayMap = gameScores.toMap.toArray\n\
    \        val guessesScoreArrayMap = guessesScores.toMap.toArray\n        val gameScoreArrayMap\
    \ = gameScores.toMap.toArray\n        val guessesScoreArrayMap = guessesScores.toMap.toArray\n\
    \        val gameScoreArrayMap = gameScores.toMap.toArray\n        val guessesScoreArrayMap\
    \ = guessesScores.toMap.toArray\n        val gameScoreArrayMap = gameScores.toMap.toArray\n\
    \        val guessesScoreArrayMap = guessesScores.toMap.toArray\n        val gameScoreArrayMap\
    \ = gameScores.toMap.toArray\n        val guessesScoreArrayMap = guessesScores.",
  "        val gameScores = game.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val guessScores = guess.zipWithIndex.map{case (score, index) => score}.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreMapWithIndex = gameScoreMap.zipWithIndex\n        val guessScoreMapWithIndex\
    \ = guessScoreMap.zipWithIndex\n        val gameScoreMapWithIndexAndGuess = gameScoreMapWithIndex.zip(guessScoreMapWithIndex)\n\
    \        val gameScoreMapWithIndexAndGuessAndScore = gameScoreMapWithIndexAndGuess.map{case\
    \ (gameScore, guessScore, index) => (gameScore, guessScore, index)}\n        val\
    \ gameScoreMapWithIndexAndGuessAndScoreAndGuess = gameScoreMapWithIndexAndGuessAndScore.map{case\
    \ (gameScore, guessScore, index) => (gameScore, guessScore, index)}\n        val\
    \ gameScoreMapWithIndexAndGuessAndScoreAndGuessAndScore = gameScoreMapWithIndexAndGuessAndScoreAndGuess.map{case\
    \ (gameScore, guessScore, index) => (gameScore, guessScore, index)}\n        val\
    \ gameScoreMapWithIndexAndGuessAndScoreAndGuessAndScoreAndGuess = gameScoreMapWithIndexAndGuessAndScoreAndGuessAndScore.map{case\
    \ (gameScore, guessScore, index) => (gameScore, guessScore, index)}\n        val\
    \ gameScoreMapWithIndexAndGuessAndScoreAndGuessAndScoreAndGuessAndScore = gameScoreMapWithIndexAndGuessAndScoreAndGuessAndScoreAndGuess.map{case\
    \ (gameScore, guessScore, index) => (gameScore, guessScore, index)}\n        val\
    \ gameScoreMapWithIndexAndGuessAndScoreAndGuessAndScoreAndGuessAndScoreAndGuess\
    \ = gameScoreMapWithIndexAndGuessAndScoreAndGuessAndScoreAndGuessAndScore.map{case\
    \ (gameScore, guessScore, index) => (gameScore, guessScore, index)}\n        val\
    \ gameScoreMapWithIndexAndGuessAndScoreAndGuessAndScoreAndGuessAndScoreAndGuessAndScore\
    \ = gameScoreMapWithIndexAndGuessAnd", "        val guesses = guess.toSet\n  \
    \      val scores = game.toSet\n        val result = new mutable.ArrayList[Long]()\n\
    \        for(i <- 0 until guess.size) {\n            val score = scores.get(i)\n\
    \            val guess = guesses.get(i)\n            val diff = abs(guess - score)\n\
    \            if(guess == score) {\n                result.add(0)\n           \
    \ } else {\n                result.add(diff)\n            }\n        }\n     \
    \   return result.toList", "        val gameLen = game.length\n        val guessLen\
    \ = guess.length\n        val result = new Array[Long](guessLen)\n        val\
    \ gameScores = game.zipWithIndex.filter(_._2 != 0).map(_._1)\n        val guessScores\
    \ = guess.zipWithIndex.filter(_._2 != 0).map(_._1)\n        val gameScoreMap =\
    \ gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        guessScoreMap.foreach\
    \ { case (score, index) =>\n            val guess = guessScoreMap(index)\n   \
    \         if (gameScoreMap(index) == score) {\n                result(index) =\
    \ guess\n            } else {\n                result(index) = abs(guess - score)\n\
    \            }\n        }\n        result", "        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val result = guesses.map(x => if (x\
    \ == scores(0)) 0 else abs(x - scores(0)))\n        result", "        val gameScores\
    \ = game.zipWithIndex.map{case (score, index) => score}\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreMap = gameScoreList.zipWithIndex.map{case (score, index)\
    \ => score}.toMap\n        val guessScoreMap = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreMap = gameScoreList.zipWithIndex.map{case (score, index) =>\
    \ score}.toMap\n        val guessScoreMap = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreMap = gameScoreList.zipWithIndex.map{case (score, index) =>\
    \ score}.toMap\n        val guessScoreMap = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreMap = gameScoreList.zipWithIndex.map{case (score, index) =>\
    \ score}.toMap\n        val guessScoreMap = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreMap = gameScoreList.zipWithIndex.map{case (score, index) =>\
    \ score}.toMap\n        val guess", "        val gameScores = game.zipWithIndex.map{\
    \ case (score, index) => score }.toList\n        val guessScores = guess.zipWithIndex.map{\
    \ case (score, index) => score }.toList\n        val gameScoreMap = gameScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val guessScoreMap = guessScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.zipWithIndex.map{ case (score, index) => index\
    \ -> score }.toMap\n        val guessScoreMap = guessScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.zipWithIndex.map{ case (score, index) => index\
    \ -> score }.toMap\n        val guessScoreMap = guessScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.zipWithIndex.map{ case (score, index) => index\
    \ -> score }.toMap\n        val guessScoreMap = guessScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.zipWithIndex.map{ case (score, index) => index\
    \ -> score }.toMap\n        val guessScoreMap = guessScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.zipWithIndex.map{ case (score, index) => index\
    \ -> score }.toMap\n        val guessScoreMap = guessScores.zipWithIndex.map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreArray =\
    \ gameScores.toArray\n        val guessScoreArray = guessScores.toArray\n    \
    \    val gameScoreMap = gameScores.zipWithIndex", "        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        for(i <- 0 until guess.size) {\n            val score = scores(i)\n \
    \           val guess = guesses(i)\n            val difference = guess - score\n\
    \            if(guess == score) {\n                result.push(0)\n          \
    \  } else {\n                result.push(difference)\n            }\n        }\n\
    \        result.toList", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n\
    \        val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessScoreKeySet\
    \ = guessScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessScoreValueSet = guessScoreValues.toSet\n        val gameScoreKeySetSet\
    \ = gameScoreKeySet.toSet\n        val guessScoreKeySetSet = guessScoreKeySet.toSet\n\
    \        val gameScoreValueSetSet = gameScoreValueSet.toSet\n        val guessScoreValueSetSet\
    \ = guessScoreValueSet.toSet\n        val gameScoreKeySetSetSet = gameScoreKeySetSet.toSet\n\
    \        val guessScoreKeySetSetSet = guessScoreKeySetSet.toSet\n        val gameScoreValueSetSetSet\
    \ = gameScoreValueSetSet.toSet\n        val guessScoreValueSetSetSet = guessScoreValueSetSet.toSet\n\
    \        val gameScoreKeySetSetSetSet = gameScoreKeySetSetSet.toSet\n        val\
    \ guessScoreKeySetSetSetSet = guessScoreKeySetSetSet.toSet\n        val gameScoreValueSetSetSetSet\
    \ = gameScoreValueSetSetSet.toSet\n        val guessScoreValueSetSetSet = guessScoreValueSetSet.toSet\n\
    \        val gameScoreKeySetSetSetSetSet = gameScoreKeySetSetSet.toSet\n     \
    \   val guessScoreKeySetSetSetSet = guessScoreKeySetSet.toSet\n        val gameScoreValueSetSetSetSet\
    \ = gameScoreValueSetSet.toSet\n        val guessScoreValueSetSetSet = guessScoreValueSetSet.toSet\n\
    \        val gameScoreKeySetSetSetSetSet = gameScoreKeySetSetSet.toSet\n     \
    \   val guessScoreKeySetSetSetSet = guessScoreKeySetSet.toSet\n        val gameScoreValueSetSetSetSet\
    \ = gameScoreValueSetSet.toSet\n        val guessScoreValueSetSetSet = guessScoreValue",
  "        val gameScores = game.zipWithIndex.map{case (score, index) => score}\n\
    \        val guessesScores = guess.zipWithIndex.map{case (score, index) => score}\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val ", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScore = gameScores.sum\n        val guessScore\
    \ = guessScores.sum\n        val diffs = guessScores.zip(gameScores).map { case\
    \ (guess, game) => math.abs(guess - game) }\n        diffs.toList", "        val\
    \ guesses = guess.toList\n        val scores = game.toList\n        val guessesCount\
    \ = guesses.size\n        val scoresCount = scores.size\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < guessesCount)\
    \ {\n            val guess = guesses(i)\n            val score = scores(i)\n \
    \           val difference = abs(guess - score)\n            if (difference <\
    \ score) {\n                result.clear()\n                result.add(difference)\n\
    \            } else {\n                result.add(0)\n            }\n        \
    \    i += 1\n        }\n        result.toList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScores = gameScoreList.zip(guessesScoreList).map { case (gameScore,\
    \ guessesScore) => Math.abs(gameScore - guessesScore) }\n        gameScores",
  "        val guesses = guess.toSet\n        val scores = game.toSet\n        val\
    \ result = new mutable.ArrayList[Long]()\n        val guessesWithScore = scores.map(x\
    \ => (x, game(x)))\n        val guessesWithScoreSortedByScore = guessesWithScore.sortBy(_._2)\n\
    \        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByScore.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val guessesWithScoreSortedByGuess = guessesWithScoreSortedByGuess.filter(_._2\
    \ > 0)\n        val ", "        val gameScores = game.zipWithIndex.map{case (score,\
    \ index) => score}.toList\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreList: List[Long] = gameScoreMap.map(_._2).flatten.toList\n\
    \        val guessScoreList: List[Long] = guessScoreMap.map(_._2).flatten.toList\n\
    \        val gameScoreDiff = gameScoreList.zip(guessScoreList).map{case (gameScore,\
    \ guessScore) => Math.abs(gameScore - guessScore)}\n        gameScoreDiff.toList",
  "        val scores : List[Long] = game.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val guesses : List[Long] = guess.zipWithIndex.map { case (guess,\
    \ index) => guess }\n        val diffs : List[Long] = guesses.zip(scores).map\
    \ { case (guess, score) =>\n            val diff = guess - score\n           \
    \ if (diff < 0) diff else diff\n        }\n        diffs", "        val guesses\
    \ = guess.toSet\n        val scores = game.toSet\n        val results = new mutable.ArrayList[Long]()\n\
    \        val guessesWithScore = guess.zip(game)\n        val scoresWithGuesses\
    \ = scores.zip(guesses)\n        guessesWithScore.foreach { case (guess, score)\
    \ =>\n            if (score == guess) {\n                results.add(0)\n    \
    \        } else {\n                val difference = guess - score\n          \
    \      results.add(difference)\n            }\n        }\n        results.toList",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreCount = gameScores.count\n        val guessScoreCount\
    \ = guessScores.count\n        val gameScoreDiff = gameScoreCount - guessScoreCount\n\
    \        val guessScoreDiff = guessScoreCount - gameScoreCount\n        val gameScoreDiffs\
    \ = gameScores.zip(guessScores).map { case (gameScore, guessScore) =>\n      \
    \      val gameScoreDiff = gameScore - guessScore\n            if (gameScoreDiff\
    \ < 0)\n                gameScoreDiff\n            else\n                gameScoreDiff\
    \ + gameScoreDiff\n        }\n        val guessScoreDiffs = guessScores.zip(gameScores).map\
    \ { case (guessScore, gameScore) =>\n            val guessScoreDiff = guessScore\
    \ - gameScore\n            if (guessScoreDiff < 0)\n                guessScoreDiff\n\
    \            else\n                guessScoreDiff + guessScoreDiff\n        }\n\
    \        gameScoreDiffs.zip(guessScoreDiffs).map { case (gameScoreDiff, guessScoreDiff)\
    \ =>\n            if (gameScoreDiff < 0)\n                guessScoreDiff\n   \
    \         else\n                gameScoreDiff + guessScoreDiff\n        }", " \
    \       val scores : List[Long] = game.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guesses : List[Long] = guess.zipWithIndex.map { case\
    \ (guess, index) => guess }\n        val guessesWithScores : List[(Long, Long)]\
    \ = guesses.zipWithIndex.map { case (guess, index) => (guess, scores(index)) }\n\
    \        val guessesWithScoreAndIndex : List[(Long, Long, Int)] = guessesWithScores.zipWithIndex.map\
    \ { case (guess, score, index) => (guess, score, index) }\n        val guessesWithScoreAndIndexAndGuessed\
    \ : Set[Long] = guessesWithScoreAndIndex.map { case (guess, score, index, guessed)\
    \ => (guess, score, index, guessed) }.toSet\n        val guessesWithScoreAndIndexAndGuessed\
    \ : Set[Long] = guessesWithScoreAndIndex.map { case (guess, score, index, guessed)\
    \ => (guess, score, index, guessed) }.toSet\n        val guessesWithScoreAndIndexAndGuessed\
    \ : Set[Long] = guessesWithScoreAndIndex.map { case (guess, score, index, guessed)\
    \ => (guess, score, index, guessed) }.toSet\n        val guessesWithScoreAndIndexAndGuessed\
    \ : Set[Long] = guessesWithScoreAndIndex.map { case (guess, score, index, guessed)\
    \ => (guess, score, index, guessed) }.toSet\n        val guessesWithScoreAndIndexAndGuessed\
    \ : Set[Long] = guessesWithScoreAndIndex.map { case (guess, score, index, guessed)\
    \ => (guess, score, index, guessed) }.toSet\n        val guessesWithScoreAndIndexAndGuessed\
    \ : Set[Long] = guessesWithScoreAndIndex.map { case (guess, score, index, guessed)\
    \ => (guess, score, index, guessed) }.toSet\n        val guessesWithScoreAndIndexAndGuessed\
    \ : Set[Long] = guessesWithScoreAndIndex.map { case (guess, score, index, guessed)\
    \ => (guess, score, index, guessed) }.toSet\n        val guessesWithScoreAndIndexAndGuessed\
    \ : Set[Long] = guessesWithScoreAndIndex.map { case (guess, score, index, guessed)\
    \ => (guess, score, index, guessed) }.toSet\n        val guessesWithScoreAndIndexAnd",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score }\n\
    \        val guessScores = guess.zipWithIndex.map { case (score, index) => score\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessScoreSet =\
    \ guessScores.toSet\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreSetMap =\
    \ gameScores.toMap.toSet\n        val guessScoreSetMap = guessScores.toMap.toSet\n\
    \        val gameScoreSetSetMap = gameScores.toMap.toSet.toSet\n        val guessScoreSetSetMap\
    \ = guessScores.toMap.toSet.toSet\n        val gameScoreSetListMap = gameScores.toMap.toSet.toList\n\
    \        val guessScoreSetListMap = guessScores.toMap.toSet.toList\n        val\
    \ gameScoreSetMapMap = gameScores.toMap.toSet.toMap\n        val guessScoreSetMapMap\
    \ = guessScores.toMap.toSet.toMap\n        val gameScoreSetSetMapMap = gameScores.toMap.toSet.toMap.toMap\n\
    \        val guessScoreSetSetMapMap = guessScores.toMap.toSet.toMap.toMap\n  \
    \      val gameScoreSetListMapMap = gameScores.toMap.toSet.toList.toMap\n    \
    \    val guessScoreSetListMapMap = guessScores.toMap.toSet.toList.toMap\n    \
    \    val gameScoreSetMapMapMap = gameScores.toMap.toSet.toMap.toMap\n        val\
    \ guessScoreSetMapMapMap = guessScores.toMap.toSet.toMap.toMap\n        val gameScoreSetSetMapMapMap\
    \ = gameScores.toMap.toSet.toMap.toMap.toMap\n        val guessScoreSetSetMapMapMap\
    \ = guessScores.toMap.toSet.toMap.toMap.toMap\n        val gameScoreSetListMapMap\
    \ = gameScores.toMap.toSet.toList.toMap.toMap\n        val guessScoreSetListMapMap\
    \ = guessScores.toMap.toSet.toList.toMap.toMap\n        val gameScoreSetMapMapMapMap\
    \ = gameScores.toMap.toSet.toMap.toMap.toMap\n        val guessScoreSetMapMapMapMap\
    \ = guessScores.toMap.toSet.toMap.toMap.toMap\n        val gameScoreSetSetMapMapMapMap\
    \ = gameScores.toMap.toSet", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreSet = gameScores.toSet\n    \
    \    val guessScoreSet = guessScores.toSet\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSetList\
    \ = gameScores.toList\n        val guessScoreSetList = guessScores.toList\n  \
    \      val gameScoreSetSet = gameScores.toSet.toSet\n        val guessScoreSetSet\
    \ = guessScores.toSet.toSet\n        val gameScoreSetList = gameScores.toList.toList\n\
    \        val guessScoreSetList = guessScores.toList.toList\n        val gameScoreSetSetList\
    \ = gameScores.toSet.toList.toList\n        val guessScoreSetSetList = guessScores.toSet.toList.toList\n\
    \        val gameScoreSetSetSet = gameScores.toSet.toSet.toSet\n        val guessScoreSetSetSet\
    \ = guessScores.toSet.toSet.toSet\n        val gameScoreSetSetList = gameScores.toSet.toList.toList\n\
    \        val guessScoreSetSetList = guessScores.toSet.toList.toList\n        val\
    \ gameScoreSetSetSet = gameScores.toSet.toSet.toSet\n        val guessScoreSetSetSet\
    \ = guessScores.toSet.toSet.toSet\n        val gameScoreSetSetSetList = gameScores.toSet.toList.toList.toList\n\
    \        val guessScoreSetSetSetList = guessScores.toSet.toList.toList.toList\n\
    \        val gameScoreSetSetSetSet = gameScores.toSet.toSet.toSet.toSet\n    \
    \    val guessScoreSetSetSetSet = guessScores.toSet.toSet.toSet.toSet\n      \
    \  val gameScoreSetSetSetSetList = gameScores.toSet.toSet.toList.toList.toList\n\
    \        val guessScoreSetSetSetSetList = guessScores.toSet.toSet.toList.toList.toList\n\
    \        val gameScoreSetSetSetSetSet = gameScores.toSet.toSet.toSet.toSet.toSet\n\
    \        val guessScoreSetSetSetSetSet = guessScores.toSet.toSet.toSet.toSet.toSet\n\
    \        val gameScoreSetSetSetSetSetList = gameScores.toSet.toSet.toList.toList.toList.toList\n\
    \        ", "        val gameScores = game.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScore = gameScores.sum\n        val guessScore\
    \ = guessScores.sum\n        val gameScoreDiff = gameScore - guessScore\n    \
    \    val gameScoreDiffs = gameScoreDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val gameScoreDiffsSorted = gameScoreDiffs.sortWith(_ < _)\n\
    \        val gameScoreDiffsSortedIndex = gameScoreDiffsSorted.zipWithIndex.map\
    \ { case (score, index) => index }\n        val gameScoreDiffsSortedIndexReversed\
    \ = gameScoreDiffsSortedIndex.zipWithIndex.map { case (index, score) => score\
    \ }\n        val gameScoreDiffsSortedIndexReversedSorted = gameScoreDiffsSortedIndexReversed.sortWith(_\
    \ < _)\n        val gameScoreDiffsSortedIndexReversedSortedIndex = gameScoreDiffsSortedIndexReversedSorted.zipWithIndex.map\
    \ { case (score, index) => index }\n        val gameScoreDiffsSortedIndexReversedSortedIndexReversed\
    \ = gameScoreDiffsSortedIndexReversedSortedIndex.zipWithIndex.map { case (index,\
    \ score) => score }\n        val gameScoreDiffsSortedIndexReversedSortedIndexReversedSorted\
    \ = gameScoreDiffsSortedIndexReversedSortedIndexReversed.sortWith(_ < _)\n   \
    \     val gameScoreDiffsSortedIndexReversedSortedIndexReversedSortedIndex = gameScoreDiffsSortedIndexReversedSortedIndexReversedSortedIndex.zipWithIndex.map\
    \ { case (score, index) => index }\n        val gameScoreDiffsSortedIndexReversedSortedIndexReversedSortedIndexReversed\
    \ = gameScoreDiffsSortedIndexReversedSortedIndexReversedSortedIndexReversed.zipWithIndex.map\
    \ { case (index, score) => score }\n        val gameScoreDiffsSortedIndexReversedSortedIndexReversedSortedIndexReversedSorted\
    \ = gameScoreDiffsSortedIndexReversedSortedIndexReversedSortedIndexReversedSorted.zipWithIndex.map\
    \ { case (score, index) => index }\n        val gameScoreDiffsSortedIndexReversedSortedIndexReversedSortedIndexReversedSortedIndex\
    \ = gameScoreDiffsSortedIndexReversedSortedIndexReversedSortedIndexReversedSortedIndex.zipWithIndex.map\
    \ { case (score, index) => index }\n        val ", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }", '        // Your code here', "        val guesses\
    \ = guess.toList\n        val scores = game.toList\n        val guessesCount =\
    \ guesses.size\n        val scoresCount = scores.size\n        val results = new\
    \ mutable.ArrayList[Long](guessesCount)\n        val guessesRemaining = guessesCount\
    \ - 1\n        val scoresRemaining = scoresCount - 1\n        val guessesRemainingCount\
    \ = guessesRemaining\n        val scoresRemainingCount = scoresRemaining\n   \
    \     var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n   \
    \     var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n   \
    \     var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n   \
    \     var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n   \
    \     var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n   \
    \     var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n   \
    \     var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n   \
    \     var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n   \
    \     var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n   \
    \     var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n   \
    \     var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n   \
    \     var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n   \
    \     var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n   \
    \     var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n   \
    \     var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n   \
    \     var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n   \
    \     var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n   \
    \     var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n   \
    \     var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n   \
    \     var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n   \
    \     var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n   \
    \     var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n   \
    \     var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n   \
    \     var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n   \
    \     var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n   \
    \     var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n   \
    \     var i = 0\n        var j = 0\n        var k = 0\n        var l = 0", " \
    \       val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessesScores = guess.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessesDiff = guessesScores.zip(gameScores).map { case\
    \ (guess, score) => (guess - score) }\n        guessesDiff.filter(x => x < 0).map(x\
    \ => math.abs(x))", "        val guesses = guess.toList\n        val scores =\
    \ game.toList\n        val guessesCount = guesses.size\n        val scoresCount\
    \ = scores.size\n        val result = new Array[Long](guessesCount)\n        var\
    \ i = 0\n        while (i < guessesCount) {\n            val guess = guesses(i)\n\
    \            val score = scores(i)\n            val difference = abs(guess - score)\n\
    \            result(i) = difference\n            i += 1\n        }\n        result",
  "        val gameScores = game.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScore = gameScores.map { case\
    \ (score, index) => score }.toList\n        val guessScore = guessScores.map {\
    \ case (score, index) => score }.toList\n        val gameScoreDiff = gameScore\
    \ diff guessScore\n        val gameScoreDiffList = gameScoreDiff.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreDiffListSorted = gameScoreDiffList.sortBy(_._1)\n\
    \        val gameScoreDiffListSortedReversed = gameScoreDiffListSorted.reverse\n\
    \        val gameScoreDiffListSortedReversedList = gameScoreDiffListSortedReversed.map\
    \ { case (score, index) => index -> score }.toList\n        val gameScoreDiffListSortedReversedListSorted\
    \ = gameScoreDiffListSortedReversedList.sortBy(_._1)\n        val gameScoreDiffListSortedReversedListSortedReversed\
    \ = gameScoreDiffListSortedReversedListSorted.reverse\n        val gameScoreDiffListSortedReversedListSortedReversedList\
    \ = gameScoreDiffListSortedReversedListSortedReversed.map { case (score, index)\
    \ => index -> score }.toList\n        val gameScoreDiffListSortedReversedListSortedReversedListSorted\
    \ = gameScoreDiffListSortedReversedListSortedReversedListSorted.sortBy(_._1)\n\
    \        val gameScoreDiffListSortedReversedListSortedReversedListSortedReversed\
    \ = gameScoreDiffListSortedReversedListSortedReversedListSortedReversed.map {\
    \ case (score, index) => index -> score }.toList\n        val gameScoreDiffListSortedReversedListSortedReversedListSortedReversedList\
    \ = gameScoreDiffListSortedReversedListSortedReversedListSortedReversedListSorted.reverse\n\
    \        val gameScoreDiffListSortedReversedListSortedReversedListSortedReversedListSorted\
    \ = gameScoreDiffListSortedReversedListSortedReversedListSortedReversedListSortedReversed.map\
    \ { case (score, index) => index -> score }.toList\n        val gameScoreDiffListSortedReversedListSortedReversedListSortedReversedListSortedReversed\
    \ = gameScoreDiffListSortedReversedListSortedReversedListSortedReversedListSortedReversedListSorted.reverse\n\
    \        val gameScoreDiffListSortedReversedListSortedReversed", "        // Your\
    \ code here\n        val gameScores = game.map(x => if (x == 0) 0 else x)\n  \
    \      val guessesScores = guess.map(x => if (x == 0) 0 else x)\n        val diffs\
    \ = guessesScores.zip(gameScores).map(x => if (x._1 == x._2) 0 else x._1 - x._2)\n\
    \        diffs", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessScores = guess.zipWithIndex.map { case (score,\
    \ index) => score }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScore = gameScores.sum\n \
    \       val guessScore = guessScores.sum\n        val gameScoreDiff = gameScore\
    \ - guessScore\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map {\
    \ case (diff, index) => diff }\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n\
    \        val gameScoreDiffsSumAbs = gameScoreDiffsSum.abs\n        val guessScoreDiff\
    \ = guessScore - gameScore\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffsSum = guessScoreDiffs.sum\n\
    \        val guessScoreDiffsSumAbs = guessScoreDiffsSum.abs\n        val gameScoreDiffsSumAbsDiffs\
    \ = gameScoreDiffsSumAbs.zipWithIndex.map { case (diff, index) => diff }\n   \
    \     val gameScoreDiffsSumAbsDiffsSum = gameScoreDiffsSumAbsDiffs.sum\n     \
    \   val gameScoreDiffsSumAbsDiffsSumAbs = gameScoreDiffsSumAbsDiffsSum.abs\n \
    \       val guessScoreDiffsSumAbsDiff = guessScoreDiffsSumAbs - gameScoreDiff\n\
    \        val guessScoreDiffsSumAbsDiffs = guessScoreDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffsSumAbsDiffsSum =\
    \ guessScoreDiffsSumAbsDiffsSum.sum\n        val guessScoreDiffsSumAbsDiffsSumAbs\
    \ = guessScoreDiffsSumAbsDiffsSum.abs\n        val gameScoreDiffsSumAbsDiffsSumAbsDiffs\
    \ = gameScoreDiffsSumAbsDiffsSumAbs.zipWithIndex.map { case (diff, index) => diff\
    \ }\n        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSum = gameScoreDiffsSumAbsDiffsSumAbsDiffs.sum\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbs = gameScoreDiffsSumAbsDiffsSumAbsDiffsSum.abs\n\
    \        val guessScoreDiffsSum", "        val guesses = guess.toSet\n       \
    \ val scores = game.toSet\n        val results = new mutable.ArrayBuffer[Long]()\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if (guess == None) results += score\n            else results +=\
    \ abs(guess - score)\n        }\n        results", "        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val guessesCount = guesses.size\n \
    \       val scoresCount = scores.size\n        val result = new mutable.ArrayList[Long](guessesCount)\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val difference\
    \ = abs(guess - score)\n            if (difference == 0) {\n                result(i)\
    \ = difference\n            } else {\n                result(i) = difference\n\
    \            }\n            i += 1\n        }\n        result.toList", "     \
    \   val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesCount = guesses.size\n        val scoresCount = scores.size\n       \
    \ val diffs = mutable.ArrayBuffer.empty[Long]\n        var i = 0\n        while\
    \ (i < guessesCount) {\n            val guess = guesses(i)\n            val score\
    \ = scores(i)\n            val diff = Math.abs(guess - score)\n            diffs\
    \ += diff\n            i += 1\n        }\n        diffs", "        val gameScores\
    \ = game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessesScore = guessesScores.sum\n        val\
    \ diffs = guessesScores.zip(gameScores).map { case (guess, game) => math.abs(guess\
    \ - game) }\n        diffs.toList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) => gameScoreList.add(score)\
    \ }\n        guessScoreMap.foreach { case (score, index) => guessScoreList.add(score)\
    \ }\n        val gameScores = gameScoreList.toList\n        val guessScores =\
    \ guessScoreList.toList\n        val gameScoreMap = gameScores.toMap\n       \
    \ val guessScoreMap = guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach\
    \ { case (score, index) => gameScoreList.add(score) }\n        guessScoreMap.foreach\
    \ { case (score, index) => guessScoreList.add(score) }\n        val gameScores\
    \ = gameScoreList.toList\n        val guessScores = guessScoreList.toList\n  \
    \      val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) => gameScoreList.add(score) }\n        guessScoreMap.foreach { case (score,\
    \ index) => guessScoreList.add(score) }\n        val gameScores = gameScoreList.toList\n\
    \        val guessScores = guessScoreList.toList\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) => gameScoreList.add(score)\
    \ }\n        guessScoreMap.foreach { case (score, index) => guessScoreList.add(score)\
    \ }\n        val gameScores = gameScoreList.toList\n        val guessScores =\
    \ guessScoreList.toList\n        val gameScoreMap = gameScores.toMap\n       \
    \ val guessScore", "        val gameScores = game.zipWithIndex.map { case (score,\
    \ index) => score }\n        val guessesScores = guess.zipWithIndex.map { case\
    \ (score, index) => score }\n        val guessesDiff = guessesScores.zip(gameScores).map\
    \ { case (guess, score) => (guess - score) }\n        guessesDiff.map { case (guess,\
    \ score) => (guess - score) }", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        // Your code here\n        val gameScores\
    \ = game.zipWithIndex.map{ case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map{ case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScoreSet = gameScoreList.distinct\n\
    \        val guessesScoreSet = guessesScoreList.distinct\n        val gameScoreMap\
    \ = gameScoreSet.zip(gameScoreList).map{ case (score, index) => index -> score\
    \ }.toMap\n        val guessesScoreMap = guessesScoreSet.zip(guessesScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessesScoreSet = guessesScoreList.distinct\n\
    \        val gameScoreMap = gameScoreSet.zip(gameScoreList).map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessesScoreMap = guessesScoreSet.zip(guessesScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessesScoreSet = guessesScoreList.distinct\n\
    \        val gameScoreMap = gameScoreSet.zip(gameScoreList).map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessesScoreMap = guessesScoreSet.zip(guessesScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.distinct\n        val guessesScoreSet = guessesScoreList.distinct\n\
    \        val gameScoreMap = gameScoreSet.zip(gameScoreList).map{ case (score,\
    \ index) => index -> score }.toMap\n        val guessesScoreMap = guessesScoreSet.zip(guessesScoreList).map{\
    \ case (score, index) => index -> score }.toMap\n        val gameScoreList = ",
  "        val guesses = guess.toSet\n        val games = game.toSet\n        val\
    \ result = game.zip(guess).map { case (game, guess) =>\n            if (games.contains(guess))\n\
    \                0\n            else\n                Math.abs(guess - game)\n\
    \        }\n        result.toList", "        val guesses = guess.toSet\n     \
    \   val scores = game.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if(guess == None) result += score\n            else result += abs(guess\
    \ - score)\n        }\n        result.toList", "        val gameScores = game.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n\
    \        val guessScoreKeys = guessScoreMap.keySet\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessScoreValues = guessScoreMap.values.toList\n\
    \        val gameScoreKeysSet = gameScoreKeys.toSet\n        val guessScoreKeysSet\
    \ = guessScoreKeys.toSet\n        val gameScoreValuesSet = gameScoreValues.toSet\n\
    \        val guessScoreValuesSet = guessScoreValues.toSet\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreValuesSetSize = gameScoreValuesSet.size\n        val guessScoreValuesSetSize\
    \ = guessScoreValuesSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreValuesSetSize\
    \ = gameScoreValuesSet.size\n        val guessScoreValuesSetSize = guessScoreValuesSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreValuesSetSize = gameScoreValuesSet.size\n\
    \        val guessScoreValuesSetSize = guessScoreValuesSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreValuesSetSize = gameScoreValuesSet.size\n        val guessScoreValuesSetSize\
    \ = guessScoreValuesSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreValuesSetSize\
    \ = gameScoreValuesSet.size\n        val guessScoreValuesSetSize = guessScoreValuesSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreValuesSetSize = gameScoreValuesSet.size\n\
    \        val guessScoreValuesSetSize = guessScoreValuesSet.size\n        val gameScoreKey",
  "        val guesses = guess.toList\n        val scores = game.toList\n        val\
    \ guessesWithScores = guesses.zip(scores)\n        val guessesWithScoresSortedByScore\
    \ = guessesWithScores.sortBy(_._2)\n        val guessesWithScoresSortedByGuess\
    \ = guessesWithScoresSortedByScore.map(x => x._1)\n        val guessesWithScoresSortedByGuessWithScores\
    \ = guessesWithScoresSortedByGuess.zip(scores)\n        val guessesWithScoresSortedByGuessWithScoresSortedByScore\
    \ = guessesWithScoresSortedByGuessWithScores.sortBy(_._2)\n        val guessesWithScoresSortedByGuessWithScoresSortedByGuess\
    \ = guessesWithScoresSortedByGuessWithScoresSortedByScore.map(x => x._1)\n   \
    \     val guessesWithScoresSortedByGuessWithScoresSortedByGuessWithScores = guessesWithScoresSortedByGuessWithScoresSortedByGuess.zip(scores)\n\
    \        val guessesWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByScore\
    \ = guessesWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByScore.map(x\
    \ => x._1)\n        val guessesWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByGuessWithScores\
    \ = guessesWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByGuess.zip(scores)\n\
    \        val guessesWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByScore\
    \ = guessesWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByScore.map(x\
    \ => x._1)\n        val guessesWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByGuessWithScores\
    \ = guessesWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByScore.map(x\
    \ => x._1)\n        val guessesWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByGuessWithScoresSortedByScore",
  "        val guesses = guess.map(x => Math.abs(x - game))\n        val correct =\
    \ game.zip(guesses).map { case (x, y) => if (x == y) 0 else Math.abs(x - y) }\n\
    \        correct.toList", "        val gameScores = game.zipWithIndex.map { case\
    \ (score, index) => score }\n        val guessScores = guess.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess", "        val gameScores = game.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guess.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val guessScoreMap = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val gameScores = gameScoreMap.map{case (score, index) => gameScoreMap.getOrElse(index,\
    \ score)}\n        val guessScores = guessScoreMap.map{case (score, index) =>\
    \ guessScoreMap.getOrElse(index, score)}\n        val gameScores = gameScores.toList\n\
    \        val guessScores = guessScores.toList\n        val gameScoreMap = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val guessScoreMap = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val gameScores = gameScoreMap.map{case (score, index) => gameScoreMap.getOrElse(index,\
    \ score)}\n        val guessScores = guessScoreMap.map{case (score, index) =>\
    \ guessScoreMap.getOrElse(index, score)}\n        val gameScores = gameScores.toList\n\
    \        val guessScores = guessScores.toList\n        val gameScoreMap = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val guessScoreMap = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val gameScores = gameScoreMap.map{case (score, index) => gameScoreMap.getOrElse(index,\
    \ score)}\n        val guessScores = guessScoreMap.map{case (score, index) =>\
    \ guessScoreMap.getOrElse(index, score)}\n        val gameScores = gameScores.toList\n\
    \        val guessScores = guessScores.toList\n        val gameScoreMap = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val guessScoreMap = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val gameScores = gameScoreMap.map{case (score, index) => gameScoreMap.getOrElse(index,\
    \ score)}\n        val guessScores = guessScoreMap.map{case (score, index) =>\
    \ guessScoreMap.getOrElse(index, score)}\n        val gameScores = gameScores.to"]
stop_tokens:
- "\n    }\n"
