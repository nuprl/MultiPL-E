name: HumanEval_106_f
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement the function f that takes n as a parameter,\n    // and returns\
  \ a list of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    //\
  \ i starts from 1.\n    // the factorial of i is the multiplication of the numbers\
  \ from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n \
  \   assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
completions: ["        val factorials = mutable.ListBuffer[Long]()\n        factorials\
    \ ++= 1 to n\n        factorials.filter(_ % 2 == 0).map(x => x * factorials.indexOf(x)).take(n)",
  "        val factorials = mutable.ListBuffer[Long]()\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                factorials += i\n        \
    \    } else {\n                factorials += factorials.head * i\n           \
    \ }\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val i = 1 // start\
    \ from 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      evens += i\n            } else {\n                odds += i\n         \
    \   }\n            factorials += i\n            sums += i\n            i += 1\n\
    \        }\n        evens.toList ++ sums.toList ++ factorials.toList", "     \
    \   val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n   \
    \     factorials += factorials.head\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail * factorials.tail\n \
    \       factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail\n        factorials += factorials.head * factorials.tail *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail\n    \
    \    factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorial", "        val factorials = mutable.ListBuffer[Long]()\n       \
    \ factorials += 1\n        factorials += factorials.head * factorials.tail\n \
    \       factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factori", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        val sum = 0L\n  \
    \      for(i <- 1 to n) {\n            val factorial = factorials.foldLeft(1L)((acc,\
    \ x) => acc * x)\n            factorials += factorial\n            sum += factorial\n\
    \        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        for (i <- 1 to n) {\n            if (i % 2\
    \ == 0) {\n                factorial *= i\n                factorials += factorial\n\
    \            } else {\n                factorial += i\n                factorials\
    \ += factorial\n            }\n        }\n        factorials", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sum = 0L\n        for (i <- 1\
    \ to n) {\n            if (i % 2 == 0) {\n                factorials += i\n  \
    \          } else {\n                sum += i\n            }\n        }\n    \
    \    factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 1 to n) {\n            val factorial =\
    \ factorials.foldLeft(1L)((acc, x) => acc * x)\n            factorials += factorial\n\
    \            sum += factorial\n        }\n        factorials", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factori", "        val factorials = mutable.ListBuffer[Long]()\n    \
    \    val sumOfNumbers = mutable.ListBuffer[Long]()\n        val factorial = 1\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorial\
    \ *= i\n                factorials += factorial\n            } else {\n      \
    \          sumOfNumbers += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        val sum = 1\n       \
    \ val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        val factorial = 1\n        ", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n){\n            if(i%2\
    \ == 0){\n                factorials += i\n            }else{\n              \
    \  factorials += (i*(i+1))\n            }\n        }\n        factorials", " \
    \       val factorials = mutable.ListBuffer[Long]()\n        val factorial = 1\n\
    \        for(i <- 1 to n) {\n            factorials += factorial\n           \
    \ factorial *= i\n        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        var sum = 0\n        for(i <- 1 to n){\n \
    \           if(i%2 == 0){\n                factorial *= i\n                factorials\
    \ += factorial\n            }else{\n                sum += i\n            }\n\
    \        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += factorial(i) * i\n            }else{\n         \
    \       factorials += sum\n            }\n            sum += i\n        }\n  \
    \      factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n   \
    \             factorial *= i\n                factorials += factorial\n      \
    \      }else{\n                sum += i\n                sums += sum\n       \
    \     }\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sums += sum\n            factorial *= i\n            sum += i\n \
    \       }\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val numbers = mutable.ArrayBuffer.empty[Long]\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val number = 1\n        val factorialSum =\
    \ 0\n        val numberSum = 0\n        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]\n        val\
    \ numberSumArray = mutable.ArrayBuffer.empty[Long]\n        val factorialSumArray\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numberSumArray = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorialSumArray = mutable.ArrayBuffer.empty[Long]", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        var sum = 0\n        for(i\
    \ <- 1 to n) {\n            sum += i\n            factorials += sum\n        }\n\
    \        factorials", "        val factorials = mutable.ListBuffer[Long]()\n \
    \       val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n   \
    \     val sum = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n\
    \            sums += sum\n        }\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n        }\n   \
    \     factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 1L to n){\n            if(i%2 == 0){\n\
    \                factorials += i\n                sum += i\n            }\n  \
    \          else{\n                factorials += (i-1) * i\n                sum\
    \ += (i-1) * i\n            }\n        }\n        factorials.toList", "      \
    \  val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val factorialSum = 0\n        val factorialSumEven = 0\n        val factorialSumOdd\
    \ = 0\n        val factorialSumEvenEven = 0\n        val factorialSumOddEven =\
    \ 0\n        val factorialSumEvenOdd = 0\n        val factorialSumOddOdd = 0\n\
    \        val factorialSumEvenEvenOdd = 0\n        val factorialSumOddEvenOdd =\
    \ 0\n        val factorialSumEvenOddOdd = 0\n        val factorialSumOddEvenOdd\
    \ = 0\n        val factorialSumEvenEvenOddOdd = 0\n        val factorialSumOddEvenOddOdd\
    \ = 0\n        val factorialSumEvenOddOddOdd = 0\n        val factorialSumOddEvenOddOdd\
    \ = 0\n        val factorialSumEvenEvenOddOddOdd = 0\n        val factorialSumOddEvenOddOddOdd\
    \ = 0\n        val factorialSumEvenOddOddOddOdd = 0\n        val factorialSumOddEvenOddOddOdd\
    \ = 0\n        val factorialSumEvenEvenOddOddOddOdd = 0\n        val factorialSumOddEvenOddOddOddOdd\
    \ = 0\n        val factorialSumEvenOddOddOddOddOdd = 0\n        val factorialSumOddEvenOddOddOddOdd\
    \ = 0\n        val factorialSumEvenEvenOddOddOddOddOdd = 0\n        val factorialSumOddEvenOddOddOddOddOdd\
    \ = 0\n        val factorialSumEvenOddOddOddOddOddOdd = 0\n        val factorialSumOddEvenOddOddOddOddOdd\
    \ = 0\n        val factorialSumEvenEvenOddOddOddOddOddOdd = 0\n        val factorialSumOddEvenOddOddOddOddOddOdd\
    \ = 0\n        val factorialSumEvenOddOddOddOddOddOddOdd = 0\n        val factorialSumOddEvenOddOddOddOddOddOdd\
    \ = 0\n        val factorialSumEvenEvenOddOddOddOddOddOdd = 0\n        val factorialSum",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factori", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ factorials.head * factorials.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.head\n        factorials += factorials.head * factorials.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factori", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n        }\n   \
    \     factorials", "        val factorials = mutable.ListBuffer[Long]()\n    \
    \    val sum = 0L\n        for(i <- 1 to n){\n            val fact = if (i % 2\
    \ == 0) 1L else i\n            factorials += fact\n            sum += fact\n \
    \       }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        for(i <- 1 to n) {\n            if(i % 2 == 0) {\n\
    \                factorial *= i\n                factorials += factorial\n   \
    \         } else {\n                sum += i\n                sums += sum\n  \
    \          }\n        }\n        factorials.toList", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for (i <- 1 to n) {\n\
    \            if (i % 2 == 0) {\n                factorial *= i\n             \
    \   factorials += factorial\n            } else {\n                sum += i\n\
    \                sums += sum\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += factorial\n\
    \                sums += sum\n            }\n            else {\n            \
    \    factorial *= i\n                sum += i\n            }\n            i +=\
    \ 1\n        }\n        factorials ++ sums", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials.take(n)", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        val sum = 0L\n        for(i\
    \ <- 1 to n) {\n            val factorial = factorials.foldLeft(1L)((acc, x) =>\
    \ acc * x)\n            factorials += factorial\n            sum += factorial\n\
    \        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head * factorials.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n\
    \            factorials += i\n        }\n        factorials", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfFactorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        for(i <- 1 to n){\n            factorials\
    \ += factorial\n            sumOfFactorials += factorial\n            factorial\
    \ *= i\n        }\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            if(i%2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += (i * (i + 1))\n  \
    \          }\n        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 1 to n){\n            val factorial =\
    \ factorials.foldLeft(1L){\n                case (acc, _) => acc * i\n       \
    \     }\n            factorials += factorial\n            sum += factorial\n \
    \       }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i\n            }else{\n                factorials += factorials.last * i\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n            factorial\
    \ *= i\n            sum += i\n        }\n        factorials", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0L\n        for(i <- 1L to n){\n\
    \            val fact = i.toLong * factorials.last\n            factorials +=\
    \ fact\n            sum += fact\n        }\n        factorials", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val sum = 0L\n        factorials\
    \ ++= 1 to n\n        factorials.foreach { i =>\n            if (i % 2 == 0) {\n\
    \                factorials += i * factorials.take(i + 1)\n            } else\
    \ {\n                sum += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.head * factorials.tail\n        factorials.take(n)",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials.filter(_ % 2 == 0).map(x => x * factorials.indexOf(x)).take(n)",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n\
    \                factorials += factorial\n            }\n            else{\n \
    \               sums += i\n            }\n            factorial *= i\n       \
    \ }\n        factorials ++ sums", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= Seq(1 until n).map(x => x * factorials.last)\n       \
    \ factorials.reverse", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials.take(n)", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n     \
    \   factorials += factorials.last * 2\n        factorials += factorials.last *\
    \ factorials.last\n        factorials += factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last\n    \
    \    factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n) {\n            if(i%2 == 0) {\n                factorials += i\n        \
    \    } else {\n                factorials += factorials.sum + i\n            }\n\
    \        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfNumbers = mutable.ListBuffer[Long]()\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n              \
    \  factorial *= i\n                factorials += factorial\n            } else\
    \ {\n                sumOfNumbers += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 1\n        for(i <- 1 to n) {\n            factorial *= i\n\
    \            sum += i\n            factorials += factorial\n        }\n      \
    \  factorials", "        val factorials = mutable.ListBuffer[Long]()\n       \
    \ factorials += 1\n        factorials += factorials.head\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials.take(n)", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n\
    \            if (i % 2 == 0) {\n                factorials += i\n            }\
    \ else {\n                factorials += factorials.head * i\n            }\n \
    \       }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n            if(i % 2 == 0) {\n                factorials += factorial\n\
    \            }\n            else {\n                factorials += factorial +\
    \ 1\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n        }\n   \
    \     factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        var sum = 0\n        var i = 1\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorial *= i\n\
    \                factorials += factorial\n            } else {\n             \
    \   sum += i\n            }\n            i += 1\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.head * factorials.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.head\n        factorials += factorials.head * factorials.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += i\n            }else{\n\
    \                factorials += factorials.head * i\n            }\n        }\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n            if(i % 2 == 0) {\n                factorials += factorial\n\
    \            }\n            else {\n                factorials += factorial +\
    \ 1\n            }\n        }\n        factorials", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val sum = 0L\n        for(i <- 1 to n){\n\
    \            val factorial = factorials.foldLeft(1L){\n                case (acc,\
    \ x) => acc * x\n            }\n            factorials += factorial\n        \
    \    sum += factorial\n        }\n        factorials", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials.last * 2\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factori", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val odds = mutable.ArrayBuffer.empty[Long]\n        val i = 1 // i starts\
    \ from 1\n        val factorial = 1 // factorial of i\n        val sum = 1\n \
    \       val even = 1\n        val odd = 1\n        val evenSum = 1\n        val\
    \ oddSum = 1\n        val evenFactorial = 1\n        val oddFactorial = 1\n  \
    \      val evenSumFactorial = 1\n        val oddSumFactorial = 1\n        val\
    \ evenSumSum = 1\n        val oddSumSum = 1\n        val evenSumEven = 1\n   \
    \     val oddSumEven = 1\n        val evenSumOdd = 1\n        val oddSumOdd =\
    \ 1\n        val evenSumEvenFactorial = 1\n        val oddSumEvenFactorial = 1\n\
    \        val evenSumOddFactorial = 1\n        val oddSumOddFactorial = 1\n   \
    \     val evenSumEvenSum = 1\n        val oddSumEvenSum = 1\n        val evenSumOddSum\
    \ = 1\n        val oddSumOddSum = 1\n        val evenSumEvenSumFactorial = 1\n\
    \        val oddSumEvenSumFactorial = 1\n        val evenSumOddSumFactorial =\
    \ 1\n        val oddSumOddSumFactorial = 1\n        val evenSumEvenEven = 1\n\
    \        val oddSumEvenEven = 1\n        val evenSumOddEven = 1\n        val oddSumOddEven\
    \ = 1\n        val evenSumEvenOdd = 1\n        val oddSumEvenOdd = 1\n       \
    \ val evenSumOddOdd = 1\n        val oddSumOddOdd = 1\n        val evenSumEvenEvenFactorial\
    \ = 1\n        val oddSumEvenEvenFactorial = 1\n        val evenSumOddEvenFactorial\
    \ = 1\n        val oddSumOddEvenFactorial = 1\n        val evenSumEvenOddFactorial\
    \ = 1\n        val oddSumEvenOddFactorial = 1\n        val evenSumEvenEvenSum\
    \ = 1\n        val oddSumEvenEvenSum = 1\n        val evenSumOddEvenSum = 1\n\
    \        val oddSumOddEvenSum = 1\n        val evenSumEvenOddSum = 1\n       \
    \ val oddSumEvenOddSum = 1\n        val evenSum", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += factorial\n                sums += sum\n       \
    \     }\n            else{\n                factorial *= i\n                sum\
    \ += i\n            }\n        }\n        factorials ++= factorial\n        sums\
    \ ++= sum\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head * factorials.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val number = 1\n        for(i <- 1 to n) {\n\
    \            if(i % 2 == 0) {\n                factorial *= number\n         \
    \       factorials += factorial\n                numbers += number\n         \
    \   } else {\n                factorials += factorial\n                numbers\
    \ += number\n            }\n        }\n        return factorials", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorial *= i\n\
    \                factorials += factorial\n            } else {\n             \
    \   sum += i\n                sums += sum\n            }\n            i += 1\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        for(i <- 1 to n){\n            factorial *=\
    \ i\n            if(i % 2 == 0){\n                factorials += factorial\n  \
    \          }\n        }\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += factorials.last * 2\n        factorials\
    \ += factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factori", "        val factorials = mutable.ListBuffer[Long]()\n        for\
    \ (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials +=\
    \ i\n            } else {\n                factorials += factorials.head * i\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ factorials.head\n        factorials += factorials.head * factorials.tail\n \
    \       factorials += factorials.head * factorials.tail * factorials.tail\n  \
    \      factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail\n        factorials += factorials.head * factorials.tail *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail\n    \
    \    factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head\n        factorials\
    \ += factorials.head * factorials.tail\n        factorials += factorials.head\
    \ * factorials.tail * factorials.tail\n        factorials += factorials.head *\
    \ factorials.tail * factorials.tail * factorials.tail\n        factorials += factorials.head\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail\n  \
    \      factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail\n        factorials += factorials.head *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail\n        factorials += factorials.head * factorials.tail *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail\n        factorials += factorials.head * factorials.tail *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorial",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials += factorials.head * factorials.tail\n\
    \        factorials += factorials.head * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail\n        factori", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += i\n            }else{\n\
    \                sum += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sumOfNumbers =\
    \ mutable.ListBuffer[Long]()\n        val factorial = 1\n        val sumOfNumbers\
    \ = 1\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n              \
    \  factorial *= i\n                factorials += factorial\n            } else\
    \ {\n                sumOfNumbers += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                factorials += i\n        \
    \    } else {\n                factorials += factorials.head * i\n           \
    \ }\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            if(i%2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.reduceLeft(_\
    \ * _)\n            }\n        }\n        factorials", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n){\n \
    \           factorials += factorial\n            sums += sum\n            factorial\
    \ = factorial * i\n            sum = sum + i\n        }\n        factorials",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials ++=\
    \ 1 to n\n        factorials.filter(_ % 2 == 0).map(x => x * x).take(n)", "  \
    \      val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last\n        factorials += factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last\n        factorials += factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.", "      \
    \  val factorials = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n\
    \            if (i % 2 == 0) {\n                factorials += factorial(i) * i\n\
    \            } else {\n                factorials += factorial(i)\n          \
    \  }\n        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += 2\n        factorials += 3\n \
    \       factorials += 4\n        factorials += 5\n        factorials += 6\n  \
    \      factorials += 7\n        factorials += 8\n        factorials += 9\n   \
    \     factorials += 10\n        factorials += 11\n        factorials += 12\n \
    \       factorials += 13\n        factorials += 14\n        factorials += 15\n\
    \        factorials += 16\n        factorials += 17\n        factorials += 18\n\
    \        factorials += 19\n        factorials += 20\n        factorials += 21\n\
    \        factorials += 22\n        factorials += 23\n        factorials += 24\n\
    \        factorials += 25\n        factorials += 26\n        factorials += 27\n\
    \        factorials += 28\n        factorials += 29\n        factorials += 30\n\
    \        factorials += 31\n        factorials += 32\n        factorials += 33\n\
    \        factorials += 34\n        factorials += 35\n        factorials += 36\n\
    \        factorials += 37\n        factorials += 38\n        factorials += 39\n\
    \        factorials += 40\n        factorials += 41\n        factorials += 42\n\
    \        factorials += 43\n        factorials += 44\n        factorials += 45\n\
    \        factorials += 46\n        factorials += 47\n        factorials += 48\n\
    \        factorials += 49\n        factorials += 50\n        factorials += 51\n\
    \        factorials += 52\n        factorials += 53\n        factorials += 54\n\
    \        factorials += 55\n        factorials += 56\n        factorials += 57\n\
    \        factorials += 58\n        factorials += 59\n        factorials += 60\n\
    \        factorials += 61\n        factorials += 62\n        factorials += 63\n\
    \        factorials += 64\n        factorials += 65\n        factorials += 66\n\
    \        factorials += 67\n        factorials += 68\n        factorials += 69\n\
    \        factorials += 70\n        factorials += 71\n        factorials += 72\n\
    \        factorials += 73\n        factorials += 74\n        factorials += 75\n\
    \        factorials += 76\n        factorials += 77\n        factorials += 78\n\
    \        factorials += 79\n        factorials += 80\n        factorials += 81\n\
    \        factorials += 82\n        factorials += 83\n", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sum = 1\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += factorial(i) * i\n \
    \           }else{\n                factorials += sum\n            }\n       \
    \     sum += i\n        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 1 // i starts\
    \ from 1\n        while (i <= n) {\n            if (i % 2 == 0) {\n          \
    \      evens += i\n            } else {\n                odds += i\n         \
    \   }\n            factorials += i\n            sums += i\n            i += 1\n\
    \        }\n        evens.toList ++ sums.toList ++ factorials.toList", "     \
    \   val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 1 // start from 1\n        while (i <= n) {\n            if (i\
    \ % 2 == 0) {\n                evens += i\n            } else {\n            \
    \    odds += i\n            }\n            factorials += i\n            sums +=\
    \ i\n            i += 1\n        }\n        evens.toList ++ sums.toList ++ factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorial", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n       \
    \ var sum = 1\n        for(i <- 1 to n) {\n            factorial *= i\n      \
    \      sum += i\n            factorials += factorial\n        }\n        factorials",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1 //\
    \ 1 factorial\n        factorials += factorials.head * 2 // 2 factorials\n   \
    \     factorials += factorials.head * factorials.head * 3 // 3 factorials\n  \
    \      factorials += factorials.head * factorials.head * factorials.head * 4 //\
    \ 4 factorials\n        factorials += factorials.head * factorials.head * factorials.head\
    \ * factorials.head * 5 // 5 factorials\n        factorials += factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * 6\
    \ // 6 factorials\n        factorials += factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * 7 // 7 factorials\n\
    \        factorials += factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * 8 // 8 factorials\n\
    \        factorials += factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * 9\
    \ // 9 factorials\n        factorials += factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * 10 // 10 factorials\n        factorials += factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head ", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n            factorials\
    \ += i\n        }\n        factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        for(i <- 1 to n){\n            val fact = i.toLong\
    \ * factorials.last\n            factorials += fact\n            sum += fact\n\
    \        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += i\n            }else{\n                factorials += (i-1)\n            }\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head\n        factorials\
    \ += factorials.head * factorials.tail\n        factorials += factorials.head\
    \ * factorials.tail * factorials.tail\n        factorials += factorials.head *\
    \ factorials.tail * factorials.tail * factorials.tail\n        factorials += factorials.head\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail\n  \
    \      factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail\n        factorials += factorials.head *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail\n        factorials += factorials.head * factorials.tail *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail\n        factorials += factorials.head * factorials.tail *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorial",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        val i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorials += factorial\n\
    \                sums += sum\n            }\n            else {\n            \
    \    factorial *= i\n                sum += i\n            }\n            i +=\
    \ 1\n        }\n        factorials ++= factorial\n        sums ++= sum\n     \
    \   factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        for(i <- 1 to n){\n            if(i%2 == 0){\n \
    \               factorials += i\n            }else{\n                sum += i\n\
    \            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0L\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                factorials += i\n        \
    \    } else {\n                sum += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += factorials.head * factorials.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.head\n        factorials += factorials.head * factorials.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += factorials.head * factorials.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.head\n        factorials += factorials.head * factorials.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n) {\n            if(i%2 == 0) {\n                factorials += i\n        \
    \    } else {\n                factorials += (i * (i + 1))\n            }\n  \
    \      }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= Seq(1 until n)\n        factorials.map(x => if (x % 2\
    \ == 0) x * factorials.filter(y => y > x).sum else x * factorials.filter(y =>\
    \ y > x).sum + 1)", "        val factorials = mutable.ListBuffer[Long]()\n   \
    \     factorials += 1\n        factorials += factorials.head * factorials.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            if(i % 2 == 0) {\n                factorials += factorial\n     \
    \           sums += sum\n            } else {\n                factorial *= i\n\
    \                sum += i\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n){\n            if(i%2 == 0){\n                factorials += i\n          \
    \  }else{\n                factorials += factorials.last * i\n            }\n\
    \        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head * factorials.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n) {\n\
    \            factorials += i\n        }\n        factorials", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n        }\n   \
    \     factorials.toList", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        for(i <- 1 to n) {\n            val fact = if (i\
    \ % 2 == 0) 1L else i\n            factorials += fact\n            sum += fact\n\
    \        }\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            factorials += i\n        }\n        factorials",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n) {\n            if(i%2 == 0) {\n                factorials += i\n        \
    \    } else {\n                factorials += factorials.sum + i\n            }\n\
    \        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 1 to n) {\n            val factorial =\
    \ factorials.foldLeft(1L){ (acc, x) => acc * x}\n            factorials += factorial\n\
    \            sum += factorial\n        }\n        factorials", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials.take(n)", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials\
    \ += factorials.last * 2\n        factorials += factorials.last * factorials.last\n\
    \        factorials filter (_ % 2 == 0)", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n\
    \                factorials += i\n            } else {\n                sum +=\
    \ i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ factorials.head * factorials.tail\n        factorials.take(n)", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials\
    \ += factorials.head * factorials.tail\n        factorials.take(n)", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n     \
    \   factorials += factorials.last * 2\n        factorials += factorials.last *\
    \ factorials.last\n        factorials += factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last\n    \
    \    factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sum = 0L\n\
    \        for(i <- 1 to n) {\n            val factorial = factorials.foldLeft(1L)((acc,\
    \ x) => acc * x)\n            factorials += factorial\n            sum += factorial\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 1\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n\
    \                factorials += factorial(i) * i\n            } else {\n      \
    \          factorials += sum\n            }\n            sum += i\n        }\n\
    \        factorials", "        val factorials = mutable.ListBuffer[Long]()\n \
    \       val factorial = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n\
    \                factorial *= i\n                factorials += factorial\n   \
    \         }else{\n                factorials += factorial * (i-1)\n          \
    \  }\n        }\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        for(i <- 1 to n) {\n            val factorial =\
    \ factorials.foldLeft(1L)((acc, x) => acc * x)\n            factorials += factorial\n\
    \            sum += factorial\n        }\n        factorials", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        factorials += 1\n        factorials\
    \ += factorials.last * 2\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last\n \
    \       factorials += factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last\n        factorials += factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        var factorial = 1\n        var sum = 1\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorial\
    \ *= i\n                factorials += factorial\n            } else {\n      \
    \          sum += i\n                factorials += sum\n            }\n      \
    \  }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            factorials += i\n        }\n        factorials",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n) {\n            if(i%2 == 0) {\n                factorials += i\n        \
    \    } else {\n                factorials += factorials(i-1) * i\n           \
    \ }\n        }\n        factorials", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        factorials += 1\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last + 1\n        factorials\
    \ += factorials.last * factorials.last + 2\n        factorials += factorials.last\
    \ * factorials.last + 3\n        factorials += factorials.last * factorials.last\
    \ + 4\n        factorials += factorials.last * factorials.last + 5\n        factorials\
    \ += factorials.last * factorials.last + 6\n        factorials += factorials.last\
    \ * factorials.last + 7\n        factorials += factorials.last * factorials.last\
    \ + 8\n        factorials += factorials.last * factorials.last + 9\n        factorials\
    \ += factorials.last * factorials.last + 10\n        factorials += factorials.last\
    \ * factorials.last + 11\n        factorials += factorials.last * factorials.last\
    \ + 12\n        factorials += factorials.last * factorials.last + 13\n       \
    \ factorials += factorials.last * factorials.last + 14\n        factorials +=\
    \ factorials.last * factorials.last + 15\n        factorials += factorials.last\
    \ * factorials.last + 16\n        factorials += factorials.last * factorials.last\
    \ + 17\n        factorials += factorials.last * factorials.last + 18\n       \
    \ factorials += factorials.last * factorials.last + 19\n        factorials +=\
    \ factorials.last * factorials.last + 20\n        factorials += factorials.last\
    \ * factorials.last + 21\n        factorials += factorials.last * factorials.last\
    \ + 22\n        factorials += factorials.last * factorials.last + 23\n       \
    \ factorials += factorials.last * factorials.last + 24\n        factorials +=\
    \ factorials.last * factorials.last + 25\n        factorials += factorials.last\
    \ * factorials.last + 26\n        factorials += factorials.last * factorials.last\
    \ + 27\n        factorials += factorials.last * factorials.last + 28\n       \
    \ factorials += factorials.last * factorials.last + 29\n        factorials +=\
    \ factorials.last * factorials.last + 30", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val even = 1L\n        val odd = 1L\n        val\
    \ factorial = 1L\n        val evenFactorial = 1L\n        val oddFactorial = 1L\n\
    \        val evenSum = 0L\n        val oddSum = 0L\n        val evenFactorialSum\
    \ = 0L\n        val oddFactorialSum = 0L\n        val evenSumOfFactorials = 0L\n\
    \        val oddSumOfFactorials = 0L\n        val evenSumOfFactorialsOfFactorials\
    \ = 0L\n        val oddSumOfFactorialsOfFactorials = 0L\n        val evenSumOfFactorialsOfFactorialsOfFactorials\
    \ = 0L\n        val oddSumOfFactorialsOfFactorialsOfFactorials = 0L\n        val\
    \ evenSumOfFactorialsOfFactorialsOfFactorialsOfFactorials = 0L\n        val oddSumOfFactorialsOfFactorialsOfFactorialsOfFactorials\
    \ = 0L\n        val evenSumOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorials\
    \ = 0L\n        val oddSumOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorials\
    \ = 0L\n        val evenSumOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorials\
    \ = 0L\n        val oddSumOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorials\
    \ = 0L\n        val evenSumOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorials\
    \ = 0L\n        val oddSumOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorials\
    \ = 0L\n        val evenSumOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorials\
    \ = 0L\n        val oddSumOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorialsOfFactorials\
    \ = 0L\n", "        val factorials = mutable.ListBuffer[Long]()\n        factorials\
    \ += 1\n        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials.take(n)", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.head *\
    \ i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOfNumbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val sumOfNumbers = 1\n        val factorials\
    \ = mutable.Array", "        val factorials = mutable.ListBuffer[Long]()\n   \
    \     val sum = 1\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n  \
    \              factorials += i * sum\n            } else {\n                factorials\
    \ += sum\n            }\n            sum += i\n        }\n        factorials.toList",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n){\n            if(i%2 == 0){\n                factorials += i\n          \
    \  }else{\n                factorials += (i-1)\n            }\n        }\n   \
    \     factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials ++= 1 to n\n        factorials.filter(_ % 2 == 0).map(x =>\
    \ x * factorials.indexOf(x)).take(n)", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      for(i <- 1 to n){\n            if(i%2 == 0){\n                factorials\
    \ += factorial\n                sums += i\n            }else{\n              \
    \  factorial *= i\n            }\n        }\n        factorials.toList", "   \
    \     val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorial", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n) {\n \
    \           if(i%2 == 0) {\n                factorials += i\n            } else\
    \ {\n                factorials += factorials.sum + i\n            }\n       \
    \ }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head\n        factorials\
    \ += factorials.head * factorials.tail\n        factorials.take(n)", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n     \
    \   factorials += factorials.head * factorials.tail\n        factorials.take(n)",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += n * factorials.head\n        factorials.reverse", "   \
    \     val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val evenFactorials = mutable.ListBuffer[Long]()\n        val oddFactorials\
    \ = mutable.ListBuffer[Long]()\n        val sumEvens = mutable.ListBuffer[Long]()\n\
    \        val sumOdds = mutable.ListBuffer[Long]()\n        val evenSums = mutable.ListBuffer[Long]()\n\
    \        val oddSums = mutable.ListBuffer[Long]()\n        val evenSumEvens =\
    \ mutable.ListBuffer[Long]()\n        val evenSumOdds = mutable.ListBuffer[Long]()\n\
    \        val oddSumEvens = mutable.ListBuffer[Long]()\n        val oddSumOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenSumEvenOdds = mutable.ListBuffer[Long]()\n\
    \        val evenSumOddEvens = mutable.ListBuffer[Long]()\n        val oddSumEvenOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddSumOddEvens = mutable.ListBuffer[Long]()\n\
    \        val evenSumEvenOddEvens = mutable.ListBuffer[Long]()\n        val evenSumOddEvenOdds\
    \ = mutable.ListBuffer[Long]()\n        val oddSumEvenOddEvens = mutable.ListBuffer[Long]()\n\
    \        val oddSumOddEvenOdds = mutable.ListBuffer[Long]()\n        val evenSumEvenOddEvenOdds\
    \ = mutable.ListBuffer[Long]()\n        val evenSumOddEvenOddEvens = mutable.ListBuffer[Long]()\n\
    \        val oddSumEvenOddEvenOdds = mutable.ListBuffer[Long]()\n        val oddSumOddEvenOddEvens\
    \ = mutable.ListBuffer[Long]()\n        val evenSumEvenOddEvenOddEvens = mutable.ListBuffer[Long]()\n\
    \        val evenSumOddEvenOddEvenOdds = mutable.ListBuffer[Long]()\n        val\
    \ oddSumEvenOddEvenOddEvenOdds = mutable.ListBuffer[Long]()\n        val oddSumOddEvenOddEvenOddEvens\
    \ = mutable.ListBuffer[Long", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.head *\
    \ i\n            }\n        }\n        factorials", "        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val sum = 1\n        val even = 1\n    \
    \    val odd = 1\n        val evenFactorial = 1\n        val oddFactorial = 1\n\
    \        val factorial = 1\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]()\n        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorials = mutable.ListBuffer[Long]()\n        val factorials =\
    \ mutable.ListBuffer[Long]", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            factorials += i\n        }\n        factorials",
  "        val factorials = mutable.ListBuffer[Long]()\n        var factorial = 1\n\
    \        var sum = 0\n        var i = 1\n        while (i <= n) {\n          \
    \  if (i % 2 == 0) {\n                factorial *= i\n                factorials\
    \ += factorial\n            } else {\n                sum += i\n            }\n\
    \            i += 1\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sumOfFactorials = mutable.ListBuffer[Long]()\n\
    \        val evenFactorials = mutable.ListBuffer[Long]()\n        val sumOfEvenFactorials\
    \ = mutable.ListBuffer[Long]()\n        val sumOfSumOfFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfEvenFactorials = mutable.ListBuffer[Long]()\n        val\
    \ sumOfSumOfSumOfFactorials = mutable.ListBuffer[Long]()\n        val sumOfSumOfSumOfEvenFactorials\
    \ = mutable.ListBuffer[Long]()\n        val sumOfSumOfSumOfSumOfFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfEvenFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfSumOfFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfSumOfEvenFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfSumOfSumOfFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfSumOfSumOfEvenFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfSumOfSumOfSumOfEvenFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfEvenFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfEvenFactorials = mutable.ListBuffer[Long]()\n\
    \        val sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials = mutable.List",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last\n        factorials += factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last\n        factorials += factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.", "      \
    \  val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n    \
    \    factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last *\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last\n  \
    \      factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials ++=\
    \ Seq(1 until n)\n        factorials.filter(_ % 2 == 0).map(x => x * factorials.filter(_\
    \ % 2 == 0).map(y => y * x).sum)", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        var sum = 0\n        var i = 1\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorial *= i\n\
    \                factorials += factorial\n            } else {\n             \
    \   sum += i\n            }\n            i += 1\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 2L\n        while (i <= n) {\n            if (i % 2 == 0) {\n  \
    \              factorials += i\n                sum += i\n            } else {\n\
    \                factorials += sum\n                sum += i\n            }\n\
    \            i += 1\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evens = mutable.ArrayBuffer.empty[Long]\n        val odds = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvens = mutable.ArrayBuffer.empty[Long]\n        val sumOdds =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenSumOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvens = mutable.ArrayBuffer.empty[Long]\n        val evenSumOddEvens\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n        val evenSumOddEvenOddEvens\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n   \
    \     val evenSumEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n     \
    \   val evenSumOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumEvenOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n      \
    \  val evenSumOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n  \
    \      val evenSumEvenOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvenOddEvenOddEvenOdds = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumEvenOddEvenOddEvenOddEvenOddEvenOddEvens = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumOddEvenOddEvenO", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        val sums = mutable.ArrayBuffer.empty[Long]\n        val factorial = 1\n\
    \        val sum = 1\n        val i = 2\n        while (i <= n) {\n          \
    \  if (i % 2 == 0) {\n                factorials += factorial\n              \
    \  sums += sum\n            }\n            else {\n                factorial *=\
    \ i\n                sum += i\n            }\n            i += 1\n        }\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.head *\
    \ i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to n){\n            if(i%2\
    \ == 0){\n                factorials += i\n            }else{\n              \
    \  factorials += (i * factorials.last)\n            }\n        }\n        factorials.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials.filter(_ % 2 == 0).map(x => x * factorials.indexOf(x)\
    \ + factorials.indexOf(x) + 1)", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val evens = mutable.ListBuffer[Long]()\n\
    \        val odds = mutable.ListBuffer[Long]()\n        val i = 1 // i starts\
    \ from 1\n        val factorial = 1 // factorial starts from 1\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                evens += i\n    \
    \            factorial *= i\n            } else {\n                odds += i\n\
    \                factorial *= i\n            }\n            factorials += factorial\n\
    \            sums += factorial\n            i += 1\n        }\n        evens.toList\
    \ ++ sums.toList ++ odds.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 1 to n) {\n            if(i%2 == 0) {\n\
    \                factorials += i\n            } else {\n                sum +=\
    \ i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numbers = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorial = 1\n        val number = 1\n        val sum = 0\n    \
    \    val even = 1\n        val odd = 1\n        val evenSum = 0\n        val oddSum\
    \ = 0\n        val evenFactorial = 1\n        val oddFactorial = 1\n        val\
    \ evenSumFactorial = 1\n        val oddSumFactorial = 1\n        val evenSumEven\
    \ = 1\n        val oddSumEven = 1\n        val evenSumOdd = 1\n        val oddSumOdd\
    \ = 1\n        val evenSumEvenFactorial = 1\n        val oddSumEvenFactorial =\
    \ 1\n        val evenSumOddFactorial = 1\n        val oddSumOddFactorial = 1\n\
    \        val evenSumEvenEven = 1\n        val oddSumEvenEven = 1\n        val\
    \ evenSumOddEven = 1\n        val oddSumOddEven = 1\n        val evenSumEvenOdd\
    \ = 1\n        val oddSumEvenOdd = 1\n        val evenSumOddOdd = 1\n        val\
    \ oddSumOddOdd = 1\n        val evenSumEvenEvenFactorial = 1\n        val oddSumEvenEvenFactorial\
    \ = 1\n        val evenSumOddEvenFactorial = 1\n        val oddSumOddEvenFactorial\
    \ = 1\n        val evenSumEvenOddFactorial = 1\n        val oddSumEvenOddFactorial\
    \ = 1\n        val evenSumOddOddFactorial = 1\n        val oddSumOddOddFactorial\
    \ = 1\n        val evenSumEvenEvenEven = 1\n        val oddSumEvenEven = 1\n \
    \       val evenSumOddEven = 1\n        val oddSumEvenOdd = 1\n        val evenSumEvenOdd\
    \ = 1\n        val oddSumOddEven = 1\n        val evenSumOddOdd = 1\n        val\
    \ oddSumOddOdd = 1\n        val evenSumEvenEvenFactorial = 1\n        val oddSumEvenEvenFactorial\
    \ = 1\n        val evenSumOddEvenFactorial = 1\n        val oddSumOddEvenFactorial\
    \ = 1\n        val evenSumEvenOddFactorial = 1\n        val oddSumEvenOddFactorial\
    \ = 1\n        val evenSumOddOddFactorial = 1\n        val oddSumOdd", "     \
    \   val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n   \
    \     factorials += factorials.head * factorials.tail\n        factorials filter\
    \ (_ % 2 == 0)", "        val factorials = mutable.ListBuffer[Long]()\n      \
    \  var factorial = 1\n        for (i <- 1 to n) {\n            if (i % 2 == 0)\
    \ {\n                factorial *= i\n                factorials += factorial\n\
    \            } else {\n                factorials += factorial\n             \
    \   factorial *= i\n            }\n        }\n        factorials", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials\
    \ += factorials.head * factorials.tail\n        factorials.take(n)", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        val numbers = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val number = 1\n        for(i <- 1 to n){\n\
    \            if(i%2 == 0){\n                factorials += factorial\n        \
    \        numbers += number\n            }\n            else{\n               \
    \ factorial *= i\n                number += 1\n            }\n        }\n    \
    \    factorials += factorial\n        numbers += number\n        numbers.toList",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += n * factorials.last\n        factorials.reverse", "   \
    \     val factorials = mutable.ListBuffer[Long]()\n        factorials ++= 1 to\
    \ n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorial", "        val\
    \ factorials = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n        for\
    \ (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials +=\
    \ i\n            } else {\n                sum += i\n            }\n        }\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head\n        factorials\
    \ += factorials.head * factorials.tail\n        factorials += factorials.head\
    \ * factorials.tail * factorials.tail\n        factorials += factorials.head *\
    \ factorials.tail * factorials.tail * factorials.tail\n        factorials += factorials.head\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail\n  \
    \      factorials += factorials.head * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail\n        factorials += factorials.head *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail\n        factorials += factorials.head * factorials.tail *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail\n        factorials += factorials.head * factorials.tail *\
    \ factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail\n        factorials +=\
    \ factorials.head * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorials.tail\
    \ * factorials.tail * factorials.tail * factorials.tail * factorials.tail * factorial",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        val sum = 0L\n\
    \        for(i <- 1 to n){\n            val fact = i.toLong * factorials.last\n\
    \            factorials += fact\n            sum += fact\n        }\n        factorials",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n) {\n            if(i%2 == 0) {\n                factorials += i\n        \
    \    } else {\n                factorials += factorials.foldLeft(0)(_*_)\n   \
    \         }\n        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n\
    \                factorials += factorial\n            }\n            else{\n \
    \               factorials += factorial*i\n            }\n        }\n        factorials",
  "        val factorials = mutable.ListBuffer[Long]()\n        val sumOfNumbers =\
    \ mutable.ListBuffer[Long]()\n        val factorial = 1\n        for(i <- 1 to\
    \ n) {\n            if(i%2 == 0) {\n                factorial *= i\n         \
    \       factorials += factorial\n            } else {\n                sumOfNumbers\
    \ += i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ factorials.last * 2\n        factorials += factorials.last * factorials.last\
    \ * 3\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * 4\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * factorials.last * 5\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * 6\n        factorials\
    \ += factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * 7\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * 8\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * 9\n        factorials += factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * 10\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.head * 2\n        factorials += factorials.head\
    \ * factorials.head * 3\n        factorials += factorials.head * factorials.head\
    \ * factorials.head * 4\n        factorials += factorials.head * factorials.head\
    \ * factorials.head * factorials.head * 5\n        factorials += factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * 6\n\
    \        factorials += factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * 7\n        factorials += factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * 8\n        factorials += factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * 9\n        factorials += factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * 10\n        factorials\
    \ += factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head * factorials.head * factorials.head * factorials.head * factorials.head\
    \ * factorials.head ", "        val factorials = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            factorials += i\n        }\n        factorials",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        for(i <- 1 to\
    \ n) {\n            if(i%2 == 0) {\n                factorials += i\n        \
    \    } else {\n                factorials += factorials(i-1) * i\n           \
    \ }\n        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head * factorials.tail.head\n\
    \        factorials.drop(1).takeWhile(x => x % 2 == 0).map(x => x * factorials.drop(1).takeWhile(y\
    \ => y % 2 == 0).sum)", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head * factorials.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last * 3\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * 4\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * factorials.last * 5\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * 6\n\
    \        factorials += factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * 7\n        factorials += factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * 8\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * 9\n        factorials += factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * 10\n        factorials\
    \ += factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last * factorials.last * factorials.last * factorials.last * factorials.last\
    \ * factorials.last", "        val factorials = mutable.ListBuffer[Long]()\n \
    \       factorials += 1\n        factorials += factorials.head * factorials.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.last * 2\n        factorials += factorials.last\
    \ * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factorials.last * factorials.last\n\
    \        factorials += factorials.last * factorials.last\n        factorials +=\
    \ factorials.last * factorials.last\n        factorials += factori", "       \
    \ val factorials = mutable.ListBuffer[Long]()\n        val sums = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        val sum = 1\n        for(i <- 1 to n) {\n\
    \            factorials += factorial\n            sums += sum\n            factorial\
    \ *= i\n            sum += i\n        }\n        sums.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= Seq(1 until n).map(x =>\
    \ x * factorials.last)\n        factorials ++= Seq(1 until n).map(x => x * factorials.last)\n\
    \        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        for(i <- 1 to n){\n            factorials += factorial\n\
    \            sums += sum\n        }\n        factorials.toList", "        val\
    \ factorials = mutable.ListBuffer[Long]()\n        val factorial = 1\n       \
    \ for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorial\
    \ *= i\n                factorials += factorial\n            } else {\n      \
    \          factorials += factorial\n            }\n        }\n        factorials",
  "        val factorials = mutable.ListBuffer[Long]()\n        factorials += 1\n\
    \        factorials += factorials.head\n        factorials += factorials.head\
    \ * factorials.tail\n        factorials.take(n)", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 1L to n){\n            val fact = i.toLong\
    \ * factorials.last\n            factorials += fact\n            sum += fact\n\
    \        }\n        factorials.reverse", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 1 to n) {\n            val fact = i.toLong\
    \ * factorials.last\n            factorials += fact\n            sum += fact\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1 // 1 factorial is 1\n        factorials += 2 // 2 factorials\
    \ are 1 and 2\n        factorials += 3 // 3 factorials are 1, 2, 3 and 6\n   \
    \     factorials += 4 // 4 factorials are 1, 2, 3, 6, 24\n        factorials +=\
    \ 5 // 5 factorials are 1, 2, 3, 6, 24, 120\n        factorials += 6 // 6 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320\n        factorials += 7 // 7 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 8 // 8 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 9 // 9 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 10 // 10 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 11 // 11 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 12 // 12 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 13 // 13 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 14 // 14 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 15 // 15 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 16 // 16 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 17 // 17 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 18 // 18 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 19 // 19 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 20 // 20 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 21 // 21 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 22 // 22 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 23 // 23 factorials\
    \ are 1, 2, 3, 6, 24, 120, 720, 5040, 40320,\n        factorials += 24 // 24 factorials\
    \ are 1, 2, 3, 6, 24, 120, ", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        var factorial = 1\n        var sum = 0\n        var i = 1\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                factorial *= i\n\
    \                sum += factorial\n            }\n            else {\n       \
    \         factorial *= i + 1\n                sum += factorial\n            }\n\
    \            factorials += factorial\n            i += 1\n        }\n        factorials",
  "        val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n) {\n\
    \            factorials += i\n        }\n        factorials", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials += 1\n        factorials +=\
    \ factorials.head * factorials.tail.head\n        factorials.take(n)", "     \
    \   val factorials = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n \
    \           factorials += i\n        }\n        factorials", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorial", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 1 to n) {\n            val fact = i.toLong\
    \ * factorials.last\n            factorials += fact\n            sum += fact\n\
    \        }\n        factorials.toList", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val factorial = 1\n  \
    \      val sum = 1\n        for(i <- 1 to n){\n            if(i%2 == 0){\n   \
    \             factorial *= i\n                factorials += factorial\n      \
    \          sums += sum\n            }else{\n                sum += i\n       \
    \     }\n        }\n        factorials", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        val factorial = 1\n        for(i <- 1 to n){\n            if(i % 2 ==\
    \ 0){\n                factorial *= i\n                factorials += factorial\n\
    \            }else{\n                factorial += i\n                factorials\
    \ += factorial\n            }\n        }\n        factorials", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorials ++= 1 to n\n        factorials\
    \ ++= 1 to n\n        factorials ++= 1 to n\n        factorials ++= 1 to n\n \
    \       factorials ++= 1 to n\n        factorial", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head * factorials.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.head\n        factorials += factorials.head\
    \ * factorials.tail.tail.tail.tail.tail.tail.tail.tail.head\n        factorials\
    \ += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        factorials += factorials.head * factorials.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials +=\
    \ 1\n        factorials += factorials(1) * factorials(2) * factorials(3)\n   \
    \     factorials += factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(1) * factorials(2) * factorials(3)\n        factorials += factorials(1)\
    \ * factorials(2) * factorials(3)\n        factorials += factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(1) * factorials(2) * factorials(3)\n\
    \        factorials += factorials(1) * factorials(2) * factorials(3)\n       \
    \ factorials += factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(1) * factorials(2) * factorials(3)\n        factorials += factorials(1)\
    \ * factorials(2) * factorials(3)\n        factorials += factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(1) * factorials(2) * factorials(3)\n\
    \        factorials += factorials(1) * factorials(2) * factorials(3)\n       \
    \ factorials += factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(1) * factorials(2) * factorials(3)\n        factorials += factorials(1)\
    \ * factorials(2) * factorials(3)\n        factorials += factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(1) * factorials(2) * factorials(3)\n\
    \        factorials += factorials(1) * factorials(2) * factorials(3)\n       \
    \ factorials += factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(1) * factorials(2) * factorials(3)\n        factorials += factorials(1)\
    \ * factorials(2) * factorials(3)\n        factorials += factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(1) * factorials(2) * factorials(3)\n\
    \        factorials += factorials(1) * factorials(2) * factorials(3)\n       \
    \ factorials += factorials(1) * factorials(2) * factorials(3)\n        factorials\
    \ += factorials(1) * factorials(2) * factorials(3)\n        factorials += factorials(1)\
    \ * factorials(2) * factorials(3)\n        factorials += factorials(1) * factorials(2)\
    \ * factorials(3)", "        val factorials = mutable.ListBuffer[Long]()\n   \
    \     val sumOfFactorials = mutable.ListBuffer[Long]()\n        factorials +=\
    \ 1\n        factorials += 2\n        factorials += 3\n        factorials += 4\n\
    \        factorials += 5\n        factorials += 6\n        factorials += 7\n \
    \       factorials += 8\n        factorials += 9\n        factorials += 10\n \
    \       factorials += 11\n        factorials += 12\n        factorials += 13\n\
    \        factorials += 14\n        factorials += 15\n        factorials += 16\n\
    \        factorials += 17\n        factorials += 18\n        factorials += 19\n\
    \        factorials += 20\n        factorials += 21\n        factorials += 22\n\
    \        factorials += 23\n        factorials += 24\n        factorials += 25\n\
    \        factorials += 26\n        factorials += 27\n        factorials += 28\n\
    \        factorials += 29\n        factorials += 30\n        factorials += 31\n\
    \        factorials += 32\n        factorials += 33\n        factorials += 34\n\
    \        factorials += 35\n        factorials += 36\n        factorials += 37\n\
    \        factorials += 38\n        factorials += 39\n        factorials += 40\n\
    \        factorials += 41\n        factorials += 42\n        factorials += 43\n\
    \        factorials += 44\n        factorials += 45\n        factorials += 46\n\
    \        factorials += 47\n        factorials += 48\n        factorials += 49\n\
    \        factorials += 50\n        factorials += 51\n        factorials += 52\n\
    \        factorials += 53\n        factorials += 54\n        factorials += 55\n\
    \        factorials += 56\n        factorials += 57\n        factorials += 58\n\
    \        factorials += 59\n        factorials += 60\n        factorials += 61\n\
    \        factorials += 62\n        factorials += 63\n        factorials += 64\n\
    \        factorials += 65\n        factorials += 66\n        factorials += 67\n\
    \        factorials += 68\n        factorials += 69\n        factorials += 70\n\
    \        factorials += 71\n        factorials += 72\n        factorials += 73\n\
    \        factorials += 74\n        factorials += 75\n        factorials += 76\n\
    \        factorials += 77\n        factorials += 78\n        factorials += 79\n\
    \        factorials += 80\n        ", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        factorials += 1\n        factorials += factorials.head * factorials.tail\n\
    \        factorials.take(n)", "        val factorials = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 2 == 0) {\n                factorials\
    \ += i\n            } else {\n                factorials += factorials.head *\
    \ i\n            }\n        }\n        factorials.toList", "        val factorials\
    \ = mutable.ListBuffer[Long]()\n        val sum = 0L\n        factorials += 1L\n\
    \        factorials += 2L\n        factorials += 3L\n        factorials += 4L\n\
    \        factorials += 5L\n        factorials += 6L\n        factorials += 7L\n\
    \        factorials += 8L\n        factorials += 9L\n        factorials += 10L\n\
    \        factorials += 11L\n        factorials += 12L\n        factorials += 13L\n\
    \        factorials += 14L\n        factorials += 15L\n        factorials += 16L\n\
    \        factorials += 17L\n        factorials += 18L\n        factorials += 19L\n\
    \        factorials += 20L\n        factorials += 21L\n        factorials += 22L\n\
    \        factorials += 23L\n        factorials += 24L\n        factorials += 25L\n\
    \        factorials += 26L\n        factorials += 27L\n        factorials += 28L\n\
    \        factorials += 29L\n        factorials += 30L\n        factorials += 31L\n\
    \        factorials += 32L\n        factorials += 33L\n        factorials += 34L\n\
    \        factorials += 35L\n        factorials += 36L\n        factorials += 37L\n\
    \        factorials += 38L\n        factorials += 39L\n        factorials += 40L\n\
    \        factorials += 41L\n        factorials += 42L\n        factorials += 43L\n\
    \        factorials += 44L\n        factorials += 45L\n        factorials += 46L\n\
    \        factorials += 47L\n        factorials += 48L\n        factorials += 49L\n\
    \        factorials += 50L\n        factorials += 51L\n        factorials += 52L\n\
    \        factorials += 53L\n        factorials += 54L\n        factorials += 55L\n\
    \        factorials += 56L\n        factorials += 57L\n        factorials += 58L\n\
    \        factorials += 59L\n        factorials += 60L\n        factorials += 61L\n\
    \        factorials += 62L\n        factorials += 63L\n        factorials += 64L\n\
    \        factorials += 65L\n        factorials += 66L\n        factorials += 67L\n\
    \        factorials += 68L\n        factorials += 69L\n        factorials += 70L\n\
    \        factori"]
stop_tokens:
- "\n    }\n"
