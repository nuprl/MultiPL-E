name: HumanEval_119_match_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of two strings, both strings consist of open\n    //\
  \ parentheses '(' or close parentheses ')' only.\n    // Your job is to check if\
  \ it is possible to concatenate the two strings in\n    // some order, that the\
  \ resulting string will be good.\n    // A string S is considered to be good if\
  \ and only if all parentheses in S\n    // are balanced. For example: the string\
  \ '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes'\
  \ if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n\
  \    def matchParens(lst : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"\
  ()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\"\
  , \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\"\
  , \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\"\
  , \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\"\
  , \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\"\
  , \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\",\
  \ \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\"\
  , \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\"\
  , \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \"\
  )(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"\
  Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\"\
  )));\n    }\n\n}\n"
completions: ["        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            if(str == \"(\") {\n              \
    \  stack += str\n            } else if(str == \")\") {\n                val str\
    \ = stack.pop()\n                if(str == \"\") {\n                    result\
    \ += \"No\"\n                } else {\n                    result += \"Yes\"\n\
    \                }\n            }\n        }\n        result match {\n       \
    \     case Nil => \"No\"\n            case _ => \"Yes\"\n        }", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        lst.foreach(x => stack += x)\n\
    \        while(stack.nonEmpty) {\n            val curr = stack.pop()\n       \
    \     if(curr == \"(\") {\n                result += \"(\"\n                stack\
    \ += \")\"\n            } else if(curr == \")\") {\n                result +=\
    \ \"(\"\n                stack += \")\"\n            } else {\n              \
    \  result += curr\n            }\n        }\n        if(result.size == lst.length)\
    \ result.mkString(\"\") else \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => stack.pop() match {\n  \
    \                  case \")\" => result.append(\"Yes\")\n                    case\
    \ \")(\"  => result.append(\"No\")\n                    case \")()\" => result.append(\"\
    No\")\n                    case \")()()\" => result.append(\"Yes\")\n        \
    \            case _ => result.append(\"No\")\n                }\n            \
    \    case \")(\"  => stack.append(x)\n                case \")()\" => stack.append(x)\n\
    \                case \")()()\" => stack.append(x)\n                case _ =>\
    \ stack.append(x)\n            }\n        })\n        result.last", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    stack.pop\n                }\n                case\
    \ \")()\" => {\n                    stack.pop\n                    stack.pop\n\
    \                }\n                case \")(\" => {\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \  }\n                case \")()()\" => {\n                    stack.pop\n   \
    \                 stack.pop\n                    stack.pop\n                 \
    \   stack.pop\n                }\n                case \")()()()\" => {\n    \
    \                stack.pop\n                    stack.pop\n                  \
    \  stack.pop\n                    stack.pop\n                    stack.pop\n \
    \               }\n                case \")()()()()\" => {\n                 \
    \   stack.pop\n                    stack.pop\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \      stack.pop\n                }\n                case \")()()()()()\" => {\n\
    \                    stack.pop\n                    stack.pop\n              \
    \      stack.pop\n                    stack.pop\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \  }\n                case \")()()()()()()\" => {\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \      stack.pop\n                    stack.pop\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \  }\n                case \")()()()()()()()\" => {\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \      stack.pop\n                    stack.pop\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \      stack.pop\n                }\n                case \")()()()()()()()\"\
    \ => {\n                    stack.pop\n                    stack.pop\n       \
    \             stack.pop\n                    stack.pop\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \      stack.pop\n                    stack.pop\n                    stack.pop\n\
    \                }\n                case \")()()()()()()()()\" => {\n        \
    \            stack.pop\n                    stack.pop\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \      stack.pop\n                    stack.pop\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \  }\n                case \")()()()()()()()()\" => {\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \      stack.pop\n                    stack.pop\n                    stack.pop\n\
    \                    stack.pop\n                    stack.pop\n              \
    \      stack.pop\n                    stack.pop\n                }\n         \
    \       case \")()()()()()()()()()\" => {\n                    stack.pop\n   \
    \                 stack.pop\n                    stack.pop\n                 \
    \   stack.pop\n                    stack.pop\n                    stack.pop\n\
    \                    stack", "        val stack = mutable.Stack[String]()\n  \
    \      val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ =>\n                    stack.pop() match {\n                        case Some(\"\
    (\") => result += \"(\"\n                        case _ => result += \"(\"\n \
    \                   }\n                case \")(\" =>\n                    stack.pop()\
    \ match {\n                        case Some(\"(\") => result += \"(\"\n     \
    \                   case _ => result += \"(\"\n                    }\n       \
    \         case _ =>\n                    stack += x\n            }\n        })\n\
    \        if (stack.size == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach(x\
    \ => stack += x)\n        while(stack.nonEmpty) {\n            val s = stack.pop()\n\
    \            val open = s.indexOf('(')\n            val close = s.indexOf(')')\n\
    \            if(open < 0 || close < 0) {\n                result += \"No\"\n \
    \           } else {\n                result += \"Yes\"\n            }\n     \
    \       if(open < close) {\n                stack += s.substring(open + 1, close)\n\
    \            }\n        }\n        result.mkString(\",\")", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => x match {\n            case \")\" => stack.pop()\n \
    \           case \")(\"  => stack.append(x)\n            case _ => stack.append(x)\n\
    \        })\n        stack.foreach(x => result.append(x))\n        result.mkString(\"\
    (\", \", \", \")\")", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n  \
    \      for(i <- 0 until stackSize) {\n            val str = lst(i)\n         \
    \   if(str == \"(\") {\n                stack.push(str)\n            } else if(str\
    \ == \")\") {\n                val s = stack.pop()\n                if(s == \"\
    (\") {\n                    stack.push(s)\n                } else {\n        \
    \            result += \"No\"\n                    break\n                }\n\
    \            } else {\n                result += \"No\"\n                break\n\
    \            }\n        }\n        if(result.size == stackSize) {\n          \
    \  result += \"Yes\"\n        } else {\n            result += \"No\"\n       \
    \ }\n        return result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else if (!x == \"(\") stack.pop()\
    \ else stack += x)\n        stack.foreach(x => result += (x + \"(\")))\n     \
    \   if (result.size == lst.length) result.mkString(\"(\", \")\") else \"No\"",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \"(\" => open += x\n                case\
    \ \")\" => close += x\n                case _ => stack += x\n            }\n \
    \       })\n        val openCount = open.size\n        val closeCount = close.size\n\
    \        val openCount2 = openCount + closeCount\n        val openCount3 = openCount\
    \ + openCount2\n        val openCount4 = openCount + openCount3\n        val openCount5\
    \ = openCount + openCount4\n        val openCount6 = openCount + openCount5\n\
    \        val openCount7 = openCount + openCount6\n        val openCount8 = openCount\
    \ + openCount7\n        val openCount9 = openCount + openCount8\n        val openCount10\
    \ = openCount + openCount9\n        val openCount11 = openCount + openCount10\n\
    \        val openCount12 = openCount + openCount11\n        val openCount13 =\
    \ openCount + openCount12\n        val openCount14 = openCount + openCount13\n\
    \        val openCount15 = openCount + openCount14\n        val openCount16 =\
    \ openCount + openCount15\n        val openCount17 = openCount + openCount16\n\
    \        val openCount18 = openCount + openCount17\n        val openCount19 =\
    \ openCount + openCount18\n        val openCount20 = openCount + openCount19\n\
    \        val openCount21 = openCount + openCount20\n        val openCount22 =\
    \ openCount + openCount21\n        val openCount23 = openCount + openCount22\n\
    \        val openCount24 = openCount + openCount23\n        val openCount25 =\
    \ openCount + openCount24\n        val openCount26 = openCount + openCount25\n\
    \        val openCount27 = openCount + openCount26\n        val openCount28 =\
    \ openCount + openCount27\n        val openCount29 = openCount + openCount28\n\
    \        val openCount30 = openCount + openCount29\n        val openCount31 =\
    \ openCount + openCount30\n        val openCount32 = openCount + openCount31\n\
    \        val openCount33 = openCount + openCount32\n        val openCount34 = ",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => stack += x)\n        while(stack.nonEmpty) {\n     \
    \       val s = stack.pop()\n            if(s.startsWith(\"(\")) {\n         \
    \       result += \"(\"\n                stack += \")\"\n            }\n     \
    \       else if(s.startsWith(\")\")) {\n                result += \")\"\n    \
    \            stack += \")\"\n            }\n            else {\n             \
    \   result += \"(\"\n                stack += \")\"\n            }\n        }\n\
    \        if(result.size == lst.length) result.mkString\n        else null", " \
    \       val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ queue = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n\
    \        val bad = mutable.Set[String]()\n        lst.foreach(x => x match {\n\
    \            case x if x.equals(\"(\") => stack.push(x)\n            case x if\
    \ x.equals(\")\") => queue.push(x)\n            case x => bad.add(x)\n       \
    \ })\n        while(!queue.isEmpty && !stack.isEmpty) {\n            val x = queue.poll\n\
    \            val y = stack.pop()\n            if(!good.contains(x + y)) {\n  \
    \              good.add(x + y)\n                bad.add(x + y)\n            }\n\
    \        }\n        if(good.size == lst.length) \"Yes\" else \"No\"", "      \
    \  val stack = mutable.Stack[String]()\n        val good = mutable.ListBuffer[String]()\n\
    \        val bad = mutable.ListBuffer[String]()\n        lst.foreach { s =>\n\
    \            val open = s.indexOf(\"(\")\n            val close = s.indexOf(\"\
    )\")\n            if (open < 0 || close < 0) {\n                bad += s\n   \
    \         } else {\n                if (open > close) {\n                    bad\
    \ += s\n                } else {\n                    stack.push(s)\n        \
    \        }\n            }\n        }\n        val goodString = good.mkString(\"\
    (\", \",\", \")\")\n        val badString = bad.mkString(\"(\", \",\", \")\")\n\
    \        if (goodString.equals(badString)) {\n            \"Yes\"\n        } else\
    \ {\n            \"No\"\n        }", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach { s =>\n            val open = s.indexOf(\"(\")\n       \
    \     val close = s.indexOf(\")\")\n            if (open < 0 || close < 0) {\n\
    \                result += \"No\"\n            } else {\n                if (open\
    \ > close) {\n                    result += \"No\"\n                } else {\n\
    \                    stack += s\n                }\n            }\n        }\n\
    \        if (stack.size == 0) {\n            result += \"Yes\"\n        } else\
    \ {\n            result += \"No\"\n        }\n        result.toString", "    \
    \    val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => if (x == \"(\") stack.push(x) else stack.pop() match\
    \ {\n            case x if x == \")\" => result.add(\"Yes\")\n            case\
    \ _ => result.add(\"No\")\n        })\n        result.head", "        val stack\
    \ = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n  \
    \      val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n    \
    \    lst.foreach(x => {\n            x match {\n                case \")\" =>\
    \ stack.pop()\n                case \")(\"  => stack.pop()\n                case\
    \ \")()\" => stack.pop()\n                case \")()()\" => stack.pop()\n    \
    \            case \")(\" => stack.pop()\n                case \")()\" => stack.pop()\n\
    \                case \")(\" => stack.pop()\n                case \")()()\" =>\
    \ stack.pop()\n                case \")(()\" => stack.pop()\n                case\
    \ \")(()()\" => stack.pop()\n                case \")(()()()\" => stack.pop()\n\
    \                case \")(()()()()\" => stack.pop()\n                case \")(()()()()()\"\
    \ => stack.pop()\n                case \")(()()()()()()\" => stack.pop()\n   \
    \             case \")(()()()()()()()\" => stack.pop()\n                case \"\
    )(()()()()()()()()\" => stack.pop()\n                case \")(()()()()()()()()()\"\
    \ => stack.pop()\n                case \")(()()()()()()()()()()\" => stack.pop()\n\
    \                case \")(()()()()()()()()()()\" => stack.pop()\n            \
    \    case \")(()()()()()()()()()()\" => stack.pop()\n                case \")(()()()()()()()()()()()\"\
    \ => stack.pop()\n                case \")(()()()()()()()()()()()()\" => stack.pop()\n\
    \                case \")(()()()()()()()()()()()()\" => stack.pop()\n        \
    \        case \")(()()()()()()()()()()()()()\" => stack.pop()\n              \
    \  case \")(()()()()()()()()()()()()()\" => stack.pop()\n                case\
    \ \")(()()()()()()()()()()()()()\" => stack.pop()\n                case \")(()()()()()()()()()()()()()\"\
    \ => stack.pop()\n                case \")(()()()()()()()()()()()()()\" => stack.pop()\n\
    \                case \")(()()()()()()()()()()()()()\" => stack.pop()\n      \
    \          case \")(()()()()()()()()()()()()()\" => stack.pop()\n            \
    \    case \")(()()()()()()()()()()()()()\" => stack.pop()\n                case ",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            x match {\n                case \"(\"\
    \ => stack.push(x)\n                case \")\" => stack.pop() match {\n      \
    \              case x if x == \")\" => result.add(x)\n                    case\
    \ x => result.add(x)\n                }\n            }\n        })\n        if\
    \ (stack.size == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stackMax = stackSize - 1\n   \
    \     val resultMax = resultSize - 1\n        val stackIndex = stackMax\n    \
    \    val resultIndex = resultMax\n        val stackElement = lst(stackIndex)\n\
    \        val resultElement = lst(resultIndex)\n        val stackOpen = stackElement.indexOf(\"\
    (\")\n        val stackClose = stackElement.indexOf(\")\")\n        val resultOpen\
    \ = resultElement.indexOf(\"(\")\n        val resultClose = resultElement.indexOf(\"\
    )\")\n        val stackOpenCount = stackOpen + 1\n        val stackCloseCount\
    \ = stackClose + 1\n        val resultOpenCount = resultOpen + 1\n        val\
    \ resultCloseCount = resultClose + 1\n        while(stackIndex >= 0 && resultIndex\
    \ >= 0) {\n            val stackElement = lst(stackIndex)\n            val resultElement\
    \ = lst(resultIndex)\n            val stackOpen = stackElement.indexOf(\"(\")\n\
    \            val stackClose = stackElement.indexOf(\")\")\n            val resultOpen\
    \ = resultElement.indexOf(\"(\")\n            val resultClose = resultElement.indexOf(\"\
    )\")\n            val stackOpenCount = stackOpen + 1\n            val stackCloseCount\
    \ = stackClose + 1\n            val resultOpenCount = resultOpen + 1\n       \
    \     val resultCloseCount = resultClose + 1\n            if(stackOpenCount >\
    \ stackCloseCount && resultOpenCount > resultCloseCount) {\n                stackIndex\
    \ -= 1\n                resultIndex -= 1\n            } else if(stackOpenCount\
    \ < stackCloseCount && resultOpenCount < resultCloseCount) {\n               \
    \ stackIndex += 1\n                resultIndex += 1\n            } else if(stackOpenCount\
    \ > stackCloseCount && resultOpenCount < resultCloseCount) {\n               \
    \ stackIndex -= 1\n                resultIndex += 1\n            } else if(stackOpenCount\
    \ < stackCloseCount && resultOpenCount > resultCloseCount) {\n               \
    \ stackIndex += 1\n                resultIndex -= 1\n            }\n         \
    \   stackElement = lst(stackIndex)\n            stackOpen = stackElement.indexOf(\"\
    (\")\n            stackClose = stackElement.indexOf(\")\")\n            resultElement\
    \ = lst(resultIndex)\n            resultOpen = resultElement.indexOf(\"(\")\n\
    \            resultClose = resultElement.indexOf(\")\")\n            stackOpenCount\
    \ = stackOpen + 1\n            stackCloseCount = stackClose + 1\n            resultOpenCount\
    \ = resultOpen + 1\n            resultCloseCount = resultClose + 1\n         \
    \   stackElement = lst(stackIndex)\n            stackOpen = stackElement.indexOf(\"\
    (\")\n            stackClose = stack", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            val len = open - close\n\
    \            if(len > 0) {\n                stack.push(str)\n                while(stack.nonEmpty)\
    \ {\n                    val str = stack.pop()\n                    val open =\
    \ str.indexOf(\"(\")\n                    val close = str.indexOf(\")\")\n   \
    \                 val len = open - close\n                    if(len > 0) {\n\
    \                        stack.push(str)\n                    } else {\n     \
    \                   if(stack.nonEmpty) {\n                            val str\
    \ = stack.pop()\n                            val open = str.indexOf(\"(\")\n \
    \                           val close = str.indexOf(\")\")\n                 \
    \           val len = open - close\n                            if(len > 0) {\n\
    \                                stack.push(str)\n                           \
    \ } else {\n                                result.add(str + lst(i))\n       \
    \                     }\n                        } else {\n                  \
    \          result.add(str + lst(i))\n                        }\n             \
    \       }\n                }\n            } else {\n                result.add(str\
    \ + lst(i))\n            }\n        }\n        if(result.size == lst.size) {\n\
    \            return \"Yes\"\n        } else {\n            return \"No\"\n   \
    \     }", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") {\n                open\
    \ += x\n            } else if (x == \")\") {\n                close += x\n   \
    \         } else {\n                stack += x\n            }\n        })\n  \
    \      val openCount = open.size\n        val closeCount = close.size\n      \
    \  if (openCount == closeCount) {\n            val openSet = open.toSet\n    \
    \        val closeSet = close.toSet\n            val openStack = stack.toSet\n\
    \            val closeStack = stack.toSet\n            val openStackSize = openStack.size\n\
    \            val closeStackSize = closeStack.size\n            if (openStackSize\
    \ == closeStackSize) {\n                val openStackSet = openStack.toSet\n \
    \               val closeStackSet = closeStack.toSet\n                val openStackSetSize\
    \ = openStackSet.size\n                val closeStackSetSize = closeStackSet.size\n\
    \                if (openStackSetSize == closeStackSetSize) {\n              \
    \      val openStackSetIterator = openStackSet.iterator\n                    val\
    \ closeStackSetIterator = closeStackSet.iterator\n                    val openStackSetIteratorSize\
    \ = openStackSetIterator.size\n                    val closeStackSetIteratorSize\
    \ = closeStackSetIterator.size\n                    if (openStackSetIteratorSize\
    \ == closeStackSetIteratorSize) {\n                        val openStackSetIteratorIterator\
    \ = openStackSetIterator.iterator\n                        val closeStackSetIteratorIterator\
    \ = closeStackSetIterator.iterator\n                        val openStackSetIteratorIteratorSize\
    \ = openStackSetIteratorIterator.size\n                        val closeStackSetIteratorIteratorSize\
    \ = closeStackSetIteratorIterator.size\n                        if (openStackSetIteratorIteratorSize\
    \ == closeStackSetIteratorIteratorSize) {\n                            val openStackSetIteratorIteratorIterator\
    \ = openStackSetIteratorIterator.iterator\n                            val closeStackSetIteratorIteratorIterator\
    \ = closeStackSetIteratorIterator.iterator\n                            val openStackSetIteratorIteratorIteratorSize\
    \ = openStackSetIteratorIteratorIterator.size\n                            val\
    \ closeStackSetIteratorIteratorIteratorSize = closeStackSetIteratorIteratorIterator.size\n\
    \                            if (openStackSetIteratorIteratorIteratorSize == closeStackSetIteratorIteratorIteratorSize)\
    \ {\n                                val openStackSetIteratorIteratorIteratorIterator\
    \ = openStackSetIteratorIteratorIterator.iterator\n                          \
    \      val closeStackSetIteratorIteratorIteratorIterator = closeStackSetIteratorIteratorIterator.iterator\n\
    \                                val openStackSetIteratorIteratorIteratorIteratorSize\
    \ = openStack", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n           \
    \ x match {\n                case \")\" => {\n                    stack.pop\n\
    \                }\n                case \")(\"  => {\n                    stack.push(x)\n\
    \                }\n                case \")()\" => {\n                    stack.push(x)\n\
    \                }\n                case \")()()\" => {\n                    stack.push(x)\n\
    \                }\n                case _ => {\n                    result +=\
    \ (x + \"(\")\n                }\n            }\n        })\n        if (stack.size\
    \ == 0) {\n            \"No\"\n        } else {\n            \"Yes\"\n       \
    \ }", "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" => {\n                    close.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(elem) => result += elem\n                            case None =>\
    \ result += \"No\"\n                        }\n                    }\n       \
    \         }\n                case \"(\" => {\n                    open.synchronized\
    \ {\n                        stack += x\n                    }\n             \
    \   }\n                case _ => {\n                    stack.synchronized {\n\
    \                        stack += x\n                    }\n                }\n\
    \            }\n        })\n        stack.synchronized {\n            stack.toList\
    \ match {\n                case Nil => \"No\"\n                case x :: Nil =>\
    \ result += \"Yes\"\n                case x :: y :: Nil => result += \"Yes\"\n\
    \                case x :: y :: z :: Nil => result += \"Yes\"\n              \
    \  case x :: y :: z :: t => {\n                    val newStack = stack.filterNot(_\
    \ == x)\n                    val newOpen = open.filterNot(_ == y)\n          \
    \          val newClose = close.filterNot(_ == z)\n                    val newResult\
    \ = result.filterNot(_ == t)\n                    val newStackSize = newStack.size\
    \ + newOpen.size + newClose.size\n                    val newResultSize = newResult.size\
    \ + newStackSize\n                    if (newResultSize == newStackSize) {\n \
    \                       newResult += \"Yes\"\n                    } else {\n \
    \                       newResult += \"No\"\n                    }\n         \
    \       }\n            }\n        }", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => x match {\n            case \")\" => stack.pop() match\
    \ {\n                case \")\" => result += \"(\"\n                case \")()\"\
    \ => result += \"()\"\n                case \")(\" => result += \"()\"\n     \
    \           case \")()()\" => result += \"()()\"\n                case _ => result\
    \ += \"(\"\n            }\n            case \")()\" => stack.pop() match {\n \
    \               case \")\" => result += \"(\"\n                case \")()\" =>\
    \ result += \"()\"\n                case \")(\" => result += \"()\"\n        \
    \        case \")()()\" => result += \"()()\"\n                case _ => result\
    \ += \"(\"\n            }\n            case \")(\" => stack.pop() match {\n  \
    \              case \")\" => result += \"(\"\n                case \")()\" =>\
    \ result += \"()\"\n                case \")(\" => result += \"()\"\n        \
    \        case \")()()\" => result += \"()()\"\n                case _ => result\
    \ += \"(\"\n            }\n            case \")()()\" => stack.pop() match {\n\
    \                case \")\" => result += \"(\"\n                case \")()\" =>\
    \ result += \"()\"\n                case \")(\" => result += \"()\"\n        \
    \        case \")()()\" => result += \"()()\"\n                case _ => result\
    \ += \"(\"\n            }\n            case _ => stack += x\n        })\n    \
    \    if (stack.size == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" =>\n                    close.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(\")\") =>\n                                result += \"(\" + stack.toList.reverse.mkString(\"\
    ,\") + \")\"\n                            case _ =>\n                        }\n\
    \                    }\n                case \")(\" =>\n                    open.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(\"(\") =>\n                                result += \"(\" + stack.toList.reverse.mkString(\"\
    ,\") + \")\"\n                            case _ =>\n                        }\n\
    \                    }\n                case \")(\" =>\n                    open.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(\"(\") =>\n                                result += \"(\" + stack.toList.reverse.mkString(\"\
    ,\") + \")\"\n                            case _ =>\n                        }\n\
    \                    }\n                case \")(\" =>\n                    open.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(\"(\") =>\n                                result += \"(\" + stack.toList.reverse.mkString(\"\
    ,\") + \")\"\n                            case _ =>\n                        }\n\
    \                    }\n                case \")(\" =>\n                    open.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(\"(\") =>\n                                result += \"(\" + stack.toList.reverse.mkString(\"\
    ,\") + \")\"\n                            case _ =>\n                        }\n\
    \                    }\n                case \")(\" =>\n                    open.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(\"(\") =>\n                                result += \"(\" + stack.toList.reverse.mkString(\"\
    ,\") + \")\"\n                            case _ =>\n                        }\n\
    \                    }\n                case \")(\" =>\n                    open.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(\"(\") =>\n                                result += \"(\" + stack.toList.reverse.mkString(\"\
    ,\") + \")\"\n                            case _ =>\n                        }\n\
    \                    }\n                case \")(\" =>\n                    open.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(\"(\") =>\n                                result += \"(\" + stack.toList.reverse.mkString(\"\
    ,\") + \")\"\n                            case _ =>\n                        }\n\
    \                    }\n                case \")(\" =>\n                    open.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(\"(\") =>\n                                ", "        val stack =\
    \ mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n    \
    \    val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result += \"No\"\n                return result.toString\n\
    \            }\n            val openCount = stack.length\n            val closeCount\
    \ = stack.length\n            stack.push(str)\n            while(open > -1) {\n\
    \                val openCount = stack.length\n                val closeCount\
    \ = stack.length\n                stack.push(str.substring(0, open))\n       \
    \         val str = str.substring(open + 1, close)\n                val closeCount\
    \ = stack.length\n                stack.push(str)\n                open -= 1\n\
    \            }\n            while(close > -1) {\n                val openCount\
    \ = stack.length\n                val closeCount = stack.length\n            \
    \    stack.push(str.substring(0, close))\n                val str = str.substring(close\
    \ + 1, str.length)\n                val closeCount = stack.length\n          \
    \      stack.push(str)\n                close += 1\n            }\n          \
    \  val openCount = stack.length\n            val closeCount = stack.length\n \
    \           val str = stack.mkString\n            result += \"Yes\"\n        }\n\
    \        result.toString", "        val stack = mutable.Stack[String]()\n    \
    \    val result = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n \
    \           x match {\n                case \")\" => {\n                    stack.pop()\n\
    \                }\n                case \")(\"  => {\n                    stack\
    \ += x\n                }\n                case \")()\" => {\n               \
    \     stack += x\n                    stack.pop()\n                }\n       \
    \         case \")()()\" => {\n                    stack += x\n              \
    \      stack += x\n                    stack.pop()\n                }\n      \
    \          case \")()()()\" => {\n                    stack += x\n           \
    \         stack += x\n                    stack += x\n                    stack.pop()\n\
    \                }\n                case \")()()()()\" => {\n                \
    \    stack += x\n                    stack += x\n                    stack +=\
    \ x\n                    stack += x\n                    stack.pop()\n       \
    \         }\n                case \")()()()()()\" => {\n                    stack\
    \ += x\n                    stack += x\n                    stack += x\n     \
    \               stack += x\n                    stack += x\n                 \
    \   stack.pop()\n                }\n                case \")()()()()()()\" =>\
    \ {\n                    stack += x\n                    stack += x\n        \
    \            stack += x\n                    stack += x\n                    stack\
    \ += x\n                    stack += x\n                    stack.pop()\n    \
    \            }\n                case \")()()()()()()()\" => {\n              \
    \      stack += x\n                    stack += x\n                    stack +=\
    \ x\n                    stack += x\n                    stack += x\n        \
    \            stack += x\n                    stack += x\n                    stack.pop()\n\
    \                }\n                case \")()()()()()()()()\" => {\n        \
    \            stack += x\n                    stack += x\n                    stack\
    \ += x\n                    stack += x\n                    stack += x\n     \
    \               stack += x\n                    stack += x\n                 \
    \   stack += x\n                    stack.pop()\n                }\n         \
    \       case \")()()()()()()()()()\" => {\n                    stack += x\n  \
    \                  stack += x\n                    stack += x\n              \
    \      stack += x\n                    stack += x\n                    stack +=\
    \ x\n                    stack += x\n                    stack += x\n        \
    \            stack += x\n                    stack.pop()\n                }\n\
    \                case \")()()()()()()()()()\" => {\n                    stack\
    \ += x\n                    stack += x\n                    stack += x\n     \
    \               stack += x\n                    stack += x\n                 \
    \   stack += x\n                    stack += x\n                    stack += x\n\
    \                    stack += x\n                    stack.pop()\n           \
    \     }\n                case \")()()()()()()()()()()\" => {\n               \
    \     stack += ", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        lst.foreach {\n            s =>\n  \
    \              val newStack = mutable.Stack[String]()\n                val newResult\
    \ = mutable.ListBuffer[String]()\n                val open = s.indexOf('(')\n\
    \                val close = s.lastIndexOf(')')\n                val openCount\
    \ = stack.length\n                val closeCount = stack.length\n            \
    \    stack.push(s)\n                while (open != -1) {\n                   \
    \ if (openCount == closeCount) {\n                        newStack.push(stack.pop())\n\
    \                        newResult.push(stack.pop())\n                       \
    \ openCount = stack.length\n                        closeCount = stack.length\n\
    \                    } else if (openCount < closeCount) {\n                  \
    \      newStack.push(stack.pop())\n                        openCount = stack.length\n\
    \                    } else {\n                        newStack.push(stack.pop())\n\
    \                        closeCount = stack.length\n                    }\n  \
    \                  open = s.indexOf('(', open + 1)\n                }\n      \
    \          stack.clear()\n                result.clear()\n                result.addAll(newResult)\n\
    \        }\n        if (result.size == 0) {\n            \"No\"\n        } else\
    \ {\n            \"Yes\"\n        }", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach { s =>\n\
    \            if (s.startsWith(\"(\")) {\n                open += s\n         \
    \       stack.push(s)\n            } else if (s.startsWith(\")\")) {\n       \
    \         close += s\n                val openCount = open.length\n          \
    \      val closeCount = close.length\n                if (openCount == closeCount)\
    \ {\n                    result += (open.toList ++ close.toList)\n           \
    \     }\n                stack.pop()\n            }\n        }\n        if (result.size\
    \ == 0) {\n            \"No\"\n        } else {\n            \"Yes\"\n       \
    \ }", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result += \"No\"\n\
    \            } else {\n                result += \"Yes\"\n                stack.push(str)\n\
    \            }\n        }\n        if(stack.size == 0) {\n            result +=\
    \ \"No\"\n        } else {\n            result += \"Yes\"\n        }\n       \
    \ result + stack.toList.reverse.mkString", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach { s =>\n            val open = s.indexOf('(')\n         \
    \   val close = s.lastIndexOf(')')\n            if (open < 0 || close < 0) return\n\
    \            if (open > close) return\n            val left = s.substring(0, open)\n\
    \            val right = s.substring(close + 1)\n            val newStack = stack\
    \ :+ left\n            val newResult = result :+ right\n            val newResult2\
    \ = newResult :+ right\n            val newResult3 = newResult :+ left\n     \
    \       val newResult4 = newResult :+ left\n            val newResult5 = newResult\
    \ :+ right\n            val newResult6 = newResult :+ left\n            val newResult7\
    \ = newResult :+ right\n            val newResult8 = newResult :+ left\n     \
    \       val newResult9 = newResult :+ left\n            val newResult10 = newResult\
    \ :+ right\n            val newResult11 = newResult :+ left\n            val newResult12\
    \ = newResult :+ left\n            val newResult13 = newResult :+ right\n    \
    \        val newResult14 = newResult :+ left\n            val newResult15 = newResult\
    \ :+ left\n            val newResult16 = newResult :+ right\n            val newResult17\
    \ = newResult :+ left\n            val newResult18 = newResult :+ left\n     \
    \       val newResult19 = newResult :+ right\n            val newResult20 = newResult\
    \ :+ left\n            val newResult21 = newResult :+ left\n            val newResult22\
    \ = newResult :+ right\n            val newResult23 = newResult :+ left\n    \
    \        val newResult24 = newResult :+ left\n            val newResult25 = newResult\
    \ :+ right\n            val newResult26 = newResult :+ left\n            val newResult27\
    \ = newResult :+ left\n            val newResult28 = newResult :+ right\n    \
    \        val newResult29 = newResult :+ left\n            val newResult30 = newResult\
    \ :+ left\n            val newResult31 = newResult :+ right\n            val newResult32\
    \ = newResult :+ left\n            val newResult33 = newResult :+ left\n     \
    \       val newResult34 = newResult :+ right\n            val newResult35 = newResult\
    \ :+ left\n            val newResult36 = newResult :+ left\n            val newResult37\
    \ = newResult :+ right\n            val newResult38 = newResult :+ left\n    \
    \        ", "        val stack = mutable.Stack[String]()\n        val result =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => stack += x)\n   \
    \     while(stack.nonEmpty) {\n            val x = stack.pop()\n            val\
    \ y = stack.pop()\n            if(x == \")\" && y == \")\") {\n              \
    \  result += \"(\" + x + \")\"\n            } else if(x == \"(\" && y == \")\"\
    ) {\n                result += \"(\" + y + \")\"\n            } else if(x == \"\
    (\" && y == \"(\") {\n                result += \"(\" + x + \")\"\n          \
    \  } else if(y == \"(\" && x == \")\") {\n                result += \"(\" + y\
    \ + \")\"\n            } else if(y == \"(\" && x != \"(\") {\n               \
    \ result += \"(\" + x + \")\"\n            } else if(x != \"(\" && y == \"(\"\
    ) {\n                result += \"(\" + y + \")\"\n            } else if(x != \"\
    (\" && y != \"(\") {\n                result += \"(\" + x + \")\"\n          \
    \  } else if(x != \"(\" && y != \"(\" && x != \")\") {\n                result\
    \ += \"(\" + x + \")\"\n            } else if(y != \"(\" && x != \"(\" && y !=\
    \ \")\") {\n                result += \"(\" + y + \")\"\n            }\n     \
    \   }\n        if(result.nonEmpty) {\n            val str = result.toList\n  \
    \          val len = str.size\n            if(len == 1) {\n                return\
    \ str(0)\n            }\n            if(len == 2) {\n                return str(0)\
    \ + str(1)\n            }\n            if(len == 3) {\n                return\
    \ str(0) + str(1) + str(2)\n            }\n            if(len == 4) {\n      \
    \          return str(0) + str(1) + str(2) + str(3)\n            }\n         \
    \   if(len == 5) {\n                return str(0) + str(1) + str(2) + str(3) +\
    \ str(4)\n            }\n            if(len == 6) {\n                return str(0)\
    \ + str(1) + str(2) + str(3) + str(4) + str(5)\n            }\n            if(len\
    \ == 7) {\n                return str(0) + str(1) + str(2) + str(3) + str(4) +\
    \ str(5) + str(6)\n            }\n            if(len == 8) {\n               \
    \ return str(0) + str(1) + str(2) + str(3) + str(4) + str(5) + str(6) + str(7)\n\
    \            }\n            if(len == 9) {\n                return str(0) + str(1)\
    \ + str(2) + str(3) + str(4) + str(5) + str(6) + str(7) + str(8)\n           \
    \ }\n            if(len == 10) {\n                return str(0) + str(1) + str(2)\
    \ + str(3) + str(4) + str(5) + str(6) + str(7) + str(8) + str(9)\n           \
    \ }\n            if(len == 11) {\n                return str(0) + str(1) + str(2)\
    \ + str(3) + str(4) + str(", "        val stack = mutable.Stack[String]()\n  \
    \      val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.length){\n            val str = lst(i)\n            val open = str.indexOf(\"\
    (\")\n            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0){\n                return \"No\"\n            }\n            val stackStr\
    \ = str.substring(0,open)\n            val stackStr2 = str.substring(open+1,close)\n\
    \            val stackStr3 = str.substring(close+1)\n            if(!stackStr.equals(stackStr2)){\n\
    \                return \"No\"\n            }\n            if(!stackStr.equals(stackStr3)){\n\
    \                return \"No\"\n            }\n            stack.push(str)\n \
    \       }\n        while(stack.nonEmpty){\n            val str = stack.pop()\n\
    \            val open = str.indexOf(\"(\")\n            val close = str.indexOf(\"\
    )\")\n            if(open < 0 || close < 0){\n                return \"No\"\n\
    \            }\n            val stackStr = str.substring(0,open)\n           \
    \ val stackStr2 = str.substring(open+1,close)\n            val stackStr3 = str.substring(close+1)\n\
    \            if(!stackStr.equals(stackStr2)){\n                return \"No\"\n\
    \            }\n            if(!stackStr.equals(stackStr3)){\n               \
    \ return \"No\"\n            }\n            result.add(str)\n        }\n     \
    \   if(result.length == 0){\n            return \"Yes\"\n        }\n        return\
    \ \"No\"", "        val stack = mutable.Stack[String]()\n        val result =\
    \ mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n   \
    \     val close = mutable.Set[String]()\n        lst.foreach(x => {\n        \
    \    if (x == \"(\") {\n                open += x\n                stack.push(x)\n\
    \            } else if (x == \")\") {\n                close += x\n          \
    \      while (!stack.isEmpty && stack.peek().equals(x)) {\n                  \
    \  result += stack.pop()\n                }\n                stack.pop()\n   \
    \         }\n        })\n        if (close.size == 0) {\n            return \"\
    No\"\n        }\n        if (open.size == 0) {\n            return \"Yes\"\n \
    \       }\n        return \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => x\
    \ match {\n            case x if x.startsWith(\"(\") => stack.push(x)\n      \
    \      case x if x.startsWith(\")\") => stack.pop() match {\n                case\
    \ x if x == \")\" => result.add(\"Yes\")\n                case x => result.add(\"\
    No\")\n            }\n            case x => result.add(\"No\")\n        })\n \
    \       result.mkString(\",\")", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach { x =>\n\
    \            x match {\n                case \")\" =>\n                    close.push(x)\n\
    \                case \")(\" =>\n                    stack.push(x)\n         \
    \       case \")(\" =>\n                    stack.push(x)\n                case\
    \ \")(\" =>\n                    stack.push(x)\n                case \")(\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push(x)\n                case \")(\" =>\n                  \
    \  stack.push(x)\n                case \")(\" =>\n                    stack.push(x)\n\
    \                case \")(\" =>\n                    stack.push(x)\n         \
    \       case \")(\" =>\n                    stack.push(x)\n                case\
    \ \")(\" =>\n                    stack.push(x)\n                case \")(\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push(x)\n                case \")(\" =>\n                  \
    \  stack.push(x)\n                case \")(\" =>\n                    stack.push(x)\n\
    \                case \")(\" =>\n                    stack.push(x)\n         \
    \       case \")(\" =>\n                    stack.push(x)\n                case\
    \ \")(\" =>\n                    stack.push(x)\n                case \")(\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push(x)\n                case \")(\" =>\n                  \
    \  stack.push(x)\n                case \")(\" =>\n                    stack.push(x)\n\
    \                case \")(\" =>\n                    stack.push(x)\n         \
    \       case \")(\" =>\n                    stack.push(x)\n                case\
    \ \")(\" =>\n                    stack.push(x)\n                case \")(\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push(x)\n                case \")(\" =>\n                  \
    \  stack.push(x)\n                case \")(\" =>\n                    stack.push(x)\n\
    \                case \")(\" =>\n                    stack.push(x)\n         \
    \       case \")(\" =>\n                    stack.push(x)\n                case\
    \ \")(\" =>\n                    stack.push(x)\n                case \")(\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push(x)\n                case \")(\" =>\n                  \
    \  stack.push(x)\n                case \")(\" =>\n                    stack.push(x)\n\
    \                case \")(\" =>\n                    stack.push(x)\n         \
    \       case \")(\" =>\n                    stack.push(x)\n                case\
    \ \")(\" =>\n                    stack.push(x)\n                case \")(\" =>\n\
    \                    stack.push(x)\n                case \")(\" =>\n         \
    \           stack.push", "        val stack = mutable.Stack[String]()\n      \
    \  val result = mutable.ListBuffer[String]()\n        lst.foreach(x => stack +=\
    \ x)\n        while(stack.nonEmpty) {\n            val x = stack.pop()\n     \
    \       val y = stack.pop()\n            val z = (x + \"(\" + y + \")\")\n   \
    \         result += z\n            stack.push(z)\n        }\n        if(result.size\
    \ == lst.length)\n            \"Yes\"\n        else\n            \"No\"", "  \
    \      val stack = mutable.Stack[String]()\n        val good = mutable.Set[String]()\n\
    \        val bad = mutable.Set[String]()\n        lst.foreach(x => {\n       \
    \     if (x == \"(\") {\n                stack.push(x)\n            } else if\
    \ (x == \")\") {\n                val top = stack.pop()\n                if (top\
    \ == \"(\") {\n                    good.add(x)\n                } else {\n   \
    \                 bad.add(x)\n                }\n            }\n        })\n \
    \       if (good.size == lst.size) {\n            return \"Yes\"\n        } else\
    \ {\n            return \"No\"\n        }", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result += \"No\"\n            } else {\n           \
    \     val openParen = str.substring(0, open)\n                val closeParen =\
    \ str.substring(close+1, str.length)\n                val newStack = stack.dropRight(1)\n\
    \                val newResult = result.dropRight(1)\n                val newOpen\
    \ = openParen.indexOf(\"(\")\n                val newClose = closeParen.indexOf(\"\
    )\")\n                if(newOpen < 0 || newClose < 0) {\n                    newResult\
    \ += \"No\"\n                } else {\n                    val newOpenParen =\
    \ openParen.substring(0, newOpen)\n                    val newCloseParen = closeParen.substring(newClose+1,\
    \ closeParen.length)\n                    val newStack = stack.dropRight(1)\n\
    \                    val newResult = result.dropRight(1)\n                   \
    \ val newOpenParen2 = newOpenParen.substring(0, newOpenParen.indexOf(\"(\"))\n\
    \                    val newCloseParen2 = newCloseParen.substring(newCloseParen.indexOf(\"\
    )\"), newCloseParen.length)\n                    val newStack2 = newStack.dropRight(1)\n\
    \                    val newResult2 = newResult.dropRight(1)\n               \
    \     val newOpenParen3 = newOpenParen2.substring(0, newOpenParen2.indexOf(\"\
    (\"))\n                    val newCloseParen3 = newCloseParen2.substring(newCloseParen2.indexOf(\"\
    )\"), newCloseParen2.length)\n                    val newStack3 = newStack2.dropRight(1)\n\
    \                    val newResult3 = newResult2.dropRight(1)\n              \
    \      val newOpenParen4 = newOpenParen3.substring(0, newOpenParen3.indexOf(\"\
    (\"))\n                    val newCloseParen4 = newCloseParen3.substring(newCloseParen3.indexOf(\"\
    )\"), newCloseParen3.length)\n                    val newStack4 = newStack3.dropRight(1)\n\
    \                    val newResult4 = newResult3.dropRight(1)\n              \
    \      val newOpenParen5 = newOpenParen4.substring(0, newOpenParen4.indexOf(\"\
    (\"))\n                    val newCloseParen5 = newCloseParen4.substring(newCloseParen4.indexOf(\"\
    )\"), newCloseParen4.length)\n                    val newStack5 = newStack4.dropRight(1)\n\
    \                    val newResult5 = newResult4.dropRight(1)\n              \
    \      val newOpenParen6 = newOpenParen5.substring(0, newOpenParen5.indexOf(\"\
    (\"))\n                    val newCloseParen", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach { s =>\n     \
    \       if (s.contains(\"(\")) {\n                open += s\n                stack.push(s)\n\
    \            }\n            if (s.contains(\")\")) {\n                close +=\
    \ s\n                while (!stack.isEmpty && stack.peek().contains(\"(\")) {\n\
    \                    result += (stack.peek() + s)\n                    stack.pop()\n\
    \                }\n                stack.pop()\n            }\n        }\n  \
    \      if (close.isEmpty) result.toList(\"Yes\")\n        else result.toList(\"\
    No\")", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach {\n            s =>\n                if (s.startsWith(\"\
    (\")) {\n                    stack.push(s)\n                } else if (s.startsWith(\"\
    )\")) {\n                    val top = stack.pop()\n                    if (top.length\
    \ == 1) {\n                        result += \"(\" + top + \")\"\n           \
    \         } else {\n                        result += \"(\" + top + \")\"\n  \
    \                  }\n                }\n        }\n        if (result.length\
    \ == lst.length) {\n            return \"Yes\"\n        } else {\n           \
    \ return \"No\"\n        }", "        val stack = mutable.Stack[String]()\n  \
    \      val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            x match {\n                case \"(\"\
    \ => stack.push(x)\n                case \")\" => stack.pop() match {\n      \
    \              case x if x == \")\" => result.add(x)\n                    case\
    \ x => result.add(x)\n                }\n            }\n        })\n        if\
    \ (stack.size == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val cur = lst(i)\n            val open = cur match\
    \ {\n                case '(': stack += '('\n                case ')': stack +=\
    \ ')'\n                case _: String => throw new Exception(\"Invalid parentheses\"\
    )\n            }\n            val close = cur match {\n                case ')':\
    \ stack -= ')'\n                case _: String => throw new Exception(\"Invalid\
    \ parentheses\")\n            }\n            if(open != close) {\n           \
    \     result += \"No\"\n                return result.toString\n            }\n\
    \        }\n        result += \"Yes\"\n        return result.toString", "    \
    \    val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach { s =>\n            s match {\n                case \"(\"\
    \ => open += s\n                case \")\" => close += s\n                case\
    \ _ => stack += s\n            }\n        }\n        val openCount = open.size\n\
    \        val closeCount = close.size\n        val openParen = openCount - closeCount\n\
    \        val closeParen = closeCount - openCount\n        val openParenCount =\
    \ openParen\n        val closeParenCount = closeParen\n        val openParenIndex\
    \ = stack.indexOf(\"(\")\n        val closeParenIndex = stack.indexOf(\")\")\n\
    \        val openParenCount = stack.size\n        val closeParenCount = stack.size\n\
    \        val openParenIndex = stack.indexOf(\"(\")\n        val closeParenIndex\
    \ = stack.indexOf(\")\")\n        val openParenCount = stack.size\n        val\
    \ closeParenCount = stack.size\n        if (openParenCount > closeParenCount &&\
    \ openParenCount > openParenIndex && closeParenCount > closeParenIndex) {\n  \
    \          val openParen = stack.take(openParenIndex).reverse\n            val\
    \ closeParen = stack.drop(closeParenIndex).reverse\n            val openParenCount\
    \ = openParen.size\n            val closeParenCount = closeParen.size\n      \
    \      val openParenIndex = stack.indexOf(\"(\")\n            val closeParenIndex\
    \ = stack.indexOf(\")\")\n            val openParenCount = stack.size\n      \
    \      val closeParenCount = stack.size\n            val openParenIndex = stack.indexOf(\"\
    (\")\n            val closeParenIndex = stack.indexOf(\")\")\n            val\
    \ openParenCount = stack.size\n            val closeParenCount = stack.size\n\
    \            val openParen = stack.take(openParenIndex).reverse\n            val\
    \ closeParen = stack.drop(closeParenIndex).reverse\n            val openParenCount\
    \ = openParen.size\n            val closeParenCount = closeParen.size\n      \
    \      val openParenIndex = stack.indexOf(\"(\")\n            val closeParenIndex\
    \ = stack.indexOf(\")\")\n            val openParenCount = stack.size\n      \
    \      val closeParenCount = stack.size\n            val openParen = stack.take(openParenIndex).reverse\n\
    \            val closeParen = stack.drop(closeParenIndex).reverse\n          \
    \  val openParenCount = openParen.size\n            val closeParenCount = closeParen.size\n\
    \            val openParenIndex = stack.indexOf(\"(\")\n            val closeParenIndex\
    \ = stack.indexOf(\")\")\n            val ", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach(s\
    \ => {\n            if (s.startsWith(\"(\")) {\n                stack.push(s)\n\
    \            } else if (s.startsWith(\")\")) {\n                val s = stack.pop()\n\
    \                if (s.startsWith(\"(\")) {\n                    stack.push(s)\n\
    \                } else {\n                    result += (s + \"(\" + s + \")\"\
    )\n                }\n            }\n        })\n        if (stack.size == 0)\
    \ \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n       \
    \ val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            val newStr = str.substring(open\
    \ + 1, close)\n            val newStack = stack.filterNot(x => x == newStr)\n\
    \            val newResult = result.filterNot(x => x == newStr)\n            if(newStack.isEmpty)\
    \ {\n                result += newStr\n            }\n            else if(newResult.isEmpty)\
    \ {\n                stack += newStr\n            }\n            else {\n    \
    \            val newStackStr = newStack.mkString(\"(\", \")\")\n             \
    \   val newResultStr = newResult.mkString(\"(\", \")\")\n                if(newStackStr\
    \ == newResultStr) {\n                    result += newStr\n                }\n\
    \                else {\n                    stack += newStr\n               \
    \ }\n            }\n        }\n        if(result.size == lst.size) {\n       \
    \     return \"Yes\"\n        }\n        else {\n            return \"No\"\n \
    \       }", "        val stack = mutable.Stack[String]()\n        val result =\
    \ mutable.ListBuffer.empty[String]\n        lst.foreach(x => stack += x)\n   \
    \     val open = stack.takeWhile(x => x != \"(\").length\n        val close =\
    \ stack.takeWhile(x => x != \")\").length\n        if (open != close)\n      \
    \      return \"No\"\n        val stack2 = stack.dropWhile(x => x != \"(\").dropWhile(x\
    \ => x != \")\").drop(1)\n        val stack3 = stack.dropWhile(x => x != \"(\"\
    ).dropWhile(x => x != \")\").drop(2)\n        val stack4 = stack.dropWhile(x =>\
    \ x != \"(\").dropWhile(x => x != \")\").drop(3)\n        val stack5 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(4)\n        val stack6 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(5)\n        val stack7 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(6)\n        val stack8 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(7)\n        val stack9 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(8)\n        val stack10 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(9)\n        val stack11 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(10)\n        val stack12 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(11)\n        val stack13 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(12)\n        val stack14 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(13)\n        val stack15 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(14)\n        val stack16 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(15)\n        val stack17 = stack.dropWhile(x\
    \ => x != \"(\").dropWhile(x => x != \")\").drop(16)\n        val stack18", " \
    \       val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else if (!x == \"(\") queue\
    \ += x else if (!x == \")\") bad += x))\n        val goodString = stack.toList\
    \ ++ queue.toList\n        val goodString = goodString.filter(x => !bad.contains(x))\n\
    \        val goodString = goodString.filter(x => !good.contains(x))\n        val\
    \ goodString = goodString.filter(x => !stack.toList.contains(x))\n        val\
    \ goodString = goodString.filter(x => !queue.toList.contains(x))\n        if (goodString.size\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer[String]()\n        lst.foreach { s =>\n\
    \            if (s.startsWith(\"(\")) {\n                stack.push(s)\n     \
    \       } else if (s.startsWith(\")\")) {\n                val s = stack.pop()\n\
    \                if (s.startsWith(\"(\")) {\n                    stack.push(s)\n\
    \                } else {\n                    result += \"No\"\n            \
    \    }\n            }\n        }\n        if (stack.size == 0) {\n           \
    \ result += \"Yes\"\n        } else {\n            result += \"No\"\n        }\n\
    \        return result.toString", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val len = lst.size\n\
    \        for(i <- 0 until len) {\n            val str = lst(i)\n            if(str\
    \ == \"(\") {\n                stack.push(str)\n            } else if(str == \"\
    )\") {\n                val top = stack.pop()\n                if(top == \"(\"\
    ) {\n                    result += \"(\" + top + \")\"\n                } else\
    \ {\n                    result += \"(\" + top + \")\"\n                }\n  \
    \          } else {\n                result += \"(\" + str + \")\"\n         \
    \   }\n        }\n        if(result.size == len) {\n            return \"Yes\"\
    \n        } else {\n            return \"No\"\n        }", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => if (x == \"(\") stack.push(x) else stack.pop())\n  \
    \      val stackSize = stack.size\n        if (stackSize == 0) \"No\" else \"\
    Yes\"", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val openCount = open + 1\n            val closeCount = close +\
    \ 1\n            val openParens = openCount - closeCount\n            if(openParens\
    \ == 0) {\n                stack += str\n            }\n            else if(openParens\
    \ > 0) {\n                stack += str.substring(0, open)\n            }\n   \
    \         else if(closeParens > 0) {\n                val popped = stack.pop()\n\
    \                result += popped\n            }\n        }\n        if(stack.size\
    \ == 0) {\n            return \"No\"\n        }\n        else if(stack.size ==\
    \ 1) {\n            return \"Yes\"\n        }\n        else {\n            return\
    \ \"Yes\"\n        }", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => x match {\n\
    \            case x if x == \")\" => close.push(x)\n            case x if x ==\
    \ \")()\" => close.push(x)\n            case x if x == \"(\" => open.push(x)\n\
    \            case x if x == \")(\" => open.push(x)\n            case x if x ==\
    \ \")()()\" => close.push(x)\n            case x if x == \")(())\" => close.push(x)\n\
    \            case x if x == \")(()())\" => close.push(x)\n            case x if\
    \ x == \")(())()\" => close.push(x)\n            case x if x == \")(()())()\"\
    \ => close.push(x)\n            case x if x == \")(())(())\" => close.push(x)\n\
    \            case x if x == \")(())(()())\" => close.push(x)\n            case\
    \ x if x == \")(())(()())()\" => close.push(x)\n            case x if x == \"\
    )(())(())(())\" => close.push(x)\n            case x if x == \")(())(())(()())\"\
    \ => close.push(x)\n            case x if x == \")(())(())(()())()\" => close.push(x)\n\
    \            case x if x == \")(())(())(()())(())\" => close.push(x)\n       \
    \     case x if x == \")(())(())(()())(()())\" => close.push(x)\n            case\
    \ x if x == \")(())(())(()())(()())()\" => close.push(x)\n            case x if\
    \ x == \")(())(())(()())(()())(())\" => close.push(x)\n            case x if x\
    \ == \")(())(())(()())(()())(()())\" => close.push(x)\n            case x if x\
    \ == \")(())(())(()())(()())(()())()\" => close.push(x)\n            case x if\
    \ x == \")(())(())(()())(()())(()())(())\" => close.push(x)\n            case\
    \ x if x == \")(())(())(()())(()())(()())(()())\" => close.push(x)\n         \
    \   case x if x == \")(())(())(()())(()())(()())(()())()\" => close.push", " \
    \       val stack = mutable.Stack[String]()\n        val good = mutable.ListBuffer[String]()\n\
    \        val bad = mutable.ListBuffer[String]()\n        lst.foreach(x => x match\
    \ {\n            case \")\" => stack.pop() match {\n                case \")\"\
    \ => good.toList match {\n                    case Nil => bad.toList match {\n\
    \                        case Nil => \"No\"\n                        case x =>\
    \ x match {\n                            case x => good = good.toList ++ List(x)\n\
    \                            case Nil => \"Yes\"\n                        }\n\
    \                    }\n                    case x => x match {\n            \
    \            case x => good = good.toList ++ List(x)\n                       \
    \ case Nil => \"Yes\"\n                    }\n                }\n            \
    \    case \")\" => bad.toList match {\n                    case Nil => \"No\"\n\
    \                    case x => x match {\n                        case x => good\
    \ = good.toList ++ List(x)\n                        case Nil => \"Yes\"\n    \
    \                }\n                }\n            }\n            case \")\" =>\
    \ stack.append(x)\n            case x => stack.append(x)\n        })\n       \
    \ good.toList match {\n            case Nil => \"No\"\n            case x => x\
    \ match {\n                case x => good = good.toList ++ List(x)\n         \
    \       case Nil => \"Yes\"\n            }\n        }", "        val stack = mutable.Stack[String]()\n\
    \        val good = mutable.Set[String]()\n        lst.foreach(x => {\n      \
    \      if (x == \"(\") stack += x\n            if (x == \")\") stack -= x\n  \
    \          if (stack.size == 0) good += x\n        })\n        if (good.size ==\
    \ 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n    \
    \    val result = mutable.ListBuffer[String]()\n        lst.foreach(x => x match\
    \ {\n            case x if x.startsWith(\"(\") => stack.push(x)\n            case\
    \ x if x.startsWith(\")\") => stack.pop() match {\n                case x if x\
    \ == \")\" => result.add(x)\n                case x => result.add(x)\n       \
    \     }\n            case x => result.add(x)\n        })\n        if (stack.size\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else if (!x == \"(\") stack.pop()\
    \ else if (!x == \")\") stack.pop() else if (!stack.isEmpty && stack.last == \"\
    (\") stack += x else if (!stack.isEmpty && stack.last == \")\") stack.pop() else\
    \ if (!stack.isEmpty && stack.last == \"(\") stack += x else if (!stack.isEmpty\
    \ && stack.last == \")\") stack.pop() else if (!stack.isEmpty && stack.last ==\
    \ \"(\") stack += x else if (!stack.isEmpty && stack.last == \")\") stack.pop()\
    \ else if (!stack.isEmpty && stack.last == \"(\") stack += x else if (!stack.isEmpty\
    \ && stack.last == \")\") stack.pop() else if (!stack.isEmpty && stack.last ==\
    \ \"(\") stack += x else if (!stack.isEmpty && stack.last == \")\") stack.pop()\
    \ else if (!stack.isEmpty && stack.last == \"(\") stack += x else if (!stack.isEmpty\
    \ && stack.last == \")\") stack.pop() else if (!stack.isEmpty && stack.last ==\
    \ \"(\") stack += x else if (!stack.isEmpty && stack.last == \")\") stack.pop()\
    \ else if (!stack.isEmpty && stack.last == \"(\") stack += x else if (!stack.isEmpty\
    \ && stack.last == \")\") stack.pop() else if (!stack.isEmpty && stack.last ==\
    \ \"(\") stack += x else if (!stack.isEmpty && stack.last == \")\") stack.pop()\
    \ else if (!stack.isEmpty && stack.last == \"(\") stack += x else if (!stack.isEmpty\
    \ && stack.last == \")\") stack.pop() else if (!stack.isEmpty && stack.last ==\
    \ \"(\") stack += x else if (!stack.isEmpty && stack.last == \")\") stack.pop()\
    \ else if (!stack.isEmpty && stack.last == \"(\") stack += x else if (!stack.isEmpty\
    \ && stack.last == \")\") stack.pop() else if (!stack.isEmpty && stack.last ==\
    \ \"(\") stack += x else if (!stack.isEmpty && stack.last == \")\") stack.pop()\
    \ else if (!stack.isEmpty && stack.last == \"(\") stack += x else if (!stack.isEmpty\
    \ && stack.last == \")\") stack.pop() else if (!stack.isEmpty && stack.last ==\
    \ \"(\") stack += x else if (!stack.isEmpty && stack.last == \")\") stack.pop()\
    \ else if (!stack.isEmpty && stack.last == \"(\") stack += x else if (!stack.isEmpty\
    \ && stack.last == \")\") ", "        val stack = mutable.Stack[String]()\n  \
    \      val result = mutable.ListBuffer.empty[String]\n        lst.foreach { s\
    \ =>\n            if (s == \"(\") {\n                stack.push(s)\n         \
    \   } else if (s == \")\") {\n                if (stack.isEmpty) {\n         \
    \           result += \"No\"\n                } else {\n                    result\
    \ += \"Yes\"\n                }\n                stack.pop()\n            }\n\
    \        }\n        if (result.isEmpty) {\n            result += \"No\"\n    \
    \    } else {\n            result += \"Yes\"\n        }\n        return result.toString",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val openCount = stack.length\n      \
    \          val closeCount = stack.length\n                while(openCount > 0)\
    \ {\n                    stack.pop()\n                    openCount -= 1\n   \
    \             }\n                while(closeCount > 0) {\n                   \
    \ stack.pop()\n                    closeCount -= 1\n                }\n      \
    \          val newStack = stack.mkString(\"(\", \", \", \")\")\n             \
    \   result.append(\"Yes\")\n            }\n        }\n        result.mkString(\"\
    , \")", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => close.push(x)\n                case \")(\"  => stack.push(x)\n          \
    \      case \")()\" => stack.push(x)\n                case \")()()\" => stack.push(x)\n\
    \                case \")(\" => open.push(x)\n                case \")()\" =>\
    \ open.push(x)\n                case _ => stack.push(x)\n            }\n     \
    \   })\n        val openCount = open.size\n        val closeCount = close.size\n\
    \        if (openCount == 0 && closeCount == 0) \"No\"\n        else if (openCount\
    \ == 0 && closeCount > 0) \"Yes\"\n        else if (openCount > 0 && closeCount\
    \ == 0) \"Yes\"\n        else if (openCount > 0 && closeCount > 0) \"No\"\n  \
    \      else if (openCount == closeCount) \"Yes\"\n        else matchParens(stack.toList)",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else if (!stack.isEmpty &&\
    \ x == \")\") stack.pop() else if (!stack.isEmpty && x == \"(\") stack += x else\
    \ if (!stack.isEmpty && x == \")\") stack.pop() else if (!stack.isEmpty && x ==\
    \ \"(\") stack += x else if (!stack.isEmpty && x == \")\") stack.pop() else if\
    \ (!stack.isEmpty && x == \"(\") stack += x else if (!stack.isEmpty && x == \"\
    )\") stack.pop() else if (!stack.isEmpty && x == \"(\") stack += x else if (!stack.isEmpty\
    \ && x == \")\") stack.pop() else if (!stack.isEmpty && x == \"(\") stack += x\
    \ else if (!stack.isEmpty && x == \")\") stack.pop() else if (!stack.isEmpty &&\
    \ x == \"(\") stack += x else if (!stack.isEmpty && x == \")\") stack.pop() else\
    \ if (!stack.isEmpty && x == \"(\") stack += x else if (!stack.isEmpty && x ==\
    \ \")\") stack.pop() else if (!stack.isEmpty && x == \"(\") stack += x else if\
    \ (!stack.isEmpty && x == \")\") stack.pop() else if (!stack.isEmpty && x == \"\
    (\") stack += x else if (!stack.isEmpty && x == \")\") stack.pop() else if (!stack.isEmpty\
    \ && x == \"(\") stack += x else if (!stack.isEmpty && x == \")\") stack.pop()\
    \ else if (!stack.isEmpty && x == \"(\") stack += x else if (!stack.isEmpty &&\
    \ x == \")\") stack.pop() else if (!stack.isEmpty && x == \"(\") stack += x else\
    \ if (!stack.isEmpty && x == \")\") stack.pop() else if (!stack.isEmpty && x ==\
    \ \"(\") stack += x else if (!stack.isEmpty && x == \")\") stack.pop() else if\
    \ (!stack.isEmpty && x == \"(\") stack += x else if (!stack.isEmpty && x == \"\
    )\") stack.pop() else if (!stack.isEmpty && x == \"(\") stack += x else if (!stack.isEmpty\
    \ && x == \")\") stack.pop() else if (!stack.isEmpty && x == \"(\") stack += x\
    \ else if (!stack.isEmpty && x == \")\") stack.pop() else if (!stack.isEmpty &&\
    \ x == \"(\") stack += x else if (!stack.isEmpty && x == \")\") stack.pop() else\
    \ if (!stack.isEmpty && x == \"(\") stack += x else if (!stack.isEmpty && x ==\
    \ \")\") stack.pop() else if (!stack.isEmpty && x == \"(\") stack += ", "    \
    \    val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ =>\n                    close.add(x)\n                case \")(\"  =>\n    \
    \                open.add(x)\n                case \")()\" =>\n              \
    \      open.add(x)\n                case \")()()\" =>\n                    open.add(x)\n\
    \                case \")()()()\" =>\n                    open.add(x)\n      \
    \          case \")()()()()\" =>\n                    open.add(x)\n          \
    \      case \")()()()()()\" =>\n                    open.add(x)\n            \
    \    case \")()()()()()()\" =>\n                    open.add(x)\n            \
    \    case \")()()()()()()()\" =>\n                    open.add(x)\n          \
    \      case \")()()()()()()()()\" =>\n                    open.add(x)\n      \
    \          case \")()()()()()()()()()\" =>\n                    open.add(x)\n\
    \                case \")()()()()()()()()()()\" =>\n                    open.add(x)\n\
    \                case \")()()()()()()()()()()()\" =>\n                    open.add(x)\n\
    \                case \")()()()()()()()()()()()\" =>\n                    open.add(x)\n\
    \                case \")()()()()()()()()()()()\" =>\n                    open.add(x)\n\
    \                case \")()()()()()()()()()()()()\" =>\n                    open.add(x)\n\
    \                case \")()()()()()()()()()()()()\" =>\n                    open.add(x)\n\
    \                case \")()()()()()()()()()()()()()\" =>\n                   \
    \ open.add(x)\n                case \")()()()()()()()()()()()()()\" =>\n     \
    \               open.add(x)\n                case \")()()()()()()()()()()()()()\"\
    \ =>\n                    open.add(x)\n                case \")()()()()()()()()()()()()()()\"\
    \ =>\n                    open.add(x)\n                case \")()()()()()()()()()()()()()()\"\
    \ =>\n                    open.add(x)\n                case \")()()()()()()()()()()()()()()\"\
    \ =>\n                    open.add(x)\n                case \")()()()()()()()()()()()()()()()\"\
    \ =>\n                    open.add(x)\n                case \")()", "        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        lst.foreach(x => x match {\n            case x if x.startsWith(\"(\"\
    ) => stack += x\n            case x if x.startsWith(\")\") => queue += x\n   \
    \         case _ => bad += x\n        })\n        while(stack.nonEmpty || queue.nonEmpty)\
    \ {\n            val x = stack.pop() match {\n                case x if x.startsWith(\"\
    (\") => stack += x\n                case x if x.startsWith(\")\") => queue +=\
    \ x\n                case _ => bad += x\n            }\n            good += x\n\
    \        }\n        if (good.size == lst.size) {\n            return \"Yes\"\n\
    \        } else {\n            return \"No\"\n        }", "        val stack =\
    \ mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") {\n                stack.push(x)\n\
    \            } else if (x == \")\") {\n                if (stack.size == 0) {\n\
    \                    result += \"No\"\n                } else {\n            \
    \        val top = stack.pop()\n                    if (top == \"(\") {\n    \
    \                    result += \"Yes\"\n                    } else {\n       \
    \                 result += \"No\"\n                    }\n                }\n\
    \            }\n        })\n        result += \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach {\
    \ s =>\n            val open = s.indexOf('(')\n            val close = s.lastIndexOf(')')\n\
    \            if (open < 0 || close < 0 || open > close) {\n                result.append(\"\
    No\")\n            } else {\n                val newStack = mutable.Stack[String]()\n\
    \                stack.push(s)\n                while (!stack.isEmpty && open\
    \ > stack.peek().indexOf(')')) {\n                    newStack.push(stack.peek())\n\
    \                    stack.pop()\n                }\n                while (!stack.isEmpty\
    \ && close < stack.peek().indexOf('(')) {\n                    newStack.push(stack.peek())\n\
    \                    stack.pop()\n                }\n                while (!stack.isEmpty\
    \ && open < stack.peek().indexOf('(')) {\n                    newStack.push(stack.peek())\n\
    \                    stack.pop()\n                }\n                if (newStack.isEmpty)\
    \ {\n                    result.append(\"Yes\")\n                } else {\n  \
    \                  result.append(\"No\")\n                }\n            }\n \
    \       }\n        return result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            if(str == \"(\") {\n          \
    \      stack += str\n            } else if(str == \")\") {\n                val\
    \ s = stack.pop()\n                if(s == \"(\") {\n                    stack\
    \ += s\n                } else {\n                    result += \"No\"\n     \
    \               break\n                }\n            } else {\n             \
    \   result += \"No\"\n                break\n            }\n        }\n      \
    \  if(result.size == lst.size) {\n            result += \"Yes\"\n        } else\
    \ {\n            result += \"No\"\n        }\n        return result.toString",
  "        val stack = mutable.Stack[String]()\n        val good = mutable.Set[String]()\n\
    \        val bad = mutable.Set[String]()\n        lst.foreach(x => {\n       \
    \     if (x == \"(\") {\n                stack.push(x)\n            } else if\
    \ (x == \")\") {\n                if (stack.nonEmpty) {\n                    val\
    \ top = stack.pop()\n                    if (top == \"(\") {\n               \
    \         good.add(top)\n                    } else {\n                      \
    \  bad.add(top)\n                    }\n                }\n            }\n   \
    \     })\n        if (good.size == lst.size) {\n            return \"Yes\"\n \
    \       } else {\n            return \"No\"\n        }", "        val stack =\
    \ mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n                return result.toString\n            }\n            val stackStr\
    \ = str.substring(0, open)\n            val stackStr = stackStr + str.substring(open\
    \ + 1, close)\n            val stackStr = stackStr + str.substring(close + 1)\n\
    \            stackStr match {\n                case \"\" => result.append(\"Yes\"\
    )\n                case _ => stackStr match {\n                    case \"\" =>\
    \ result.append(\"Yes\")\n                    case _ => stack.append(stackStr)\n\
    \                }\n            }\n        }\n        result.toString", "    \
    \    val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => stack += x)\n        while(stack.nonEmpty) {\n     \
    \       val str = stack.pop()\n            if(str.startsWith(\"(\")) {\n     \
    \           result += \"(\"\n                stack += str\n            } else\
    \ if(str.startsWith(\")\")) {\n                result += \")\"\n             \
    \   stack += str\n            } else {\n                result += \"(\"\n    \
    \            stack += str\n                result += \"(\"\n                stack\
    \ += str\n                result += \")\"\n                stack += str\n    \
    \        }\n        }\n        if(result.size == lst.length)\n            return\
    \ \"Yes\"\n        else\n            return \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach { x =>\n     \
    \       if (x contains \"(\") {\n                open += x\n                stack\
    \ += x\n            } else if (x contains \")\") {\n                close += x\n\
    \                stack -= x\n            } else {\n                result += x\n\
    \            }\n        }\n        if (stack.size == 0) {\n            if (open.size\
    \ == close.size) {\n                result += \"Yes\"\n            } else {\n\
    \                result += \"No\"\n            }\n        } else {\n         \
    \   val openCount = open.size\n            val closeCount = close.size\n     \
    \       if (openCount == closeCount) {\n                result += \"Yes\"\n  \
    \          } else {\n                result += \"No\"\n            }\n       \
    \ }\n        result.toString", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach(x\
    \ => {\n            x match {\n                case \")\" => {\n             \
    \       stack.pop() match {\n                        case \"\" => result.append(\"\
    Yes\")\n                        case x => result.append(\"No\")\n            \
    \        }\n                }\n                case \"(\" => {\n             \
    \       stack.push(x)\n                }\n                case _ => {\n      \
    \              stack.append(x)\n                }\n            }\n        })\n\
    \        result.last", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n  \
    \      val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n", "        val stack\
    \ = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n  \
    \      val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        val open = mutable.ListBuffer.empty[String]\n\
    \        val close = mutable.ListBuffer.empty[String]\n        lst.foreach(x =>\
    \ {\n            x match {\n                case \")\" => {\n                \
    \    close.push(x)\n                }\n                case \")(\"  => {\n   \
    \                 stack.push(x)\n                }\n                case \")()\"\
    \ => {\n                    val openCount = open.size\n                    val\
    \ closeCount = close.size\n                    if (openCount == closeCount) {\n\
    \                        val openStr = open.toList\n                        val\
    \ closeStr = close.toList\n                        val openStrLen = openStr.size\n\
    \                        val closeStrLen = closeStr.size\n                   \
    \     if (openStrLen > closeStrLen) {\n                            result.append(\"\
    Yes\")\n                        } else {\n                            result.append(\"\
    No\")\n                        }\n                    } else {\n             \
    \           result.append(\"No\")\n                    }\n                }\n\
    \                case \")\" => {\n                    close.push(x)\n        \
    \        }\n                case \")()\" => {\n                    val openCount\
    \ = open.size\n                    val closeCount = close.size\n             \
    \       if (openCount == closeCount) {\n                        val openStr =\
    \ open.toList\n                        val closeStr = close.toList\n         \
    \               val openStrLen = openStr.size\n                        val closeStrLen\
    \ = closeStr.size\n                        if (openStrLen < closeStrLen) {\n \
    \                           result.append(\"Yes\")\n                        }\
    \ else {\n                            result.append(\"No\")\n                \
    \        }\n                    } else {\n                        result.append(\"\
    No\")\n                    }\n                }\n                case \")()\"\
    \ => {\n                    val openCount = open.size\n                    val\
    \ closeCount = close.size\n                    if (openCount == closeCount) {\n\
    \                        val openStr = open.toList\n                        val\
    \ closeStr = close.toList\n                        val openStrLen = openStr.size\n\
    \                        val closeStrLen = closeStr.size\n                   \
    \     if (openStrLen > closeStrLen) {\n                            result.append(\"\
    Yes\")\n                        } else {\n                            result.append(\"\
    No\")\n                        }\n                    } else {\n             \
    \           result.append(\"No\")\n                    }\n                }\n\
    \                case \")()\" => {\n                    val openCount = open.size\n\
    \                    val closeCount = close.size\n                    if (openCount\
    \ == closeCount) {\n                        val openStr = open.toList\n      \
    \                  val closeStr = close.toList\n                        val openStrLen\
    \ = openStr.size\n                        val closeStrLen = closeStr.size\n  \
    \                      if (openStrLen < closeStrLen) {\n                     \
    \       result.append(\"Yes\")\n                        } else {\n           \
    \                 result.append(\"No\")\n                        }\n         \
    \           } else {\n                        result.append(\"No\")", "      \
    \  val stack = mutable.Stack[String]()\n        val good = mutable.ListBuffer[String]()\n\
    \        val bad = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            if (x == \"(\") stack += x\n            if (x == \")\") stack -=\
    \ x\n            if (stack.nonEmpty) {\n                if (stack.head == \"(\"\
    ) good += x\n                if (stack.head == \")\") bad += x\n            }\n\
    \        })\n        if (good.size == lst.length) \"Yes\" else \"No\"", "    \
    \    val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val openCount = open + 1\n            val closeCount = close +\
    \ 1\n            val openParens = open - openCount\n            val closeParens\
    \ = close - closeCount\n            val openParensCount = openParens + 1\n   \
    \         val closeParensCount = closeParens + 1\n            if(openParensCount\
    \ < closeParensCount) {\n                stack.push(str)\n            } else if(openParensCount\
    \ > closeParensCount) {\n                val popped = stack.pop()\n          \
    \      result += (popped + str)\n            } else {\n                result\
    \ += (str)\n            }\n        }\n        if(stack.nonEmpty) {\n         \
    \   \"No\"\n        } else {\n            \"Yes\"\n        }", "        val stack\
    \ = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n  \
    \      val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" => close.push(x)\n             \
    \   case \")(\"  => stack.push(x)\n                case \")()\" => stack.push(x)\n\
    \                case \")()()\" => stack.push(x)\n                case \")(\"\
    \ => open.add(x)\n                case \")()\" => open.add(x)\n              \
    \  case \")()()\" => open.add(x)\n                case \")(\" => close.add(x)\n\
    \                case \")()\" => close.add(x)\n                case \")()()\"\
    \ => close.add(x)\n                case _ => stack.push(x)\n            }\n  \
    \      })\n        val openCount = open.size\n        val closeCount = close.size\n\
    \        val openStack = stack.take(openCount)\n        val closeStack = stack.drop(closeCount)\n\
    \        val openStackSize = openStack.size\n        val closeStackSize = closeStack.size\n\
    \        val openStackIsEmpty = openStack.isEmpty\n        val closeStackIsEmpty\
    \ = closeStack.isEmpty\n        val openStackIsFull = openStackSize == openCount\n\
    \        val closeStackIsFull = closeStackSize == closeCount\n        val openStackIsEmptyOrFull\
    \ = openStackIsEmpty || openStackIsFull\n        val closeStackIsEmptyOrFull =\
    \ closeStackIsEmpty || closeStackIsFull\n        val openStackIsFullOrEmpty =\
    \ openStackIsFull || openStackIsEmpty\n        val closeStackIsFullOrEmpty = closeStackIsFull\
    \ || closeStackIsEmpty\n        val openStackIsEmptyOrFullOrEmpty = openStackIsEmptyOrFull\
    \ || closeStackIsEmptyOrFull\n        val closeStackIsEmptyOrFullOrEmpty = closeStackIsEmptyOrFull\
    \ || closeStackIsEmptyOrEmpty\n        val openStackIsFullOrFullOrEmpty = openStackIsFullOrEmpty\
    \ || closeStackIsFullOrEmpty\n        val closeStackIsFullOrFullOrEmpty = closeStackIsFullOrEmpty\
    \ || closeStackIsFullOrEmpty\n        val openStackIsEmptyOrFullOrFullOrEmpty\
    \ = openStackIsEmptyOrFullOrEmpty || closeStackIsEmptyOrFullOrEmpty\n        val\
    \ closeStackIsEmptyOrFullOrFullOrEmpty = closeStackIsEmptyOrFullOrEmpty || closeStackIsFullOrFullOrEmpty\n\
    \        val ", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n           \
    \ if (x == \"(\") {\n                stack.push(x)\n            } else if (x ==\
    \ \")\") {\n                val top = stack.pop()\n                if (top ==\
    \ \"(\") {\n                    result += \"(\" + top + \")\"\n              \
    \  } else {\n                    result += \"(\" + top + \")\"\n             \
    \   }\n            }\n        })\n        if (stack.size == 0) {\n           \
    \ result.append(\"No\")\n        } else {\n            result.append(\"Yes\")\n\
    \        }", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n           \
    \ if (x == \"(\") {\n                stack.push(x)\n            } else if (x ==\
    \ \")\") {\n                if (stack.isEmpty) {\n                    result +=\
    \ \"No\"\n                } else {\n                    val top = stack.pop()\n\
    \                    result += \"Yes\"\n                }\n            }\n   \
    \     })\n        result.mkString(\",\")", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") {\n                stack.push(x)\n\
    \            } else if (x == \")\") {\n                if (stack.size == 0) {\n\
    \                    result += \"No\"\n                } else {\n            \
    \        result += \"Yes\"\n                    stack.pop()\n                }\n\
    \            }\n        })\n        result mkString \"\\n\"", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else if (!stack.isEmpty &&\
    \ x == \"(\") stack.pop() else if (!stack.isEmpty && x == \")\") stack.pop() else\
    \ if (!stack.isEmpty && x == \")\") stack += x else stack += x)\n        if (stack.size\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer.empty[String]\n        lst.foreach(x =>\
    \ if (x == \"(\") stack += x else if (!stack.isEmpty && x == \"(\") stack.pop()\
    \ else if (!stack.isEmpty && x == \")\") stack.pop() else if (!stack.isEmpty &&\
    \ x == \")\") stack += x else if (!stack.isEmpty && x == \"(\") stack += x else\
    \ stack += x))\n        val stackSize = stack.size\n        if (stackSize == 0)\
    \ \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n       \
    \ val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    if(stack.isEmpty)\
    \ {\n                        result += \"No\"\n                    } else {\n\
    \                        result += \"Yes\"\n                    }\n          \
    \      }\n                case \")(\"  => open += x\n                case \")(\"\
    \  => close += x\n                case \")\"  => stack += x\n                case\
    \ _    => stack += x\n            }\n        })\n        if(open.isEmpty && close.isEmpty)\
    \ {\n            result += \"No\"\n        } else {\n            result += \"\
    Yes\"\n        }\n        result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => stack\
    \ += x)\n        while(stack.nonEmpty) {\n            val s = stack.pop()\n  \
    \          val l = s.lastIndexOf('(')\n            val r = s.lastIndexOf(')')\n\
    \            if(l < r) {\n                result += (s.substring(l+1, r))\n  \
    \          } else {\n                result += (s.substring(l+1, r+1))\n     \
    \       }\n        }\n        if(result.size == lst.size) {\n            val str\
    \ = result.mkString\n            if(str.contains(\"()\") && str.contains(\"()\"\
    )) {\n                return \"Yes\"\n            } else {\n                return\
    \ \"No\"\n            }\n        } else {\n            return \"No\"\n       \
    \ }", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.ListBuffer[String]()\n        val close = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \"(\"\
    \ => open += x\n                case \")\" => close += x\n                case\
    \ _ => stack += x\n            }\n        })\n        while(!stack.isEmpty) {\n\
    \            val x = stack.pop()\n            x match {\n                case\
    \ \"(\" => open += x\n                case \")\" => close += x\n             \
    \   case _ => stack += x\n            }\n        }\n        val openCount = open.count\n\
    \        val closeCount = close.count\n        if(openCount == closeCount) {\n\
    \            val openStr = open.toList\n            val closeStr = close.toList\n\
    \            val openStrLen = openStr.count\n            val closeStrLen = closeStr.count\n\
    \            val openStrLenMinusCloseStrLen = openStrLen - closeStrLen\n     \
    \       if(openStrLenMinusCloseStrLen == 0) {\n                val openStrLenMinusCloseStrLenMinus1\
    \ = openStrLen - closeStrLen - 1\n                if(openStrLenMinusCloseStrLenMinus1\
    \ == 0) {\n                    val openStrLenMinusCloseStrLenMinus2 = openStrLen\
    \ - closeStrLen - 2\n                    if(openStrLenMinusCloseStrLenMinus2 ==\
    \ 0) {\n                        val openStrLenMinusCloseStrLenMinus3 = openStrLen\
    \ - closeStrLen - 3\n                        if(openStrLenMinusCloseStrLenMinus3\
    \ == 0) {\n                            val openStrLenMinusCloseStrLenMinus4 =\
    \ openStrLen - closeStrLen - 4\n                            if(openStrLenMinusCloseStrLenMinus4\
    \ == 0) {\n                                val openStrLenMinusCloseStrLenMinus5\
    \ = openStrLen - closeStrLen - 5\n                                if(openStrLenMinusCloseStrLenMinus5\
    \ == 0) {\n                                    val openStrLenMinusCloseStrLenMinus6\
    \ = openStrLen - closeStrLen - 6\n                                    if(openStrLenMinusCloseStrLenMinus6\
    \ == 0) {\n                                        val openStrLenMinusCloseStrLenMinus7\
    \ = openStrLen - closeStrLen - 7\n                                        if(openStrLenMinusCloseStrLenMinus7\
    \ == 0) {\n                                            val openStrLenMinusCloseStrLenMinus8\
    \ = openStrLen - closeStrLen ", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val resultSize = lst.size\n       \
    \ for(i <- 0 until stackSize) {\n            val str = lst(i)\n            val\
    \ open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\")\n    \
    \        val stackStr = str.substring(open + 1, close)\n            val stackStrList\
    \ = stackStr.split(\",\")\n            val stackStrListSize = stackStrList.size\n\
    \            val stackStrListSize = stackStrListSize - 1\n            val stackStrListSize\
    \ = stackStrListSize - 1\n            val stackStrListSize = stackStrListSize\
    \ - 1\n            val stackStrListSize = stackStrListSize - 1\n            val\
    \ stackStrListSize = stackStrListSize - 1\n            val stackStrListSize =\
    \ stackStrListSize - 1\n            val stackStrListSize = stackStrListSize -\
    \ 1\n            val stackStrListSize = stackStrListSize - 1\n            val\
    \ stackStrListSize = stackStrListSize - 1\n            val stackStrListSize =\
    \ stackStrListSize - 1\n            val stackStrListSize = stackStrListSize -\
    \ 1\n            val stackStrListSize = stackStrListSize - 1\n            val\
    \ stackStrListSize = stackStrListSize - 1\n            val stackStrListSize =\
    \ stackStrListSize - 1\n            val stackStrListSize = stackStrListSize -\
    \ 1\n            val stackStrListSize = stackStrListSize - 1\n            val\
    \ stackStrListSize = stackStrListSize - 1\n            val stackStrListSize =\
    \ stackStrListSize - 1\n            val stackStrListSize = stackStrListSize -\
    \ 1\n            val stackStrListSize = stackStrListSize - 1\n            val\
    \ stackStrListSize = stackStrListSize - 1\n            val stackStrListSize =\
    \ stackStrListSize - 1\n            val stackStrListSize = stackStrListSize -\
    \ 1\n            val stackStrListSize = stackStrListSize - 1\n            val\
    \ stackStrListSize = stackStrListSize - 1\n            val stackStrListSize =\
    \ stackStrListSize - 1\n            val stackStrListSize = stackStrListSize -\
    \ 1\n            val stackStrListSize = stackStrListSize - 1\n            val\
    \ stackStrListSize = stackStrListSize - 1\n            val stackStrListSize =\
    \ stackStrListSize - 1\n            val stackStrListSize = stackStrListSize -\
    \ 1\n            val stackStrListSize = stackStrListSize - 1\n            val\
    \ stackStrListSize = stackStrListSize - 1\n            val stackStrListSize =\
    \ stackStrList", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer.empty[String]\n        lst.foreach(x => stack += x)\n \
    \       while(stack.nonEmpty) {\n            val curr = stack.pop()\n        \
    \    if(curr == \"(\") {\n                result += \"(\"\n                stack\
    \ += \")\"\n            } else if(curr == \")\") {\n                result +=\
    \ \")\"\n                stack += \")\"\n            } else {\n              \
    \  result += \"(\" + curr\n            }\n        }\n        if(result.nonEmpty)\
    \ {\n            return \"Yes\"\n        } else {\n            return \"No\"\n\
    \        }", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n \
    \       val close = mutable.Set[String]()\n        lst.foreach(x => {\n      \
    \      x match {\n                case \")\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\"  => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    val\
    \ s = stack.pop()\n                    val c = close.pop()\n                 \
    \   val stack2 = stack.takeWhile(x => x != s)\n                    val close2\
    \ = close.takeWhile(x => x != c)\n                    val stack3 = stack2.takeWhile(x\
    \ => x != c)\n                    val close3 = close2.takeWhile(x => x != s)\n\
    \                    val stack4 = stack3.takeWhile(x => x != s)\n            \
    \        val close4 = close3.takeWhile(x => x != c)\n                    val stack5\
    \ = stack4.takeWhile(x => x != c)\n                    val close5 = close4.takeWhile(x\
    \ => x != s)\n                    val stack6 = stack5.takeWhile(x => x != c)\n\
    \                    val close6 = close5.takeWhile(x => x != s)\n            \
    \        val stack7 = stack6.takeWhile(x => x != c)\n                    val close7\
    \ = close6.takeWhile(x => x != s)\n                    val stack8 = stack7.takeWhile(x\
    \ => x != c)\n                    val close8 = close7.takeWhile(x => x != s)\n\
    \                    val stack9 = stack8.takeWhile(x => x != c)\n            \
    \        val close9 = close8.takeWhile(x => x != s)\n                    val stack10\
    \ = stack9.takeWhile(x => x != c)\n                    val close10 = close9.takeWhile(x\
    \ => x != s)\n                    val stack11 = stack10.takeWhile(x => x != c)\n\
    \                    val close11 = close10.takeWhile(x => x != s)\n          \
    \          val stack12 = stack11.takeWhile(x => x != c)\n                    val\
    \ close12 = close11.takeWhile(x => x != s)\n                    val stack13 =\
    \ stack12.takeWhile(x => x != c)\n                    val close13 = close12.takeWhile(x\
    \ => x != s)\n                    val stack14 = stack13.takeWhile(x => x != c)\n\
    \                    val close14 = close13.takeWhile(x => x != s)\n          \
    \          val stack15 = stack14.takeWhile(x => x != c)", "        val stack =\
    \ mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => stack += x)\n        while(stack.nonEmpty) {\n     \
    \       val x = stack.pop()\n            val y = stack.pop()\n            val\
    \ z = x + y\n            if(z.length <= 1) {\n                result += \"(\"\
    \ + z + \")\"\n            } else {\n                result += \"(\" + z + \"\
    )\"\n                stack += z\n            }\n        }\n        if(result.nonEmpty)\
    \ {\n            return \"Yes\"\n        } else {\n            return \"No\"\n\
    \        }", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size) {\n \
    \           val str = lst(i)\n            val open = str.indexOf(\"(\")\n    \
    \        val close = str.indexOf(\")\")\n            if(open < 0 || close < 0)\
    \ {\n                result += \"No\"\n                return result.toString\n\
    \            }\n            val openCount = stack.length\n            val closeCount\
    \ = stack.length\n            val openParen = open\n            val closeParen\
    \ = close\n            while(openCount > closeCount) {\n                stack\
    \ += str\n                openCount -= 1\n                closeCount += 1\n  \
    \          }\n            while(openCount < closeCount) {\n                stack\
    \ += str\n                openCount += 1\n                closeCount -= 1\n  \
    \          }\n            while(openParen < closeParen) {\n                stack\
    \ += str\n                openParen += 1\n                closeParen -= 1\n  \
    \          }\n            while(openParen > closeParen) {\n                stack\
    \ += str\n                openParen -= 1\n                closeParen += 1\n  \
    \          }\n            result += \"Yes\"\n        }\n        return result.toString",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else stack.pop() match {\n\
    \            case \"\" => result += \"No\"\n            case \")\" => result +=\
    \ \"Yes\"\n            case x => result += \"No\"\n        })\n        result.mkString(\"\
    ,\")", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            if (x == \"(\") stack.push(x)\n     \
    \       if (x == \")\") stack.pop() match {\n                case Some(x) => result\
    \ += \"(\" + x + \")\"\n                case None => result += \"(\" + x + \"\
    )\"\n            }\n        })\n        if (stack.size == 0) \"No\" else \"Yes\"",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(s => if (s.contains(\"(\")) stack.push(s) else if (!s.contains(\"\
    (\")) stack.pop() else ())\n        if (stack.size == 0) \"No\" else \"Yes\"",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val resultSize = lst.size\n       \
    \ val stackMax = stackSize - 1\n        val resultMax = resultSize - 1\n     \
    \   val stackIndex = 0\n        val resultIndex = 0\n        val stackMaxIndex\
    \ = stackSize - 1\n        val resultMaxIndex = resultSize - 1\n        val stackMaxIndex2\
    \ = stackSize - 2\n        val resultMaxIndex2 = resultSize - 2\n        val stackMaxIndex3\
    \ = stackSize - 3\n        val resultMaxIndex3 = resultSize - 3\n        val stackMaxIndex4\
    \ = stackSize - 4\n        val resultMaxIndex4 = resultSize - 4\n        val stackMaxIndex5\
    \ = stackSize - 5\n        val resultMaxIndex5 = resultSize - 5\n        val stackMaxIndex6\
    \ = stackSize - 6\n        val resultMaxIndex6 = resultSize - 6\n        val stackMaxIndex7\
    \ = stackSize - 7\n        val resultMaxIndex7 = resultSize - 7\n        val stackMaxIndex8\
    \ = stackSize - 8\n        val resultMaxIndex8 = resultSize - 8\n        val stackMaxIndex9\
    \ = stackSize - 9\n        val resultMaxIndex9 = resultSize - 9\n        val stackMaxIndex10\
    \ = stackSize - 10\n        val resultMaxIndex10 = resultSize - 10\n        val\
    \ stackMaxIndex11 = stackSize - 11\n        val resultMaxIndex11 = resultSize\
    \ - 11\n        val stackMaxIndex12 = stackSize - 12\n        val resultMaxIndex12\
    \ = resultSize - 12\n        val stackMaxIndex13 = stackSize - 13\n        val\
    \ resultMaxIndex13 = resultSize - 13\n        val stackMaxIndex14 = stackSize\
    \ - 14\n        val resultMaxIndex14 = resultSize - 14\n        val stackMaxIndex15\
    \ = stackSize - 15\n        val resultMaxIndex15 = resultSize - 15\n        val\
    \ stackMaxIndex16 = stackSize - 16\n        val resultMaxIndex16 = resultSize\
    \ - 16\n        val stackMaxIndex17 = stackSize - 17\n        val resultMaxIndex17\
    \ = resultSize - 17\n        val stackMaxIndex18 = stackSize - 18\n        val\
    \ resultMaxIndex18 = resultSize - 18\n        val stackMaxIndex19 = stackSize\
    \ - 19\n        val resultMaxIndex19 = resultSize - 19\n        val stackMaxIndex20\
    \ = stackSize - 20\n        val ", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val open = str.indexOf(\"\
    (\")\n            val close = str.indexOf(\")\")\n            val newStr = str.substring(0,\
    \ open)\n            val newStr2 = str.substring(open + 1, close)\n          \
    \  val newStr3 = str.substring(close + 1)\n            val newStr4 = str.substring(open\
    \ + 1, close + 1)\n            val newStr5 = str.substring(close + 2)\n      \
    \      val newStr6 = str.substring(open + 2, close + 2)\n            val newStr7\
    \ = str.substring(close + 3)\n            val newStr8 = str.substring(open + 3,\
    \ close + 3)\n            val newStr9 = str.substring(close + 4)\n           \
    \ val newStr10 = str.substring(open + 4, close + 4)\n            val newStr11\
    \ = str.substring(close + 5)\n            val newStr12 = str.substring(open +\
    \ 5, close + 5)\n            val newStr13 = str.substring(close + 6)\n       \
    \     val newStr14 = str.substring(open + 6, close + 6)\n            val newStr15\
    \ = str.substring(close + 7)\n            val newStr16 = str.substring(open +\
    \ 7, close + 7)\n            val newStr17 = str.substring(close + 8)\n       \
    \     val newStr18 = str.substring(open + 8, close + 8)\n            val newStr19\
    \ = str.substring(close + 9)\n            val newStr20 = str.substring(open +\
    \ 9, close + 9)\n            val newStr21 = str.substring(close + 10)\n      \
    \      val newStr22 = str.substring(open + 10, close + 10)\n            val newStr23\
    \ = str.substring(close + 11)\n            val newStr24 = str.substring(open +\
    \ 11, close + 11)\n            val newStr25 = str.substring(close + 12)\n    \
    \        val newStr26 = str.substring(open + 12, close + 12)\n            val\
    \ newStr27 = str.substring(close + 13)\n            val newStr28 = str.substring(open\
    \ + 13, close + 13)\n            val newStr29 = str.substring(close + 14)\n  \
    \          val newStr30 = str.substring(open + 14, close + 14)\n            val\
    \ newStr31 = str.substring(close + 15)\n            val newStr32 = str.substring(open\
    \ + 15, close + 15)\n            val newStr33 = str.substring(close + 16)\n  \
    \          val newStr34 = str.substring(open + 16, close + 16)\n            val\
    \ newStr35 = str.substring(close + 17)\n            ", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            if (x == \"(\") {\n                stack.push(x)\n            } else\
    \ if (x == \")\") {\n                if (stack.isEmpty) {\n                  \
    \  result.append(\"No\")\n                } else {\n                    val top\
    \ = stack.pop()\n                    if (top == \"(\") {\n                   \
    \     result.append(\"Yes\")\n                    } else {\n                 \
    \       result.append(\"No\")\n                    }\n                }\n    \
    \        }\n        })\n        if (result.size == 0) {\n            result.append(\"\
    No\")\n        } else {\n            result.toString()\n        }", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ =>\n                    close.synchronized {\n                        stack.pop()\
    \ match {\n                            case Some(\")\") =>\n                 \
    \               result ++= stack.toList\n                                stack.clear()\n\
    \                                close.synchronized {\n                      \
    \              open.remove(stack.toList)\n                                }\n\
    \                            case _ =>\n                        }\n          \
    \          }\n                case \")(\"  =>\n                    stack.synchronized\
    \ {\n                        open += x\n                    }\n              \
    \  case \")(\"  =>\n                    stack.synchronized {\n               \
    \         open += x\n                    }\n                case \")(\" =>\n \
    \                   stack.synchronized {\n                        open += x\n\
    \                    }\n                case \")(\" =>\n                    stack.synchronized\
    \ {\n                        open += x\n                    }\n              \
    \  case \")\" =>\n                    stack.synchronized {\n                 \
    \       open += x\n                    }\n                case \")\" =>\n    \
    \                stack.synchronized {\n                        open += x\n   \
    \                 }\n                case \")\" =>\n                    stack.synchronized\
    \ {\n                        open += x\n                    }\n              \
    \  case \")\" =>\n                    stack.synchronized {\n                 \
    \       open += x\n                    }\n                case \")\" =>\n    \
    \                stack.synchronized {\n                        open += x\n   \
    \                 }\n                case \")\" =>\n                    stack.synchronized\
    \ {\n                        open += x\n                    }\n              \
    \  case \")\" =>\n                    stack.synchronized {\n                 \
    \       open += x\n                    }\n                case \")\" =>\n    \
    \                stack.synchronized {\n                        open += x\n   \
    \                 }\n                case \")\" =>\n                    stack.synchronized\
    \ {\n                        open += x\n                    }\n              \
    \  case \")\" =>\n                    stack.synchronized {\n                 \
    \       open += x\n                    }\n                case \")\" =>\n    \
    \                stack.synchronized {\n                        open += x\n   \
    \                 }\n                case \")\" =>\n                    stack.synchronized\
    \ {\n                        open += x\n                    }\n              \
    \  case \")\" =>\n                    stack.synchronized {\n                 \
    \       open += x\n                    }\n                case \")\" =>\n    \
    \                stack.synchronized {\n                        open += x\n   \
    \                 }\n                case \")\" =>\n                    stack.synchronized\
    \ {\n                        open += x\n                    }\n              \
    \  case \")\" =>\n                    stack.synchronized {\n                 \
    \       open += x\n                    }\n                case \")\" =>\n    \
    \                stack.synchronized {\n                        open += x\n   \
    \                 }\n                case \")\" =>\n", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach {\
    \ s =>\n            val open = s.indexOf(\"(\")\n            val close = s.indexOf(\"\
    )\")\n            if (open < 0 || close < 0 || open > close) {\n             \
    \   result.append(\"No\")\n            } else {\n                val openCount\
    \ = stack.length\n                val closeCount = stack.length\n            \
    \    val openParens = open + 1\n                val closeParens = close + 1\n\
    \                stack.push(s)\n                while (openCount > 0 && closeCount\
    \ > 0) {\n                    val openParensCount = stack.length\n           \
    \         val closeParensCount = stack.length\n                    if (openParensCount\
    \ < closeParensCount) {\n                        val openParensString = stack.pop()\n\
    \                        val closeParensString = stack.pop()\n               \
    \         if (openParensString == closeParensString) {\n                     \
    \       result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            result.append(\"Yes\")\n                      \
    \      result.append(\"Yes\")\n                            result.append(\"Yes\"\
    )\n                            ", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" =>\n                    close.synchronized\
    \ {\n                        stack.pop() match {\n                           \
    \ case Some(\"(\") => open.remove(stack.pop())\n                            case\
    \ _ => ()\n                        }\n                    }\n                case\
    \ \")(\"  =>\n                    stack.synchronized {\n                     \
    \   open.append(x)\n                    }\n                case \")(\"  =>\n \
    \                   stack.synchronized {\n                        open.append(x)\n\
    \                    }\n                case \")(\"  =>\n                    stack.synchronized\
    \ {\n                        open.append(x)\n                    }\n         \
    \       case \")(\"  =>\n                    stack.synchronized {\n          \
    \              open.append(x)\n                    }\n                case \"\
    )(\"  =>\n                    stack.synchronized {\n                        open.append(x)\n\
    \                    }\n                case \")(\"  =>\n                    stack.synchronized\
    \ {\n                        open.append(x)\n                    }\n         \
    \       case \")(\"  =>\n                    stack.synchronized {\n          \
    \              open.append(x)\n                    }\n                case \"\
    )(\"  =>\n                    stack.synchronized {\n                        open.append(x)\n\
    \                    }\n                case \")(\"  =>\n                    stack.synchronized\
    \ {\n                        open.append(x)\n                    }\n         \
    \       case \")(\"  =>\n                    stack.synchronized {\n          \
    \              open.append(x)\n                    }\n                case \"\
    )(\"  =>\n                    stack.synchronized {\n                        open.append(x)\n\
    \                    }\n                case \")(\"  =>\n                    stack.synchronized\
    \ {\n                        open.append(x)\n                    }\n         \
    \       case \")(\"  =>\n                    stack.synchronized {\n          \
    \              open.append(x)\n                    }\n                case \"\
    )(\"  =>\n                    stack.synchronized {\n                        open.append(x)\n\
    \                    }\n                case \")(\"  =>\n                    stack.synchronized\
    \ {\n                        open.append(x)\n                    }\n         \
    \       case \")(\"  =>\n                    stack.synchronized {\n          \
    \              open.append(x)\n                    }\n                case \"\
    )(\"  =>\n                    stack.synchronized {\n                        open.append(x)\n\
    \                    }\n                case \")(\"  =>\n                    stack.synchronized\
    \ {\n                        open.append(x)\n                    }\n         \
    \       case \")(\"  =>\n                    stack.synchronized {\n          \
    \              open.append(x)\n                    }\n                case \"\
    )(\"  =>\n                    stack.synchronized {\n                        open.append(x)\n\
    \                    }\n                case \")(\"  =>\n                    stack.synchronized\
    \ {\n                        open.append(x)\n                    }\n         \
    \       case \")(\"  =>\n                    stack.synchronized {\n", "      \
    \  val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => if (x == \"(\") stack.push(x) else stack.pop())\n  \
    \      if (stack.size == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => x match {\n            case x if x == \")\" => close.push(x)\n\
    \            case x if x == \")()\" => close.push(x)\n            case x if x\
    \ == \")()()\" => close.push(x)\n            case x if x == \")()()()\" => close.push(x)\n\
    \            case x if x == \")()()()()\" => close.push(x)\n            case x\
    \ if x == \")()()()()()\" => close.push(x)\n            case x if x == \")()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()\" => close.push(x)\n\
    \            case x if x == \")()()()()()()()()\" => close.push(x)\n         \
    \   case x if x == \")()()()()()()()()()\" => close.push(x)\n            case\
    \ x if x == \")()()()()()()()()()()\" => close.push(x)\n            case x if\
    \ x == \")()()()()()()()()()()()\" => close.push(x)\n            case x if x ==\
    \ \")()()()()()()()()()()()()\" => close.push(x)\n            case x if x == \"\
    )()()()()()()()()()()()()()\" => close.push(x)\n            case x if x == \"\
    )()()()()()()()()()()()()()()\" => close.push(x)\n            case x if x == \"\
    )()()()()()()()()()()()()()()()\" => close.push(x)\n            case x if x ==\
    \ \")()()()()()()()()()()()()()()()\" => close.push(x)\n            case x if\
    \ x == \")()()()()()()()()()()()()()()()\" => close.push(x)\n            case\
    \ x if x == \")()()()()()()()()()()()()()()()()\" => close.push(x)\n         \
    \   case x if x == \")()()()()()()()()()()()()()()()()\" => close.push(x)\n  \
    \          case x if x == \")()()()()()()()()()()()()()()()()()\" => close.push(x)\n\
    \            case x if ", "        val stack = mutable.Stack[String]()\n     \
    \   val result = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n  \
    \          x match {\n                case \")\" => {\n                    stack.pop\n\
    \                }\n                case \")()\" => {\n                    stack.pop\n\
    \                    stack.pop\n                }\n                case \")()()\"\
    \ => {\n                    stack.pop\n                    stack.pop\n       \
    \             stack.pop\n                }\n                case \")(\" => {\n\
    \                    stack += x\n                }\n                case \")()()\"\
    \ => {\n                    stack += x\n                    stack += x\n     \
    \           }\n                case \")(\" => {\n                    stack +=\
    \ x\n                }\n                case \")()\" => {\n                  \
    \  stack += x\n                    stack += x\n                }\n           \
    \     case \")(\" => {\n                    stack += x\n                }\n  \
    \              case _ => {\n                    stack += x\n                }\n\
    \            }\n        })\n        if (stack.size == 0) {\n            result.append(\"\
    Yes\")\n        } else {\n            result.append(\"No\")\n        }\n     \
    \   result.toString()", "        val stack = mutable.Stack[String]()\n       \
    \ val result = mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    stack.pop()\n\
    \                }\n                case \")(\"  => {\n                    stack.push(x)\n\
    \                }\n                case \")()\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case _ => {\n                    stack.push(x)\n\
    \                }\n            }\n        })\n        if (stack.size == 0) {\n\
    \            result.append(\"Yes\")\n        } else {\n            result.append(\"\
    No\")\n        }\n        result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            if (x == \"(\") {\n                stack.push(x)\n            } else\
    \ if (x == \")\") {\n                while (!stack.isEmpty) {\n              \
    \      val top = stack.pop()\n                    if (top == \"(\") {\n      \
    \                  stack.push(top)\n                    } else if (top == \")\"\
    ) {\n                        result.add(\"(\" + top + \")\")\n               \
    \         break\n                    }\n                }\n            }\n   \
    \     })\n        if (result.size == lst.size) {\n            return \"Yes\"\n\
    \        } else {\n            return \"No\"\n        }", "        val stack =\
    \ mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => stack.pop() match {\n                    case \")\" => result += \"(\"\n\
    \                    case \")()\" => result += \"()\"\n                    case\
    \ \")(\" => result += \"()\"\n                    case \")()()\" => result +=\
    \ \"()()\"\n                    case \")(())\" => result += \"()()\"\n       \
    \             case \")(())()\" => result += \"()()()\"\n                    case\
    \ \")(())(\" => result += \"()()()\"\n                    case \")(())()()\" =>\
    \ result += \"()()()()\"\n                    case \")(())(())\" => result +=\
    \ \"()()()()\"\n                    case \")(())(())()\" => result += \"()()()()()\"\
    \n                    case \")(())(())(\" => result += \"()()()()()\"\n      \
    \              case \")(())(())()()\" => result += \"()()()()()()\"\n        \
    \            case \")(())(())(())\" => result += \"()()()()()()\"\n          \
    \          case \")(())(())(())()\" => result += \"()()()()()()()\"\n        \
    \            case \")(())(())(())(\" => result += \"()()()()()()()\"\n       \
    \             case \")(())(())(())()()\" => result += \"()()()()()()()()\"\n \
    \                   case \")(())(())(())(())\" => result += \"()()()()()()()()()\"\
    \n                    case \")(())(())(())(())()\" => result += \"()()()()()()()()()\"\
    \n                    case \")(())(())(())(())(\" => result += \"()()()()()()()()()\"\
    \n                    case \")(())(())(())(())()()\" => result += \"()()()()()()()()()()\"\
    \n                    case \")(())(())(())(())(())\" => result += \"()()()()()()()()()()\"\
    \n                    case \")(())(())(())(())(())()\" => result += \"()()()()()()()()()()()\"\
    \n                    case \")(())(())(())(())(())(\" => result += \"()()()()()()",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        lst.foreach(x => {\n    \
    \        x match {\n                case \")\" => stack.pop() match {\n      \
    \              case \")\" => result += \"()\"\n                    case \")()\"\
    \ => result += \"()()\"\n                    case \")(\" => result += \"()(\"\n\
    \                    case \")()()\" => result += \"()()()\"\n                \
    \    case \")(()\" => result += \"()()(\"\n                    case \")(())\"\
    \ => result += \"()()(())\"\n                    case \")(())()\" => result +=\
    \ \"()()(())()\"\n                    case \")(())(\" => result += \"()()(())(\"\
    \n                    case \")(())()()\" => result += \"()()(())()()\"\n     \
    \               case \")(())(())\" => result += \"()()(())(())\"\n           \
    \         case \")(())(())()\" => result += \"()()(())(())()\"\n             \
    \       case \")(())(())(\" => result += \"()()(())(())(\"\n                 \
    \   case \")(())(())()()\" => result += \"()()(())(())()()\"\n               \
    \     case \")(())(())(())\" => result += \"()()(())(())(())\"\n             \
    \       case \")(())(())(())()\" => result += \"()()(())(())(())()\"\n       \
    \             case \")(())(())(())(\" => result += \"()()(())(())(())(\"\n   \
    \                 case \")(())(())(())()()\" => result += \"()()(())(())(())()()\"\
    \n                    case \")(())(())(())(())\" => result += \"()()(())(())(())(())\"\
    \n                    case \")(())(())(())(())()\" => result += \"()()(())(())(())(())()\"\
    \n                    case \")(())(())(())(())(\" => result += \"()()(())(())(())(())(\"\
    \n                    case \")(())(())(())(())()()\" => result += \"()()(())(())(())(())()()\"\
    \n                    case \")(())(())(())(())(())\" => result += \"()()(())(())(())(())(())\"\
    \n                    case \")(())(())(())(())(())()\" => result += \"()()(())(())(())(())(())()\"\
    \n                    case \")(())(())(())(())(())(\" => result += \"()()(", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => x match {\n            case x if x == \")\" => close.push(x)\n\
    \            case x if x == \"(\" => open.push(x)\n            case _ => stack.push(x)\n\
    \        })\n        val openCount = open.size\n        val closeCount = close.size\n\
    \        if (openCount == closeCount) {\n            val openStack = stack.take(openCount)\n\
    \            val closeStack = stack.drop(closeCount)\n            val openStackSize\
    \ = openStack.size\n            val closeStackSize = closeStack.size\n       \
    \     val openStack = openStack.mkString\n            val closeStack = closeStack.mkString\n\
    \            if (openStackSize == closeStackSize) {\n                val openStack\
    \ = openStack.split(\"\\\\)\")\n                val closeStack = closeStack.split(\"\
    \\\\(\")\n                val openStackSize = openStack.size\n               \
    \ val closeStackSize = closeStack.size\n                if (openStackSize == closeStackSize)\
    \ {\n                    val openStack = openStack.mkString\n                \
    \    val closeStack = closeStack.mkString\n                    if (openStack ==\
    \ closeStack) {\n                        result.append(\"Yes\")\n            \
    \        } else {\n                        result.append(\"No\")\n           \
    \         }\n                } else {\n                    result.append(\"No\"\
    )\n                }\n            } else {\n                result.append(\"No\"\
    )\n            }\n        } else {\n            result.append(\"No\")\n      \
    \  }\n        result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \"(\" => stack.push(x)\n        \
    \        case \")\" => stack.pop() match {\n                    case x if x ==\
    \ \")\" => result.add(x)\n                    case x => result.add(x)\n      \
    \          }\n            }\n        })\n        if (stack.size == 0) \"No\" else\
    \ \"Yes\"", "        val stack = mutable.Stack[String]()\n        val result =\
    \ mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size) {\n   \
    \         val str = lst(i)\n            val open = str.indexOf(\"(\")\n      \
    \      val close = str.indexOf(\")\")\n            if(open < 0 || close < 0) {\n\
    \                result.append(\"No\")\n            } else {\n               \
    \ val openCount = stack.length\n                val closeCount = stack.length\n\
    \                while(openCount > 0 && closeCount > 0) {\n                  \
    \  val open = stack.pop()\n                    val close = stack.pop()\n     \
    \               if(open == close) {\n                        openCount -= 1\n\
    \                        closeCount -= 1\n                    } else {\n     \
    \                   result.append(\"No\")\n                        break\n   \
    \                 }\n                }\n                stack += str\n       \
    \         result.append(\"Yes\")\n            }\n        }\n        result.toString()",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        lst.foreach(x => stack += x)\n\
    \        while(stack.nonEmpty) {\n            val x = stack.pop()\n          \
    \  val y = stack.pop()\n            val z = x + y\n            result += z\n \
    \           stack.push(z)\n        }\n        val str = result.toList\n      \
    \  if(str.size == lst.size)\n            return \"Yes\"\n        else\n      \
    \      return \"No\"", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val open = str.indexOf(\"(\")\n   \
    \         val close = str.indexOf(\")\")\n            val stackStr = stack.toList\n\
    \            if(open < 0 || close < 0 || open > close || open == close || open\
    \ == -1) {\n                stackStr.clear()\n                result.clear()\n\
    \                return \"No\"\n            }\n            else if(open == -1)\
    \ {\n                stackStr.clear()\n                result.clear()\n      \
    \          return \"Yes\"\n            }\n            else if(close == -1) {\n\
    \                stackStr.clear()\n                result.clear()\n          \
    \      return \"Yes\"\n            }\n            else if(open > close) {\n  \
    \              stackStr.clear()\n                result.clear()\n            \
    \    return \"No\"\n            }\n            else if(open == close) {\n    \
    \            stackStr.clear()\n                result.clear()\n              \
    \  return \"Yes\"\n            }\n            else if(open < close) {\n      \
    \          stackStr.clear()\n                result.clear()\n                stackStr\
    \ += str\n                stackStr += str\n                stackStr += str\n \
    \               stackStr += str\n                stackStr += str\n           \
    \     stackStr += str\n                stackStr += str\n                stackStr\
    \ += str\n                stackStr += str\n                stackStr += str\n \
    \               stackStr += str\n                stackStr += str\n           \
    \     stackStr += str\n                stackStr += str\n                stackStr\
    \ += str\n                stackStr += str\n                stackStr += str\n \
    \               stackStr += str\n                stackStr += str\n           \
    \     stackStr += str\n                stackStr += str\n                stackStr\
    \ += str\n                stackStr += str\n                stackStr += str\n \
    \               stackStr += str\n                stackStr += str\n           \
    \     stackStr += str\n                stackStr += str\n                stackStr\
    \ += str\n                stackStr += str\n                stackStr += str\n \
    \               stackStr += str\n                stackStr += str\n           \
    \     stackStr += str\n                stackStr += str\n                stackStr\
    \ += str\n                stackStr += str\n                stackStr += str\n \
    \               stackStr += str\n                stackStr += str\n           \
    \     stackStr += str\n                stackStr += str\n                stackStr\
    \ += str\n                stackStr += str\n                stackStr += str\n \
    \               stackStr += str\n                stackStr += str\n           \
    \     stackStr += str\n                stackStr += str\n                stackStr\
    \ += ", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => stack += x)\n        while(stack.nonEmpty) {\n     \
    \       val s = stack.pop()\n            val open = s.indexOf('(')\n         \
    \   val close = s.lastIndexOf(')')\n            if(open < 0 || close < 0 || open\
    \ > close || open > stack.size) {\n                result += \"No\"\n        \
    \    } else {\n                result += \"Yes\"\n            }\n        }\n \
    \       return result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        val open = mutable.ListBuffer(lst.head.length)\n\
    \        val close = mutable.ListBuffer(lst.last.length)\n        val openCount\
    \ = mutable.ListBuffer.empty[Int]\n        val closeCount = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            x match {\n                case x if\
    \ x == \")\" => closeCount += x.length\n                case x if x == \")\" =>\
    \ closeCount += x.length\n                case x if x == \"(\" => openCount +=\
    \ x.length\n                case x if x == \"(\" => openCount += x.length\n  \
    \              case x => stack += x\n            }\n        })\n        val openCount\
    \ = openCount.toList\n        val closeCount = closeCount.toList\n        val\
    \ open = open.toList\n        val close = close.toList\n        val openCount\
    \ = openCount.toList\n        val closeCount = closeCount.toList\n        val\
    \ openCount = openCount.toList\n        val closeCount = closeCount.toList\n \
    \       val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        val openCount = openCount.toList\n        val closeCount = closeCount.toList\n\
    \        ", "        val stack = mutable.Stack[String]()\n        val result =\
    \ mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size) {\n   \
    \         val str = lst(i)\n            val open = str.indexOf(\"(\")\n      \
    \      val close = str.indexOf(\")\")\n            if(open < 0 || close < 0) {\n\
    \                result.append(\"No\")\n            } else {\n               \
    \ val left = str.substring(0, open)\n                val right = str.substring(close\
    \ + 1)\n                val newStack = mutable.Stack[String]()\n             \
    \   val newResult = mutable.ListBuffer.empty[String]\n                for(j <-\
    \ 0 until stack.size) {\n                    val cur = stack.pop()\n         \
    \           if(cur == left) {\n                        newStack.push(right)\n\
    \                    } else {\n                        newStack.push(cur)\n  \
    \                  }\n                }\n                stack = newStack\n  \
    \              result = newResult\n            }\n        }\n        if(result.size\
    \ == lst.size) {\n            val str = result.mkString(\"(\", \", \", \")\")\n\
    \            if(str.contains(\"(\") && str.contains(\")\")) {\n              \
    \  return \"Yes\"\n            } else {\n                return \"No\"\n     \
    \       }\n        } else {\n            return \"No\"\n        }", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    if(str == \"(\") {\n                stack.push(str)\n            } else if(str\
    \ == \")\") {\n                val top = stack.pop()\n                if(top ==\
    \ \"(\") {\n                    result += \"(\"\n                } else {\n  \
    \                  result += \"(\"\n                    result += top\n      \
    \          }\n            } else {\n                result += \"(\"\n        \
    \        result += str\n                result += \"(\"\n                stack.push(str)\n\
    \            }\n        }\n        if(stack.size == 0) {\n            result +=\
    \ \"()\"\n        } else {\n            result += \"()\"\n        }\n        if(result.size\
    \ == lst.size) {\n            result += \"()\"\n        } else {\n           \
    \ result += \"()\"\n        }\n        if(result.size == lst.size) {\n       \
    \     result += \"()\"\n        } else {\n            result += \"()\"\n     \
    \   }\n        if(result.size == lst.size) {\n            result += \"()\"\n \
    \       } else {\n            result += \"()\"\n        }\n        if(result.size\
    \ == lst.size) {\n            result += \"()\"\n        } else {\n           \
    \ result += \"()\"\n        }\n        if(result.size == lst.size) {\n       \
    \     result += \"()\"\n        } else {\n            result += \"()\"\n     \
    \   }\n        if(result.size == lst.size) {\n            result += \"()\"\n \
    \       } else {\n            result += \"()\"\n        }\n        if(result.size\
    \ == lst.size) {\n            result += \"()\"\n        } else {\n           \
    \ result += \"()\"\n        }\n        if(result.size == lst.size) {\n       \
    \     result += \"()\"\n        } else {\n            result += \"()\"\n     \
    \   }\n        if(result.size == lst.size) {\n            result += \"()\"\n \
    \       } else {\n            result += \"()\"\n        }\n        if(result.size\
    \ == lst.size) {\n            result += \"()\"\n        } else {\n           \
    \ result += \"()\"\n        }\n        if(result.size == lst.size) {\n       \
    \     result += \"()\"\n        } else {\n            result += \"()\"\n     \
    \   }\n        if(result.size == lst.size) {\n            result += \"()\"\n \
    \       } else {\n            result += \"()\"\n        }\n        if(result.size\
    \ == lst.size) {\n            result += \"()\"\n        } else {\n           \
    \ result += \"()\"\n        }\n        if(result.size == lst.size) {\n       \
    \     result += \"()\"\n        } else {\n            result += \"()\"\n     \
    \   }\n        if(result.size == lst.size) {\n            result += \"()\"\n \
    \       } else {\n            result += \"()\"\n        }\n        if(result.size\
    \ == lst.size) {\n            result += \"()\"\n        } else {\n           \
    \ result += \"()\"\n        }\n        if(result.size == lst.size) {\n       \
    \     result ", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size) {\n \
    \           val str = lst(i)\n            val open = str.indexOf(\"(\")\n    \
    \        val close = str.indexOf(\")\")\n            if(open < 0 || close < 0)\
    \ {\n                result.append(\"No\")\n            } else {\n           \
    \     val openCount = stack.length\n                val closeCount = stack.length\n\
    \                val openParens = open\n                val closeParens = close\n\
    \                while(openCount > 0 && closeCount > 0) {\n                  \
    \  if(openCount > closeCount) {\n                        stack.pop\n         \
    \               closeCount -= 1\n                    } else {\n              \
    \          stack.pop\n                        openCount -= 1\n               \
    \     }\n                }\n                while(openCount > 0) {\n         \
    \           stack.append(str.substring(0, openParens))\n                    openCount\
    \ -= 1\n                }\n                while(closeCount > 0) {\n         \
    \           stack.append(str.substring(closeParens + 1))\n                   \
    \ closeCount -= 1\n                }\n                val newStr = stack.toList.reverse.mkString\n\
    \                result.append(\"Yes\")\n            }\n        }\n        result.toString()",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val cur = lst(i)\n        \
    \    val open = cur match {\n                case \"(\" => true\n            \
    \    case \")\" => false\n                case _ => throw new Exception(\"Invalid\
    \ parenthesis\")\n            }\n            if(!open) {\n                stack\
    \ += cur\n            } else {\n                val last = stack.pop()\n     \
    \           val next = last match {\n                    case \"(\" => \")\"\n\
    \                    case \")\" => \")\"\n                    case _ => throw\
    \ new Exception(\"Invalid parenthesis\")\n                }\n                result\
    \ += cur + next\n            }\n        }\n        if(result.size == lst.size)\
    \ {\n            return \"Yes\"\n        } else {\n            return \"No\"\n\
    \        }", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n        val\
    \ resultSize = lst.size\n        val stack = mutable.Stack[String]()\n       \
    \ val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n    \
    \    lst.foreach(x => if (x == \"(\") stack += x else if (!x == \"(\") bad +=\
    \ x else stack.pop())\n        val goodString = stack.toList\n        val badString\
    \ = bad.toList\n        if (goodString.size == 0 && badString.size == 0) \"No\"\
    \ else \"Yes\"", "        val stack = mutable.Stack[String]()\n        val good\
    \ = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n        lst.foreach(x\
    \ => {\n            x match {\n                case \")\" =>\n               \
    \     stack.pop()\n                case \")(\"  =>\n                    stack.pop()\n\
    \                case \")()\" =>\n                    stack.pop()\n          \
    \      case \")()()\" =>\n                    stack.pop()\n                case\
    \ \")()()()\" =>\n                    stack.pop()\n                case \")()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()\" =>\n\
    \                    stack.pop()\n                case \")()()()()()()\" =>\n\
    \                    stack.pop()\n                case \")()()()()()()()\" =>\n\
    \                    stack.pop()\n                case \")()()()()()()()()\" =>\n\
    \                    stack.pop()\n                case \")()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()()()()()()()()()()\"\
    \ =>\n                    stack.pop()\n                case \")()()()()()()",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => stack += x)\n        while(stack.nonEmpty) {\n     \
    \       val cur = stack.pop()\n            val next = stack.pop()\n          \
    \  if(cur == \"(\" && next == \")\") {\n                result += \"(\" + cur\
    \ + \")\"\n            } else if(cur == \")\" && next == \"(\") {\n          \
    \      result += \"(\" + cur + \")\"\n            } else if(cur == \"(\" && next\
    \ == \")\") {\n                result += \"(\" + cur + \")\"\n            } else\
    \ if(cur == \")\" && next == \"(\") {\n                result += \"(\" + cur +\
    \ \")\"\n            } else {\n                result += \"(\" + cur + \")\"\n\
    \            }\n        }\n        if(result.size == lst.length)\n           \
    \ \"Yes\"\n        else\n            \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result.append(\"No\")\n            } else {\n      \
    \          val left = str.substring(0, open)\n                val right = str.substring(close\
    \ + 1)\n                val left = stack.toList.reverse.takeWhile(x => x != left).reverse\n\
    \                val right = stack.toList.reverse.takeWhile(x => x != right).reverse\n\
    \                val newLeft = left.mkString(\"\")\n                val newRight\
    \ = right.mkString(\"\")\n                if(newLeft.isEmpty) {\n            \
    \        result.append(\"No\")\n                } else {\n                   \
    \ if(newRight.isEmpty) {\n                        result.append(\"Yes\")\n   \
    \                 } else {\n                        result.append(\"Yes\")\n \
    \                   }\n                }\n            }\n            stack +=\
    \ str\n        }\n        result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val cur = lst(i)\n            val open = cur match\
    \ {\n                case '('  => stack.push('(')\n                case ')'  =>\
    \ stack.pop()\n                case _    => throw new IllegalArgumentException(\"\
    Invalid parenthesis \" + cur)\n            }\n            if(open == -1) {\n \
    \               result ++= cur\n            } else {\n                while(open\
    \ != -1) {\n                    result ++= stack.pop()\n                    open\
    \ -= 1\n                }\n                result ++= cur\n            }\n   \
    \     }\n        if(result.size == lst.size) {\n            val str = result.toList\n\
    \            val len = str.size\n            for(i <- 0 until len) {\n       \
    \         if(!(str(i) == \"()\" && str(i + 1) == \"()\")) {\n                \
    \    return \"No\"\n                }\n            }\n            return \"Yes\"\
    \n        }\n        return \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val good = mutable.ListBuffer[String]()\n        val bad = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => stack.pop() match {\n                    case \")\" => good += x\n      \
    \              case \")()\" => bad += x\n                    case _ => bad +=\
    \ x\n                }\n                case \")()\" => stack += x\n         \
    \       case _ => stack += x\n            }\n        })\n        if (stack.isEmpty)\
    \ good.toString.toUpperCase\n        else bad.toString.toUpperCase", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach { s =>\n            val open = s.indexOf(\"(\")\n       \
    \     val close = s.indexOf(\")\")\n            if (open < 0 || close < 0) {\n\
    \                result.append(\"No\")\n            } else {\n               \
    \ val stackSize = stack.size\n                if (open > close || (open < 0 &&\
    \ close < 0)) {\n                    result.append(\"No\")\n                }\
    \ else {\n                    if (stackSize > 0) {\n                        val\
    \ top = stack.toList(0)\n                        if (top.length == stackSize)\
    \ {\n                            if (top.head == close) {\n                  \
    \              result.append(\"Yes\")\n                            } else {\n\
    \                                result.append(\"No\")\n                     \
    \       }\n                        } else {\n                            result.append(\"\
    No\")\n                        }\n                    } else {\n             \
    \           result.append(\"No\")\n                    }\n                }\n\
    \            }\n            stack.push(s)\n        }\n        result.mkString(\"\
    ,\")", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \"(\"\
    \ => open += x\n                case \")\" => close += x\n                case\
    \ _ => stack += x\n            }\n        })\n        val openCount = open.size\n\
    \        val closeCount = close.size\n        if (openCount == closeCount) {\n\
    \            val openList = open.iterator\n            val closeList = close.iterator\n\
    \            while (openList.hasNext && closeList.hasNext) {\n               \
    \ val open = openList.next()\n                val close = closeList.next()\n \
    \               if (open == close) {\n                    result += \"(\" + open\
    \ + \")\"\n                    openList.remove()\n                    closeList.remove()\n\
    \                } else {\n                    result += \"(\" + open + \")\"\
    \ + close\n                    openList.remove()\n                    closeList.remove()\n\
    \                }\n            }\n            if (openList.nonEmpty) {\n    \
    \            result += \"(\" + openList.mkString(\",\") + \")\"\n            }\n\
    \            if (closeList.nonEmpty) {\n                result += \"(\" + closeList.mkString(\"\
    ,\") + \")\"\n            }\n            if (result.nonEmpty) {\n            \
    \    return \"Yes\"\n            } else {\n                return \"No\"\n   \
    \         }\n        } else {\n            return \"No\"\n        }", "      \
    \  val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    stack.pop()\n                }\n                case\
    \ \")(\"  => {\n                    stack += x\n                }\n          \
    \      case \")()\" => {\n                    stack += x\n                   \
    \ stack.pop()\n                }\n                case \")()()\" => {\n      \
    \              stack += x\n                    stack += x\n                  \
    \  stack.pop()\n                }\n                case \")()()()\" => {\n   \
    \                 stack += x\n                    stack += x\n               \
    \     stack += x\n                    stack.pop()\n                }\n       \
    \         case \")()()()()\" => {\n                    stack += x\n          \
    \          stack += x\n                    stack += x\n                    stack\
    \ += x\n                    stack.pop()\n                }\n                case\
    \ \")()()()()()\" => {\n                    stack += x\n                    stack\
    \ += x\n                    stack += x\n                    stack += x\n     \
    \               stack += x\n                    stack.pop()\n                }\n\
    \                case \")()()()()()()\" => {\n                    stack += x\n\
    \                    stack += x\n                    stack += x\n            \
    \        stack += x\n                    stack += x\n                    stack\
    \ += x\n                    stack.pop()\n                }\n                case\
    \ \")()()()()()()()\" => {\n                    stack += x\n                 \
    \   stack += x\n                    stack += x\n                    stack += x\n\
    \                    stack += x\n                    stack += x\n            \
    \        stack += x\n                    stack.pop()\n                }\n    \
    \            case \")()()()()()()()()\" => {\n                    stack += x\n\
    \                    stack += x\n                    stack += x\n            \
    \        stack += x\n                    stack += x\n                    stack\
    \ += x\n                    stack += x\n                    stack += x\n     \
    \               stack.pop()\n                }\n                case \")()()()()()()()()()\"\
    \ => {\n                    stack += x\n                    stack += x\n     \
    \               stack += x\n                    stack += x\n                 \
    \   stack += x\n                    stack += x\n                    stack += x\n\
    \                    stack += x\n                    stack += x\n            \
    \        stack.pop()\n                }\n                case \")()()()()()()()()()\"\
    \ => {\n                    stack += x\n                    stack += x\n     \
    \               stack += x\n                    stack += x\n                 \
    \   stack += x\n                    stack += x\n                    stack += x\n\
    \                    stack += x\n                    stack += x\n            \
    \        stack.pop()\n                }\n                case \")()()()()()()()()()()\"\
    \ => {\n                    stack += ", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach(x\
    \ => {\n            x match {\n                case \")\" =>\n               \
    \     stack.pop\n                case \")(\"  => stack.append(x)\n           \
    \     case _ =>\n                    stack.append(x)\n            }\n        })\n\
    \        stack.foreach(x => result.append(x))\n        result.mkString(\"(\",\
    \ \", \", \")\")", "        val stack = mutable.Stack[String]()\n        val queue\
    \ = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n      \
    \  lst.foreach(x => {\n            if (x == \"(\") {\n                stack +=\
    \ x\n            } else if (x == \")\") {\n                while (!stack.isEmpty\
    \ && stack.head != \"(\") {\n                    good += stack.head\n        \
    \            stack = stack.pop\n                }\n                stack = stack.pop\n\
    \                queue += x\n            } else if (x != \"(\") {\n          \
    \      queue += x\n            }\n        })\n        if (queue.size == 0) {\n\
    \            return \"No\"\n        }\n        while (queue.size > 0) {\n    \
    \        good += queue.dequeue\n        }\n        if (good.size == 0) {\n   \
    \         return \"No\"\n        }\n        if (good.size == 1) {\n          \
    \  if (good.head == \"(\") {\n                return \"Yes\"\n            } else\
    \ {\n                return \"No\"\n            }\n        }\n        val goodStr\
    \ = good.mkString(\"(\", \")\")\n        val goodLen = goodStr.length\n      \
    \  val stackLen = stack.length\n        val queueLen = queue.length\n        if\
    \ (goodLen > stackLen + queueLen) {\n            return \"No\"\n        }\n  \
    \      if (goodLen < stackLen + queueLen) {\n            return \"Yes\"\n    \
    \    }\n        val goodLenStr = goodStr.length\n        val stackLenStr = stackLen.toString\n\
    \        val queueLenStr = queueLen.toString\n        if (goodLenStr < stackLenStr\
    \ + queueLenStr) {\n            return \"Yes\"\n        }\n        if (goodLenStr\
    \ > stackLenStr + queueLenStr) {\n            return \"No\"\n        }", "   \
    \     val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    stack.pop()\n                }\n                case\
    \ \")(\"  => {\n                    stack += x\n                }\n          \
    \      case \")()\" => {\n                    stack += x\n                   \
    \ result += (x + \"(\")\n                }\n                case \")()()\" =>\
    \ {\n                    stack += x\n                    result += (x + \"(\"\
    )\n                }\n                case \")(\" => {\n                    stack\
    \ += x\n                }\n                case \")(()\" => {\n              \
    \      stack += x\n                    result += (x + \"(\")\n               \
    \ }\n                case \")(()()\" => {\n                    stack += x\n  \
    \                  result += (x + \"(\")\n                }\n                case\
    \ \")(\" => {\n                    stack += x\n                }\n           \
    \     case \")(()\" => {\n                    stack += x\n                   \
    \ result += (x + \"(\")\n                }\n                case \")(()()\" =>\
    \ {\n                    stack += x\n                    result += (x + \"(\"\
    )\n                }\n                case \")(\" => {\n                    stack\
    \ += x\n                }\n                case \")(()\" => {\n              \
    \      stack += x\n                    result += (x + \"(\")\n               \
    \ }\n                case \")(()()\" => {\n                    stack += x\n  \
    \                  result += (x + \"(\")\n                }\n                case\
    \ \")(\" => {\n                    stack += x\n                }\n           \
    \     case \")(()\" => {\n                    stack += x\n                   \
    \ result += (x + \"(\")\n                }\n                case \")(()()\" =>\
    \ {\n                    stack += x\n                    result += (x + \"(\"\
    )\n                }\n                case \")(\" => {\n                    stack\
    \ += x\n                }\n                case \")(()\" => {\n              \
    \      stack += x\n                    result += (x + \"(\")\n               \
    \ }\n                case \")(()()\" => {\n                    stack += x\n  \
    \                  result += (x + \"(\")\n                }\n                case\
    \ \")(\" => {\n                    stack += x\n                }\n           \
    \     case \")(()\" => {\n                    stack += x\n                   \
    \ result += (x + \"(\")\n                }\n                case \")(()()\" =>\
    \ {\n                    stack += x\n                    result += (x + \"(\"\
    )\n                }\n                case \")(\" => {\n                    stack\
    \ += x\n                }\n                case \")(()\" => {\n              \
    \      stack += x\n                    result += (x + \"(\")\n               \
    \ }\n                case \")(()()\" => {\n                    stack += x\n  \
    \                  result += (x + \"(\")\n                }\n                case\
    \ \")(", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => stack.pop()\n                case \")(\"  => stack.append(x)\n          \
    \      case _ => stack.append(x)\n            }\n        })\n        if (stack.size\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    stack.pop()\
    \ match {\n                        case \")\" => result.append(\")\")\n      \
    \                  case \")()\" => result.append(\")\")\n                    \
    \    case \")(\" => result.append(\")\")\n                        case _ => result.append(\"\
    )\")\n                    }\n                }\n                case \"(\" =>\
    \ {\n                    stack.push(x)\n                }\n                case\
    \ _ => {\n                    stack.append(x)\n                }\n           \
    \ }\n        })\n        if (stack.size == 0) \"No\" else \"Yes\"", "        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        lst.foreach(x => x match {\n\
    \            case x if x.startsWith(\"(\") => stack += x\n            case x if\
    \ x.startsWith(\")\") => queue += x\n            case _ => good(x)\n        })\n\
    \        if (stack.size == 0 && queue.size == 0) \"No\"\n        else if (stack.size\
    \ == 0 && queue.size > 0) \"Yes\"\n        else if (stack.size > 0 && queue.size\
    \ == 0) \"No\"\n        else if (stack.size > 0 && queue.size > 0) \"Yes\"\n \
    \       else matchParens(stack.toList ++ queue.toList)", "        val stack =\
    \ mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n    \
    \    val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        lst.foreach(x => x match {\n\
    \            case x if x.equals(\"(\") => stack.push(x)\n            case x if\
    \ x.equals(\")\") => stack.pop() match {\n                case x if x.equals(\"\
    (\") => stack.push(x)\n                case x if x.equals(\")\") => stack.pop()\n\
    \                case _ => result.add(x)\n            }\n            case _ =>\
    \ result.add(x)\n        })\n        if (stack.size == 0) \"No\" else \"Yes\"",
  "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result.append(\"No\")\n            } else {\n      \
    \          val openParen = str.substring(0, open)\n                val closeParen\
    \ = str.substring(close+1)\n                val newStr = openParen + closeParen\n\
    \                val newStack = mutable.Stack[String]()\n                val newResult\
    \ = mutable.ListBuffer.empty[String]\n                for(j <- 0 until openParen.length)\n\
    \                    newStack.push(openParen.charAt(j))\n                for(j\
    \ <- 0 until closeParen.length)\n                    newStack.push(closeParen.charAt(j))\n\
    \                while(!newStack.isEmpty) {\n                    val c = newStack.pop()\n\
    \                    if(c != '(' && c != ')') {\n                        newResult.append(c)\n\
    \                    } else {\n                        if(newStack.isEmpty)\n\
    \                            result.append(\"Yes\")\n                        else\
    \ {\n                            val newOpen = str.substring(0, newStack.size)\n\
    \                            val newClose = str.substring(newStack.size)\n   \
    \                         val newStr = newOpen + newClose\n                  \
    \          val newStack = mutable.Stack[String]()\n                          \
    \  val newResult = mutable.ListBuffer.empty[String]\n                        \
    \    for(j <- 0 until newOpen.length)\n                                newStack.push(newOpen.charAt(j))\n\
    \                            for(j <- 0 until newClose.length)\n             \
    \                   newStack.push(newClose.charAt(j))\n                      \
    \      while(!newStack.isEmpty) {\n                                val c = newStack.pop()\n\
    \                                if(c != '(' && c != ')') {\n                \
    \                    newResult.append(c)\n                                } else\
    \ {\n                                    if(newStack.isEmpty)\n              \
    \                          result.append(\"Yes\")\n                          \
    \          else {\n                                        val newOpen = str.substring(0,\
    \ newStack.size)\n                                        val newClose = str.substring(newStack.size)\n\
    \                                        val newStr = newOpen + newClose\n   \
    \                                     val newStack = mutable.Stack[String]()\n\
    \                                        val newResult = mutable.ListBuffer.empty[String]\n\
    \                                        for(j <- 0 until newOpen.length)\n  \
    \                                          newStack.push(newOpen.charAt(j))\n\
    \                                        for(j <- 0 until newClose.length)\n \
    \                                           newStack.push(newClose.charAt(j))\n\
    \                                        while(!newStack.isEmpty) {\n", "    \
    \    val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach { s =>\n            val newStack = mutable.Stack[String]()\n\
    \            val newResult = mutable.ListBuffer[String]()\n            val open\
    \ = s.indexOf(\"(\")\n            val close = s.indexOf(\")\")\n            val\
    \ openCount = if (open < 0) 0 else open + 1\n            val closeCount = if (close\
    \ < 0) 0 else close + 1\n            val openParen = if (openCount > closeCount)\
    \ 1 else 0\n            val closeParen = if (closeCount > openCount) 1 else 0\n\
    \            val newOpen = if (openParen == 0) open else open\n            val\
    \ newClose = if (closeParen == 0) close else close\n            val newStack =\
    \ if (openParen == 0) stack else stack.take(openParen)\n            val newResult\
    \ = if (closeParen == 0) result else result.take(closeParen)\n            newStack\
    \ += s\n            newResult += s\n            while (newStack.nonEmpty && newResult.nonEmpty)\
    \ {\n                val newOpen = newStack.last\n                val newClose\
    \ = newResult.last\n                val newOpenCount = if (newOpen < 0) 0 else\
    \ newOpen + 1\n                val newCloseCount = if (newClose < 0) 0 else newClose\
    \ + 1\n                val newOpenParen = if (newOpenCount > newCloseCount) 1\
    \ else 0\n                val newCloseParen = if (newCloseCount > newOpenCount)\
    \ 1 else 0\n                val newNewOpen = if (newOpenParen == 0) newOpen else\
    \ newOpen\n                val newNewClose = if (newCloseParen == 0) newClose\
    \ else newClose\n                newStack = newStack.dropRight(newOpenParen)\n\
    \                newResult = newResult.dropRight(newCloseParen)\n            \
    \    newStack += newNewOpen\n                newResult += newNewClose\n      \
    \      }\n            stack += newStack.mkString\n            result += newResult.mkString\n\
    \        }\n        if (stack.nonEmpty && result.nonEmpty) stack.toString + \"\
    (\" + result.toString + \")\"\n        else \"\"", "        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => stack.pop() match {\n                    case \")\" => queue.remove(x)\n\
    \                    case \")()\" => queue.remove(x)\n                    case\
    \ \")()()\" => queue.remove(x)\n                    case \")()()()\" => queue.remove(x)\n\
    \                    case \")()()()()\" => queue.remove(x)\n                 \
    \   case \")()()()()()\" => queue.remove(x)\n                    case \")()()()()()()\"\
    \ => queue.remove(x)\n                    case \")()()()()()()()\" => queue.remove(x)\n\
    \                    case \")()()()()()()()()\" => queue.remove(x)\n         \
    \           case \")()()()()()()()()()\" => queue.remove(x)\n                \
    \    case \")()()()()()()()()()\" => queue.remove(x)\n                    case\
    \ \")()()()()()()()()()()\" => queue.remove(x)\n                    case \")()()()()()()()()()()\"\
    \ => queue.remove(x)\n                    case \")()()()()()()()()()()()\" =>\
    \ queue.remove(x)\n                    case \")()()()()()()()()()()()\" => queue.remove(x)\n\
    \                    case \")()()()()()()()()()()()\" => queue.remove(x)\n   \
    \                 case \")()()()()()()()()()()()()\" => queue.remove(x)\n    \
    \                case \")()()()()()()()()()()()()\" => queue.remove(x)\n     \
    \               case \")()()()()()()()()()()()()()\" => queue.remove(x)\n    \
    \                case \")()()()()()()()()()()()()()\" => queue.remove(x)\n   \
    \                 case \")()()()()()()()()()()()()()\" => queue.remove(x)\n  \
    \                  case \")()()()()()()()()()()()()()\" => queue.remove(x)\n \
    \                   case \")()()()()()()()()()()()()()()\" => queue.remove(x)\n\
    \                    case \")()()()()()()()()()()()()()()\" => queue.remove(x)\n\
    \                    case \")()()()()()()()()()()()()()()\" => queue.remove(x)\n\
    \                    case \")()()()()()()()()()()()()()()\" => queue.remove(x)\n\
    \                    case \")()()()()()()", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            if (x == \"(\") stack.push(x)\n            if (x == \")\") stack.pop()\
    \ match {\n                case Some(x) => result += (x + \"(\")\n           \
    \     case None => result += x\n            }\n        })\n        if (stack.size\
    \ == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer[String]()\n        lst.foreach(x => x\
    \ match {\n            case x if x.equals(\"(\") => stack += x\n            case\
    \ x if x.equals(\")\") => stack += x\n            case x => stack += x\n     \
    \   })\n        stack.foreach(x => result += x)\n        if (result.size == lst.length)\
    \ result.mkString(\"(\", \")\", \"(\", \")\")\n        else result.mkString(\"\
    (\", \")\")", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n \
    \       val close = mutable.Set[String]()\n        lst.foreach(x => {\n      \
    \      if (x == \"(\") open.add(x)\n            if (x == \")\") close.add(x)\n\
    \            if (open.isEmpty && close.isEmpty) stack += x\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (close.isEmpty && !open.isEmpty)\
    \ result += \"Yes\"\n            if (open.isEmpty && close.isEmpty) result +=\
    \ \"No\"\n        })\n        stack.toList.reverse.foreach(x => result += \"No\"\
    )\n        result.toList.reverse.mkString", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => x\
    \ match {\n            case \")\" => stack.pop() match {\n                case\
    \ \")\" => result += \"()\"\n                case \")()\" => result += \"()\"\n\
    \                case \")()()\" => result += \"()()\"\n                case _\
    \ => result += \"()\"\n            }\n            case \")()\" => stack.pop()\
    \ match {\n                case \")\" => result += \"()\"\n                case\
    \ \")()\" => result += \"()()\"\n                case \")()()\" => result += \"\
    ()()()\"\n                case _ => result += \"()()\"\n            }\n      \
    \      case \")()()\" => stack.pop() match {\n                case \")\" => result\
    \ += \"()()\"\n                case \")()\" => result += \"()()()\"\n        \
    \        case \")()()\" => result += \"()()()()\"\n                case _ => result\
    \ += \"()()()\"\n            }\n            case _ => stack += x\n        })\n\
    \        if (stack.size == 0) \"No\" else \"Yes\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach(s\
    \ => {\n            val open = s.indexOf(\"(\")\n            val close = s.indexOf(\"\
    )\")\n            if (open < 0 || close < 0) {\n                result.append(\"\
    No\")\n            } else {\n                val stackSize = stack.size\n    \
    \            if (open > close || (open < 0 && close < 0)) {\n                \
    \    result.append(\"No\")\n                } else {\n                    if (stackSize\
    \ > 0) {\n                        val top = stack.toList(0)\n                \
    \        if (top.length == stackSize) {\n                            if (top.head\
    \ == close) {\n                                stack.toList.remove(top.head)\n\
    \                                result.append(\"Yes\")\n                    \
    \        } else {\n                                result.append(\"No\")\n   \
    \                         }\n                        } else {\n              \
    \              result.append(\"No\")\n                        }\n            \
    \        } else {\n                        result.append(\"No\")\n           \
    \         }\n                }\n            }\n            stack.push(s)\n   \
    \     })\n        result.mkString(\",\")", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach { s =>\n\
    \            val open = s.indexOf(\"(\")\n            val close = s.indexOf(\"\
    )\")\n            if (open < 0 || close < 0) return\n            if (open > close)\
    \ {\n                stack += s.substring(open + 1, close)\n            } else\
    \ {\n                stack += s.substring(close + 1, open)\n            }\n  \
    \      }\n        val openCount = stack.count(\"(\")\n        val closeCount =\
    \ stack.count(\")\")\n        if (openCount != closeCount) {\n            return\
    \ \"No\"\n        }\n        val open = stack.indexOf(\"(\")\n        val close\
    \ = stack.indexOf(\")\")\n        if (open < 0 || close < 0) return\n        if\
    \ (open > close) {\n            stack += stack.substring(open + 1, close)\n  \
    \      } else {\n            stack += stack.substring(close + 1, open)\n     \
    \   }\n        val openCount = stack.count(\"(\")\n        val closeCount = stack.count(\"\
    )\")\n        if (openCount != closeCount) {\n            return \"No\"\n    \
    \    }\n        val open = stack.indexOf(\"(\")\n        val close = stack.indexOf(\"\
    )\")\n        if (open < 0 || close < 0) return\n        if (open > close) {\n\
    \            stack += stack.substring(open + 1, close)\n        } else {\n   \
    \         stack += stack.substring(close + 1, open)\n        }\n        val openCount\
    \ = stack.count(\"(\")\n        val closeCount = stack.count(\")\")\n        if\
    \ (openCount != closeCount) {\n            return \"No\"\n        }\n        val\
    \ open = stack.indexOf(\"(\")\n        val close = stack.indexOf(\")\")\n    \
    \    if (open < 0 || close < 0) return\n        if (open > close) {\n        \
    \    stack += stack.substring(open + 1, close)\n        } else {\n           \
    \ stack += stack.substring(close + 1, open)\n        }\n        val openCount\
    \ = stack.count(\"(\")\n        val closeCount = stack.count(\")\")\n        if\
    \ (openCount != closeCount) {\n            return \"No\"\n        }\n        val\
    \ open = stack.indexOf(\"(\")\n        val close = stack.indexOf(\")\")\n    \
    \    if (open < 0 || close < 0) return\n        if (open > close) {\n        \
    \    stack += stack.substring(open + 1, close)\n        } else {\n           \
    \ stack += stack.substring(close + 1, open)\n        }\n        val openCount\
    \ = stack.count(\"(\")\n        val closeCount = stack.count(\")\")\n        if\
    \ (openCount != closeCount) {\n            return \"No\"\n        }\n        val\
    \ open = stack.indexOf(\"(\")\n        val close = stack.indexOf(\")\")\n    \
    \    if (open < 0 || close < 0) return\n        if (", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            if (x == \"(\") open += x\n         \
    \   else if (x == \")\") close += x\n            else stack += x\n        })\n\
    \        if (open.size == 0 && close.size == 0) \"No\"\n        else if (open.size\
    \ == 0 && close.size > 0) \"Yes\"\n        else if (open.size > 0 && close.size\
    \ == 0) \"No\"\n        else if (open.size > 0 && close.size > 0) \"Yes\"\n  \
    \      else matchParens(stack.toList)", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        lst.foreach(x => stack\
    \ += x)\n        while(stack.nonEmpty) {\n            val cur = stack.pop()\n\
    \            if(cur == \"(\") {\n                result += \"(\"\n           \
    \     stack += \")\"\n            } else if(cur == \")\") {\n                result\
    \ += \"(\"\n                stack += \")\"\n            } else {\n           \
    \     result += cur\n            }\n        }\n        if(result.length == lst.length)\
    \ result.mkString\n        else \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach { s =>\n            s match {\n                case \")\"\
    \ =>\n                    close.foreach(c => stack += c)\n                   \
    \ result ++= stack\n                    stack = mutable.Stack[String]()\n    \
    \            case \")(\"  =>\n                    open += s\n                case\
    \ \")(\"  =>\n                    open -= s\n                case \")\" =>\n \
    \                   close += s\n                case \")\" =>\n              \
    \      close -= s\n                case _ =>\n                    stack += s\n\
    \            }\n        }\n        if (stack.nonEmpty) result += \"No\"\n    \
    \    else result += \"Yes\"", "        val stack = mutable.Stack[String]()\n \
    \       val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => x match {\n\
    \            case x if x == \")\" => close.push(x)\n            case x if x ==\
    \ \")()\" => close.push(x)\n            case x if x == \"(\" => open.push(x)\n\
    \            case x if x == \")(\" => open.push(x)\n            case x if x ==\
    \ \")()()\" => close.push(x)\n            case x if x == \")()()()\" => close.push(x)\n\
    \            case x if x == \")()()()()\" => close.push(x)\n            case x\
    \ if x == \")()()()()()\" => close.push(x)\n            case x if x == \")()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()\" => close.push(x)\n\
    \            case x if x == \")()()()()()()()()\" => close.push(x)\n         \
    \   case x if x == \")()()()()()()()()()\" => close.push(x)\n            case\
    \ x if x == \")()()()()()()()()()()\" => close.push(x)\n            case x if\
    \ x == \")()()()()()()()()()()\" => close.push(x)\n            case x if x ==\
    \ \")()()()()()()()()()()()\" => close.push(x)\n            case x if x == \"\
    )()()()()()()()()()()()()\" => close.push(x)\n            case x if x == \")()()()()()()()()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()()()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()()()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()()()()()()()()\"\
    \ => close.push(x)\n            case x if x == \")()()()()()()()()()()()()()()\"\
    \ => ", "        val stack = mutable.Stack[String]()\n        val good = mutable.ListBuffer[String]()\n\
    \        val bad = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            if (x == \"(\") stack.push(x)\n            if (x == \")\") stack.pop()\
    \ match {\n                case Some(\"(\") => good.add(x)\n                case\
    \ _ => bad.add(x)\n            }\n        })\n        if (good.size == lst.size)\
    \ good.toList(\"(\", \")\").toString.toUpperCase\n        else bad.toList(\"(\"\
    , \")\").toString.toUpperCase", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach {\
    \ s =>\n            val newStack = mutable.Stack[String]()\n            val newResult\
    \ = mutable.ListBuffer.empty[String]\n            val open = s.indexOf('(')\n\
    \            val close = s.lastIndexOf(')')\n            val newOpen = open +\
    \ 1\n            val newClose = close + 1\n            val newLen = newOpen -\
    \ newClose\n            val newStr = s.substring(newOpen, newClose)\n        \
    \    val newStrLen = newStr.length\n            val newStrLen2 = newStrLen / 2\n\
    \            val newStrLen3 = newStrLen / 3\n            val newStrLen4 = newStrLen\
    \ / 4\n            val newStrLen5 = newStrLen / 5\n            val newStrLen6\
    \ = newStrLen / 6\n            val newStrLen7 = newStrLen / 7\n            val\
    \ newStrLen8 = newStrLen / 8\n            val newStrLen9 = newStrLen / 9\n   \
    \         val newStrLen10 = newStrLen / 10\n            val newStrLen11 = newStrLen\
    \ / 11\n            val newStrLen12 = newStrLen / 12\n            val newStrLen13\
    \ = newStrLen / 13\n            val newStrLen14 = newStrLen / 14\n           \
    \ val newStrLen15 = newStrLen / 15\n            val newStrLen16 = newStrLen /\
    \ 16\n            val newStrLen17 = newStrLen / 17\n            val newStrLen18\
    \ = newStrLen / 18\n            val newStrLen19 = newStrLen / 19\n           \
    \ val newStrLen20 = newStrLen / 20\n            val newStrLen21 = newStrLen /\
    \ 21\n            val newStrLen22 = newStrLen / 22\n            val newStrLen23\
    \ = newStrLen / 23\n            val newStrLen24 = newStrLen / 24\n           \
    \ val newStrLen25 = newStrLen / 25\n            val newStrLen26 = newStrLen /\
    \ 26\n            val newStrLen27 = newStrLen / 27\n            val newStrLen28\
    \ = newStrLen / 28\n            val newStrLen29 = newStrLen / 29\n           \
    \ val newStrLen30 = newStrLen / 30\n            val newStrLen31 = newStrLen /\
    \ 31\n            val newStrLen32 = newStrLen / 32\n            val newStrLen33\
    \ = newStrLen / 33\n", "        val stack = mutable.Stack[String]()\n        val\
    \ good = mutable.ListBuffer[String]()\n        val bad = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => x match {\n            case x if x.startsWith(\"(\"\
    ) => stack.push(x)\n            case x if x.startsWith(\")\") => stack.pop() match\
    \ {\n                case x if x == \")\" => good.append(x)\n                case\
    \ x => bad.append(x)\n            }\n        })\n        if (good.size == lst.size)\
    \ good.mkString(\"(\", \")\") else \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result.append(\"No\")\n            } else {\n      \
    \          val openParen = str.substring(0, open)\n                val closeParen\
    \ = str.substring(close+1, str.length)\n                val newStr = openParen\
    \ + closeParen\n                stack += newStr\n                result.append(\"\
    Yes\")\n            }\n        }\n        if(stack.size == 0) {\n            result.append(\"\
    No\")\n        } else {\n            result.append(\"Yes\")\n        }", "   \
    \     val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => stack.pop\n                case \")(\"  => stack.append(x)\n            \
    \    case _ => stack.append(x)\n            }\n        })\n        stack.toList\
    \ match {\n            case Nil => result.append(\"Yes\")\n            case x\
    \ :: Nil => result.append(\"No\")\n            case x :: y => result.append(\"\
    Yes\")\n        }", "        val stack = mutable.Stack[String]()\n        val\
    \ stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => stack += x)\n        while(stack.nonEmpty) {\n     \
    \       val x = stack.pop()\n            val y = stack.pop()\n            val\
    \ z = (x + \"(\" + y + \")\")\n            result += (x + \"(\" + y + \")\")\n\
    \            stack += z\n        }\n        if (result.size == lst.size) {\n \
    \           return \"Yes\"\n        } else {\n            return \"No\"\n    \
    \    }", "        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => close.push(x)\n        \
    \        case \")(\"  => stack.push(x)\n                case \")()\" => stack.push(x)\n\
    \                case \")()()\" => stack.push(x)\n                case \")(\"\
    \ => open.push(x)\n                case \")()\" => open.push(x)\n            \
    \    case _ => stack.push(x)\n            }\n        })\n        val openCount\
    \ = open.count\n        val closeCount = close.count\n        val openStack =\
    \ stack.take(openCount)\n        val closeStack = stack.drop(closeCount)\n   \
    \     val openStackCount = openStack.count\n        val closeStackCount = closeStack.count\n\
    \        val openStack = openStack.take(openStackCount)\n        val closeStack\
    \ = closeStack.drop(closeStackCount)\n        val openStackCount = openStack.count\n\
    \        val closeStackCount = closeStack.count\n        val openStack = openStack.take(openStackCount)\n\
    \        val closeStack = closeStack.drop(closeStackCount)\n        val openStackCount\
    \ = openStack.count\n        val closeStackCount = closeStack.count\n        val\
    \ openStack = openStack.take(openStackCount)\n        val closeStack = closeStack.drop(closeStackCount)\n\
    \        val openStackCount = openStack.count\n        val closeStackCount = closeStack.count\n\
    \        val openStack = openStack.take(openStackCount)\n        val closeStack\
    \ = closeStack.drop(closeStackCount)\n        val openStackCount = openStack.count\n\
    \        val closeStackCount = closeStack.count\n        val openStack = openStack.take(openStackCount)\n\
    \        val closeStack = closeStack.drop(closeStackCount)\n        val openStackCount\
    \ = openStack.count\n        val closeStackCount = closeStack.count\n        val\
    \ openStack = openStack.take(openStackCount)\n        val closeStack = closeStack.drop(closeStackCount)\n\
    \        val openStackCount = openStack.count\n        val closeStackCount = closeStack.count\n\
    \        val openStack = openStack.take(openStackCount)\n        val closeStack\
    \ = closeStack.drop(", "        val stack = mutable.Stack[String]()\n        val\
    \ queue = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n\
    \        val bad = mutable.Set[String]()\n        lst.foreach(x => if (x == \"\
    (\") stack += x else if (!x == \"(\") queue += x else if (!x == \")\") bad +=\
    \ x else if (!x == \")\") good += x)\n        if (stack.size == 0 && queue.size\
    \ == 0) \"No\"\n        else if (stack.size == 0 && queue.size > 0) \"Yes\"\n\
    \        else if (stack.size > 0 && queue.size == 0) \"No\"\n        else if (stack.size\
    \ > 0 && queue.size > 0) \"Yes\"\n        else matchParens(stack.toList ++ queue.toList)",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open != -1 && close != -1) {\n                val left = str.substring(0,\
    \ open)\n                val right = str.substring(close + 1)\n              \
    \  val newStr = left + right\n                if(!stack.contains(newStr)) {\n\
    \                    stack.push(newStr)\n                    result += newStr\n\
    \                }\n            }\n        }\n        if(result.size == lst.size)\
    \ {\n            return \"Yes\"\n        } else {\n            return \"No\"\n\
    \        }", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n        val\
    \ resultSize = lst.size\n        for(i <- 0 until stackSize){\n            val\
    \ str = lst(i)\n            val len = str.length\n            val open = str.indexOf(\"\
    (\")\n            val close = str.indexOf(\")\")\n            val isOpen = open\
    \ != -1\n            val isClose = close != -1\n            val isOpenClose =\
    \ open != -1 && close != -1\n            val isOpenCloseOpen = open != -1 && close\
    \ != -1 && open < close\n            val isOpenCloseClose = open != -1 && close\
    \ != -1 && open < close\n            val isOpenCloseOpenClose = open != -1 &&\
    \ close != -1 && open < close && close < close\n            val isOpenCloseCloseOpen\
    \ = open != -1 && close != -1 && open < close && close < open && close < close\n\
    \            val isOpenCloseCloseClose = open != -1 && close != -1 && open < close\
    \ && close < open && close < close\n            val isOpenCloseCloseOpenClose\
    \ = open != -1 && close != -1 && open < close && close < open && close < close\
    \ && close < open\n            val isOpenCloseCloseCloseOpen = open != -1 && close\
    \ != -1 && open < close && close < open && close < close && close < open && close\
    \ < close\n            val isOpenCloseCloseCloseClose = open != -1 && close !=\
    \ -1 && open < close && close < open && close < close && close < open && close\
    \ < close\n            val isOpenCloseCloseCloseOpen = open != -1 && close !=\
    \ -1 && open < close && close < open && close < close && close < open && close\
    \ < close\n            val isOpenCloseCloseCloseClose = open != -1 && close !=\
    \ -1 && open < close && close < open && close < close && close < open && close\
    \ < close\n            val isOpenCloseCloseCloseOpen = open != -1 && close !=\
    \ -1 && open < close && close < open && close < close && close < open && close\
    \ < close\n            val isOpenCloseCloseCloseCloseClose = open != -1 && close\
    \ != -1 && open < close && close < open && close < close && close < open && close\
    \ < close\n            val isOpenCloseCloseCloseCloseOpen = open != -1 && close\
    \ != -1 && open < close && close < open ", "        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach { s =>\n            val open = s.indexOf(\"(\")\n       \
    \     val close = s.indexOf(\")\")\n            if (open < 0 || close < 0) {\n\
    \                result += \"No\"\n            } else {\n                result\
    \ += \"Yes\"\n                stack.push(s)\n                queue.enqueue(s)\n\
    \            }\n        }\n        val stackSize = stack.size\n        val queueSize\
    \ = queue.size\n        if (stackSize == queueSize) {\n            result += \"\
    Yes\"\n        } else {\n            result += \"No\"\n        }\n        return\
    \ result.toString", "        val stack = mutable.Stack[String]()\n        val\
    \ result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n  \
    \      val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n\
    \        val resultSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val stackSize = lst.size\n",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \"(\"\
    \ => open += x\n                case \")\" => close += x\n                case\
    \ _ => stack += x\n            }\n        })\n        val openCount = open.size\n\
    \        val closeCount = close.size\n        val openCount = openCount + closeCount\n\
    \        val openCount = openCount + 1\n        val closeCount = closeCount +\
    \ 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = openCount + 1\n        val closeCount = closeCount\
    \ + 1\n        val openCount = ", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer.empty[String]\n        lst.foreach(x\
    \ => stack += x)\n        while(stack.nonEmpty) {\n            val x = stack.pop()\n\
    \            val y = stack.pop()\n            if(x == \")\" && y == \")\") result\
    \ += \"()\"\n            if(x == \"(\" && y == \")\") result += \"()\"\n     \
    \       if(x == \"(\" && y == \"(\") result += \"()\"\n            if(x == \"\
    )\" && y == \"(\") result += \"()\"\n            if(x == \")\" && y == \")\")\
    \ result += \"()\"\n        }\n        if(result.isEmpty) \"No\" else \"Yes\"",
  "        val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ =>\n                    if (!stack.isEmpty) {\n                        val top\
    \ = stack.pop()\n                        if (top != \"(\") {\n               \
    \             bad.add(top)\n                        }\n                    }\n\
    \                case \")(\"  =>\n                    if (!queue.isEmpty) {\n\
    \                        val top = queue.pop()\n                        if (top\
    \ != \"(\") {\n                            bad.add(top)\n                    \
    \    }\n                    }\n                case \")()\" =>\n             \
    \       if (!queue.isEmpty) {\n                        val top = queue.pop()\n\
    \                        if (top != \"(\") {\n                            bad.add(top)\n\
    \                        }\n                    }\n                case \")()()\"\
    \ =>\n                    if (!stack.isEmpty) {\n                        val top\
    \ = stack.pop()\n                        if (top != \"(\") {\n               \
    \             bad.add(top)\n                        }\n                    }\n\
    \                case \")()()()\" =>\n                    if (!queue.isEmpty)\
    \ {\n                        val top = queue.pop()\n                        if\
    \ (top != \"(\") {\n                            bad.add(top)\n               \
    \         }\n                    }\n                case \")()()()()\" =>\n  \
    \                  if (!stack.isEmpty) {\n                        val top = stack.pop()\n\
    \                        if (top != \"(\") {\n                            bad.add(top)\n\
    \                        }\n                    }\n                case \")()()()()()\"\
    \ =>\n                    if (!queue.isEmpty) {\n                        val top\
    \ = queue.pop()\n                        if (top != \"(\") {\n               \
    \             bad.add(top)\n                        }\n                    }\n\
    \                case \")()()()()()()\" =>\n                    if (!stack.isEmpty)\
    \ {\n                        val top = stack.pop()\n                        if\
    \ (top != \"(\") {\n                            bad.add(top)\n               \
    \         }\n                    }\n                case \")()()()()()()()()\"\
    \ =>\n                    if (!queue.isEmpty) {\n                        val top\
    \ = queue.pop()\n                        if (top != \"(\") {\n               \
    \             bad.add(top)\n                        }\n                    }\n\
    \                case \")()()()()()()()()\" =>\n                    if (!stack.isEmpty)\
    \ {\n                        val top = stack.pop()\n                        if\
    \ (top != \"(\") {\n                            bad.add(top)\n               \
    \         }\n                    }\n                case \")()()()()()()()()()\"\
    \ =>\n                    if (!queue.isEmpty) {\n                        val top\
    \ = queue.pop()\n                        if (top != \"(\") {\n               \
    \             bad.add(top)\n                        }\n                    }\n\
    \                case \")()()()()()()()()()()\" =>\n                    if (!stack.isEmpty)\
    \ {\n                        val top = stack.pop()\n                        if\
    \ (top != \"(\"", "        val stack = mutable.Stack[String]()\n        val result\
    \ = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => if\
    \ (x == \"(\") open.append(x))\n        lst.foreach(x => if (x == \")\") close.append(x))\n\
    \        val openCount = open.count\n        val closeCount = close.count\n  \
    \      if (openCount == closeCount) {\n            val openStack = mutable.Stack[String]()\n\
    \            open.foreach(x => openStack.append(x))\n            close.foreach(x\
    \ => openStack.pop())\n            val openStackCount = openStack.count\n    \
    \        if (openStackCount == 0) {\n                val closeStack = mutable.Stack[String]()\n\
    \                close.foreach(x => closeStack.append(x))\n                val\
    \ closeStackCount = closeStack.count\n                if (closeStackCount == 0)\
    \ {\n                    result.append(\"Yes\")\n                } else {\n  \
    \                  result.append(\"No\")\n                }\n            } else\
    \ {\n                result.append(\"No\")\n            }\n        } else {\n\
    \            result.append(\"No\")\n        }\n        result.toString()", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => close.push(x)\n                case \")(\"  => stack.push(x)\n          \
    \      case \")(\"  => stack.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")", "        val stack = mutable.Stack[String]()\n   \
    \     val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val open = str.indexOf(\"\
    (\")\n            val close = str.indexOf(\")\")\n            if(open < 0 || close\
    \ < 0) {\n                result.append(\"No\")\n            } else {\n      \
    \          val stackStr = str.substring(0, open)\n                val stackStr\
    \ = stackStr.substring(stackStr.indexOf(\"(\") + 1, stackStr.indexOf(\")\"))\n\
    \                val stackStr = stackStr.substring(stackStr.indexOf(\"(\") + 1,\
    \ stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\")\"))\n                val stackStr = stackStr.substring(stackStr.indexOf(\"\
    (\") + 1, stackStr.indexOf(\"", "        val stack = mutable.Stack[String]()\n\
    \        val good = mutable.ListBuffer[String]()\n        val bad = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => {\n                    stack.pop\n                    x match {\n       \
    \                 case \"(\" => stack.push(x)\n                        case _\
    \ => bad.append(x)\n                    }\n                }\n               \
    \ case \")(\" => {\n                    stack.pop\n                    x match\
    \ {\n                        case \"(\" => stack.push(x)\n                   \
    \     case _ => bad.append(x)\n                    }\n                }\n    \
    \            case \")(\" => {\n                    stack.pop\n               \
    \     x match {\n                        case \"(\" => stack.push(x)\n       \
    \                 case _ => bad.append(x)\n                    }\n           \
    \     }\n                case \")(\" => {\n                    stack.pop\n   \
    \                 x match {\n                        case \"(\" => stack.push(x)\n\
    \                        case _ => bad.append(x)\n                    }\n    \
    \            }\n                case \")(\" => {\n                    stack.pop\n\
    \                    x match {\n                        case \"(\" => stack.push(x)\n\
    \                        case _ => bad.append(x)\n                    }\n    \
    \            }\n                case \")(\" => {\n                    stack.pop\n\
    \                    x match {\n                        case \"(\" => stack.push(x)\n\
    \                        case _ => bad.append(x)\n                    }\n    \
    \            }\n                case \")(\" => {\n                    stack.pop\n\
    \                    x match {\n                        case \"(\" => stack.push(x)\n\
    \                        case _ => bad.append(x)\n                    }\n    \
    \            }\n                case \")(\" => {\n                    stack.pop\n\
    \                    x match {\n                        case \"(\" => stack.push(x)\n\
    \                        case _ => bad.append(x)\n                    }\n    \
    \            }\n                case \")(\" => {\n                    stack.pop\n\
    \                    x match {\n                        case \"(\" => stack.push(x)\n\
    \                        case _ => bad.append(x)\n                    }\n    \
    \            }\n                case \")(\" => {\n                    stack.pop\n\
    \                    x match {\n                        case \"(\" => stack.push(x)\n\
    \                        case _ => bad.append(x)\n                    }\n    \
    \            }\n                case \")(\" => {\n                    stack.pop\n\
    \                    x match {\n                        case \"(\" => stack.push(x)\n\
    \                        case _ => bad.append(x)\n                    }\n    \
    \            }\n                case \")(\" => {\n                    stack.pop\n\
    \                    x match {\n                        case \"(\" => stack.push(x)\n\
    \                        case _ => bad.append(x)\n                    }\n    \
    \            }\n                case \")(\" => {\n                    stack.pop\n\
    \                    x match {\n                        case \"(\" => stack.push(x)\n\
    \                        case _ => bad.append(x)", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       if (x == \"(\") open += x\n            if (x == \")\") close += x\n  \
    \          if (open.isEmpty && close.isEmpty) result += \"Yes\"\n            if\
    \ (open.isEmpty && !close.isEmpty) result += \"No\"\n            if (close.isEmpty\
    \ && !open.isEmpty) result += \"No\"\n            if (open.isEmpty && close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && close.isEmpty) result += \"No\"\n  \
    \          if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if\
    \ (open.isEmpty && !close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && !close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && !close.isEmpty) result += \"No\"\n \
    \           if (open.isEmpty && !close.isEmpty) result += \"No\"\n           \
    \ if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && !close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && !close.isEmpty) result += \"No\"\n \
    \           if (open.isEmpty && !close.isEmpty) result += \"No\"\n           \
    \ if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && !close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && !close.isEmpty) result += \"No\"\n \
    \           if (open.isEmpty && !close.isEmpty) result += \"No\"\n           \
    \ if (open.isEmpty && !close.isEmpty) result += \"No\"\n            if (open.isEmpty\
    \ && !close.isEmpty) result += \"No\"\n            if (open.isEmpty && !close.isEmpty)\
    \ result += \"No\"\n            if (open.isEmpty && !close.isEmpty) result +=\
    \ \"No\"\n            if (open.isEmpty && !close.isEmpty) result += \"No\"\n \
    \           if (open.isEmpty && !close.isEmpty) result += \"No\"\n           \
    \ if (open.isEmpty && !close", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val openCount = if (open < 0) 0 else open + 1\n            val\
    \ closeCount = if (close < 0) 0 else close + 1\n            val count = openCount\
    \ + closeCount\n            if (openCount > closeCount) {\n                stack\
    \ += str\n            } else if (closeCount > openCount) {\n                result\
    \ += str\n            }\n        }\n        if (stack.size == result.size) {\n\
    \            return \"Yes\"\n        } else {\n            return \"No\"\n   \
    \     }", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => x match {\n            case x if x.startsWith(\"(\"\
    ) => stack.push(x)\n            case x if x.startsWith(\")\") => stack.pop() match\
    \ {\n                case x if x != \"(\" => result += \"(\" + x + \")\"\n   \
    \             case x if x == \")\" => result += \"(\" + x + \")\"\n          \
    \      case _ => result += \"(\" + x + \")\"\n            }\n            case\
    \ _ => result += x\n        })\n        if (stack.size == 0) \"No\" else \"Yes\"",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => stack.pop\n                case \")(\"  => stack.pop\n                case\
    \ \")()\" => stack.pop\n                case \")()()\" => stack.pop\n        \
    \        case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" => stack.pop\n\
    \                case \")(\" => stack.pop\n                case \")()\" ", " \
    \       val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach { s =>\n            val newStack = mutable.Stack[String]()\n\
    \            val newResult = mutable.ListBuffer[String]()\n            val open\
    \ = s.indexOf('(')\n            val close = s.lastIndexOf(')')\n            val\
    \ newOpen = open + 1\n            val newClose = close + 1\n            val newStr\
    \ = s.substring(newOpen, newClose)\n            val newStr2 = s.substring(newOpen,\
    \ newClose)\n            val newStr3 = s.substring(newOpen, newClose)\n      \
    \      val newStr4 = s.substring(newOpen, newClose)\n            val newStr5 =\
    \ s.substring(newOpen, newClose)\n            val newStr6 = s.substring(newOpen,\
    \ newClose)\n            val newStr7 = s.substring(newOpen, newClose)\n      \
    \      val newStr8 = s.substring(newOpen, newClose)\n            val newStr9 =\
    \ s.substring(newOpen, newClose)\n            val newStr10 = s.substring(newOpen,\
    \ newClose)\n            val newStr11 = s.substring(newOpen, newClose)\n     \
    \       val newStr12 = s.substring(newOpen, newClose)\n            val newStr13\
    \ = s.substring(newOpen, newClose)\n            val newStr14 = s.substring(newOpen,\
    \ newClose)\n            val newStr15 = s.substring(newOpen, newClose)\n     \
    \       val newStr16 = s.substring(newOpen, newClose)\n            val newStr17\
    \ = s.substring(newOpen, newClose)\n            val newStr18 = s.substring(newOpen,\
    \ newClose)\n            val newStr19 = s.substring(newOpen, newClose)\n     \
    \       val newStr20 = s.substring(newOpen, newClose)\n            val newStr21\
    \ = s.substring(newOpen, newClose)\n            val newStr22 = s.substring(newOpen,\
    \ newClose)\n            val newStr23 = s.substring(newOpen, newClose)\n     \
    \       val newStr24 = s.substring(newOpen, newClose)\n            val newStr25\
    \ = s.substring(newOpen, newClose)\n            val newStr26 = s.substring(newOpen,\
    \ newClose)\n            val newStr27 = s.substring(newOpen, newClose)\n     \
    \       val newStr28 = s.substring(newOpen, newClose)\n            val newStr29\
    \ = s.substring(newOpen, ", "        val stack = mutable.Stack[String]()\n   \
    \     val result = mutable.ListBuffer.empty[String]\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach { s =>\n     \
    \       if (s.startsWith(\"(\")) {\n                open += s\n            } else\
    \ if (s.startsWith(\")\")) {\n                close += s\n            } else {\n\
    \                stack += s\n            }\n        }\n        if (open.isEmpty\
    \ && close.isEmpty) {\n            result.append(\"Yes\")\n        } else {\n\
    \            while (!stack.isEmpty) {\n                val s = stack.pop()\n \
    \               if (close.contains(s)) {\n                    result.append(\"\
    No\")\n                    break\n                }\n                if (open.contains(s))\
    \ {\n                    result.append(\"Yes\")\n                    break\n \
    \               }\n                result.append(\"Yes\")\n            }\n   \
    \     }\n        result.toString()"]
stop_tokens:
- "\n    }\n"
