language: scala
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val months\
    \ = List (1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysNotLessThan1OrHigherThan31\
    \ = List (31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan30\
    \ = List (31,30,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan29\
    \ = List (31,29,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan31\
    \ = List (31,30,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan30\
    \ = List (31,30,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan29\
    \ = List (31,29,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan31\
    \ = List (31,30,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan30\
    \ = List (31,30,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan29\
    \ = List (31,29,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan31\
    \ = List (31,30,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan30\
    \ = List (31,30,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan29\
    \ = List (31,29,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan31\
    \ = List (31,30,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan30\
    \ = List (31,30,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan29\
    \ = List (31,29,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan31\
    \ = List (31,30,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan1OrHigherThan\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3zk4kwgo.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3zk4kwgo.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysNotLessThan1OrHigherThan31\e[0m = List (\e[31m31\e[0m,\e[31m30\e[0m,\e\
    [31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysNotLessThan1OrHigherThan31 is already defined as \e[33mvalue\e\
    [0m \e[35mdaysNotLessThan1OrHigherThan31\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3zk4kwgo.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdaysNotLessThan1OrHigherThan30\e\
    [0m = List (\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysNotLessThan1OrHigherThan30 is already defined as \e[33mvalue\e\
    [0m \e[35mdaysNotLessThan1OrHigherThan30\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3zk4kwgo.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdaysNotLessThan1OrHigherThan29\e\
    [0m = List (\e[31m31\e[0m,\e[31m29\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysNotLessThan1OrHigherThan29 is already defined as \e[33mvalue\e\
    [0m \e[35mdaysNotLessThan1OrHigherThan29"
  stdout: ''
  timestamp: 1660010138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateInMillis = dateArray.getTime\n        val dateInDays = dateInMillis/(1000*60*60*24)\n\
    \        val dateInMonths = dateInMillis/(1000*60*60*24*30)\n        val dateInYears\
    \ = dateInMillis/(1000*60*60*24*365)\n        val dateInDaysNotLessThanOneOrHigherThan31\
    \ = dateInDays < 1 || dateInDays > 31\n        val dateInDaysNotLessThanOneOrHigherThan30\
    \ = dateInDays < 1 || dateInDays > 30\n        val dateInDaysNotLessThanOneOrHigherThan29\
    \ = dateInDays < 1 || dateInDays > 29\n        val dateInMonthsNotLessThanOneOrHigherThan12\
    \ = dateInMonths < 1 || dateInMonths > 12\n        val dateInYearsNotLessThanOneOrHigherThan12\
    \ = dateInYears < 1 || dateInYears > 12\n        val dateInYearsNotLessThanOneOrHigherThan31\
    \ = dateInYears < 1 || dateInYears > 31\n        val dateInYearsNotLessThanOneOrHigherThan30\
    \ = dateInYears < 1 || dateInYears > 30\n        val dateInYearsNotLessThanOneOrHigherThan29\
    \ = dateInYears < 1 || dateInYears > 29\n        dateInDaysNotLessThanOneOrHigherThan31\
    \ &&\n        dateInDaysNotLessThanOneOrHigherThan30 &&\n        dateInDaysNotLessThanOneOrHigherThan29\
    \ &&\n        dateInMonthsNotLessThanOneOrHigherThan12 &&\n        dateInYearsNotLessThanOneOrHigherThan12\
    \ &&\n        dateInYearsNotLessThanOneOrHigherThan31 &&\n        dateInYearsNotLessThanOneOrHigherThan30\
    \ &&\n        dateInYearsNotLessThanOneOrHigherThan29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdom1ijy9.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        dateObj != null\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_7b0z0y_.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val dateInt = dateFormat.parse(date).getTime\n        val dateInt = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6yr8cek0.scala:51:21 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mdateInt\e[0m = \n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp6yr8cek0.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdateInt\e[0m = dateFormat.parse(date).getTime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateInt is already defined as \e[33mvalue\e[0m \e[35mdateInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6yr8cek0.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mdateInt\e[0m = dateFormat.parse(date).getTime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateInt is already defined as \e[33mvalue\e[0m \e[35mdateInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6yr8cek0.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mdateInt\e[0m = dateFormat.parse(date).getTime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateInt is already defined as \e[33mvalue\e[0m \e[35mdateInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6yr8cek0.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mdateInt\e[0m = dateFormat.parse(date).getTime\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateInt is already defined as \e[33mvalue\e[0m \e[35mdateInt\e\
    [0m"
  stdout: ''
  timestamp: 1660010136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3){\n            return\
    \ false\n        }\n        val monthArray = dateArray(0).toString.toInt\n   \
    \     val dayArray = dateArray(1).toString.toInt\n        val year = dateArray(2).toString.toInt\n\
    \        if(monthArray < 1 || monthArray > 12){\n            return false\n  \
    \      }\n        if(dayArray < 1 || dayArray > 31){\n            return false\n\
    \        }\n        if(monthArray == 2 && dayArray < 1 || dayArray > 30){\n  \
    \          return false\n        }\n        if(monthArray == 2 && dayArray < 1\
    \ || dayArray > 29){\n            return false\n        }\n        if(monthArray\
    \ == 2 && dayArray < 1 || dayArray > 28){\n            return false\n        }\n\
    \        if(monthArray == 2 && dayArray < 1 || dayArray > 27){\n            return\
    \ false\n        }\n        if(monthArray == 2 && dayArray < 1 || dayArray > 26){\n\
    \            return false\n        }\n        if(monthArray == 2 && dayArray <\
    \ 1 || dayArray > 25){\n            return false\n        }\n        if(monthArray\
    \ == 2 && dayArray < 1 || dayArray > 24){\n            return false\n        }\n\
    \        if(monthArray == 2 && dayArray < 1 || dayArray > 23){\n            return\
    \ false\n        }\n        if(monthArray == 2 && dayArray < 1 || dayArray > 22){\n\
    \            return false\n        }\n        if(monthArray == 2 && dayArray <\
    \ 1 || dayArray > 21){\n            return false\n        }\n        if(monthArray\
    \ == 2 && dayArray < 1 || dayArray > 20){\n            return false\n        }\n\
    \        if(monthArray == 2 && dayArray < 1 || dayArray > 19){\n            return\
    \ false\n        }\n        if(monthArray == 2 && dayArray < 1 || dayArray > 18){\n\
    \            return false\n        }\n        if(monthArray == 2 && dayArray <\
    \ 1 || dayArray > 17){\n            return false\n        }\n        if(monthArray\
    \ == 2 && dayArray < 1 || dayArray > 16){\n            return false\n        }\n\
    \        if(monthArray == 2 && dayArray < 1 || dayArray > 15){\n            return\
    \ false\n        }\n        if(monthArray == 2 && dayArray < 1 || dayArray > 14){\n\
    \            return false\n        }\n        if(monthArray == 2 && dayArray <\
    \ 1 || dayArray > 13){\n            return false\n        }\n        if(monthArray\
    \ == 2 && dayArray < 1 || dayArray > 12){\n            return false\n        }\n\
    \        if(monthArray == 2 && dayArray < 1 || dayArray > 11){\n            return\
    \ false\n        }\n        if(monthArray == 2 && dayArray < 1 || dayArray > 10){\n\
    \            return false\n        }\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfsprf0xy.scala:85:8\
    \ ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m        \e[33mif\e[0m(monthArray\
    \ == \e[31m2\e[0m && dayArray < \e[31m1\e[0m || dayArray > \e[31m10\e[0m){\n\e\
    [31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m\
    \   |\e[0m        Required: Boolean\n\e[31m   |\e[0m        Maybe you are missing\
    \ an else part for the conditional?\n\e[31m86 |\e[0m            \e[33mreturn\e\
    [0m \e[31mfalse\e[0m\n\e[31m87 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3)\n            return false\n\
    \        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(month < 1 || month > 12)\n\
    \            return false\n        if(day < 1 || day > 31)\n            return\
    \ false\n        if(month == 2)\n            if(day > 29)\n                return\
    \ false\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnca6kdyr.scala:35)\n\tat Problem.main(tmpnca6kdyr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List (1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = List (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = List (2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\
    \ 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,\
    \ 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,\
    \ 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,\
    \ 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,\
    \ 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,\
    \ 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,\
    \ 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,\
    \ 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,\
    \ 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124,\
    \ 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137,\
    \ 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150,\
    \ 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163,\
    \ 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176,\
    \ 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189,\
    \ 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202,\
    \ 2203, 2204, 2205, \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8t9prk8q.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8t9prk8q.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010138
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnbk69im8.scala:26)\n\tat Problem.main(tmpnbk69im8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val currentDate = new Date();\n        val currentYear = currentDate.getYear;\n\
    \        val currentMonth = currentDate.getMonth;\n        val currentDay = currentDate.getDay;\n\
    \        val currentDayInMonth = currentDate.getDay;\n        val currentMonthInYear\
    \ = currentDate.getMonth;\n        val currentYearInMonth = currentDate.getYear;\n\
    \        val currentYearInMonthInDay = currentDate.getYear;\n        val currentYearInMonthInDayInMonth\
    \ = currentDate.getYear;\n        val currentYearInMonthInDayInMonthInYear = currentDate.getYear;\n\
    \        val currentYearInMonthInDayInMonthInYearInMonth = currentDate.getYear;\n\
    \        val currentYearInMonthInDayInMonthInYearInMonthInDay = currentDate.getYear;\n\
    \        val currentYearInMonthInDayInMonthInYearInMonthInDayInMonth = currentDate.getYear;\n\
    \        val currentYearInMonthInDayInMonthInYearInMonthInDayInMonthInYear = currentDate.getYear;\n\
    \        val currentYearInMonthInDayInMonthInYearInMonthInDayInMonthInYearInMonth\
    \ = currentDate.getYear;\n        val currentYearInMonthInDayInMonthInYearInMonthInDayInMonthInYearInMonthInDay\
    \ = currentDate.getYear;\n        val currentYearInMonthInDayInMonthInYearInMonthInDayInMonthInYearInMonthInDayInMonth\
    \ = currentDate.getYear;\n        val currentYearInMonthInDayInMonthInYearInMonthInDayInMonthInYearInMonthInDayInMonthInYear\
    \ = currentDate.getYear;\n        val currentYearInMonthInDayInMonthInYearInMonthInDayInMonthInYearInMonthInDayInMonthInYearInMonth\
    \ = currentDate.getYear;\n        val currentYearInMonthInDayInMonthInYearInMonthInDayInMonthInYearInMonthInDayInMonthInYearInMonthInDay\
    \ = currentDate.getYear;\n        val currentYearInMonthInDayInMonthInYearInMonthInDayInMonthInYearInMonthInDayInMonthInYearInMonthInDayInMonth\
    \ = currentDate.getYear;\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpazsuszv2.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpazsuszv2.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcurrentDate\e[0m = \e[33mnew\e\
    [0m \e[35mDate\e[0m();\n\e[31m\e[31m   |\e[0m                              ^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type Date\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpazsuszv2.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed.getTime > System.currentTimeMillis\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5u0en56x.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val daysInMonth\
    \ = scala.collection.mutable.HashMap[Int, Int]()\n        daysInMonth.put(1,31)\n\
    \        daysInMonth.put(3,30)\n        daysInMonth.put(5,29)\n        daysInMonth.put(7,31)\n\
    \        daysInMonth.put(8,30)\n        daysInMonth.put(10,31)\n        daysInMonth.put(12,30)\n\
    \        daysInMonth.get(month) match {\n            case Some(daysInMonth) =>\
    \ daysInMonth.get(month) match {\n                case Some(day) => day <= day\
    \ && day <= daysInMonth.get(month)\n                case None => false\n     \
    \       }\n            case None => false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj_ft_c61.scala:25:50 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e[0m Some(daysInMonth) => daysInMonth.get(month)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \   value get is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj_ft_c61.scala:26:67\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e\
    [0m Some(day) => day <= day && day <= daysInMonth.get(month)\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value get is not a member\
    \ of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthDays\
    \ = Map(1 -> 31, 3 -> 30, 5 -> 31, 7 -> 30, 8 -> 31, 10 -> 30, 12 -> 31)\n   \
    \     val monthDays30 = Map(4 -> 29, 6 -> 29, 9 -> 29, 11 -> 29)\n        val\
    \ monthDays29 = Map(2 -> 29)\n        monthDays.get(months) match {\n        \
    \    case Some(monthDays) => days > monthDays.get(months) && days > monthDays30.get(months)\
    \ && days > monthDays29.get(months)\n            case None => false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp73tcej4o.scala:20:53 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m Some(monthDays) => days >\
    \ monthDays.get(months) && days > monthDays30.get(months) && days > monthDays29.get(months)\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value get is not a\
    \ member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660010138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val daysInMonth\
    \ = scala.collection.mutable.ArrayBuffer(31,28,31,30,31,30,31,30,31,30,31)\n \
    \       val monthsInMonth = scala.collection.mutable.ArrayBuffer(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val monthDays = scala.collection.mutable.ArrayBuffer(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays30 = scala.collection.mutable.ArrayBuffer(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays29 = scala.collection.mutable.ArrayBuffer(31,29,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays28 = scala.collection.mutable.ArrayBuffer(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays27 = scala.collection.mutable.ArrayBuffer(31,27,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays26 = scala.collection.mutable.ArrayBuffer(31,26,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays25 = scala.collection.mutable.ArrayBuffer(31,25,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays24 = scala.collection.mutable.ArrayBuffer(31,24,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays21 = scala.collection.mutable.ArrayBuffer(31,21,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays20 = scala.collection.mutable.ArrayBuffer(31,20,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays19 = scala.collection.mutable.ArrayBuffer(31,19,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays18 = scala.collection.mutable.ArrayBuffer(31,18,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays17 = scala.collection.mutable.ArrayBuffer(31,17,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays16 = scala.collection.mutable.ArrayBuffer(31,16,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays15 = scala.collection.mutable.ArrayBuffer(31,15,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays14 = scala.collection.mutable.ArrayBuffer(31,14,31,30,31,30,31,30,31,30,31)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1hjcoh58.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\")\n        val\
    \ daysArray = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"\
    29\")\n        val yearArray = List(\"00\", \"01\", \"02\", \"03\", \"04\", \"\
    05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\")\n        val monthArray2\
    \ = List(\"04\", \"06\", \"09\", \"11\")\n        val daysArray2 = List(\"29\"\
    )\n        val yearArray2 = List(\"00\", \"01\", \"02\", \"03\", \"04\", \"05\"\
    , \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\")\n        val monthArray3\
    \ = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\")\n        val\
    \ daysArray3 = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"\
    29\")\n        val yearArray3 = List(\"00\", \"01\", \"02\", \"03\", \"04\", \"\
    05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\")\n        val monthArray4\
    \ = List(\"04\", \"06\", \"09\", \"11\")\n        val daysArray4 = List(\"29\"\
    )\n        val yearArray4 = List(\"00\", \"01\", \"02\", \"03\", \"04\", \"05\"\
    , \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\")\n        val monthArray5\
    \ = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\")\n        val\
    \ daysArray5 = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"\
    29\")\n        val yearArray5 = List(\"00\", \"01\", \"02\", \"03\", \"04\", \"\
    05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\")\n        val monthArray6\
    \ = List(\"04\", \"06\", \"09\", \"11\")\n        val daysArray6 = List(\"29\"\
    )\n        val yearArray6 = List(\"00\", \"01\", \"02\", \"03\", \"04\", \"05\"\
    , \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\")\n        val monthArray7\
    \ = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\")\n        val\
    \ daysArray7 = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"\
    29\")\n        val yearArray7 = List(\"00\", \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5ctehp2g.scala:36:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36myearArray7\e[0m = List(\e\
    [31m\"00\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                                   \
    \ ^\e[0m\n\e[31m   |\e[0m                                    unclosed string literal\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ctehp2g.scala:37:5 ---------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        val year = dateArray.getYear\n        val month = dateArray.getMonthValue\n\
    \        val day = dateArray.getDayOfMonth\n        val daysInMonth = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\").parse(\"12-31-2018\").getDayOfMonth\n        val daysInMonth30 =\
    \ DateTimeFormat.forPattern(\"MM-dd-yyyy\").parse(\"12-30-2018\").getDayOfMonth\n\
    \        val daysInMonth29 = DateTimeFormat.forPattern(\"MM-dd-yyyy\").parse(\"\
    12-29-2018\").getDayOfMonth\n        val daysInMonth28 = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\").parse(\"12-28-2018\").getDayOfMonth\n        val daysInMonth27 =\
    \ DateTimeFormat.forPattern(\"MM-dd-yyyy\").parse(\"12-27-2018\").getDayOfMonth\n\
    \        val daysInMonth26 = DateTimeFormat.forPattern(\"MM-dd-yyyy\").parse(\"\
    12-26-2018\").getDayOfMonth\n        val daysInMonth25 = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\").parse(\"12-25-2018\").getDayOfMonth\n        val daysInMonth24 =\
    \ DateTimeFormat.forPattern(\"MM-dd-yyyy\").parse(\"12-24-2018\").getDayOfMonth\n\
    \        val daysInMonth23 = DateTimeFormat.forPattern(\"MM-dd-yyyy\").parse(\"\
    12-23-2018\").getDayOfMonth\n        val daysInMonth22 = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\").parse(\"12-22-2018\").getDayOfMonth\n        val daysInMonth21 =\
    \ DateTimeFormat.forPattern(\"MM-dd-yyyy\").parse(\"12-21-2018\").getDayOfMonth\n\
    \        val daysInMonth20 = DateTimeFormat.forPattern(\"MM-dd-yyyy\").parse(\"\
    12-20-2018\").getDayOfMonth\n        val daysInMonth19 = DateTimeFormat.forPattern(\"\
    MM-dd-yyyy\").parse(\"12-19-2018\").getDayOfMonth\n        val daysInMonth18 =\
    \ DateTimeFormat.forPattern(\"MM-dd-yyyy\").parse(\"12-18-2018\").getDayOfMonth\n\
    \        val daysInMonth17 = DateTimeFormat.forPattern(\"MM-dd-yyyy\").parse(\"\
    12-17-2018\").getDayOfMonth\n        val daysInMonth16 = DateTimeFormat.forPattern(\"\
    MM-dd-\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpip1zcoa_.scala:32:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth16\e[0m = DateTimeFormat.forPattern(\"\
    MM-dd-\n\e[31m\e[31m   |\e[0m                                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \  unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpip1zcoa_.scala:34:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpip1zcoa_.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpip1zcoa_.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"MM-dd-yyyy\"\e[0m).parse(\e[31m\"12-31-2018\"\e[0m).getDayOfMonth\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        Not found: DateTimeFormat\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpip1zcoa_.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth30\e[0m = DateTimeFormat.forPattern(\e\
    [31m\"MM-dd-yyyy\"\e[0m).parse(\e[31m\"12-30-2018\"\e[0m).getDayOfMonth\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: DateTimeFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available wh"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthDays\
    \ = monthDays(year, month)\n        val daysInMonth = daysInMonth(year, month)\n\
    \        val daysInYear = daysInYear(year, month)\n        val daysInLeapYear\
    \ = daysInLeapYear(year)\n        val daysInYearAndMonth = daysInYearAndMonth(year,\
    \ month)\n        val daysInLeapYearAndMonth = daysInLeapYearAndMonth(year)\n\
    \        val daysInYearAndMonthAndDay = daysInYearAndMonthAndDay(year, month)\n\
    \        val daysInLeapYearAndMonthAndDay = daysInLeapYearAndMonthAndDay(year)\n\
    \        val daysInYearAndMonthAndDayAndHour = daysInYearAndMonthAndDayAndHour(year,\
    \ month)\n        val daysInLeapYearAndMonthAndDayAndHour = daysInLeapYearAndMonthAndDayAndHour(year)\n\
    \        val daysInYearAndMonthAndDayAndHourAndMinute = daysInYearAndMonthAndDayAndHourAndMinute(year,\
    \ month)\n        val daysInLeapYearAndMonthAndDayAndHourAndMinute = daysInLeapYearAndMonthAndDayAndHourAndMinute(year)\n\
    \        val daysInYearAndMonthAndDayAndHourAndMinuteAndSecond = daysInYearAndMonthAndDayAndHourAndMinuteAndSecond(year,\
    \ month)\n        val daysInLeapYearAndMonthAndDayAndHourAndMinuteAndSecond =\
    \ daysInLeapYearAndMonthAndDayAndHourAndMinuteAndSecond(year)\n        val daysInYearAndMonthAndDayAndHourAndMinuteAndSecondAndMilliSecond\
    \ = daysInYearAndMonthAndDayAndHourAndMinuteAndSecondAndMilliSecond(year, month)\n\
    \        val daysInLeapYearAndMonthAndDayAndHourAndMinuteAndSecondAndMilliSecond\
    \ = daysInLeapYearAndMonthAndDayAndHourAndMinuteAndSecondAndMilliSecond(year)\n\
    \        val daysInYearAndMonthAndDayAndHourAndMinuteAndSecondAndMilliSecondAndMicroSecond\
    \ = daysInYearAndMonthAndDayAndHourAndMinuteAndSecondAndMilliSecondAndMicroSecond(year,\
    \ month)\n        val daysInLeapYearAndMonthAndDayAndHourAndMinuteAndSecondAndMilliSecondAndMicroSecond\
    \ = daysInLeapYearAndMonthAndDayAndHourAndMinuteAndSecondAndMilliSecondAndMicroSecond(year)\n\
    \        val daysInYearAndMonthAndDayAndHourAndMinuteAndSecondAndMilliSecondAndMicroSecond\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3s9wmj2i.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3s9wmj2i.scala:16:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthDays\e[0m = monthDays(year, month)\n\e[31m\e[31m   |\e[0m       \
    \                 ^\e[0m\n\e[31m   |\e[0m                        Recursive \e\
    [33mvalue\e[0m \e[35mmonthDays\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp3s9wmj2i.scala:17:26 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth(year,\
    \ month)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e\
    [0m                          Recursive \e[33mvalue\e[0m \e[35mdaysInMonth\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3s9wmj2i.scala:18:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInYear\e[0m = daysInYear(year, month)\n\e[31m\e[31m   |\e[0m     \
    \                    ^\e[0m\n\e[31m   |\e[0m                         Recursive\
    \ \e[33mvalue\e[0m \e[35mdaysInYear\e[0m needs type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp3s9wmj2i.scala:19:29 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdaysInLeapYear\e[0m = daysInLeapYear(year)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Recursive \e[33mvalue\e[0m \e[35mdaysInLeapYear\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3s9wmj2i.scala:20:33\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInYearAndMonth\e[0m = daysInYearAndMonth(year, month)\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\")\n        val dayArray\
    \ = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"13\",\"15\",\"17\"\
    ,\"19\",\"21\",\"23\",\"25\",\"27\",\"29\")\n        val yearArray = List(\"00\"\
    ,\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\"\
    ,\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\"\
    ,\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\")\n        val\
    \ monthCount = monthArray.count(monthArray.contains(month))\n        val dayCount\
    \ = dayArray.count(dayArray.contains(day))\n        val yearCount = yearArray.count(yearArray.contains(year))\n\
    \        val monthCountValid = monthCount > 0 && monthCount < 13\n        val\
    \ dayCountValid = dayCount > 0 && dayCount < 31\n        val yearCountValid =\
    \ yearCount > 0 && yearCount < 32\n        val dateValid = monthCountValid &&\
    \ dayCountValid && yearCountValid\n        dateValid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpujscaa04.scala:19:61\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmonthCount\e\
    [0m = monthArray.count(monthArray.contains(month))\n\e[31m\e[31m   |\e[0m    \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    Boolean\n\e[31m\
    \   |\e[0m                                          Required: \e[1m\e[32mString\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpujscaa04.scala:20:55\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdayCount\e\
    [0m = dayArray.count(dayArray.contains(day))\n\e[31m\e[31m   |\e[0m          \
    \                            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  Found:    Boolean\n\e[31m   |\e[0m        \
    \                              Required: \e[1m\e[32mString\e[0m\e[1m\e[32m \e\
    [0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpujscaa04.scala:21:58 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36myearCount\e[0m = yearArray.count(yearArray.contains(year))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    Boolean\n\
    \e[31m   |\e[0m                                        Required: \e[1m\e[32mString\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonths\
    \ = List(1,3,5,7,8,10,12)\n        val validDays = List(1,30,29,30)\n        val\
    \ validYear = List(1,12)\n        val validMonth = List(1,2)\n        val validDay\
    \ = List(1,31)\n        val validYearMonth = List(1,12)\n        val validYearDay\
    \ = List(1,31)\n        val validYearMonthDay = List(1,12)\n        val validYearDayMonth\
    \ = List(1,31)\n        val validYearMonthDayYear = List(1,12)\n        val validYearDayMonthYear\
    \ = List(1,31)\n        val validYearMonthDayYearMonth = List(1,12)\n        val\
    \ validYearDayMonthYearMonth = List(1,31)\n        val validYearMonthDayYearMonthYear\
    \ = List(1,12)\n        val validYearDayMonthYearMonthYear = List(1,31)\n    \
    \    val validYearMonthDayYearMonthYear = List(1,12)\n        val validYearDayMonthYearMonthYear\
    \ = List(1,31)\n        val validYearMonthDayYearMonthYear = List(1,12)\n    \
    \    val validYearDayMonthYearMonthYear = List(1,31)\n        val validYearMonthDayYearMonthYear\
    \ = List(1,12)\n        val validYearDayMonthYearMonthYear = List(1,31)\n    \
    \    val validYearMonthDayYearMonthYear = List(1,12)\n        val validYearDayMonthYearMonthYear\
    \ = List(1,31)\n        val validYearMonthDayYearMonthYear = List(1,12)\n    \
    \    val validYearDayMonthYearMonthYear = List(1,31)\n        val validYearMonthDayYearMonthYear\
    \ = List(1,12)\n        val validYearDayMonthYearMonthYear = List(1,31)\n    \
    \    val validYearMonthDayYearMonthYear = List(1,12)\n        val validYearDayMonthYearMonthYear\
    \ = List(1,31)\n        val validYearMonthDayYearMonthYear = List(1,12)\n    \
    \    val validYearDayMonthYearMonthYear = List(1,31)\n        val validYearMonthDayYearMonthYear\
    \ = List(1,12)\n        val validYearDayMonthYearMonthYear = List(1,31)\n    \
    \    val validYearMonthDayYearMonthYear = List(1,12)\n        val validYearDayMonthYearMonthYear\
    \ = List(1,31)\n        val validYearMonthDayYear\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9axxrdok.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9axxrdok.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvalidYearMonthDayYearMonthYear\e[0m = List(\e[31m1\e[0m,\e[31m12\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearMonthDayYearMonthYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearMonthDayYearMonthYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9axxrdok.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mvalidYearDayMonthYearMonthYear\e\
    [0m = List(\e[31m1\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearDayMonthYearMonthYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearDayMonthYearMonthYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9axxrdok.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvalidYearMonthDayYearMonthYear\e\
    [0m = List(\e[31m1\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearMonthDayYearMonthYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearMonthDayYearMonthYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9axxrdok.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvalidYearDayMonthYearMonthYear\e\
    [0m = List(\e[31m1\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val daysInMonth\
    \ = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val isLeapYear = scala.util.Calendar.getInstance.isLeapYear(year)\n \
    \       val isLeapYear2 = scala.util.Calendar.getInstance.isLeapYear(year)\n \
    \       val isLeapYear3 = scala.util.Calendar.getInstance.isLeapYear(year)\n \
    \       val isLeapYear4 = scala.util.Calendar.getInstance.isLeapYear(year)\n \
    \       val isLeapYear5 = scala.util.Calendar.getInstance.isLeapYear(year)\n \
    \       val isLeapYear6 = scala.util.Calendar.getInstance.isLeapYear(year)\n \
    \       val isLeapYear7 = scala.util.Calendar.getInstance.isLeapYear(year)\n \
    \       val isLeapYear8 = scala.util.Calendar.getInstance.isLeapYear(year)\n \
    \       val isLeapYear9 = scala.util.Calendar.getInstance.isLeapYear(year)\n \
    \       val isLeapYear10 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear11 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear12 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear13 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear14 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear15 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear16 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear17 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear18 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear19 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear20 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear21 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear22 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear23 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear24 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear25 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear26 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear27 = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \        val isLeapYear\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1hp6njrn.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1hp6njrn.scala:16:37\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1hp6njrn.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value Calendar is not a member of util\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1hp6njrn.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36misLeapYear\e[0m = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1hp6njrn.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLeapYear2\e[0m = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1hp6njrn.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLeapYear3\e[0m = scala.util.Calendar.getInstance.isLeapYear(year)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /"
  stdout: ''
  timestamp: 1660010139
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n            if(day <= 31 && day >= 1) {\n               \
    \ return true\n            }\n        }\n        if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n            if(day <= 30 && day >= 1) {\n    \
    \            return true\n            }\n        }\n        if(month == 2) {\n\
    \            if(day <= 29 && day >= 1) {\n                return true\n      \
    \      }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmp1adw9__n.scala:13)\n\
    \tat Problem$.main(tmp1adw9__n.scala:40)\n\tat Problem.main(tmp1adw9__n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n    \
    \    val yearArray = List(1, 12)\n        val monthCheck = monthArray.contains(month)\n\
    \        val dayCheck = dayArray.contains(day)\n        val yearCheck = yearArray.contains(year)\n\
    \        val monthCheck2 = monthArray.contains(month + 1)\n        val dayCheck2\
    \ = dayArray.contains(day + 1)\n        val yearCheck2 = yearArray.contains(year\
    \ + 1)\n        val monthCheck3 = monthArray.contains(month + 3)\n        val\
    \ dayCheck3 = dayArray.contains(day + 3)\n        val yearCheck3 = yearArray.contains(year\
    \ + 3)\n        val monthCheck4 = monthArray.contains(month + 5)\n        val\
    \ dayCheck4 = dayArray.contains(day + 5)\n        val yearCheck4 = yearArray.contains(year\
    \ + 5)\n        val monthCheck5 = monthArray.contains(month + 7)\n        val\
    \ dayCheck5 = dayArray.contains(day + 7)\n        val yearCheck5 = yearArray.contains(year\
    \ + 7)\n        val monthCheck6 = monthArray.contains(month + 8)\n        val\
    \ dayCheck6 = dayArray.contains(day + 8)\n        val yearCheck6 = yearArray.contains(year\
    \ + 8)\n        val monthCheck7 = monthArray.contains(month + 10)\n        val\
    \ dayCheck7 = dayArray.contains(day + 10)\n        val yearCheck7 = yearArray.contains(year\
    \ + 10)\n        val monthCheck8 = monthArray.contains(month + 12)\n        val\
    \ dayCheck8 = dayArray.contains(day + 12)\n        val yearCheck8 = yearArray.contains(year\
    \ + 12)\n        val monthCheck9 = monthArray.contains(month + 4)\n        val\
    \ dayCheck9 = dayArray.contains(day + 4)\n        val yearCheck9 = yearArray.contains(year\
    \ + 4)\n        val monthCheck10 = monthArray.contains(month + 6)\n        val\
    \ dayCheck10 = dayArray.contains(day + 6)\n        val yearCheck10 = yearArray.contains(year\
    \ + 6)\n        val monthCheck11 = monthArray.contains(month + 9)\n        val\
    \ dayCheck11 = dayArray.contains(day + 9)\n        val yearCheck11 = yearArray.contains(year\
    \ + 9)\n        val monthCheck12 = monthArray.contains(month + 11)\n        val\
    \ dayCheck12 = dayArray.contains(day + 11)\n        val yearCheck12 = yearArray.contains(year\
    \ + 11)\n        val monthCheck13 = monthArray.contains(month + 3)\n        val\
    \ dayCheck13 = \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptluuadpe.scala:56:24 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mdayCheck13\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptluuadpe.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvljz8u0h.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3)\n            return false\n\
    \        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(month < 1 || month > 12)\n\
    \            return false\n        if(day < 1 || day > 31)\n            return\
    \ false\n        if(month == 2)\n            if(day > 29)\n                return\
    \ false\n        else\n            if(day > 30)\n                return false\n\
    \        if(year < 1900)\n            return false\n        true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val months\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val days = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsWithDays = Array(4,6,9,11)\n        val daysWithMonths = Array(29,30)\n\
    \        val monthWithDays = Array(1,3,5,7,8,10,12)\n        val daysWithMonth\
    \ = Array(29,30)\n        val monthWithDay = Array(1,3,5,7,8,10,12)\n        val\
    \ daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = Array(29,30)\n        val daysWithMonth = Array(1,3,5,7,8,10,12)\n\
    \        val daysWithMonths = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi6aumn0a.scala:53:28 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mdaysWithMonths\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi6aumn0a.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdaysWithMonths\e[0m = Array(\e\
    [31m29\e[0m,\e[31m30\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysWithMonths is already defined as \e[33mvalue\e[0m \e[35mdaysWithMonths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi6aumn0a.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mdaysWithMonth\e[0m = Array(\e[31m1\e\
    [0m,\e[31m3\e[0m,\e[31m5\e[0m,\e[31m7\e[0m,\e[31m8\e[0m,\e[31m10\e[0m,\e[31m12\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysWithMonth is already defined as \e[33mvalue\e[0m \e[35mdaysWithMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi6aumn0a.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mdaysWithMonths\e[0m = Array(\e[31m29\e\
    [0m,\e[31m30\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysWithMonths is already defined as \e[33mvalue\e[0m \e[35mdaysWithMonths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi6aumn0a.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mdaysWithMonth\e[0m = Array(\e[31m1\e\
    [0m,\e[31m3\e[0m,\e[31m5\e[0m,\e[31m7\e[0m,\e[31m8\e[0m,\e"
  stdout: ''
  timestamp: 1660010145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val months\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val daysNotValid = List(1, 30, 29)\n\
    \        val daysNotValidForMonth = List(1, 30)\n        val daysNotValidForYear\
    \ = List(1, 29)\n        val monthNotValid = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForMonth\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n        val monthNotValidForYear\
    \ = 12\n        val monthNotValidForDay = 12\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu6sl_oth.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmonthNotValidForDay\e[0m\
    \ = \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthNotValidForDay is already defined as \e[33mvalue\e[0m\
    \ \e[35mmonthNotValidForDay\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu6sl_oth.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmonthNotValidForYear\e[0m\
    \ = \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthNotValidForYear is already defined as \e[33mvalue\e[0m\
    \ \e[35mmonthNotValidForYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu6sl_oth.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmonthNotValidForDay\e[0m\
    \ = \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthNotValidForDay is already defined as \e[33mvalue\e[0m\
    \ \e[35mmonthNotValidForDay\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu6sl_oth.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmonthNotValidForYear\e[0m\
    \ = \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthNotValidForYear is already defined as \e[33mvalue\e[0m\
    \ \e[35mmonthNotValidForYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu6sl_oth.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmonthNotValidForDay\e[0m\
    \ = \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1660010145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        val validDay = dayIndex\
    \ != -1 && monthIndex != -1 && yearIndex != -1\n        val validMonth = monthIndex\
    \ != -1 && dayIndex != -1 && yearIndex != -1\n        val validYear = monthIndex\
    \ != -1 && dayIndex != -1 && yearIndex != -1\n        val validDate = validDay\
    \ && validMonth && validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6axt2db9.scala:29)\n\tat Problem.main(tmp6axt2db9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010148
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonth\
    \ = month >= 1 && month <= 12\n        val validDay = day >= 1 && day <= 31\n\
    \        val validYear = year >= 1 && year <= 9999\n        val validDate = validMonth\
    \ && validDay && validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmpxxjh2ws8.scala:13)\n\
    \tat Problem$.main(tmpxxjh2ws8.scala:29)\n\tat Problem.main(tmpxxjh2ws8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,31,30,29,28)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppsevzw4x.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmppsevzw4x.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,30,29,28,27,26,25)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5h9m4mg0.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5h9m4mg0.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val dateFormat\
    \ = \"MM-dd-yyyy\"\n        val dateFormat1 = \"dd-MM-yyyy\"\n        val dateFormat2\
    \ = \"MM-yyyy\"\n        val dateFormat3 = \"yyyy\"\n        val dateFormat4 =\
    \ \"dd-yyyy\"\n        val dateFormat5 = \"MM-dd\"\n        val dateFormat6 =\
    \ \"dd-MM\"\n        val dateFormat7 = \"MM\"\n        val dateFormat8 = \"dd\"\
    \n        val dateFormat9 = \"yyyy\"\n        val dateFormat10 = \"dd-yyyy\"\n\
    \        val dateFormat11 = \"MM-dd-yyyy\"\n        val dateFormat12 = \"dd-MM-yyyy\"\
    \n        val dateFormat13 = \"MM-yyyy\"\n        val dateFormat14 = \"yyyy\"\n\
    \        val dateFormat15 = \"dd-yyyy\"\n        val dateFormat16 = \"MM-dd\"\n\
    \        val dateFormat17 = \"dd-MM\"\n        val dateFormat18 = \"MM\"\n   \
    \     val dateFormat19 = \"dd\"\n        val dateFormat20 = \"yyyy\"\n       \
    \ val dateFormat21 = \"dd-yyyy\"\n        val dateFormat22 = \"MM-dd\"\n     \
    \   val dateFormat23 = \"dd-MM\"\n        val dateFormat24 = \"MM\"\n        val\
    \ dateFormat25 = \"dd\"\n        val dateFormat26 = \"yyyy\"\n        val dateFormat27\
    \ = \"dd-yyyy\"\n        val dateFormat28 = \"MM-dd\"\n        val dateFormat29\
    \ = \"dd-MM\"\n        val dateFormat30 = \"MM\"\n        val dateFormat31 = \"\
    dd\"\n        val dateFormat32 = \"yyyy\"\n        val dateFormat33 = \"dd-yyyy\"\
    \n        val dateFormat34 = \"MM-dd\"\n        val dateFormat35 = \"dd-MM\"\n\
    \        val dateFormat36 = \"MM\"\n        val dateFormat37 = \"dd\"\n      \
    \  val dateFormat38 = \"yyyy\"\n        val dateFormat39 = \"dd-yyyy\"\n     \
    \   val dateFormat40 = \"MM-dd\"\n        val dateFormat41 = \"dd-MM\"\n     \
    \   val dateFormat42 = \"MM\"\n        val dateFormat43 = \"dd\"\n        val\
    \ dateFormat44 = \"yyyy\"\n        val dateFormat45 = \"dd-yyyy\"\n        val\
    \ dateFormat46 = \"MM-dd\"\n        val dateFormat47 = \"dd-MM\"\n        val\
    \ dateFormat48 = \"MM\"\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpt5tg359t.scala:65:11 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt5tg359t.scala:66:5 ---------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010148
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonth\
    \ = month >= 1 && month <= 12\n        val validDay = day >= 1 && day <= 31\n\
    \        val validYear = year >= 1 && year <= 9999\n        val validDate = validMonth\
    \ && validDay && validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmpxxjh2ws8.scala:13)\n\
    \tat Problem$.main(tmpxxjh2ws8.scala:29)\n\tat Problem.main(tmpxxjh2ws8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n    \
    \    val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        val valid = monthIndex\
    \ != -1 && dayIndex != -1 && yearIndex != -1\n        valid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjv40om8.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36myearIndex\e[0m = yearArray.indexOf(year)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Not found: yearArray\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        val year = dateArray.getYear\n        val month = dateArray.getMonthValue\n\
    \        val day = dateArray.getDayOfMonth\n        val dateArray2 = new Array[Int](12)\n\
    \        dateArray2(month - 1) = day\n        dateArray2(month) = day\n      \
    \  dateArray2(month + 1) = day\n        dateArray2(month + 3) = day\n        dateArray2(month\
    \ + 5) = day\n        dateArray2(month + 7) = day\n        dateArray2(month +\
    \ 8) = day\n        dateArray2(month + 10) = day\n        dateArray2(month + 12)\
    \ = day\n        val dateArray3 = dateArray2.map(x => if (x < 1 || x > 31) 0 else\
    \ 1)\n        val dateArray4 = dateArray3.map(x => if (x < 1 || x > 30) 0 else\
    \ 1)\n        val dateArray5 = dateArray4.map(x => if (x < 1 || x > 29) 0 else\
    \ 1)\n        val dateArray6 = dateArray5.map(x => if (x < 1 || x > 12) 0 else\
    \ 1)\n        val dateArray7 = dateArray6.map(x => if (x < 1 || x > 31) 0 else\
    \ 1)\n        val dateArray8 = dateArray7.map(x => if (x < 1 || x > 30) 0 else\
    \ 1)\n        val dateArray9 = dateArray8.map(x => if (x < 1 || x > 29) 0 else\
    \ 1)\n        val dateArray10 = dateArray9.map(x => if (x < 1 || x > 12) 0 else\
    \ 1)\n        val dateArray11 = dateArray10.map(x => if (x < 1 || x > 31) 0 else\
    \ 1)\n        val dateArray12 = dateArray11.map(x => if (x < 1 || x > 30) 0 else\
    \ 1)\n        val dateArray13 = dateArray12.map(x => if (x < 1 || x > 29) 0 else\
    \ 1)\n        val dateArray14 = dateArray13.map(x => if (x < 1 || x > 12) 0 else\
    \ 1)\n        val dateArray15 = dateArray14.map(x => if (x < 1 || x > 31) 0 else\
    \ 1)\n        val dateArray16 = dateArray15.map(x => if (x < 1 || x > 30) 0 else\
    \ 1)\n        val dateArray17 = dateArray16.map(x => if (x < 1 || x > 29) 0 else\
    \ 1)\n        val dateArray18 = dateArray17.map(x => if (x < 1 || x > 12) 0 else\
    \ 1)\n        val dateArray19 = dateArray18.map(x => if (x < 1 || x > 31) 0 else\
    \ 1)\n        val dateArray20 = dateArray19.map(x => if (x < \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphz3lg5ve.scala:44:54 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mdateArray20\e[0m = dateArray19.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x < \n\e[31m\e[31m   |\e[0m                     \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphz3lg5ve.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphz3lg5ve.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val months\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val daysNotLessThan1OrHigherThan31 =\
    \ List(4, 6, 9, 11)\n        val daysNotLessThan1OrHigherThan30 = List(29, 30)\n\
    \        val daysNotLessThan1OrHigherThan29 = List(2, 29)\n        val monthNotLessThan1OrHigherThan12\
    \ = List(12)\n        val dateNotInTheFormat = List(\"01-31-2015\", \"01-31-2016\"\
    , \"01-31-2017\", \"01-31-2018\", \"01-31-2019\", \"01-31-2020\", \"01-31-2021\"\
    , \"01-31-2022\", \"01-31-2023\", \"01-31-2024\", \"01-31-2025\", \"01-31-2026\"\
    , \"01-31-2027\", \"01-31-2028\", \"01-31-2029\", \"01-31-2030\", \"01-31-2031\"\
    , \"01-31-2032\", \"01-31-2033\", \"01-31-2034\", \"01-31-2035\", \"01-31-2036\"\
    , \"01-31-2037\", \"01-31-2038\", \"01-31-2039\", \"01-31-2040\", \"01-31-2041\"\
    , \"01-31-2042\", \"01-31-2043\", \"01-31-2044\", \"01-31-2045\", \"01-31-2046\"\
    , \"01-31-2047\", \"01-31-2048\", \"01-31-2049\", \"01-31-2051\", \"01-31-2052\"\
    , \"01-31-2053\", \"01-31-2054\", \"01-31-2055\", \"01-31-2056\", \"01-31-2057\"\
    , \"01-31-2058\", \"01-31-2059\", \"01-31-2060\", \"01-31-2061\", \"01-31-2062\"\
    , \"01-31-2063\", \"01-31-2064\", \"01-31-2065\", \"01-31-2066\", \"01-31-2067\"\
    , \"01-31-2068\", \"01-31-2069\", \"01-31-2070\", \"01-31-2071\", \"01-31-2072\"\
    , \"01-31-2073\", \"01-31-2074\", \"01-31-2075\", \"01-31-2076\", \"01-31-2077\"\
    , \"01-31-2078\", \"01-31-2079\", \"01\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps94x8hax.scala:21:934 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdateNotInTheFormat\e[0m\
    \ = List(\e[31m\"01-31-2015\"\e[0m, \e[31m\"01-31-2016\"\e[0m, \e[31m\"01-31-2017\"\
    \e[0m, \e[31m\"01-31-2018\"\e[0m, \e[31m\"01-31-2019\"\e[0m, \e[31m\"01-31-2020\"\
    \e[0m, \e[31m\"01-31-2021\"\e[0m, \e[31m\"01-31-2022\"\e[0m, \e[31m\"01-31-2023\"\
    \e[0m, \e[31m\"01-31-2024\"\e[0m, \e[31m\"01-31-2025\"\e[0m, \e[31m\"01-31-2026\"\
    \e[0m, \e[31m\"01-31-2027\"\e[0m, \e[31m\"01-31-2028\"\e[0m, \e[31m\"01-31-2029\"\
    \e[0m, \e[31m\"01-31-2030\"\e[0m, \e[31m\"01-31-2031\"\e[0m, \e[31m\"01-31-2032\"\
    \e[0m, \e[31m\"01-31-2033\"\e[0m, \e[31m\"01-31-2034\"\e[0m, \e[31m\"01-31-2035\"\
    \e[0m, \e[31m\"01-31-2036\"\e[0m, \e[31m\"01-31-2037\"\e[0m, \e[31m\"01-31-2038\"\
    \e[0m, \e[31m\"01-31-2039\"\e[0m, \e[31m\"01-31-2040\"\e[0m, \e[31m\"01-31-2041\"\
    \e[0m, \e[31m\"01-31-2042\"\e[0m, \e[31m\"01-31-2043\"\e[0m, \e[31m\"01-31-2044\"\
    \e[0m, \e[31m\"01-31-2045\"\e[0m, \e[31m\"01-31-2046\"\e[0m, \e[31m\"01-31-2047\"\
    \e[0m, \e[31m\"01-31-2048\"\e[0m, \e[31m\"01-31-2049\"\e[0m, \e[31m\"01-31-2051\"\
    \e[0m, \e[31m\"01-31-2052\"\e[0m, \e[31m\"01-31-2053\"\e[0m, \e[31m\"01-31-2054\"\
    \e[0m, \e[31m\"01-31-2055\"\e[0m, \e[31m\"01-31-2056\"\e[0m, \e[31m\"01-31-2057\"\
    \e[0m, \e[31m\"01-31-2058\"\e[0m, \e[31m\"01-31-2059\"\e[0m, \e[31m\"01-31-2060\"\
    \e[0m, \e[31m\"01-31-2061\"\e[0m, \e[31m\"01-31-2062\"\e[0m, \e[31m\"01-31-2063\"\
    \e[0m, \e[31m\"01-31-2064\"\e[0m, \e[31m\"01-31-2065\"\e[0m, \e[31m\"01-31-2066\"\
    \e[0m, \e[31m\"01-31-2067\"\e[0m, \e[31m\"01-31-2068\"\e[0m, \e[31m\"01-31-2069\"\
    \e[0m, \e[31m\"01-31-2070\"\e[0m, \e[31m\"01-31-2071\"\e[0m, \e[31m\"01-31-2072\"\
    \e[0m, \e[31m\"01-31-2073\"\e[0m, \e[31m\"01-31-2074\"\e[0m, \e[31m\"01-31-2075\"\
    \e[0m, \e[31m\"01-31-2076\"\e[0m, \e[31m\"01-31-2077\"\e[0m, \e[31m\"01-31-2078\"\
    \e[0m, \e[31m\"01-31-2079\"\e[0m, \"01\n\e[31m\e[31m   |\e[0m                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                  "
  stdout: ''
  timestamp: 1660010147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val dateFormat\
    \ = \"MM-dd-yyyy\"\n        val dateFormat1 = \"dd-MM-yyyy\"\n        val dateFormat2\
    \ = \"MM-yyyy\"\n        val dateFormat3 = \"yyyy\"\n        val dateFormat4 =\
    \ \"dd-yyyy\"\n        val dateFormat5 = \"MM-dd-yyyy\"\n        val dateFormat6\
    \ = \"dd-MM-yyyy\"\n        val dateFormat7 = \"MM-yyyy\"\n        val dateFormat8\
    \ = \"yyyy\"\n        val dateFormat9 = \"dd-yyyy\"\n        val dateFormat10\
    \ = \"MM-dd-yyyy\"\n        val dateFormat11 = \"dd-MM-yyyy\"\n        val dateFormat12\
    \ = \"MM-yyyy\"\n        val dateFormat13 = \"yyyy\"\n        val dateFormat14\
    \ = \"dd-yyyy\"\n        val dateFormat15 = \"MM-dd-yyyy\"\n        val dateFormat16\
    \ = \"dd-MM-yyyy\"\n        val dateFormat17 = \"MM-yyyy\"\n        val dateFormat18\
    \ = \"yyyy\"\n        val dateFormat19 = \"dd-yyyy\"\n        val dateFormat20\
    \ = \"MM-dd-yyyy\"\n        val dateFormat21 = \"dd-MM-yyyy\"\n        val dateFormat22\
    \ = \"MM-yyyy\"\n        val dateFormat23 = \"yyyy\"\n        val dateFormat24\
    \ = \"dd-yyyy\"\n        val dateFormat25 = \"MM-dd-yyyy\"\n        val dateFormat26\
    \ = \"dd-MM-yyyy\"\n        val dateFormat27 = \"MM-yyyy\"\n        val dateFormat28\
    \ = \"yyyy\"\n        val dateFormat29 = \"dd-yyyy\"\n        val dateFormat30\
    \ = \"MM-dd-yyyy\"\n        val dateFormat31 = \"dd-MM-yyyy\"\n        val dateFormat32\
    \ = \"MM-yyyy\"\n        val dateFormat33 = \"yyyy\"\n        val dateFormat34\
    \ = \"dd-yyyy\"\n        val dateFormat35 = \"MM-dd-yyyy\"\n        val dateFormat36\
    \ = \"dd-MM-yyyy\"\n        val dateFormat37 = \"MM-yyyy\"\n        val dateFormat38\
    \ = \"yyyy\"\n        val dateFormat39 = \"dd-yyyy\"\n        val dateFormat40\
    \ = \"MM-dd-yyyy\"\n        val dateFormat41 = \"dd-MM-yyyy\"\n        val dateFormat42\
    \ = \"MM-yyyy\"\n        val dateFormat43 = \"yyyy\"\n        val dateFormat44\
    \ = \"dd-yyyy\"\n        val dateFormat45 = \"MM-dd-yyyy\"\n        val dateFormat46\
    \ = \"dd-MM-yyyy\"\n        val \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpv2_e4eba.scala:63:11 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv2_e4eba.scala:64:5 ---------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val currentDate = new Date();\n        val currentYear = currentDate.getYear;\n\
    \        val currentMonth = currentDate.getMonth;\n        val currentDay = currentDate.getDay;\n\
    \        val currentDayInMonth = currentDate.getDay;\n        val currentDayInMonthInYear\
    \ = currentDayInMonth;\n        val currentDayInMonthInYearInYear = currentDayInMonthInYear;\n\
    \        val currentDayInMonthInYearInYearInYear = currentDayInMonthInYearInYear;\n\
    \        val currentDayInMonthInYearInYearInYearInYear = currentDayInMonthInYearInYearInYear;\n\
    \        val currentDayInMonthInYearInYearInYearInYearInYear = currentDayInMonthInYearInYearInYearInYear;\n\
    \        val currentDayInMonthInYearInYearInYearInYearInYear = currentDayInMonthInYearInYearInYearInYearInYear;\n\
    \        val currentDayInMonthInYearInYearInYearInYearInYearInYear = currentDayInMonthInYearInYearInYearInYearInYearInYear;\n\
    \        val currentDayInMonthInYearInYearInYearInYearInYearInYearInYear = currentDayInMonthInYearInYearInYearInYearInYearInYearInYear;\n\
    \        val currentDayInMonthInYearInYearInYearInYearInYearInYearInYearInYear\
    \ = currentDayInMonthInYearInYearInYearInYearInYearInYearInYearInYear;\n     \
    \   val currentDayInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYear\
    \ = currentDayInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear;\n\
    \        val currentDayInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear\
    \ = currentDayInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYearInYearInYear;\n\
    \        val currentDayInMonthInYearInYearInYearInYearInYearInYearInYearInYearInYear\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpufih3dfn.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpufih3dfn.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcurrentDayInMonthInYearInYearInYearInYearInYear\e[0m = currentDayInMonthInYearInYearInYearInYearInYear;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentDayInMonthInYearInYearInYearInYearInYear is already\
    \ defined as \e[33mvalue\e[0m \e[35mcurrentDayInMonthInYearInYearInYearInYearInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpufih3dfn.scala:16:29 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e[0m \e\
    [35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                  Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpufih3dfn.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcurrentDate\e[0m = \e[33mnew\e\
    [0m \e[35mDate\e[0m();\n\e[31m\e[31m   |\e[0m                              ^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: type Date\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpufih3dfn.scala:29:68 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mcurrentDayInMonthInYearInYearInYearInYearInYearInYear\e\
    [0m = currentDayInMonthInYearInYearInYearInYearInYearInYear;\n\e[31m\e[31m   |\e\
    [0m                                                                    ^\e[0m\n\
    \e[31m   |\e[0mRecursive "
  stdout: ''
  timestamp: 1660010148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        if(dateString.toString().isEmpty) {\n            return false\n     \
    \   }\n        val dateArray = dateString.toString.split(\"-\")\n        if(dateArray.length\
    \ != 3) {\n            return false\n        }\n        val monthArray = dateArray(0).toString.split(\"\
    -\")\n        if(monthArray.length != 2) {\n            return false\n       \
    \ }\n        val dayArray = dateArray(1).toString.split(\"-\")\n        if(dayArray.length\
    \ != 2) {\n            return false\n        }\n        val month1 = monthArray(0).toInt\n\
    \        val month2 = monthArray(1).toInt\n        val day1 = dayArray(0).toInt\n\
    \        val day2 = dayArray(1).toInt\n        if(month1 < 1 || month1 > 12 ||\
    \ month2 < 1 || month2 > 12 || day1 < 1 || day1 > 31 || day2 < 1 || day2 > 30)\
    \ {\n            return false\n        }\n        if(month1 == 2 && day1 > 29)\
    \ {\n            return false\n        }\n        if(month1 == 2 && day1 < 1)\
    \ {\n            return false\n        }\n        if(month1 == 3 && day1 > 31)\
    \ {\n            return false\n        }\n        if(month1 == 3 && day1 < 1)\
    \ {\n            return false\n        }\n        if(month1 == 4 && day1 > 30)\
    \ {\n            return false\n        }\n        if(month1 == 4 && day1 < 1)\
    \ {\n            return false\n        }\n        if(month1 == 5 && day1 > 31)\
    \ {\n            return false\n        }\n        if(month1 == 5 && day1 < 1)\
    \ {\n            return false\n        }\n        if(month1 == 6 && day1 > 30)\
    \ {\n            return false\n        }\n        if(month1 == 6 && day1 < 1)\
    \ {\n            return false\n        }\n        if(month1 == 7 && day1 > 31)\
    \ {\n            return false\n        }\n        if(month1 == 7 && day1 < 1)\
    \ {\n            return false\n        }\n        if(month1 == 8 && day1 > 31)\
    \ {\n            return false\n        }\n        if(month1 == 8 && day1 < 1)\
    \ {\n            return false\n        }\n        if(month1 == 9 && day1 > 30)\
    \ {\n            return false\n        }\n        if(month1 == 9 && day1 < 1)\
    \ {\n            return false\n        }\n        if(month1 == 10 && day1 > 31)\
    \ {\n            return false\n        }\n        if(month1 == 10 && day1 < 1)\
    \ {\n            return false\n        }\n        if(month1 == 11 && day1 > 30)\
    \ {\n            return false\n        }\n        if(month1 == 11 && day1 < 1)\
    \ {\n            return false\n        }\n        if(month1 == 12 && day1 > 31)\
    \ {\n            return false\n        }\n        if(month1 == 12 && day1 < 1)\
    \ {\n            return false\n        }\n        return true\n    }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp6nb1uln.scala:124:0 ---------------------------\e\
    [0m\e[0m\n\e[31m124 |\e[0m}\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0meof\
    \ expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6nb1uln.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6nb1uln.scala:106:11\
    \ -----------------------\e[0m\e[0m\n\e[31m106 |\e[0m    assert(validDate((\e\
    [31m\"03-11-2000\"\e[0m)) == (\e[31mtrue\e[0m));\n\e[31m\e[31m    |\e[0m     \
    \      ^^^^^^^^^\e[0m\n\e[31m    |\e[0m           Not found: validDate\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6nb1uln.scala:107:11\
    \ -----------------------\e[0m\e[0m\n\e[31m107 |\e[0m    assert(validDate((\e\
    [31m\"15-01-2012\"\e[0m)) == (\e[31mfalse\e[0m));\n\e[31m\e[31m    |\e[0m    \
    \       ^^^^^^^^^\e[0m\n\e[31m    |\e[0m           Not found: validDate\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6nb1uln.scala:108:11\
    \ -----------------------\e[0m\e[0m\n\e[31m108 |\e[0m    assert(validDate((\e\
    [31m\"04-0-2040\"\e[0m)) == (\e[31mfalse\e[0m));\n\e[31m\e[31m    |\e[0m     \
    \      ^^^^^^^^^\e[0m\n\e[31m    |\e[0m           Not found: validDate\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6nb1uln.scala:109:11\
    \ -----------------------\e[0m\e[0m\n\e[31m109 |\e[0m    assert(validDate((\e\
    [31m\"06-04-2020\"\e[0m)) == (\e[31mtrue\e[0m));\n\e[31m\e[31m    |\e[0m     \
    \      ^^^^^^^^^\e[0m\n\e[31m    |\e[0m           Not found: validDate\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when com"
  stdout: ''
  timestamp: 1660010145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n    \
    \    val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        val validMonth = monthIndex\
    \ >= 0 && monthIndex < 12\n        val validDay = dayIndex >= 0 && dayIndex <\
    \ 30\n        val validYear = yearIndex >= 0 && yearIndex < 100\n        val validDate\
    \ = validMonth && validDay && validYear\n        validDate\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1wzyh8_.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36myearIndex\e[0m = yearArray.indexOf(year)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Not found: yearArray\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3)\n            return false\n\
    \        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n\
    \            return false\n        if(days < 1 || days > 31)\n            return\
    \ false\n        if(months == 2 && days > 29)\n            return false\n    \
    \    if(months == 2 && days == 29)\n            return false\n        if(months\
    \ == 3 && days > 30)\n            return false\n        if(months == 3 && days\
    \ == 30)\n            return false\n        if(months == 4 && days > 31)\n   \
    \         return false\n        if(months == 4 && days == 31)\n            return\
    \ false\n        if(months == 5 && days > 30)\n            return false\n    \
    \    if(months == 5 && days == 30)\n            return false\n        if(months\
    \ == 6 && days > 31)\n            return false\n        if(months == 6 && days\
    \ == 31)\n            return false\n        if(months == 7 && days > 30)\n   \
    \         return false\n        if(months == 7 && days == 30)\n            return\
    \ false\n        if(months == 8 && days > 31)\n            return false\n    \
    \    if(months == 8 && days == 31)\n            return false\n        if(months\
    \ == 9 && days > 30)\n            return false\n        if(months == 9 && days\
    \ == 30)\n            return false\n        if(months == 10 && days > 31)\n  \
    \          return false\n        if(months == 10 && days == 31)\n            return\
    \ false\n        if(months == 11 && days > 30)\n            return false\n   \
    \     if(months == 11 && days == 30)\n            return false\n        if(months\
    \ == 12 && days > 31)\n            return false\n        if(months == 12 && days\
    \ == 31)\n            return true\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9zeyxr97.scala:64:8\
    \ ---------------------\e[0m\e[0m\n\e[31m64 |\e[0m        \e[33mif\e[0m(months\
    \ == \e[31m12\e[0m && days == \e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m65 |\e[0m            \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7inkzthe.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\
    \ 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,\
    \ 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,\
    \ 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,\
    \ 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,\
    \ 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,\
    \ 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,\
    \ 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,\
    \ 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,\
    \ 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124,\
    \ 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137,\
    \ 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150,\
    \ 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163,\
    \ 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176,\
    \ 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189,\
    \ 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202,\
    \ 2203, 2204, 2205, 2206, 220\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgn7zg0oj.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgn7zg0oj.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010149
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29, 31)\n\
    \        val yearArray = List(1, 12, 9999)\n        if(monthArray.contains(month)\
    \ && dayArray.contains(day) && yearArray.contains(year)) {\n            true\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp09j3ifnn.scala:26)\n\tat Problem.main(tmp09j3ifnn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthDays\
    \ = months * 30 + days\n        val monthYears = months * 12 + year\n        val\
    \ monthYearsDays = monthYears * 30 + days\n        val monthYearsDaysMonths =\
    \ monthYearsDays * 12\n        val monthYearsDaysMonthsMonths = monthYearsDaysMonths\
    \ * 12\n        val monthYearsDaysMonthsMonthsMonths = monthYearsDaysMonthsMonths\
    \ * 12\n        val monthYearsDaysMonthsMonthsMonthsMonthsMonths = monthYearsDaysMonthsMonthsMonthsMonths\
    \ * 12\n        val monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonths =\
    \ monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonths * 12\n        val monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\
    \ = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\
    \ * 12\n        val monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\
    \ = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\n\
    \        val monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\
    \ = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsehs8p46.scala:22:59 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmonthYearsDaysMonthsMonthsMonthsMonthsMonths\e\
    [0m = monthYearsDaysMonthsMonthsMonthsMonths * \e[31m12\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: monthYearsDaysMonthsMonthsMonthsMonths\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsehs8p46.scala:23:71\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmonthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonths\e[0m = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonths\
    \ * \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           Not found: monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonths\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsehs8p46.scala:24:89\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\e\
    [0m = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\
    \ * \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \                                                    ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mmonthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsehs8p46.scala:25:101\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mmonthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonthsMonths\e\
    [0m = monthYearsDaysMonthsMonthsMonthsMonthsMonthsMonthsMonth"
  stdout: ''
  timestamp: 1660010148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        dateString != null && dateString.toString().length != 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbx6ho_em.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        dateString != null && dateString.toString().length != 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbx6ho_em.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        dateString.toString().length != 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi7danwbo.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010147
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3) {\n            return\
    \ false\n        }\n        val month = dateArray(0).toInt\n        val day =\
    \ dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if(month\
    \ < 1 || month > 12) {\n            return false\n        }\n        if(day <\
    \ 1 || day > 31) {\n            return false\n        }\n        if(month == 2)\
    \ {\n            if(day > 29) {\n                return false\n            }\n\
    \        }\n        if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n            if(day > 30) {\n  \
    \              return false\n            }\n        }\n        if(month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n            if(day > 31) {\n   \
    \             return false\n            }\n        }\n        true\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo7pf_rkx.scala:50)\n\tat Problem.main(tmpo7pf_rkx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010155
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n            if(day >= 1 && day <= 31) {\n               \
    \ return true\n            }\n        }\n        if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n            if(day >= 1 && day <= 30) {\n    \
    \            return true\n            }\n        }\n        if(month == 2) {\n\
    \            if(day >= 1 && day <= 29) {\n                return true\n      \
    \      }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmpxm03ftxr.scala:13)\n\
    \tat Problem$.main(tmpxm03ftxr.scala:40)\n\tat Problem.main(tmpxm03ftxr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        dateString != null && dateString.toString.length != 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpicw2j_ap.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        dateString != null && dateString.length != 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdf0xgn88.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInYear = Arrayn\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp86mejdj_.scala:17:4 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86mejdj_.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp86mejdj_.scala:17:5\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        val dateString = dateFormat.format(dateObject)\n        dateString.length\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjt1ze3co.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonth\
    \ = month >= 1 && month <= 12\n        val validDay = day >= 1 && day <= 31\n\
    \        val validYear = year >= 1 && year <= 9999\n        val validDate = validMonth\
    \ && validDay && validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmpxxjh2ws8.scala:13)\n\
    \tat Problem$.main(tmpxxjh2ws8.scala:29)\n\tat Problem.main(tmpxxjh2ws8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        dateArray.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nfgq4sr.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,30,29,28,27,26,25)\n\
    \        val yearArray = Array(2001,2003,2005,2007,2009,2011,2013,2015,2017,2019)\n\
    \        val monthCount = monthArray.count(monthArray.contains(month))\n     \
    \   val dayCount = dayArray.count(dayArray.contains(day))\n        val yearCount\
    \ = yearArray.count(yearArray.contains(year))\n        val monthCountValid = monthCount\
    \ >= 1 && monthCount <= 12\n        val dayCountValid = dayCount >= 1 && dayCount\
    \ <= 31\n        val yearCountValid = yearCount >= 1 && yearCount <= 30\n    \
    \    val dateValid = monthCountValid && dayCountValid && yearCountValid\n    \
    \    dateValid\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu1hnnyqk.scala:19:61\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmonthCount\e\
    [0m = monthArray.count(monthArray.contains(month))\n\e[31m\e[31m   |\e[0m    \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    Boolean\n\e[31m\
    \   |\e[0m                                          Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu1hnnyqk.scala:20:55\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdayCount\e\
    [0m = dayArray.count(dayArray.contains(day))\n\e[31m\e[31m   |\e[0m          \
    \                            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  Found:    Boolean\n\e[31m   |\e[0m        \
    \                              Required: \e[1m\e[32mInt\e[0m\e[1m\e[32m \e[0m\e\
    [1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu1hnnyqk.scala:21:58 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36myearCount\e[0m = yearArray.count(yearArray.contains(year))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    Boolean\n\
    \e[31m   |\e[0m                                        Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val months\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val days = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthDays30 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val monthDays29\
    \ = Array(31,29,31,30,31,30,31,30,31,30,31)\n        val monthDays28 = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays27 = Array(31,27,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthDays26 = Array(31,26,31,30,31,30,31,30,31,30,31)\n        val monthDays25\
    \ = Array(31,25,31,30,31,30,31,30,31,30,31)\n        val monthDays24 = Array(31,24,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays23 = Array(31,23,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthDays22 = Array(31,22,31,30,31,30,31,30,31,30,31)\n        val monthDays21\
    \ = Array(31,21,31,30,31,30,31,30,31,30,31)\n        val monthDays20 = Array(31,20,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays19 = Array(31,19,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthDays18 = Array(31,18,31,30,31,30,31,30,31,30,31)\n        val monthDays17\
    \ = Array(31,17,31,30,31,30,31,30,31,30,31)\n        val monthDays16 = Array(31,16,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays15 = Array(31,15,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthDays14 = Array(31,14,31,30,31,30,31,30,31,30,31)\n        val monthDays13\
    \ = Array(31,13,31,30,31,30,31,30,31,30,31)\n        val monthDays12 = Array(31,12,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDays11 = Array(31,11,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthDays10 = Array(31,10,\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptouplore.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptouplore.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val daysInMonth\
    \ = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n        val\
    \ daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray = Array.fill(12)(0)\n\
    \        val yearArray = Array.fill(12)(0)\n        val daysInMonthArray = Array.fill(daysInMonth)(0)\n\
    \        val monthArray = Array.fill(12)(0)\n        val yearArray = Array.fill(12)(0)\n\
    \        val daysInMonthArray = Array.fill(daysInMonth)(0)\n        val monthArray\
    \ = Array.fill(12)(0)\n        val yearArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8pa7g86_.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8pa7g86_.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthArray\e[0m = Array.fill(daysInMonth)(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e[35mdaysInMonthArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8pa7g86_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmonthArray\e[0m = Array.fill(\e[31m12\e\
    [0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthArray is already defined as \e[33mvalue\e[0m \e[35mmonthArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8pa7g86_.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36myearArray\e[0m = Array.fill(\e[31m12\e\
    [0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0myearArray is already defined as \e[33mvalue\e[0m \e[35myearArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8pa7g86_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m = Array.fill(daysInMonth)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e\
    [35mdaysInMonthArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2o1e7foa.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2o1e7foa.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010157
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCheck = monthArray.contains(month)\n        val dayCheck = dayArray.contains(day)\n\
    \        val yearCheck = yearArray.contains(year)\n        val dateCheck = monthCheck\
    \ && dayCheck && yearCheck\n        dateCheck\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi2pbsdf.scala:26)\n\tat Problem.main(tmpwi2pbsdf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmuhpc87t.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInMonth = Array(12,1,2,3,4,5,6,7,8,9,10,11,12)\n        val\
    \ monthDays = monthArray.zip(dayArray)\n        val daysInMonths = monthDays.zip(daysInMonth)\n\
    \        val monthsInMonths = monthDays.zip(monthsInMonth)\n        val monthDaysCount\
    \ = monthArray.zip(dayArray).map(x => x._1 + x._2)\n        val monthsInMonthsCount\
    \ = monthDaysCount.zip(monthsInMonth).map(x => x._1 + x._2)\n        val monthDaysCountSum\
    \ = monthDaysCount.map(x => x._1 + x._2)\n        val monthsInMonthsCountSum =\
    \ monthsInMonthsCount.map(x => x._1 + x._2)\n        val monthDaysCountSumArray\
    \ = monthDaysCountSum.toArray\n        val monthsInMonthsCountSumArray = monthsInMonthsCountSum.toArray\n\
    \        val monthDaysCountSumArrayLength = monthDaysCountSumArray.length\n  \
    \      val monthsInMonthsCountSumArrayLength = monthsInMonthsCountSumArray.length\n\
    \        val monthDaysCountSumArrayLength = monthDaysCountSumArrayLength\n   \
    \     val monthsInMonthsCountSumArrayLength = monthsInMonthsCountSumArrayLength\n\
    \        val monthDaysCountSumArrayLength = monthDaysCountSumArrayLength\n   \
    \     val monthsInMonthsCountSumArrayLength = monthsInMonthsCountSumArrayLength\n\
    \        val monthDaysCountSumArrayLength = monthDaysCountSumArrayLength\n   \
    \     val monthsInMonthsCountSumArrayLength = monthsInMonthsCountSumArrayLength\n\
    \        val monthDaysCountSumArrayLength = monthDaysCountSumArrayLength\n   \
    \     val monthsInMonthsCountSumArrayLength = monthsInMonthsCountSumArrayLength\n\
    \        val monthDaysCountSumArrayLength = monthDaysCountSumArrayLength\n   \
    \     val monthsInMonthsCountSumArrayLength = monthsInMonthsCountSumArrayLength\n\
    \        val monthDaysCountSumArrayLength = monthDay\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_py72a9r.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmonthDaysCountSumArrayLength\e\
    [0m = monthDaysCountSumArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthDaysCountSumArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mmonthDaysCountSumArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_py72a9r.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonthsCountSumArrayLength\e\
    [0m = monthsInMonthsCountSumArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInMonthsCountSumArrayLength is already defined as \e\
    [33mvalue\e[0m \e[35mmonthsInMonthsCountSumArrayLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_py72a9r.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthDaysCountSumArrayLength\e[0m = monthDaysCountSumArrayLength\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthDaysCountSumArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mmonthDaysCountSumArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_py72a9r.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonthsCountSumArrayLength\e\
    [0m = monthsInMonthsCountSumArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInMonthsCountSumArrayLength is already defined as \e\
    [33mvalue\e[0m \e[35mmonthsInMonthsCountS"
  stdout: ''
  timestamp: 1660010160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthArray3 = Array(2,3,4)\n        val dayArray3 = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthArray4 = Array(1,3,5,7,8,10,12)\n        val dayArray4 = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthArray5 = Array(4,6,9,11)\n        val dayArray5 = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthArray6 = Array(2,3,4)\n        val dayArray6 = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthArray7 = Array(1,3,5,7,8,10,12)\n        val dayArray7 = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthArray8 = Array(4,6,9,11)\n        val dayArray8 = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthArray9 = Array(2,3,4)\n        val dayArray9 = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthArray10 = Array(1,3,5,7,8,10,12)\n        val dayArray10 = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqol6kwg7.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqol6kwg7.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val daysInMonth\
    \ = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val monthArray = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray2 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray3 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray4 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray5 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray6 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray7 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray8 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray9 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray10 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray11 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray12 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray13 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \        val monthArray14 = Array.ofDim[Int](scala.util.Calendar.getInstance.getActual\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1blt0ng1.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1blt0ng1.scala:16:37\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1blt0ng1.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ value Calendar is not a member of util\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1blt0ng1.scala:19:53 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mmonthArray\e[0m = Array.ofDim[\e[35mInt\e[0m](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value Calendar is not a\
    \ member of util\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1blt0ng1.scala:20:54\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmonthArray2\e[0m = Array.ofDim[\e[35mInt\e[0m](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value Calendar is not a\
    \ member of util\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1blt0ng1.scala:21:54\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmonthArray3\e[0m = Array.ofDim[\e[35mInt\e[0m](scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH))\n\
    \e[31m\e[31m   |\e[0m                               "
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018)\n\
    \        val monthDaysArray = monthArray.zip(dayArray)\n        val monthYearArray\
    \ = monthArray.zip(yearArray)\n        val monthYearDaysArray = monthYearArray.zip(dayArray)\n\
    \        val monthYearDaysArray2 = monthYearArray.zip(yearArray)\n        val\
    \ monthYearDaysArray3 = monthYearArray.zip(yearArray)\n        val monthYearDaysArray4\
    \ = monthYearArray.zip(yearArray)\n        val monthYearDaysArray5 = monthYearArray.zip(yearArray)\n\
    \        val monthYearDaysArray6 = monthYearArray.zip(yearArray)\n        val\
    \ monthYearDaysArray7 = monthYearArray.zip(yearArray)\n        val monthYearDaysArray8\
    \ = monthYearArray.zip(yearArray)\n        val monthYearDaysArray9 = monthYearArray.zip(yearArray)\n\
    \        val monthYearDaysArray10 = monthYearArray.zip(yearArray)\n        val\
    \ monthYearDaysArray11 = monthYearArray.zip(yearArray)\n        val monthYearDaysArray12\
    \ = monthYearArray.zip(yearArray)\n        val monthYearDaysArray13 = monthYearArray.zip(yearArray)\n\
    \        val monthYearDaysArray14 = monthYearArray.zip(yearArray)\n        val\
    \ monthYearDaysArray15 = monthYearArray.zip(yearArray)\n        val monthYearDaysArray16\
    \ = monthYearArray.zip(yearArray)\n        val monthYearDaysArray17 = monthYearArray.zip(yearArray)\n\
    \        val monthYearDaysArray18 = monthYearArray.zip(yearArray)\n        val\
    \ monthYearDaysArray19 = monthYearArray.zip(yearArray)\n        val monthYearDaysArray20\
    \ = monthYearArray.zip(yearArray)\n        val monthYearDaysArray21 = monthYearArray.zip(yearArray)\n\
    \        val monthYearDaysArray22 = monthYearArray.zip(yearArray)\n        val\
    \ monthYearDaysArray23 = monthYearArray.zip(yearArray)\n        val monthYearDaysArray24\
    \ = monthYearArray.zip(year\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoogf0hrb.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpoogf0hrb.scala:44:54 --------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \        \e[33mval\e[0m \e[36mmonthYearDaysArray24\e[0m = monthYearArray.zip(year\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (year\
    \ : Int)\n\e[31m   |\e[0m                                             Required:\
    \ IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoogf0hrb.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToValidate = dateFormat.parse(date)\n\
    \        dateToValidate != null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb870gvpc.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val monthArray = dateArray(0).toString.toInt\n\
    \        val dayArray = dateArray(1).toString.toInt\n        val year = dateArray(2).toString.toInt\n\
    \        val month = monthArray\n        val day = dayArray\n        val validMonth\
    \ = monthArray.forall(month => month >= 1 && month <= 12)\n        val validDay\
    \ = dayArray.forall(day => day >= 1 && day <= 31)\n        val validYear = year\
    \ >= 1 && year <= 9999\n        val validDate = validMonth && validDay && validYear\n\
    \        validDate\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5g2hrwq_.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvalidMonth\e[0m = monthArray.forall(\e\
    [36mmonth\e[0m => month >= \e[31m1\e[0m && month <= \e[31m12\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      value forall is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp5g2hrwq_.scala:19:32 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvalidDay\e[0m = dayArray.forall(\e\
    [36mday\e[0m => day >= \e[31m1\e[0m && day <= \e[31m31\e[0m)\n\e[31m\e[31m   |\e\
    [0m                       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \         value forall is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3)\n            return false\n\
    \        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(month < 1 || month > 12)\n\
    \            return false\n        if(day < 1 || day > 31)\n            return\
    \ false\n        if(month == 2 && day > 29)\n            return false\n      \
    \  if(month == 2 && day < 1)\n            return false\n        if(month == 2\
    \ && day > 30)\n            return false\n        if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n \
    \           return true\n        if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11)\n            return true\n        if(month == 2)\n            return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmhisjod.scala:44)\n\tat Problem.main(tmphmhisjod.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonth\
    \ = month >= 1 && month <= 12\n        val validDay = day >= 1 && day <= 31\n\
    \        val validYear = year >= 1900 && year <= 2100\n        val validMonthAndDay\
    \ = validMonth && validDay\n        val validYearAndMonth = validYear && validMonthAndDay\n\
    \        val validMonthAndYear = validMonth && validYear\n        val validYearAndDay\
    \ = validYear && validDay\n        val validMonthAndDayAndYear = validMonthAndDay\
    \ && validYear\n        val validYearAndMonthAndDay = validYearAndMonth && validDay\n\
    \        val validMonthAndYearAndDay = validMonthAndYear && validDay\n       \
    \ val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay && validYear\n\
    \        val validMonthAndYearAndDayAndYear = validMonthAndYearAndDay && validYear\n\
    \        val validYearAndMonthAndDayAndYearAndMonth = validYearAndMonthAndDayAndYear\
    \ && validMonth\n        val validYearAndMonthAndDayAndYearAndMonth = validYearAndMonthAndDayAndYear\
    \ && validMonth\n        val validYearAndMonthAndDayAndYearAndMonth = validYearAndMonthAndDayAndYear\
    \ && validMonth\n        val validYearAndMonthAndDayAndYearAndMonth = validYearAndMonthAndDayAndYear\
    \ && validMonth\n        val validYearAndMonthAndDayAndYearAndMonth = validYearAndMonthAndDayAndYear\
    \ && validMonth\n        val validYearAndMonthAndDayAndYearAndMonth = validYearAndMonthAndDayAndYear\
    \ && validMonth\n        val validYearAndMonthAndDayAndYearAndMonth = validYearAndMonthAndDayAndYear\
    \ && validMonth\n        val validYearAndMonthAndDayAndYearAndMonth = validYearAndMonthAndDayAndYear\
    \ && validMonth\n        val validYearAndMonthAndDayAndYearAndMonth = validYearAndMonthAndDayAndYear\
    \ && validMonth\n        val validYearAndMonthAndDayAndYearAndMonth = validYearAndMonthAndDayAndYear\
    \ && validMonth\n        val validYearAndMonthAndDayAndYearAndMonth = validYearAndMonthAndDayAndYear\
    \ && validMonth\n        val validYearAndMonthAndDayAndYearAndMonth = validYearAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl8byfbto.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYearAndMonth\e\
    [0m = validYearAndMonthAndDayAndYear && validMonth\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYearAndMonth is already defined\
    \ as \e[33mvalue\e[0m \e[35mvalidYearAndMonthAndDayAndYearAndMonth\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl8byfbto.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYearAndMonth\e\
    [0m = validYearAndMonthAndDayAndYear && validMonth\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYearAndMonth is already defined\
    \ as \e[33mvalue\e[0m \e[35mvalidYearAndMonthAndDayAndYearAndMonth\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl8byfbto.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYearAndMonth\e\
    [0m = validYearAndMonthAndDayAndYear && validMonth\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYearAndMonth is already defined\
    \ as \e[33mvalue\e[0m \e[35mvalidYearAndMonthAndDayAndYearAndMonth\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl8byfbto.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYearAndMonth\e\
    [0m = validYearAndMonthAndDayAndYear && validMonth\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1660010159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc54yj4dg.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonth\
    \ = month >= 1 && month <= 12\n        val validDay = day >= 1 && day <= 31\n\
    \        val validYear = year >= 1 && year <= 9999\n        val validDate = validMonth\
    \ && validDay && validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmpxxjh2ws8.scala:13)\n\
    \tat Problem$.main(tmpxxjh2ws8.scala:29)\n\tat Problem.main(tmpxxjh2ws8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthDays\
    \ = months * 30 + days\n        val monthYears = months * 12 + year\n        val\
    \ monthYearsDays = monthYears * 30 + days\n        val monthYearsDaysNotLessThanOneOrHigherThanThirty\
    \ = monthYearsDaysNotLessThanOneOrHigherThanThirty(monthYears)\n        val monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty\
    \ = monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty(monthYears)\n\
    \        val monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty\
    \ = monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty(monthYears)\n\
    \        val monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty\
    \ = monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty(monthYears)\n\
    \        val monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty\
    \ = monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty(monthYears)\n\
    \        val monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpknzshnal.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpknzshnal.scala:19:61\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthYearsDaysNotLessThanOneOrHigherThanThirty\e[0m = monthYearsDaysNotLessThanOneOrHigherThanThirty(monthYears)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmonthYearsDaysNotLessThanOneOrHigherThanThirty\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpknzshnal.scala:20:96\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty\e\
    [0m = monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty(monthYears)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpknzshnal.scala:21:131 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmonthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty\e\
    [0m = monthYearsDaysNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirtyAndNotLessThanOneOrHigherThanThirty(monthYears)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  monthYearsDaysNotLessThanOn"
  stdout: ''
  timestamp: 1660010160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthDays\
    \ = monthDays(year, month)\n        val daysInMonth = daysInMonth(year, month)\n\
    \        val daysInYear = daysInYear(year, month)\n        val daysInLeapYear\
    \ = daysInLeapYear(year)\n        val daysInYearAndMonth = daysInYearAndMonth(year,\
    \ month)\n        val daysInLeapYearAndMonth = daysInLeapYearAndMonth(year)\n\
    \        val daysInYearAndMonthAndDay = daysInYearAndMonthAndDay(year, month)\n\
    \        val daysInLeapYearAndMonthAndDay = daysInLeapYearAndMonthAndDay(year)\n\
    \        val daysInYearAndMonthAndDayAndYear = daysInYearAndMonthAndDayAndYear(year,\
    \ month)\n        val daysInLeapYearAndMonthAndDayAndYear = daysInLeapYearAndMonthAndDayAndYear(year)\n\
    \        val daysInYearAndMonthAndDayAndYearAndMonth = daysInYearAndMonthAndDayAndYearAndMonth(year,\
    \ month)\n        val daysInLeapYearAndMonthAndDayAndYearAndMonth = daysInLeapYearAndMonthAndDayAndYearAndMonth(year)\n\
    \        val daysInYearAndMonthAndDayAndYearAndMonthAndDay = daysInYearAndMonthAndDayAndYearAndMonthAndDay(year,\
    \ month)\n        val daysInLeapYearAndMonthAndDayAndYearAndMonthAndDay = daysInLeapYearAndMonthAndDayAndYearAndMonthAndDay(year)\n\
    \        val daysInYearAndMonthAndDayAndYearAndMonthAndDayAndYear = daysInYearAndMonthAndDayAndYearAndMonthAndDayAndYear(year,\
    \ month)\n        val daysInLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYear\
    \ = daysInLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYear(year)\n        val\
    \ daysInYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth = daysInYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth(year,\
    \ month)\n        val daysInLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth\
    \ = daysInLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth(year)\n \
    \       val daysInYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonthAndDay\
    \ = daysInYearAndMonthAndDayAndYearAndMonthAndDay\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyq0di336.scala:16:24 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmonthDays\e[0m = monthDays(year,\
    \ month)\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m\
    \                        Recursive \e[33mvalue\e[0m \e[35mmonthDays\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyq0di336.scala:17:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = daysInMonth(year, month)\n\e[31m\e[31m   |\e[0m   \
    \                       ^\e[0m\n\e[31m   |\e[0m                          Recursive\
    \ \e[33mvalue\e[0m \e[35mdaysInMonth\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpyq0di336.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdaysInYear\e[0m = daysInYear(year,\
    \ month)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m\
    \                         Recursive \e[33mvalue\e[0m \e[35mdaysInYear\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyq0di336.scala:19:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInLeapYear\e[0m = daysInLeapYear(year)\n\e[31m\e[31m   |\e[0m    \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \ Recursive \e[33mvalue\e[0m \e[35mdaysInLeapYear\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyq0di336.scala:20:33 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdaysInYearAndMonth\e[0m\
    \ = daysInYearAndMonth(year, month)\n\e[31m\e[31m   |\e[0m                   \
    \              ^\e[0m\n\e[31m   |\e[0m                           Recursive \e\
    [33mvalue\e[0m \e[35mdaysInYearAndMonth\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer expl"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvljz8u0h.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n    \
    \    val yearArray = List(1, 12)\n        val monthArray2 = List(1, 4, 6, 9, 11)\n\
    \        val dayArray2 = List(1, 30)\n        val yearArray2 = List(1)\n     \
    \   val monthArray3 = List(1, 3, 5)\n        val dayArray3 = List(1, 31)\n   \
    \     val yearArray3 = List(1)\n        val monthArray4 = List(1, 4, 6)\n    \
    \    val dayArray4 = List(1, 30)\n        val yearArray4 = List(1)\n        val\
    \ monthArray5 = List(1, 3, 5)\n        val dayArray5 = List(1, 31)\n        val\
    \ yearArray5 = List(1)\n        val monthArray6 = List(1, 4, 6)\n        val dayArray6\
    \ = List(1, 30)\n        val yearArray6 = List(1)\n        val monthArray7 = List(1,\
    \ 3, 5)\n        val dayArray7 = List(1, 31)\n        val yearArray7 = List(1)\n\
    \        val monthArray8 = List(1, 3, 5)\n        val dayArray8 = List(1, 31)\n\
    \        val yearArray8 = List(1)\n        val monthArray9 = List(1, 3, 5)\n \
    \       val dayArray9 = List(1, 31)\n        val yearArray9 = List(1)\n      \
    \  val monthArray10 = List(1, 3, 5)\n        val dayArray10 = List(1, 31)\n  \
    \      val yearArray10 = List(1)\n        val monthArray11 = List(1, 3, 5)\n \
    \       val dayArray11 = List(1, 31)\n        val yearArray11 = List(1)\n    \
    \    val monthArray12 = List(1, 3, 5)\n        val dayArray12 = List(1, 31)\n\
    \        val yearArray12 = List(1)\n        val monthArray13 = List(1, 3, 5)\n\
    \        val dayArray13 = List(1, 31)\n        val yearArray13 = List(1)\n   \
    \     val monthArray14 = List(1, 3, 5)\n        val dayArray14 = List(1, 31)\n\
    \        val yearArray14 = List(1)\n        val monthArray15 = List(1, 3, 5)\n\
    \        val dayArray15 = List(1, 31)\n        val yearArray15 = List(1)\n   \
    \     val monthArray16 = List(1, 3, 5)\n        val dayArray16 = List(1, 31)\n\
    \        val yearArray16 = List(1)\n        val monthArray17 = List(1, 3, 5)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5r6nzss.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018)\n\
    \        val monthCheck = monthArray.contains(month)\n        val dayCheck = dayArray.contains(day)\n\
    \        val yearCheck = yearArray.contains(year)\n        if(!date.isEmpty &&\
    \ !monthCheck && dayCheck && yearCheck) {\n            return true\n        }\
    \ else {\n            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9cdwzhad.scala:29)\n\tat Problem.main(tmp9cdwzhad.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck = dateFormat.parse(date)\n\
    \        val dateToCheckDay = dateToCheck.getDay\n        val dateToCheckMonth\
    \ = dateToCheck.getMonth\n        val dateToCheckYear = dateToCheck.getYear\n\
    \        val dateToCheckDaysInMonth = Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH)\n\
    \        val dateToCheckMonthsInMonth = Calendar.getInstance().getActualMaximum(Calendar.MONTH)\n\
    \        val dateToCheckYearsInMonth = Calendar.getInstance().getActualMaximum(Calendar.YEAR)\n\
    \        val dateToCheckDaysInMonth = dateToCheckDaysInMonth - dateToCheckDay\n\
    \        val dateToCheckMonthsInMonth = dateToCheckMonthsInMonth - dateToCheckMonth\n\
    \        val dateToCheckYearsInMonth = dateToCheckYearsInMonth - dateToCheckYear\n\
    \        val dateToCheckDaysInMonth = dateToCheckDaysInMonth - dateToCheckDay\n\
    \        val dateToCheckMonthsInMonth = dateToCheckMonthsInMonth - dateToCheckMonth\n\
    \        val dateToCheckYearsInMonth = dateToCheckYearsInMonth - dateToCheckYear\n\
    \        val dateToCheckDaysInMonth = dateToCheckDaysInMonth - dateToCheckDay\n\
    \        val dateToCheckMonthsInMonth = dateToCheckMonthsInMonth - dateToCheckMonth\n\
    \        val dateToCheckYearsInMonth = dateToCheckYearsInMonth - dateToCheckYear\n\
    \        val dateToCheckDaysInMonth = dateToCheckDaysInMonth - dateToCheckDay\n\
    \        val dateToCheckMonthsInMonth = dateToCheckMonthsInMonth - dateToCheckMonth\n\
    \        val dateToCheckYearsInMonth = dateToCheckYearsInMonth - dateToCheckYear\n\
    \        val dateToCheckDaysInMonth = dateToCheckDaysInMonth - dateToCheckDay\n\
    \        val dateToCheckMonthsInMonth = dateToCheckMonthsInMonth - dateToCheckMonth\n\
    \        val dateToCheckYearsInMonth = dateToCheckYearsInMonth - dateToCheckYear\n\
    \        val dateToCheckDaysInMonth = dateToCheckDaysInMonth - dateToCheckDay\n\
    \        val dateToCheckMonthsInMonth = dateToCheckMonthsInMonth - dateToCheckMonth\n\
    \        val dateToCheckYearsInMonth = dateToCheckYearsInMonth - dateToCheckYear\n\
    \        val dateToCheckDaysInMonth = dateToCheckDaysInMonth - dateToCheckDay\n\
    \        val dateToCheckMonthsInMonth = dateToCheckMonthsInMonth - dateToCheck\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt4pxhc7h.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckDaysInMonth\e\
    [0m = dateToCheckDaysInMonth - dateToCheckDay\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckDaysInMonth is already defined as \e[33mvalue\e\
    [0m \e[35mdateToCheckDaysInMonth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt4pxhc7h.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckMonthsInMonth\e\
    [0m = dateToCheckMonthsInMonth - dateToCheckMonth\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckMonthsInMonth is already defined as \e[33mvalue\e\
    [0m \e[35mdateToCheckMonthsInMonth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt4pxhc7h.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckYearsInMonth\e\
    [0m = dateToCheckYearsInMonth - dateToCheckYear\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateToCheckYearsInMonth is already defined as \e[33mvalue\e[0m\
    \ \e[35mdateToCheckYearsInMonth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt4pxhc7h.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckDaysInMonth\e\
    [0m = dateToCheckDaysInMonth - dateToCheckDay\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckDaysInMonth is already defined as \e[33mvalue\e\
    [0m \e[35mdateToCheckDaysInMonth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck = dateFormat.parse(date)\n\
    \        dateToCheck != null\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdtmx53g.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val daysInMonth\
    \ = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthArray = scala.collection.mutable.ArrayBuffer(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val monthDays = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray2 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray3 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray4 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray5 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray6 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray7 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray8 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray9 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray10 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray11 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray12 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray13 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray14 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi9mxt6lx.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpi9mxt6lx.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val daysArray = List(1, 30, 29)\n   \
    \     val monthArray2 = List(1, 4, 6, 9, 11)\n        val daysArray2 = List(1,\
    \ 29)\n        val monthArray3 = List(1, 12)\n        val daysArray3 = List(1)\n\
    \        val monthArray4 = List(1, 4, 6, 9, 11)\n        val daysArray4 = List(1)\n\
    \        val monthArray5 = List(1, 3)\n        val daysArray5 = List(1)\n    \
    \    val monthArray6 = List(1, 3, 5, 7, 8, 10, 12)\n        val daysArray6 = List(1,\
    \ 30)\n        val monthArray7 = List(1, 4, 6, 9, 11)\n        val daysArray7\
    \ = List(1, 29)\n        val monthArray8 = List(1, 3)\n        val daysArray8\
    \ = List(1)\n        val monthArray9 = List(1, 3, 5, 7, 8, 10, 12)\n        val\
    \ daysArray9 = List(1, 30)\n        val monthArray10 = List(1, 4, 6, 9, 11)\n\
    \        val daysArray10 = List(1, 29)\n        val monthArray11 = List(1, 3)\n\
    \        val daysArray11 = List(1)\n        val monthArray12 = List(1, 3, 5, 7,\
    \ 8, 10, 12)\n        val daysArray12 = List(1, 30)\n        val monthArray13\
    \ = List(1, 4, 6, 9, 11)\n        val daysArray13 = List(1, 29)\n        val monthArray14\
    \ = List(1, 3)\n        val daysArray14 = List(1)\n        val monthArray15 =\
    \ List(1, 3, 5, 7, 8, 10, 12)\n        val daysArray15 = List(1, 30)\n       \
    \ val monthArray16 = List(1, 4, 6, 9, 11)\n        val daysArray16 = List(1, 29)\n\
    \        val monthArray17 = List(1, 3)\n        val daysArray17 = List(1)\n  \
    \      val monthArray18 = List(1, 3, 5, 7, 8, 10, 12)\n        val daysArray18\
    \ = List(1, 30)\n        val monthArray19 = List(1, 4, 6, 9, 11)\n        val\
    \ daysArray19 = List(1, 29)\n        val monthArray20 = List(1, 3)\n        val\
    \ daysArray20 = List(1)\n        val monthArray21 = List(1, 3, 5, 7, 8, 10, 12)\n\
    \        val daysArray21 = List(1, 30)\n        val monthArray22 = List(1, 4,\
    \ 6, 9, 11)\n        val daysArray22 = List(1, 29)\n        val monthArray23 =\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprufx4863.scala:60:26 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mmonthArray23\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprufx4863.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100)\n\
    \        val monthCheck = monthArray.contains(month)\n        val dayCheck = dayArray.contains(day)\n\
    \        val yearCheck = yearArray.contains(year)\n        val monthCheck2 = monthArray.contains(month+1)\n\
    \        val dayCheck2 = dayArray.contains(day+1)\n        val yearCheck2 = yearArray.contains(year+1)\n\
    \        val monthCheck3 = monthArray.contains(month+2)\n        val dayCheck3\
    \ = dayArray.contains(day+2)\n        val yearCheck3 = yearArray.contains(year+2)\n\
    \        val monthCheck4 = monthArray.contains(month+3)\n        val dayCheck4\
    \ = dayArray.contains(day+3)\n        val yearCheck4 = yearArray.contains(year+3)\n\
    \        val monthCheck5 = monthArray.contains(month+4)\n        val dayCheck5\
    \ = dayArray.contains(day+4)\n        val yearCheck5 = yearArray.contains(year+4)\n\
    \        val monthCheck6 = monthArray.contains(month+5)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg869_kxg.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3)\n            return false\n\
    \        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(month < 1 || month > 12)\n\
    \            return false\n        if(day < 1 || day > 31)\n            return\
    \ false\n        if(month == 2 && day > 30)\n            return false\n      \
    \  if(month == 2 && day < 29)\n            return false\n        if(month == 2\
    \ && day > 28)\n            return false\n        if(month == 2 && day < 28)\n\
    \            return false\n        if(month == 2 && day > 27)\n            return\
    \ false\n        if(month == 2 && day < 27)\n            return false\n      \
    \  if(month == 2 && day > 26)\n            return false\n        if(month == 2\
    \ && day < 26)\n            return false\n        if(month == 2 && day > 25)\n\
    \            return false\n        if(month == 2 && day < 25)\n            return\
    \ false\n        if(month == 2 && day > 24)\n            return false\n      \
    \  if(month == 2 && day < 24)\n            return false\n        if(month == 2\
    \ && day > 23)\n            return false\n        if(month == 2 && day < 23)\n\
    \            return false\n        if(month == 2 && day > 22)\n            return\
    \ false\n        if(month == 2 && day < 22)\n            return false\n      \
    \  if(month == 2 && day > 21)\n            return false\n        if(month == 2\
    \ && day < 21)\n            return false\n        if(month == 2 && day > 20)\n\
    \            return false\n        if(month == 2 && day < 20)\n            return\
    \ false\n        if(month == 2 && day > 19)\n            return false\n      \
    \  if(month == 2 && day < 19)\n            return false\n        if(month == 2\
    \ && day > 18)\n            return false\n        if(month == 2 && day < 18)\n\
    \            return false\n        if(month == 2 && day > 17)\n            return\
    \ false\n        if(month == 2 && day < 17)\n            return false\n      \
    \  if(month == 2 && day > 16)\n            return false\n        if(month == 2\
    \ && day < 16)\n            return false\n        if(month == 2 && day > 15)\n\
    \            return false\n        if(month == 2 && day < 15)\n            return\
    \ false\n        if(month == 2 && day > 14)\n            return false\n      \
    \  if(month == 2 && day < 14)\n            return false\n        if(month == 2\
    \ && day > 13)\n            return false\n        if(month == 2 && day < 13)\n\
    \            return false\n        if(month == 2 && day > 12)\n            return\
    \ false\n        if(month == 2 && day < 12)\n            return false\n      \
    \  if(month == 2 && day > 11)\n            return false\n        if(month == 2\
    \ && day < 11)\n            return false\n        if(month == 2 && day > 10)\n\
    \            return false\n        if(month == 2 \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_r889caf.scala:101:4 ---------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvljz8u0h.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvljz8u0h.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid && dateObject.getTime > System.currentTimeMillis\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6u958qr9.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val daysInMonth\
    \ = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth29 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth29 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_tifj1cc.scala:33:79 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonth30\e[0m = scala.util.Calendar.getInstance.getActualMaximum(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_tifj1cc.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth30\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth30 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth30\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_tifj1cc.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonth30\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInMonth30 is already defined as \e[33mvalue\e[0m \e\
    [35mmonthsInMonth30\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_tifj1cc.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth31\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth31"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        dateArray.getTime < System.currentTimeMillis\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptak5vvan.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        val dateInDays = dateParsed.getTime\n        val dateInDaysInYear = dateInDays\
    \ / 1000\n        val dateInDaysInYearInMonth = dateInDaysInYear / 86400\n   \
    \     val dateInDaysInYearInMonthInDay = dateInDaysInYearInMonth / 86400\n   \
    \     val dateInDaysInYearInMonthInDayInYear = dateInDaysInYearInMonthInDay /\
    \ 365\n        val dateInDaysInYearInMonthInDayInYearInMonth = dateInDaysInYearInMonthInDayInYear\
    \ / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDay = dateInDaysInYearInMonthInDayInYearInMonth\
    \ / 29\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInMonth = dateInDaysInYearInMonthInDayInYearInMonthInDay\
    \ / 28\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInMonth = dateInDaysInYearInMonthInDayInYearInMonthInDayInMonth\
    \ / 28\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDay\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDay / 28\n        val\
    \ dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonth = dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonth\
    \ / 28\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonthInDay\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonth / 28\n \
    \       val dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonthInDayInMonth\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonthInDayInMonth\
    \ / 28\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonthInDayInMonth\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonthInDayIn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1ti2wnh9.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateInDaysInYearInMonthInDayInYearInMonthInDayInMonth\e\
    [0m = dateInDaysInYearInMonthInDayInYearInMonthInDayInMonth / \e[31m28\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInDaysInYearInMonthInDayInYearInMonthInDayInMonth is already\
    \ defined as \e[33mvalue\e[0m \e[35mdateInDaysInYearInMonthInDayInYearInMonthInDayInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1ti2wnh9.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonthInDayInMonth\e\
    [0m = dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonthInDayIn\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonthInDayInMonth\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  dateInDaysInYearInMonthInDayInYearInMonthInDayInMonthInDayInMonthInDayInMonth\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1ti2wnh9.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp1ti2wnh9.scal"
  stdout: ''
  timestamp: 1660010168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        val dateDay = dateFormat.parse(date).getDay\n        val dateMonth =\
    \ dateFormat.parse(date).getMonth\n        val dateYear = dateFormat.parse(date).getYear\n\
    \        val dateMonthDay = dateFormat.parse(date).getDay\n        val dateMonthDayYear\
    \ = dateFormat.parse(date).getYear\n        val dateMonthDayYearMonth = dateFormat.parse(date).getMonth\n\
    \        val dateMonthDayYearMonthDay = dateFormat.parse(date).getDay\n      \
    \  val dateMonthDayYearMonthDayYear = dateFormat.parse(date).getYear\n       \
    \ val dateMonthDayYearMonthDayYearMonth = dateFormat.parse(date).getMonth\n  \
    \      val dateMonthDayYearMonthDayYearMonthDay = dateFormat.parse(date).getDay\n\
    \        val dateMonthDayYearMonthDayYearMonthDayYear = dateFormat.parse(date).getYear\n\
    \        val dateMonthDayYearMonthDayYearMonthDayYearMonth = dateFormat.parse(date).getMonth\n\
    \        val dateMonthDayYearMonthDayYearMonthDayYearMonthDay = dateFormat.parse(date).getDay\n\
    \        val dateMonthDayYearMonthDayYearMonthDayYearMonthDayYear = dateFormat.parse(date).getYear\n\
    \        val dateMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth = dateFormat.parse(date).getMonth\n\
    \        val dateMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDay = dateFormat.parse(date).getDay\n\
    \        val dateMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear\
    \ = dateFormat.parse(date).getYear\n        val dateMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth\
    \ = dateFormat.parse(date).getMonth\n        val dateMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDay\
    \ = dateFormat.parse(date).getDay\n        val dateMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear\
    \ = dateFormat.parse(date).getYear\n        val dateMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth\
    \ = dateFormat.parse(date).getMonth\n        val dateMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDay\
    \ = dateFormat.parse(date).getDay\n        val dateMonthDayYearMonthDayYearMonth\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6mls5iua.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6mls5iua.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6mls5iua.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val dateFormat\
    \ = \"MM-dd-yyyy\"\n        val dateFormat2 = dateFormat.replaceAll(\"-\", \"\"\
    )\n        val dateFormat3 = dateFormat2.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat4 = dateFormat3.replaceAll(\"-\", \"\")\n        val dateFormat5 =\
    \ dateFormat4.replaceAll(\"-\", \"\")\n        val dateFormat6 = dateFormat5.replaceAll(\"\
    -\", \"\")\n        val dateFormat7 = dateFormat6.replaceAll(\"-\", \"\")\n  \
    \      val dateFormat8 = dateFormat7.replaceAll(\"-\", \"\")\n        val dateFormat9\
    \ = dateFormat8.replaceAll(\"-\", \"\")\n        val dateFormat10 = dateFormat9.replaceAll(\"\
    -\", \"\")\n        val dateFormat11 = dateFormat10.replaceAll(\"-\", \"\")\n\
    \        val dateFormat12 = dateFormat11.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat13 = dateFormat12.replaceAll(\"-\", \"\")\n        val dateFormat14\
    \ = dateFormat13.replaceAll(\"-\", \"\")\n        val dateFormat15 = dateFormat14.replaceAll(\"\
    -\", \"\")\n        val dateFormat16 = dateFormat15.replaceAll(\"-\", \"\")\n\
    \        val dateFormat17 = dateFormat16.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat18 = dateFormat17.replaceAll(\"-\", \"\")\n        val dateFormat19\
    \ = dateFormat18.replaceAll(\"-\", \"\")\n        val dateFormat20 = dateFormat19.replaceAll(\"\
    -\", \"\")\n        val dateFormat21 = dateFormat20.replaceAll(\"-\", \"\")\n\
    \        val dateFormat22 = dateFormat21.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat23 = dateFormat22.replaceAll(\"-\", \"\")\n        val dateFormat24\
    \ = dateFormat23.replaceAll(\"-\", \"\")\n        val dateFormat25 = dateFormat24.replaceAll(\"\
    -\", \"\")\n        val dateFormat26 = dateFormat25.replaceAll(\"-\", \"\")\n\
    \        val dateFormat27 = dateFormat26.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat28 = dateFormat27.replaceAll(\"-\", \"\")\n        val dateFormat29\
    \ = dateFormat28.replaceAll(\"-\", \"\")\n        val dateFormat30 = dateFormat29.replaceAll(\"\
    -\", \"\")\n        val dateFormat31 = dateFormat30.replaceAll(\"-\", \"\")\n\
    \        val dateFormat32 = dateFormat31.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat33 = dateFormat32.replaceAll(\"-\", \"\")\n        val dateFormat34\
    \ = dateFormat33.replaceAll(\"-\", \"\")\n        val dateFormat35 = dateFormat34.replaceAll(\"\
    -\", \"\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp19jy4tx9.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        val dateObj2 = dateFormat.parse(\"01-01-2000\")\n        val dateObj3\
    \ = dateFormat.parse(\"01-31-2000\")\n        val dateObj4 = dateFormat.parse(\"\
    01-31-2000\")\n        val dateObj5 = dateFormat.parse(\"01-31-2000\")\n     \
    \   val dateObj6 = dateFormat.parse(\"01-31-2000\")\n        val dateObj7 = dateFormat.parse(\"\
    01-31-2000\")\n        val dateObj8 = dateFormat.parse(\"01-31-2000\")\n     \
    \   val dateObj9 = dateFormat.parse(\"01-31-2000\")\n        val dateObj10 = dateFormat.parse(\"\
    01-31-2000\")\n        val dateObj11 = dateFormat.parse(\"01-31-2000\")\n    \
    \    val dateObj12 = dateFormat.parse(\"01-31-2000\")\n        val dateObj13 =\
    \ dateFormat.parse(\"01-31-2000\")\n        val dateObj14 = dateFormat.parse(\"\
    01-31-2000\")\n        val dateObj15 = dateFormat.parse(\"01-31-2000\")\n    \
    \    val dateObj16 = dateFormat.parse(\"01-31-2000\")\n        val dateObj17 =\
    \ dateFormat.parse(\"01-31-2000\")\n        val dateObj18 = dateFormat.parse(\"\
    01-31-2000\")\n        val dateObj19 = dateFormat.parse(\"01-31-2000\")\n    \
    \    val dateObj20 = dateFormat.parse(\"01-31-2000\")\n        val dateObj21 =\
    \ dateFormat.parse(\"01-31-2000\")\n        val dateObj22 = dateFormat.parse(\"\
    01-31-2000\")\n        val dateObj23 = dateFormat.parse(\"01-31-2000\")\n    \
    \    val dateObj24 = dateFormat.parse(\"01-31-2000\")\n        val dateObj25 =\
    \ dateFormat.parse(\"01-31-2000\")\n        val dateObj26 = dateFormat.parse(\"\
    01-31-2000\")\n        val dateObj27 = dateFormat.parse(\"01-31-2000\")\n    \
    \    val dateObj28 = dateFormat.parse(\"01-31-2000\")\n        val dateObj29 =\
    \ dateFormat.parse(\"\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpytijmo_q.scala:41:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mdateObj29\e[0m = dateFormat.parse(\"\
    \n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m\
    \   |\e[0m                                         unclosed string literal\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpytijmo_q.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpytijmo_q.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032)\n\
    \        if(dateArray.isEmpty)\n            return false\n        if(month < 1\
    \ || month > 12)\n            return false\n        if(day < 1 || day > 31)\n\
    \            return false\n        if(monthArray.contains(month))\n          \
    \  return false\n        if(dayArray.contains(day))\n            return false\n\
    \        if(yearArray.contains(year))\n            return false\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa4caa11x.scala:34)\n\tat Problem.main(tmpa4caa11x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if(month\
    \ < 1 || month > 12 || day < 1 || day > 31 || (month == 2 && day > 29) || day\
    \ > 30) {\n            return false\n        }\n        if(month == 2 && day >\
    \ 29) {\n            return false\n        }\n        if(month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if(day > 31) {\n                return false\n            }\n   \
    \     }\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if(day > 30) {\n                return false\n            }\n   \
    \     }\n        if(month == 2) {\n            if(day > 29) {\n              \
    \  return false\n            }\n        }\n        if(month == 2 && day > 29)\
    \ {\n            return false\n        }\n        if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if(day > 31) {\n                return false\n            }\n   \
    \     }\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if(day > 30) {\n                return false\n            }\n   \
    \     }\n        if(month == 2) {\n            if(day > 29) {\n              \
    \  return false\n            }\n        }\n        if(month == 2 && day > 29)\
    \ {\n            return false\n        }\n        if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if(day > 31) {\n                return false\n            }\n   \
    \     }\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if(day > 30) {\n                return false\n            }\n   \
    \     }\n        if(month == 2) {\n            if(day > 29) {\n              \
    \  return false\n            }\n        }\n        if(month == 2 && day > 29)\
    \ {\n            return false\n        }\n        if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if(day > 31) {\n                return false\n            }\n   \
    \     }\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if(day > 30) {\n                return false\n            }\n   \
    \     }\n        if(month == 2) {\n            if(day > 29) {\n              \
    \  return false\n            }\n        }\n        if(month == 2 && day > 29)\
    \ {\n            return false\n        }\n        if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \            if(day > 31) {\n                return false\n            }\n   \
    \     }\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi_3l1013.scala:122:0 ---------------------------\e\
    [0m\e[0m\n\e[31m122 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi_3l1013.scala:121:1\
    \ --------------------\e[0m\e[0m\n\e[31m121 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: Boolean\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpi_3l1013.scala:102:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m102 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmuhpc87t.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date)\n\
    \        dateArray.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nfgq4sr.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonth\
    \ = month <= 12 && month >= 1\n        val validDay = day <= 31 && day >= 1\n\
    \        val validYear = year <= year && year >= 1900\n        val validDate =\
    \ validMonth && validDay && validYear\n        validDate\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmp7k0gdn90.scala:13)\n\
    \tat Problem$.main(tmp7k0gdn90.scala:29)\n\tat Problem.main(tmp7k0gdn90.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).asInstanceOf[Date]\n\
    \        val currentDate = Calendar.getInstance().getTime\n        val currentDateArray\
    \ = currentDate.asInstanceOf[Date]\n        val currentYear = currentDateArray.getYear\n\
    \        val currentMonth = currentDateArray.getMonth\n        val currentDay\
    \ = currentDateArray.getDay\n        val currentHour = currentDateArray.getHour\n\
    \        val currentMinute = currentDateArray.getMinute\n        val currentSecond\
    \ = currentDateArray.getSecond\n        val currentMillisecond = currentDateArray.getMillisecond\n\
    \        val currentNanosecond = currentDateArray.getNanosecond\n        val currentYearDay\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearMonth\
    \ = currentYear * 12 + currentMonth\n        val currentYearDayMonth = currentYear\
    \ * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDay =\
    \ currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHour\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHourMinute\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHourMinuteSecond\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHourMinuteSecondMillisecond\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHourMinuteSecondMillisecond\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHourMinuteSecondMillisecond\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHourMinuteSecondMillisecond\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHourMinuteSecondMillisecond\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHourMinuteSecondMillisecond\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHourMinuteSecondMillisecond\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHourMinuteSecondMillisecond\
    \ = currentYear * 365 + currentMonth * 30 + currentDay\n        val currentYearDayMonthDayHourMinuteSecondMillisecond\
    \ = currentYear * 365 + currentMonth\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt3kb24dj.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mcurrentYearDayMonthDayHourMinuteSecondMillisecond\e\
    [0m = currentYear * \e[31m365\e[0m + currentMonth * \e[31m30\e[0m + currentDay\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentYearDayMonthDayHourMinuteSecondMillisecond is already\
    \ defined as \e[33mvalue\e[0m \e[35mcurrentYearDayMonthDayHourMinuteSecondMillisecond\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt3kb24dj.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mcurrentYearDayMonthDayHourMinuteSecondMillisecond\e\
    [0m = currentYear * \e[31m365\e[0m + currentMonth * \e[31m30\e[0m + currentDay\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentYearDayMonthDayHourMinuteSecondMillisecond is already\
    \ defined as \e[33mvalue\e[0m \e[35mcurrentYearDayMonthDayHourMinuteSecondMillisecond\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt3kb24dj.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mcurrentYearDayMonthDayHourMinuteSecondMillisecond\e\
    [0m = currentYear * \e[31m365\e[0m + currentMonth * \e[31m30\e[0m + currentDay\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentYearDayMonthDayHourMinuteSecondMillisecond is already\
    \ defined as \e[33mvalue\e[0m \e[35mcurrentYearDayMonthDayHourMinuteSecondMillisecond\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E16"
  stdout: ''
  timestamp: 1660010170
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonth\
    \ = month >= 1 && month <= 12\n        val validDay = day >= 1 && day <= 31\n\
    \        val validYear = year >= 1 && year <= 9999\n        val validDate = (validMonth\
    \ && validDay && validYear)\n        return validDate\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmpc1jg9nwd.scala:13)\n\
    \tat Problem$.main(tmpc1jg9nwd.scala:29)\n\tat Problem.main(tmpc1jg9nwd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3) {\n            return\
    \ false\n        }\n        val monthArray = dateArray(0).toString.split(\"-\"\
    )\n        if(monthArray.length != 3) {\n            return false\n        }\n\
    \        val dayArray = dateArray(1).toString.split(\"-\")\n        if(dayArray.length\
    \ != 3) {\n            return false\n        }\n        val year = dateArray(2).toString.toInt\n\
    \        if(year < 1 || year > 9999) {\n            return false\n        }\n\
    \        if(monthArray(0) < 1 || monthArray(0) > 12) {\n            return false\n\
    \        }\n        if(monthArray(1) < 1 || monthArray(1) > 12) {\n          \
    \  return false\n        }\n        if(monthArray(2) < 1 || monthArray(2) > 12)\
    \ {\n            return false\n        }\n        if(dayArray(0) < 1 || dayArray(0)\
    \ > 31) {\n            return false\n        }\n        if(dayArray(1) < 1 ||\
    \ dayArray(1) > 30) {\n            return false\n        }\n        if(dayArray(2)\
    \ < 1 || dayArray(2) > 29) {\n            return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkfh744fi.scala:28:27\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m(monthArray(\e\
    [31m0\e[0m) < \e[31m1\e[0m || monthArray(\e[31m0\e[0m) > \e[31m12\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m          \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkfh744fi.scala:28:48 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mif\e[0m(monthArray(\e[31m0\e[0m) < \e[31m1\e[0m || monthArray(\e\
    [31m0\e[0m) > \e[31m12\e[0m) {\n\e[31m\e[31m   |\e[0m                        \
    \                        ^^\e[0m\n\e[31m   |\e[0m                            \
    \                    Found:    (\e[31m12\e[0m : Int)\n\e[31m   |\e[0m        \
    \                                        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkfh744fi.scala:31:27 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m(monthArray(\e[31m1\e[0m) < \e[31m1\e\
    [0m || monthArray(\e[31m1\e[0m) > \e[31m12\e[0m) {\n\e[31m\e[31m   |\e[0m    \
    \                       ^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                           Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkfh744fi.scala:31:48\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m(monthArray(\e\
    [31m1\e[0m) < \e[31m1\e[0m || monthArray(\e[31m1\e[0m) > \e[31m12\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                                                ^^\e[0m\n\e\
    [31m   |\e[0m                                                Found:    (\e[31m12\e\
    [0m : Int)\n\e[31m   |\e[0m                                                Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- ["
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateInMillis = dateArray.getTime\n        val currentDateInMillis\
    \ = Calendar.getInstance().getTimeInMillis\n        val dateInDays = dateInMillis\
    \ / 1000\n        val currentDateInDays = currentDateInMillis / 1000\n       \
    \ val dateInMonths = dateInDays / 30\n        val currentDateInMonths = currentDateInDays\
    \ / 30\n        val dateInYears = dateInMonths / 12\n        val currentDateInYears\
    \ = currentDateInMonths / 12\n        val dateInDaysLessThanOneMonth = dateInDays\
    \ % 30\n        val currentDateInDaysLessThanOneMonth = currentDateInDays % 30\n\
    \        val dateInMonthsLessThanOneYear = dateInMonths % 12\n        val currentDateInMonthsLessThanOneYear\
    \ = currentDateInMonths % 12\n        val dateInYearsLessThanOneYear = dateInYears\
    \ % 12\n        val currentDateInYearsLessThanOneYear = currentDateInYears % 12\n\
    \        val dateInDaysLessThanOneYear = dateInDaysLessThanOneMonth % 30\n   \
    \     val currentDateInDaysLessThanOneYear = currentDateInDaysLessThanOneMonth\
    \ % 30\n        val dateInMonthsLessThanOneYear = dateInMonthsLessThanOneYear\
    \ % 12\n        val currentDateInMonthsLessThanOneYear = currentDateInMonthsLessThanOneYear\
    \ % 12\n        val dateInYearsLessThanOneYear = dateInYearsLessThanOneYear %\
    \ 12\n        val currentDateInYearsLessThanOneYear = currentDateInYearsLessThanOneYear\
    \ % 12\n        val dateInDaysLessThanOneYear = dateInDaysLessThanOneYear % 30\n\
    \        val currentDateInDaysLessThanOneYear = currentDateInDaysLessThanOneYear\
    \ % 30\n        val dateInMonthsLessThanOneYear = dateInMonthsLessThanOneYear\
    \ % 12\n        val currentDateInMonthsLessThanOneYear = currentDateInMonthsLessThanOneYear\
    \ % 12\n        val dateInYearsLessThanOneYear = dateInYearsLessThanOneYear %\
    \ 12\n        val currentDateInYearsLessThanOneYear = currentDateInYearsLessThanOneYear\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi0zd1xk5.scala:39:83 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mcurrentDateInYearsLessThanOneYear\e\
    [0m = currentDateInYearsLessThanOneYear % \n\e[31m\e[31m   |\e[0m            \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi0zd1xk5.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateInMonthsLessThanOneYear\e[0m = dateInMonthsLessThanOneYear % \e[31m12\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInMonthsLessThanOneYear is already defined as \e[33mvalue\e\
    [0m \e[35mdateInMonthsLessThanOneYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi0zd1xk5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mcurrentDateInMonthsLessThanOneYear\e\
    [0m = currentDateInMonthsLessThanOneYear % \e[31m12\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentDateInMonthsLessThanOneYear is already defined as \e\
    [33mvalue\e[0m \e[35mcurrentDateInMonthsLessThanOneYear\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi0zd1xk5.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateInYearsLessThanOneYear\e[0m = dateInYearsLessThanOneYear % \e[31m12\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateInYearsLessThanOneYear is already defined as \e[33mvalue\e\
    [0m \e[35mdateInYearsLessThanOneYe"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,219\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpge7abh80.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpge7abh80.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl2qe30kb.scala:26)\n\tat Problem.main(tmpl2qe30kb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val daysInMonth\
    \ = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val validDay = day >= 1 && day <= daysInMonth\n        val validMonth\
    \ = month >= 1 && month <= monthsInMonth\n        val validYear = year >= 1 &&\
    \ year <= 9999\n        val validDate = validDay && validMonth && validYear\n\
    \        validDate\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu7da23co.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpu7da23co.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value Calendar is not a member of util\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val daysArray = List(1, 30, 29)\n   \
    \     val monthArray2 = List(1, 4, 6, 9, 11)\n        val daysArray2 = List(1,\
    \ 29)\n        val monthArray3 = List(1, 12)\n        val daysArray3 = List(1)\n\
    \        val monthArray4 = List(1, 4, 6, 9, 11)\n        val daysArray4 = List(1,\
    \ 29)\n        val monthArray5 = List(1, 3, 5)\n        val daysArray5 = List(1,\
    \ 31)\n        val monthArray6 = List(1, 3, 5)\n        val daysArray6 = List(1,\
    \ 31)\n        val monthArray7 = List(1, 3, 5)\n        val daysArray7 = List(1,\
    \ 31)\n        val monthArray8 = List(1, 3, 5)\n        val daysArray8 = List(1,\
    \ 31)\n        val monthArray9 = List(1, 3, 5)\n        val daysArray9 = List(1,\
    \ 31)\n        val monthArray10 = List(1, 3, 5)\n        val daysArray10 = List(1,\
    \ 31)\n        val monthArray11 = List(1, 3, 5)\n        val daysArray11 = List(1,\
    \ 31)\n        val monthArray12 = List(1, 3, 5)\n        val daysArray12 = List(1,\
    \ 31)\n        val monthArray13 = List(1, 3, 5)\n        val daysArray13 = List(1,\
    \ 31)\n        val monthArray14 = List(1, 3, 5)\n        val daysArray14 = List(1,\
    \ 31)\n        val monthArray15 = List(1, 3, 5)\n        val daysArray15 = List(1,\
    \ 31)\n        val monthArray16 = List(1, 3, 5)\n        val daysArray16 = List(1,\
    \ 31)\n        val monthArray17 = List(1, 3, 5)\n        val daysArray17 = List(1,\
    \ 31)\n        val monthArray18 = List(1, 3, 5)\n        val daysArray18 = List(1,\
    \ 31)\n        val monthArray19 = List(1, 3, 5)\n        val daysArray19 = List(1,\
    \ 31)\n        val monthArray20 = List(1, 3, 5)\n        val daysArray20 = List(1,\
    \ 31)\n        val monthArray21 = List(1, 3, 5)\n        val daysArray21 = List(1,\
    \ 31)\n        val monthArray22 = List(1, 3, 5)\n        val daysArray22 = List(1,\
    \ 31)\n        val monthArray23 = List(1, 3, 5)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3p8_4sbw.scala:61:5\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject.isValid\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7inkzthe.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthDays\
    \ = monthDaysArray(month)\n        val daysInMonth = daysInMonthArray(month)\n\
    \        val daysInYear = daysInYearArray(year)\n        val daysInLeapYear =\
    \ daysInLeapYearArray(year)\n        val daysInYearAndMonth = daysInYearAndMonthArray(year,\
    \ month)\n        val daysInLeapYearAndMonth = daysInLeapYearAndMonthArray(year,\
    \ month)\n        val daysInYearAndMonthAndDay = daysInYearAndMonthAndDayArray(year,\
    \ month)\n        val daysInLeapYearAndMonthAndDay = daysInLeapYearAndMonthAndDayArray(year,\
    \ month)\n        val daysInMonthAndYear = daysInMonthAndYearArray(month)\n  \
    \      val daysInMonthAndLeapYear = daysInMonthAndLeapYearArray(month)\n     \
    \   val daysInMonthAndYearAndDay = daysInMonthAndYearAndDayArray(month)\n    \
    \    val daysInMonthAndLeapYearAndDay = daysInMonthAndLeapYearAndDayArray(month)\n\
    \        val daysInMonthAndYearAndDayAndMonth = daysInMonthAndYearAndDayAndMonthArray(month)\n\
    \        val daysInMonthAndLeapYearAndMonthAndDay = daysInMonthAndLeapYearAndMonthAndDayArray(month)\n\
    \        val daysInMonthAndYearAndDayAndMonthAndDay = daysInMonthAndYearAndDayAndMonthAndDayArray(month)\n\
    \        val daysInMonthAndLeapYearAndMonthAndDayAndYear = daysInMonthAndLeapYearAndMonthAndDayAndYearArray(month)\n\
    \        val daysInMonthAndYearAndDayAndMonthAndLeapYear = daysInMonthAndYearAndDayAndMonthAndLeapYearArray(month)\n\
    \        val daysInMonthAndYearAndDayAndMonthAndLeapYearAndDay = daysInMonthAndYearAndDayAndMonthAndLeapYearAndDayArray(month)\n\
    \        val daysInMonthAndYearAndDayAndMonthAndLeapYearAndDayAndMonth = daysInMonthAndYearAndDayAndMonthAndLeapYearAndDayAndMonthArray(month)\n\
    \        val daysInMonthAndYearAndDayAndMonthAndLeapYearAndDayAndMonthAndYear\
    \ = daysInMonthAndYearAndDayAndMonthAndLeapYearAndDayAndMonthAndYearArray(month)\n\
    \        val daysInMonthAndYearAndDayAndMonthAndLeapYearAndDayAndMonthAndYearAndDay\
    \ = daysInMonthAndYearAndDayAndMonthAndLeapYearAndDayAndMonthAndYearAndDayArray(month)\n\
    \        val daysInMonthAndYearAndDayAndMonth\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdchlt6id.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdchlt6id.scala:16:24\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmonthDays\e[0m = monthDaysArray(month)\n\e[31m\e[31m   |\e[0m            \
    \            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ monthDaysArray\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdchlt6id.scala:17:26\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mdaysInMonth\e[0m = daysInMonthArray(month)\n\e[31m\e[31m   |\e[0m        \
    \                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \      Not found: daysInMonthArray\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdchlt6id.scala:18:25 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mdaysInYear\e[0m = daysInYearArray(year)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: daysInYearArray\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdchlt6id.scala:19:29 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdaysInLeapYear\e[0m = daysInLeapYearArray(year)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             Not found: daysInLeapYearArray\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdchlt6id.scala:20:33 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdaysInYearAndMonth\e[0m\
    \ = daysInYearAndMonthArray(year, month)\n\e[31m\e[31m   |\e[0m              \
    \                   ^^^^^^^^"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931)\n\
    \        val monthDaysArray = Array(31,28,31,30,31,30,31,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray2 = Array(31,29,31,30,31,30,31,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray3 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray4 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31)\n\
    \        val monthDaysArray5 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray6 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31)\n\
    \        val monthDaysArray7 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray8 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31)\n\
    \        val monthDaysArray9 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val monthDaysArray10 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31)\n\
    \        val monthDaysArray11 = Array(31,\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpquf855b6.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpquf855b6.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n    \
    \    val yearArray = List(1, 9999)\n        val monthCount = monthArray.count(month\
    \ => month == month)\n        val dayCount = dayArray.count(day => day == day)\n\
    \        val yearCount = yearArray.count(year => year == year)\n        val validMonth\
    \ = monthCount != 0\n        val validDay = dayCount != 0\n        val validYear\
    \ = yearCount != 0\n        val validDate = validMonth && validDay && validYear\n\
    \        validDate\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmjc55rhz.scala:30)\n\tat Problem.main(tmpmjc55rhz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val months\
    \ = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val days = List(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsAndDays = List(1,3,5,7,8,10,12)\n        val daysAndMonths\
    \ = List(4,6,9,11)\n        val monthsAndDaysOr29 = List(2,4)\n        val daysAndMonthsOr31\
    \ = List(1,3,5,7,8,10,12)\n        val daysAndMonthsOr30 = List(4,6,9,11)\n  \
    \      val daysAndMonthsOr29Or31 = List(2,4)\n        val daysAndMonthsOr30Or31\
    \ = List(1,3,5,7,8,10,12)\n        val daysAndMonthsOr30Or31 = List(4,6,9,11)\n\
    \        val daysAndMonthsOr30Or31 = List(2,4)\n        val daysAndMonthsOr30Or31\
    \ = List(1,3,5,7,8,10,12)\n        val daysAndMonthsOr30Or31 = List(4,6,9,11)\n\
    \        val daysAndMonthsOr30Or31 = List(2,4)\n        val daysAndMonthsOr30Or31\
    \ = List(1,3,5,7,8,10,12)\n        val daysAndMonthsOr30Or31 = List(4,6,9,11)\n\
    \        val daysAndMonthsOr30Or31 = List(2,4)\n        val daysAndMonthsOr30Or31\
    \ = List(1,3,5,7,8,10,12)\n        val daysAndMonthsOr30Or31 = List(4,6,9,11)\n\
    \        val daysAndMonthsOr30Or31 = List(2,4)\n        val daysAndMonthsOr30Or31\
    \ = List(1,3,5,7,8,10,12)\n        val daysAndMonthsOr30Or31 = List(4,6,9,11)\n\
    \        val daysAndMonthsOr30Or31 = List(2,4)\n        val daysAndMonthsOr30Or31\
    \ = List(1,3,5,7,8,10,12)\n        val daysAndMonthsOr30Or31 = List(4,6,9,11)\n\
    \        val daysAndMonthsOr30Or31 = List(2,4)\n        val daysAndMonthsOr30Or31\
    \ = List(1,3,5,7,8,10,12)\n        val daysAndMonthsOr30Or31 = List(4,6,9,11)\n\
    \        val daysAndMonthsOr30Or31 = List(2,4)\n        val daysAndMonthsOr30Or31\
    \ = List(1,3,5,7,\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppp22g305.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppp22g305.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysAndMonthsOr30Or31\e[0m = List(\e[31m4\e[0m,\e[31m6\e[0m,\e[31m9\e\
    [0m,\e[31m11\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysAndMonthsOr30Or31 is already defined as \e[33mvalue\e\
    [0m \e[35mdaysAndMonthsOr30Or31\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppp22g305.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdaysAndMonthsOr30Or31\e\
    [0m = List(\e[31m2\e[0m,\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysAndMonthsOr30Or31 is already defined as \e[33mvalue\e\
    [0m \e[35mdaysAndMonthsOr30Or31\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppp22g305.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mdaysAndMonthsOr30Or31\e\
    [0m = List(\e[31m1\e[0m,\e[31m3\e[0m,\e[31m5\e[0m,\e[31m7\e[0m,\e[31m8\e[0m,\e\
    [31m10\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysAndMonthsOr30Or31 is already defined as \e[33mvalue\e\
    [0m \e[35mdaysAndMonthsOr30Or31\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppp22g305.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdaysAndMonthsOr30Or31\e\
    [0m = List(\e[31m4\e[0m,\e[31m6\e[0m,\e[31m9\e[0m,\e[31m11\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdaysAndM"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthDays\
    \ = monthDays(month)\n        val daysInMonth = daysInMonth(month)\n        val\
    \ daysInYear = daysInYear(year)\n        val daysInLeapYear = daysInLeapYear(year)\n\
    \        val daysInYearAndMonth = daysInYearAndMonth(year, month)\n        val\
    \ daysInLeapYearAndMonth = daysInLeapYearAndMonth(year, month)\n        val daysInYearAndMonthAndDay\
    \ = daysInYearAndMonthAndDay(year, month, day)\n        val daysInLeapYearAndMonthAndDay\
    \ = daysInLeapYearAndMonthAndDay(year, month, day)\n        val daysInYearAndMonthAndDayAndYear\
    \ = daysInYearAndMonthAndDayAndYear(year, month, day)\n        val daysInLeapYearAndMonthAndDayAndYear\
    \ = daysInLeapYearAndMonthAndDayAndYear(year, month, day)\n        val daysInYearAndMonthAndDayAndYearAndMonth\
    \ = daysInYearAndMonthAndDayAndYearAndMonth(year, month, day)\n        val daysInLeapYearAndMonthAndDayAndYearAndMonth\
    \ = daysInLeapYearAndMonthAndDayAndYearAndMonth(year, month, day)\n        val\
    \ daysInYearAndMonthAndDayAndYearAndMonthAndDay = daysInYearAndMonthAndDayAndYearAndMonthAndDay(year,\
    \ month, day)\n        val daysInLeapYearAndMonthAndDayAndYearAndMonthAndDay =\
    \ daysInLeapYearAndMonthAndDayAndYearAndMonthAndDay(year, month, day)\n      \
    \  val daysInYearAndMonthAndDayAndYearAndMonthAndDayAndYear = daysInYearAndMonthAndDayAndYearAndMonthAndDayAndYear(year,\
    \ month, day)\n        val daysInLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYear\
    \ = daysInLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYear(year, month, day)\n\
    \        val daysInYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth = daysInYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth(year,\
    \ month, day)\n        val daysInLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth\
    \ = daysInLeapYearAndMonthAndDayAndYearAndMonthAndDayAndYearAndMonth(year, month,\
    \ day)\n        val daysInYearAndMonthAndDayAndYearAndMonthAndDayAndYear\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcqtg5rh2.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcqtg5rh2.scala:16:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthDays\e[0m = monthDays(month)\n\e[31m\e[31m   |\e[0m             \
    \           ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mmonthDays\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpcqtg5rh2.scala:17:26 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth(month)\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Recursive \e[33mvalue\e[0m \e[35mdaysInMonth\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcqtg5rh2.scala:18:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInYear\e[0m = daysInYear(year)\n\e[31m\e[31m   |\e[0m            \
    \             ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mdaysInYear\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpcqtg5rh2.scala:19:29 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdaysInLeapYear\e[0m = daysInLeapYear(year)\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Recursive \e[33mvalue\e[0m \e[35mdaysInLeapYear\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcqtg5rh2.scala:20:33\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInYearAndMonth\e[0m = daysInYearAndMonth(year, month)\n\e[31m\e[31m\
    \   |\e[0m          "
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,219\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpge7abh80.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpge7abh80.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt < 1 || dateArray(0).toInt >\
    \ 12 || dateArray(1).toInt < 1 || dateArray(1).toInt > 31 || dateArray(2).toInt\
    \ < 1 || dateArray(2).toInt > 29 || dateArray(2).toInt > 31) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && dateArray(3).toInt == 31) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && dateArray(3).toInt == 30) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && dateArray(3).toInt == 29) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && dateArray(3).toInt == 28) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && dateArray(3).toInt == 27) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && dateArray(3).toInt == 26) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && dateArray(3).toInt == 25) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && dateArray(3).toInt == 24) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && dateArray(3).toInt == 23) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && dateArray(3).toInt == 22) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && dateArray(3).toInt == 21) {\n            return\
    \ false\n        }\n        if(dateArray(0).toInt == 2 && dateArray(1).toInt ==\
    \ 1 && dateArray(2).toInt == 31 && \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp07csackz.scala:52:92 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mif\e[0m(dateArray(\e[31m0\e[0m).toInt ==\
    \ \e[31m2\e[0m && dateArray(\e[31m1\e[0m).toInt == \e[31m1\e[0m && dateArray(\e\
    [31m2\e[0m).toInt == \e[31m31\e[0m && \n\e[31m\e[31m   |\e[0m                \
    \                                                                            ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc54yj4dg.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val dateFormat\
    \ = \"MM-dd-yyyy\"\n        val dateFormat1 = \"dd-MM-yyyy\"\n        val dateFormat2\
    \ = \"MM-yyyy\"\n        val dateFormat3 = \"yyyy\"\n        val dateFormat4 =\
    \ \"dd-MM-yyyy\"\n        val dateFormat5 = \"dd-MM-yyyy\"\n        val dateFormat6\
    \ = \"dd-MM-yyyy\"\n        val dateFormat7 = \"dd-MM-yyyy\"\n        val dateFormat8\
    \ = \"dd-MM-yyyy\"\n        val dateFormat9 = \"dd-MM-yyyy\"\n        val dateFormat10\
    \ = \"dd-MM-yyyy\"\n        val dateFormat11 = \"dd-MM-yyyy\"\n        val dateFormat12\
    \ = \"dd-MM-yyyy\"\n        val dateFormat13 = \"dd-MM-yyyy\"\n        val dateFormat14\
    \ = \"dd-MM-yyyy\"\n        val dateFormat15 = \"dd-MM-yyyy\"\n        val dateFormat16\
    \ = \"dd-MM-yyyy\"\n        val dateFormat17 = \"dd-MM-yyyy\"\n        val dateFormat18\
    \ = \"dd-MM-yyyy\"\n        val dateFormat19 = \"dd-MM-yyyy\"\n        val dateFormat20\
    \ = \"dd-MM-yyyy\"\n        val dateFormat21 = \"dd-MM-yyyy\"\n        val dateFormat22\
    \ = \"dd-MM-yyyy\"\n        val dateFormat23 = \"dd-MM-yyyy\"\n        val dateFormat24\
    \ = \"dd-MM-yyyy\"\n        val dateFormat25 = \"dd-MM-yyyy\"\n        val dateFormat26\
    \ = \"dd-MM-yyyy\"\n        val dateFormat27 = \"dd-MM-yyyy\"\n        val dateFormat28\
    \ = \"dd-MM-yyyy\"\n        val dateFormat29 = \"dd-MM-yyyy\"\n        val dateFormat30\
    \ = \"dd-MM-yyyy\"\n        val dateFormat31 = \"dd-MM-yyyy\"\n        val dateFormat32\
    \ = \"dd-MM-yyyy\"\n        val dateFormat33 = \"dd-MM-yyyy\"\n        val dateFormat34\
    \ = \"dd-MM-yyyy\"\n        val dateFormat35 = \"dd-MM-yyyy\"\n        val dateFormat36\
    \ = \"dd-MM-yyyy\"\n        val dateFormat37 = \"dd-MM-yyyy\"\n        val dateFormat38\
    \ = \"dd-MM-yyyy\"\n        val dateFormat39 = \"dd-MM-yyyy\"\n        val dateFormat40\
    \ = \"dd-MM-yyyy\"\n        val dateFormat41 = \"dd-MM-yyyy\"\n        val dateFormat42\
    \ = \"dd-MM-yyyy\"\n        val dateFormat43 = \"dd-MM-yyyy\"\n        val dateFormat44\
    \ = \"dd-MM-yyyy\"\n        val dateFormat45 = \"dd-MM-yyyy\"\n        val dateFormat46\
    \ = \"dd-MM-yyyy\"\n        val date\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp93eof_46.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp93eof_46.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateArray\e[0m = date.split(\e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value split is\
    \ not a member of Null - did you mean date.wait?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp93eof_46.scala:64:5 ---------------------\e[0m\e[0m\n\e[31m64\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010178
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthCheck = monthArray.contains(month)\n        val dayCheck = dayArray.contains(day)\n\
    \        val yearCheck = yearArray.contains(year)\n        val dateCheck = monthCheck\
    \ && dayCheck && yearCheck\n        dateCheck\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi778l_co.scala:26)\n\tat Problem.main(tmpi778l_co.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12){\n            if(day > 0 && day <= 31)\n                return\
    \ true\n        }\n        if(month == 4 || month == 6 || month == 9 || month\
    \ == 11){\n            if(day > 0 && day <= 30)\n                return true\n\
    \        }\n        if(month == 2){\n            if(day > 0 && day <= 29)\n  \
    \              return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmprv460_7n.scala:13)\n\
    \tat Problem$.main(tmprv460_7n.scala:37)\n\tat Problem.main(tmprv460_7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val dateFormat\
    \ = \"MM-dd-yyyy\"\n        val dateFormat2 = dateFormat.replaceAll(\"-\", \"\"\
    )\n        val dateFormat3 = dateFormat2.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat4 = dateFormat3.replaceAll(\"-\", \"\")\n        val dateFormat5 =\
    \ dateFormat4.replaceAll(\"-\", \"\")\n        val dateFormat6 = dateFormat5.replaceAll(\"\
    -\", \"\")\n        val dateFormat7 = dateFormat6.replaceAll(\"-\", \"\")\n  \
    \      val dateFormat8 = dateFormat7.replaceAll(\"-\", \"\")\n        val dateFormat9\
    \ = dateFormat8.replaceAll(\"-\", \"\")\n        val dateFormat10 = dateFormat9.replaceAll(\"\
    -\", \"\")\n        val dateFormat11 = dateFormat10.replaceAll(\"-\", \"\")\n\
    \        val dateFormat12 = dateFormat11.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat13 = dateFormat12.replaceAll(\"-\", \"\")\n        val dateFormat14\
    \ = dateFormat13.replaceAll(\"-\", \"\")\n        val dateFormat15 = dateFormat14.replaceAll(\"\
    -\", \"\")\n        val dateFormat16 = dateFormat15.replaceAll(\"-\", \"\")\n\
    \        val dateFormat17 = dateFormat16.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat18 = dateFormat17.replaceAll(\"-\", \"\")\n        val dateFormat19\
    \ = dateFormat18.replaceAll(\"-\", \"\")\n        val dateFormat20 = dateFormat19.replaceAll(\"\
    -\", \"\")\n        val dateFormat21 = dateFormat20.replaceAll(\"-\", \"\")\n\
    \        val dateFormat22 = dateFormat21.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat23 = dateFormat22.replaceAll(\"-\", \"\")\n        val dateFormat24\
    \ = dateFormat23.replaceAll(\"-\", \"\")\n        val dateFormat25 = dateFormat24.replaceAll(\"\
    -\", \"\")\n        val dateFormat26 = dateFormat25.replaceAll(\"-\", \"\")\n\
    \        val dateFormat27 = dateFormat26.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat28 = dateFormat27.replaceAll(\"-\", \"\")\n        val dateFormat29\
    \ = dateFormat28.replaceAll(\"-\", \"\")\n        val dateFormat30 = dateFormat29.replaceAll(\"\
    -\", \"\")\n        val dateFormat31 = dateFormat30.replaceAll(\"-\", \"\")\n\
    \        val dateFormat32 = dateFormat31.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat33 = dateFormat32.replaceAll(\"-\", \"\")\n        val dateFormat34\
    \ = dateFormat33.replaceAll(\"-\", \"\")\n        val dateFormat35 = dateFormat34.replaceAll(\"\
    -\", \"\")\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_7x5vkhs.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInYear =\
    \ Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInYear\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInYear\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInYear\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInYear\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInYear\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInYear\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInYear\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInYear\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp16gaapjg.scala:40:25 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36myearsInYear\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp16gaapjg.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array(\e\
    [31m31\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp16gaapjg.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = Array(\e[31m1\e\
    [0m,\e[31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e\
    [0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp16gaapjg.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36myearsInYear\e[0m = Array(\e[31m1\e[0m,\e\
    [31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e[0m,\e\
    [31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0myearsInYear is already defined as \e[33mvalue\e[0m \e[35myearsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that over"
  stdout: ''
  timestamp: 1660010181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc54yj4dg.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3) {\n            return\
    \ false\n        }\n        val month = dateArray(0).toInt\n        val day =\
    \ dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if(month\
    \ < 1 || month > 12) {\n            return false\n        }\n        if(day <\
    \ 1 || day > 31) {\n            return false\n        }\n        if(month == 2\
    \ && day > 29) {\n            return false\n        }\n        if(month == 2 &&\
    \ day > 28) {\n            return false\n        }\n        if(month == 2 && day\
    \ > 31) {\n            return false\n        }\n        if(month == 3 && day >\
    \ 31) {\n            return false\n        }\n        if(month == 4 && day > 30)\
    \ {\n            return false\n        }\n        if(month == 5 && day > 31) {\n\
    \            return false\n        }\n        if(month == 6 && day > 31) {\n \
    \           return false\n        }\n        if(month == 7 && day > 31) {\n  \
    \          return false\n        }\n        if(month == 8 && day > 31) {\n   \
    \         return false\n        }\n        if(month == 9 && day > 31) {\n    \
    \        return false\n        }\n        if(month == 10 && day > 31) {\n    \
    \        return false\n        }\n        if(month == 11 && day > 30) {\n    \
    \        return false\n        }\n        if(month == 12 && day > 31) {\n    \
    \        return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonths\
    \ = Set(1,3,5,7,8,10,12)\n        val validDays = Set(1,3,5,7,8,10,12,31)\n  \
    \      val validYear = Set(4,6,9,11)\n        val validMonth = Set(2,4)\n    \
    \    val validDay = Set(1,3,5,7,8,10,12,31)\n        val validYearMonth = Set(4,6,9,11,12,2)\n\
    \        val validYearMonthDay = Set(4,6,9,11,12,2,31)\n        val validYearMonthDays\
    \ = Set(4,6,9,11,12,2,31,30)\n        val validYearMonthDaysOfMonth = Set(4,6,9,11,12,2,31,30,31)\n\
    \        val validYearMonthDaysOfMonths = Set(4,6,9,11,12,2,31,30,31,30)\n   \
    \     val validYearMonthDaysOfMonthsOfYear = Set(4,6,9,11,12,2,31,30,31,30,31)\n\
    \        val validYearMonthDaysOfMonthsOfYears = Set(4,6,9,11,12,2,31,30,31,30,31,30)\n\
    \        val validYearMonthDaysOfMonthsOfYearsOfMonth = Set(4,6,9,11,12,2,31,30,31,30,31,30,31)\n\
    \        val validYearMonthDaysOfMonthsOfYearsOfMonths = Set(4,6,9,11,12,2,31,30,31,30,31,30,31,30)\n\
    \        val validYearMonthDaysOfMonthsOfYearsOfMonths = Set(4,6,9,11,12,2,31,30,31,30,31,30,31,30)\n\
    \        val validYearMonthDaysOfMonthsOfYearsOfMonths = Set(4,6,9,11,12,2,31,30,31,30,31,30,31,30,31)\n\
    \        val validYearMonthDaysOfMonthsOfYearsOfMonths = Set(4,6,9,11,12,2,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val validYearMonthDaysOfMonthsOfYearsOfMonths = Set(4,6,9,11,12,2,31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val validYearMonthDaysOfMonthsOfYearsOfMonths = Set(4,6,9,11,12,2,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val validYearMonthDaysOfMonthsOfYearsOfMonths = Set(4,6,\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8aigsbkt.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8aigsbkt.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvalidYearMonthDaysOfMonthsOfYearsOfMonths\e[0m = Set(\e[31m4\e[0m,\e[31m6\e\
    [0m,\e[31m9\e[0m,\e[31m11\e[0m,\e[31m12\e[0m,\e[31m2\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearMonthDaysOfMonthsOfYearsOfMonths is already defined\
    \ as \e[33mvalue\e[0m \e[35mvalidYearMonthDaysOfMonthsOfYearsOfMonths\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8aigsbkt.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mvalidYearMonthDaysOfMonthsOfYearsOfMonths\e\
    [0m = Set(\e[31m4\e[0m,\e[31m6\e[0m,\e[31m9\e[0m,\e[31m11\e[0m,\e[31m12\e[0m,\e\
    [31m2\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearMonthDaysOfMonthsOfYearsOfMonths is already defined\
    \ as \e[33mvalue\e[0m \e[35mvalidYearMonthDaysOfMonthsOfYearsOfMonths\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8aigsbkt.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mvalidYearMonthDaysOfMonthsOfYearsOfMonths\e\
    [0m = Set(\e[31m4\e[0m,\e[31m6\e[0m,\e[31m9\e[0m,\e[31m11\e[0m,\e[31m12\e[0m,\e\
    [31m2\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e["
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateString = dateFormat.parse(date)\n\
    \        dateString != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfcwti7gg.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val daysArray = List(1, 30, 29)\n   \
    \     val monthArray2 = List(2, 4, 6, 9, 11)\n        val daysArray2 = List(1,\
    \ 31)\n        val monthArray3 = List(1, 12)\n        val daysArray3 = List(1,\
    \ 31)\n        val monthArray4 = List(2, 4)\n        val daysArray4 = List(1,\
    \ 30)\n        val monthArray5 = List(1, 3)\n        val daysArray5 = List(1,\
    \ 31)\n        val monthArray6 = List(1, 3)\n        val daysArray6 = List(1,\
    \ 31)\n        val monthArray7 = List(1, 3)\n        val daysArray7 = List(1,\
    \ 31)\n        val monthArray8 = List(1, 3)\n        val daysArray8 = List(1,\
    \ 31)\n        val monthArray9 = List(1, 3)\n        val daysArray9 = List(1,\
    \ 31)\n        val monthArray10 = List(1, 3)\n        val daysArray10 = List(1,\
    \ 31)\n        val monthArray11 = List(1, 3)\n        val daysArray11 = List(1,\
    \ 31)\n        val monthArray12 = List(1, 3)\n        val daysArray12 = List(1,\
    \ 31)\n        val monthArray13 = List(1, 3)\n        val daysArray13 = List(1,\
    \ 31)\n        val monthArray14 = List(1, 3)\n        val daysArray14 = List(1,\
    \ 31)\n        val monthArray15 = List(1, 3)\n        val daysArray15 = List(1,\
    \ 31)\n        val monthArray16 = List(1, 3)\n        val daysArray16 = List(1,\
    \ 31)\n        val monthArray17 = List(1, 3)\n        val daysArray17 = List(1,\
    \ 31)\n        val monthArray18 = List(1, 3)\n        val daysArray18 = List(1,\
    \ 31)\n        val monthArray19 = List(1, 3)\n        val daysArray19 = List(1,\
    \ 31)\n        val monthArray20 = List(1, 3)\n        val daysArray20 = List(1,\
    \ 31)\n        val monthArray21 = List(1, 3)\n        val daysArray21 = List(1,\
    \ 31)\n        val monthArray22 = List(1, 3)\n        val daysArray22 = List(1,\
    \ 31)\n        val monthArray23 = List(1, 3)\n        val daysArray23 = List(1,\
    \ 31)\n        val monthArray24 = List(1, 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5a6dhw8b.scala:63:5\
    \ ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        dateObj != null\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_7b0z0y_.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val dateFormat\
    \ = \"MM-dd-yyyy\"\n        val dateFormat2 = dateFormat.replaceAll(\"-\", \"\"\
    )\n        val dateFormat3 = dateFormat2.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat4 = dateFormat3.replaceAll(\"-\", \"\")\n        val dateFormat5 =\
    \ dateFormat4.replaceAll(\"-\", \"\")\n        val dateFormat6 = dateFormat5.replaceAll(\"\
    -\", \"\")\n        val dateFormat7 = dateFormat6.replaceAll(\"-\", \"\")\n  \
    \      val dateFormat8 = dateFormat7.replaceAll(\"-\", \"\")\n        val dateFormat9\
    \ = dateFormat8.replaceAll(\"-\", \"\")\n        val dateFormat10 = dateFormat9.replaceAll(\"\
    -\", \"\")\n        val dateFormat11 = dateFormat10.replaceAll(\"-\", \"\")\n\
    \        val dateFormat12 = dateFormat11.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat13 = dateFormat12.replaceAll(\"-\", \"\")\n        val dateFormat14\
    \ = dateFormat13.replaceAll(\"-\", \"\")\n        val dateFormat15 = dateFormat14.replaceAll(\"\
    -\", \"\")\n        val dateFormat16 = dateFormat15.replaceAll(\"-\", \"\")\n\
    \        val dateFormat17 = dateFormat16.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat18 = dateFormat17.replaceAll(\"-\", \"\")\n        val dateFormat19\
    \ = dateFormat18.replaceAll(\"-\", \"\")\n        val dateFormat20 = dateFormat19.replaceAll(\"\
    -\", \"\")\n        val dateFormat21 = dateFormat20.replaceAll(\"-\", \"\")\n\
    \        val dateFormat22 = dateFormat21.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat23 = dateFormat22.replaceAll(\"-\", \"\")\n        val dateFormat24\
    \ = dateFormat23.replaceAll(\"-\", \"\")\n        val dateFormat25 = dateFormat24.replaceAll(\"\
    -\", \"\")\n        val dateFormat26 = dateFormat25.replaceAll(\"-\", \"\")\n\
    \        val dateFormat27 = dateFormat26.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat28 = dateFormat27.replaceAll(\"-\", \"\")\n        val dateFormat29\
    \ = dateFormat28.replaceAll(\"-\", \"\")\n        val dateFormat30 = dateFormat29.replaceAll(\"\
    -\", \"\")\n        val dateFormat31 = dateFormat30.replaceAll(\"-\", \"\")\n\
    \        val dateFormat32 = dateFormat31.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat33 = dateFormat32.replaceAll(\"-\", \"\")\n        val dateFormat34\
    \ = dateFormat33.replaceAll(\"-\", \"\")\n        val dateFormat35 = dateFormat34.replaceAll(\"\
    -\", \"\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp19jy4tx9.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc54yj4dg.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n    \
    \    val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        val monthCheck = monthIndex\
    \ >= 0 && monthIndex < 12\n        val dayCheck = dayIndex >= 0 && dayIndex <\
    \ 30\n        val yearCheck = yearIndex >= 0 && yearIndex < 100\n        val dateCheck\
    \ = monthCheck && dayCheck && yearCheck\n        dateCheck\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7stt6rq_.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36myearIndex\e[0m = yearArray.indexOf(year)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Not found: yearArray\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed match {\n            case null => false\n            case\
    \ _ => true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn64rcmek.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = monthArray.count(monthArray.contains(month))\n     \
    \   val dayCount = dayArray.count(dayArray.contains(day))\n        val yearCount\
    \ = yearArray.count(yearArray.contains(year))\n        if(monthCount < 1 || monthCount\
    \ > 12) false\n        else if(dayCount < 1 || dayCount > 31) false\n        else\
    \ if(yearCount < 1 || yearCount > 2012) false\n        else true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwa2ystjg.scala:19:61\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmonthCount\e\
    [0m = monthArray.count(monthArray.contains(month))\n\e[31m\e[31m   |\e[0m    \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    Boolean\n\e[31m\
    \   |\e[0m                                          Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwa2ystjg.scala:20:55\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdayCount\e\
    [0m = dayArray.count(dayArray.contains(day))\n\e[31m\e[31m   |\e[0m          \
    \                            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  Found:    Boolean\n\e[31m   |\e[0m        \
    \                              Required: \e[1m\e[32mInt\e[0m\e[1m\e[32m \e[0m\e\
    [1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwa2ystjg.scala:21:58 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36myearCount\e[0m = yearArray.count(yearArray.contains(year))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    Boolean\n\
    \e[31m   |\e[0m                                        Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysArray = Array(31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val daysArray2 = Array(30,29,28,31)\n\
    \        val yearArray2 = Array(2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100)\n\
    \        val monthArray3 = Array(1,3,5,7,8,10,12)\n        val daysArray3 = Array(31,30,29,28,31)\n\
    \        val yearArray3 = Array(2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthArray4 = Array(4,6,9,11)\n        val daysArray4 = Array(30,29,28,31)\n\
    \        val yearArray4 = Array(2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgweiv9fs.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgweiv9fs.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n    \
    \    val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val validMonth = monthIndex != -1 && monthIndex < 12\n        val validDay\
    \ = dayIndex != -1 && dayIndex < 31\n        val validYear = year >= 1900 && year\
    \ <= 2100\n        val validDate = validMonth && validDay && validYear\n     \
    \   validDate\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpedljjvjs.scala:27)\n\tat Problem.main(tmpedljjvjs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3){\n            return\
    \ false\n        }\n        val monthArray = dateArray(0).toString.split(\"-\"\
    )\n        if(monthArray.length != 3){\n            return false\n        }\n\
    \        val dayArray = dateArray(1).toString.split(\"-\")\n        if(dayArray.length\
    \ != 3){\n            return false\n        }\n        val year = dateArray(2).toString.toInt\n\
    \        if(year < 1 || year > 9999){\n            return false\n        }\n \
    \       if(monthArray(1) < 1 || monthArray(1) > 12){\n            return false\n\
    \        }\n        if(monthArray(2) < 1 || monthArray(2) > 12){\n           \
    \ return false\n        }\n        if(dayArray(1) < 1 || dayArray(1) > 31){\n\
    \            return false\n        }\n        if(dayArray(2) < 1 || dayArray(2)\
    \ > 30){\n            return false\n        }\n        if(dayArray(3) < 1 || dayArray(3)\
    \ > 29){\n            return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp04q7o0j1.scala:28:27\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m(monthArray(\e\
    [31m1\e[0m) < \e[31m1\e[0m || monthArray(\e[31m1\e[0m) > \e[31m12\e[0m){\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m              \
    \             Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp04q7o0j1.scala:28:48 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mif\e[0m(monthArray(\e[31m1\e[0m) < \e[31m1\e[0m || monthArray(\e\
    [31m1\e[0m) > \e[31m12\e[0m){\n\e[31m\e[31m   |\e[0m                         \
    \                       ^^\e[0m\n\e[31m   |\e[0m                             \
    \                   Found:    (\e[31m12\e[0m : Int)\n\e[31m   |\e[0m         \
    \                                       Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp04q7o0j1.scala:31:27 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m(monthArray(\e[31m2\e[0m) < \e[31m1\e\
    [0m || monthArray(\e[31m2\e[0m) > \e[31m12\e[0m){\n\e[31m\e[31m   |\e[0m     \
    \                      ^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                           Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp04q7o0j1.scala:31:48\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m(monthArray(\e\
    [31m2\e[0m) < \e[31m1\e[0m || monthArray(\e[31m2\e[0m) > \e[31m12\e[0m){\n\e[31m\e\
    [31m   |\e[0m                                                ^^\e[0m\n\e[31m \
    \  |\e[0m                                                Found:    (\e[31m12\e\
    [0m : Int)\n\e[31m   |\e[0m                                                Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj = dateFormat.parse(date)\n\
    \        dateObj != null\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_7b0z0y_.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateArray2 = dateFormat.parse(date).getTime\n        val dateArray3\
    \ = dateFormat.parse(date).getTime\n        val dateArray4 = dateFormat.parse(date).getTime\n\
    \        val dateArray5 = dateFormat.parse(date).getTime\n        val dateArray6\
    \ = dateFormat.parse(date).getTime\n        val dateArray7 = dateFormat.parse(date).getTime\n\
    \        val dateArray8 = dateFormat.parse(date).getTime\n        val dateArray9\
    \ = dateFormat.parse(date).getTime\n        val dateArray10 = dateFormat.parse(date).getTime\n\
    \        val dateArray11 = dateFormat.parse(date).getTime\n        val dateArray12\
    \ = dateFormat.parse(date).getTime\n        val dateArray13 = dateFormat.parse(date).getTime\n\
    \        val dateArray14 = dateFormat.parse(date).getTime\n        val dateArray15\
    \ = dateFormat.parse(date).getTime\n        val dateArray16 = dateFormat.parse(date).getTime\n\
    \        val dateArray17 = dateFormat.parse(date).getTime\n        val dateArray18\
    \ = dateFormat.parse(date).getTime\n        val dateArray19 = dateFormat.parse(date).getTime\n\
    \        val dateArray20 = dateFormat.parse(date).getTime\n        val dateArray21\
    \ = dateFormat.parse(date).getTime\n        val dateArray22 = dateFormat.parse(date).getTime\n\
    \        val dateArray23 = dateFormat.parse(date).getTime\n        val dateArray24\
    \ = dateFormat.parse(date).getTime\n        val dateArray25 = dateFormat.parse(date).getTime\n\
    \        val dateArray26 = dateFormat.parse(date).getTime\n        val dateArray27\
    \ = dateFormat.parse(date).getTime\n        val dateArray28 = dateFormat.parse(date).getTime\n\
    \        val dateArray29 = dateFormat.parse(date).getTime\n        val dateArray30\
    \ = dateFormat.parse(date).getTime\n        val dateArray31 = dateFormat.parse(date).getTime\n\
    \        val dateArray32 = dateFormat.parse(date).getTime\n        val dateArray33\
    \ = dateFormat.parse(date).getTime\n        val dateArray34 = dateFormat.parse(date).getTime\n\
    \        val dateArray35 = dateFormat.parse(date).getTime\n        val dateArray36\
    \ = dateFormat.parse(date).getTime\n        val dateArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcq21u1gk.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcq21u1gk.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq21u1gk.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val daysInMonth\
    \ = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthArray = scala.collection.mutable.ArrayBuffer(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonthArray = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthArray2 = scala.collection.mutable.ArrayBuffer(4,6,9,11)\n  \
    \      val daysInMonthArray2 = scala.collection.mutable.ArrayBuffer(31,30,29,28)\n\
    \        val monthArray3 = scala.collection.mutable.ArrayBuffer(1,3,5,7,8,10,12)\n\
    \        val daysInMonthArray3 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthArray4 = scala.collection.mutable.ArrayBuffer(4,6,9,11)\n  \
    \      val daysInMonthArray4 = scala.collection.mutable.ArrayBuffer(31,30,29,28)\n\
    \        val monthArray5 = scala.collection.mutable.ArrayBuffer(1,3,5,7,8,10,12)\n\
    \        val daysInMonthArray5 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthArray6 = scala.collection.mutable.ArrayBuffer(4,6,9,11)\n  \
    \      val daysInMonthArray6 = scala.collection.mutable.ArrayBuffer(31,30,29,28)\n\
    \        val monthArray7 = scala.collection.mutable.ArrayBuffer(1,3,5,7,8,10,12)\n\
    \        val daysInMonthArray7 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthArray8 = scala.collection.mutable.ArrayBuffer(4,6,9,11)\n  \
    \      val daysInMonthArray8 = scala.collection.mutable.ArrayBuffer(31,30,29,28)\n\
    \        val monthArray9 = scala.collection.mutable.ArrayBuffer(1,3,5,7,8,10,12)\n\
    \        val daysInMonthArray9 = scala.collection.mutable.ArrayBuffer(31,30,29,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthArray10 = scala.collection.mutable.ArrayBuffer(4,6,9,11)\n \
    \       val daysInMonthArray10 = scala.collection.mutable.ArrayBuffer(31,30,29,28)\n\
    \        val monthArray11 = scala.collection.mutable.ArrayBuffer(1,3,5,7,8,10,12)\n\
    \        val daysInMonthArray11 = \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0ory5oan.scala:38:32 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray11\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ory5oan.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcwazrpfe.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpcwazrpfe.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonth\
    \ = month >= 1 && month <= 12\n        val validDay = day >= 1 && day <= 31\n\
    \        val validYear = year >= 1 && year <= 9999\n        val validDate = validMonth\
    \ && validDay && validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmpxxjh2ws8.scala:13)\n\
    \tat Problem$.main(tmpxxjh2ws8.scala:29)\n\tat Problem.main(tmpxxjh2ws8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonths\
    \ = List(1,3,5,7,8,10,12)\n        val validDays = List(1,30,29,30)\n        val\
    \ validYear = List(1,12)\n        val validMonth = List(1,2)\n        val validDay\
    \ = List(1,30)\n        val validYears = List(1,12)\n        val validMonths =\
    \ List(1,3,5,7,8,10,12)\n        val validDays = List(1,30,29,30)\n        val\
    \ validYear = List(1,12)\n        val validMonth = List(1,2)\n        val validDay\
    \ = List(1,30)\n        val validYears = List(1,12)\n        val validMonths =\
    \ List(1,3,5,7,8,10,12)\n        val validDays = List(1,30,29,30)\n        val\
    \ validYear = List(1,12)\n        val validMonth = List(1,2)\n        val validDay\
    \ = List(1,30)\n        val validYears = List(1,12)\n        val validMonths =\
    \ List(1,3,5,7,8,10,12)\n        val validDays = List(1,30,29,30)\n        val\
    \ validYear = List(1,12)\n        val validMonth = List(1,2)\n        val validDay\
    \ = List(1,30)\n        val validYears = List(1,12)\n        val validMonths =\
    \ List(1,3,5,7,8,10,12)\n        val validDays = List(1,30,29,30)\n        val\
    \ validYear = List(1,12)\n        val validMonth = List(1,2)\n        val validDay\
    \ = List(1,30)\n        val validYears = List(1,12)\n        val validMonths =\
    \ List(1,3,5,7,8,10,12)\n        val validDays = List(1,30,29,30)\n        val\
    \ validYear = List(1,12)\n        val validMonth = List(1,2)\n        val validDay\
    \ = List(1,30)\n        val validYears = List(1,12)\n        val validMonths =\
    \ List(1,3,5,7,8,10,12)\n        val validDays = List(1,30,29,30)\n        val\
    \ validYear = List(1,12)\n        val validMonth = List(1,2)\n        val validDay\
    \ = List(1,30)\n        val validYears = List(1,12)\n        val validMonths =\
    \ List(1,3,5,7,8,10,12)\n        val validDays = List(1,30,29,30)\n        val\
    \ validYear = List(1,12)\n        val validMonth = List(1,2)\n        val validDay\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplsepsp66.scala:62:22 ---------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        \e[33mval\e[0m \e[36mvalidDay\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmplsepsp66.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvalidMonths\e[0m = List(\e\
    [31m1\e[0m,\e[31m3\e[0m,\e[31m5\e[0m,\e[31m7\e[0m,\e[31m8\e[0m,\e[31m10\e[0m,\e\
    [31m12\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidMonths is already defined as \e[33mvalue\e[0m \e[35mvalidMonths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplsepsp66.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvalidDays\e[0m = List(\e[31m1\e[0m,\e\
    [31m30\e[0m,\e[31m29\e[0m,\e[31m30\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidDays is already defined as \e[33mvalue\e[0m \e[35mvalidDays\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplsepsp66.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvalidYear\e[0m = List(\e[31m1\e[0m,\e\
    [31m12\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalidYear is already defined as \e[33mvalue\e[0m \e[35mvalidYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplsepsp66.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvalidMonth\e[0m = List(\e[31m1\e[0m,\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalidMonth is"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val daysInMonth\
    \ = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonthArray = Array.ofDim[Int](12)\n        daysInMonthArray(month\
    \ - 1) = daysInMonth\n        val monthArray = Array.ofDim[Int](12)\n        monthArray(month\
    \ - 1) = daysInMonth\n        val yearArray = Array.ofDim[Int](12)\n        yearArray(year\
    \ - 1) = daysInMonth\n        val validDate = monthArray.zip(daysInMonthArray).zip(yearArray).forall\
    \ { case (m, d) => m <= d && d <= d }\n        validDate\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4cnck4u4.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp4cnck4u4.scala:23:98 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvalidDate\e[0m = monthArray.zip(daysInMonthArray).zip(yearArray).forall\
    \ { \e[33mcase\e[0m (m, d) => m <= d && d <= d }\n\e[31m\e[31m   |\e[0m      \
    \                                                                            \
    \              ^^^^\e[0m\n\e[31m   |\e[0mvalue <= is not a member of (Int, Int),\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n\
    \        val monthArray3 = Array(2)\n        val dayArray3 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n\
    \        val monthArray4 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray4\
    \ = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n        val monthArray5 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray5 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n        val monthArray6\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray6 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n\
    \        val monthArray7 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray7\
    \ = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n        val monthArray8 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray8 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n        val monthArray9\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray9 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n\
    \        val monthArray10 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray10\
    \ = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n        val monthArray11 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray11 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n        val\
    \ monthArray12 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray12 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n\
    \        val monthArray13 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqzgxgwd2.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysArray = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val daysArray2 = Array(29,30,31)\n\
    \        val yearArray2 = Array(2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031)\n\
    \        if(date.isEmpty){\n            return false\n        }\n        if(months\
    \ < 1 || months > 12){\n            return false\n        }\n        if(days <\
    \ 1 || days > daysArray(months)){\n            return false\n        }\n     \
    \   if(months < 1 || months > 12){\n            return false\n        }\n    \
    \    if(year < 1 || year > yearArray(months)){\n            return false\n   \
    \     }\n        if(months < 1 || months > 12){\n            return false\n  \
    \      }\n        if(days < 1 || days > daysArray(months)){\n            return\
    \ false\n        }\n        if(months < 1 || months > 12){\n            return\
    \ false\n        }\n        if(year < 1 || year > yearArray(months)){\n      \
    \      return false\n        }\n        if(months < 1 || months > 12){\n     \
    \       return false\n        }\n        if(days < 1 || days > daysArray(months)){\n\
    \            return false\n        }\n        if(months < 1 || months > 12){\n\
    \            return false\n        }\n        if(year < 1 || year > yearArray(months)){\n\
    \            return false\n        }\n        if(months < 1 || months > 12){\n\
    \            return false\n        }\n        if(days < 1 || days > daysArray(months)){\n\
    \            return false\n        }\n        if(months < 1 || months > 12){\n\
    \            return false\n        }\n        if(year < 1 || year > yearArray(months)){\n\
    \            return false\n        }\n        if(months < 1 || months > 12){\n\
    \            return false\n        }\n        if(days < 1 || days > daysArray(months)){\n\
    \            return false\n        }\n        if(months < 1 || months > 12){\n\
    \            return false\n        }\n        if(year < 1 || year > yearArray(months)){\n\
    \            return false\n        }\n        if(months < 1 || months > 12){\n\
    \            return false\n        }\n        if(day\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw8xp42vl.scala:89:4 ----------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8xp42vl.scala:88:11\
    \ ------------------------\e[0m\e[0m\n\e[31m88 |\e[0m        \e[33mif\e[0m(day\n\
    \e[31m\e[31m   |\e[0m           ^^^\e[0m\n\e[31m   |\e[0m           Not found:\
    \ day\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n    \
    \    val yearArray = List(1, 12)\n        val monthArray2 = List(1, 4, 6, 9, 11)\n\
    \        val dayArray2 = List(1, 30)\n        val yearArray2 = List(1)\n     \
    \   val monthArray3 = List(1, 3, 5)\n        val dayArray3 = List(1, 31)\n   \
    \     val yearArray3 = List(1)\n        val monthArray4 = List(1, 4, 6)\n    \
    \    val dayArray4 = List(1, 30)\n        val yearArray4 = List(1)\n        val\
    \ monthArray5 = List(1, 3, 5)\n        val dayArray5 = List(1, 31)\n        val\
    \ yearArray5 = List(1)\n        val monthArray6 = List(1, 3, 5)\n        val dayArray6\
    \ = List(1, 31)\n        val yearArray6 = List(1)\n        val monthArray7 = List(1,\
    \ 3, 5)\n        val dayArray7 = List(1, 31)\n        val yearArray7 = List(1)\n\
    \        val monthArray8 = List(1, 3, 5)\n        val dayArray8 = List(1, 31)\n\
    \        val yearArray8 = List(1)\n        val monthArray9 = List(1, 3, 5)\n \
    \       val dayArray9 = List(1, 31)\n        val yearArray9 = List(1)\n      \
    \  val monthArray10 = List(1, 3, 5)\n        val dayArray10 = List(1, 31)\n  \
    \      val yearArray10 = List(1)\n        val monthArray11 = List(1, 3, 5)\n \
    \       val dayArray11 = List(1, 31)\n        val yearArray11 = List(1)\n    \
    \    val monthArray12 = List(1, 3, 5)\n        val dayArray12 = List(1, 31)\n\
    \        val yearArray12 = List(1)\n        val monthArray13 = List(1, 3, 5)\n\
    \        val dayArray13 = List(1, 31)\n        val yearArray13 = List(1)\n   \
    \     val monthArray14 = List(1, 3, 5)\n        val dayArray14 = List(1, 31)\n\
    \        val yearArray14 = List(1)\n        val monthArray15 = List(1, 3, 5)\n\
    \        val dayArray15 = List(1, 31)\n        val yearArray15 = List(1)\n   \
    \     val monthArray16 = List(1, 3, 5)\n        val dayArray16 = List(1, 31)\n\
    \        val yearArray16 = List(1)\n        val monthArray17 = List(1, 3, 5)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ge9b76z.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,31,30,29,28)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppsevzw4x.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmppsevzw4x.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010147
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n    \
    \    val monthCheck = monthArray.contains(month)\n        val dayCheck = dayArray.contains(day)\n\
    \        val yearCheck = year >= 1 && year <= 12\n        val dateCheck = monthCheck\
    \ && dayCheck && yearCheck\n        dateCheck\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7u_tb06x.scala:25)\n\tat Problem.main(tmp7u_tb06x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonths\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val validDays = List(1, 30, 29)\n   \
    \     val validYear = List(1, 12)\n        val validMonth = List(4, 6, 9, 11)\n\
    \        val validDay = List(31, 30)\n        val validYearMonth = List(12, 12,\
    \ 12, 12)\n        val validYearDay = List(31, 31, 31, 31)\n        val validYearMonthDay\
    \ = List(12, 12, 12, 12)\n        val validYearMonthDays = List(12, 12, 12, 12)\n\
    \        val validYearMonthDaysYear = List(12, 12, 12, 12)\n        val validYearMonthDaysYearMonth\
    \ = List(12, 12, 12, 12)\n        val validYearMonthDaysYearMonthDay = List(12,\
    \ 12, 12, 12)\n        val validYearMonthDaysYearMonthDays = List(12, 12, 12,\
    \ 12)\n        val validYearMonthDaysYearMonthDaysYear = List(12, 12, 12, 12)\n\
    \        val validYearMonthDaysYearMonthDaysYearMonth = List(12, 12, 12, 12)\n\
    \        val validYearMonthDaysYearMonthDaysYearMonthDay = List(12, 12, 12, 12)\n\
    \        val validYearMonthDaysYearMonthDaysYearMonthDays = List(12, 12, 12, 12)\n\
    \        val validYearMonthDaysYearMonthDaysYearMonthDaysYear = List(12, 12, 12,\
    \ 12)\n        val validYearMonthDaysYearMonthDaysYearMonthDaysYearMonth = List(12,\
    \ 12, 12, 12)\n        val validYearMonthDaysYearMonthDaysYearMonthDaysYearMonthDay\
    \ = List(12, 12, 12, 12)\n        val validYearMonthDaysYearMonthDaysYearMonthDaysYearMonthDays\
    \ = List(12, 12, 12, 12)\n        val validYearMonthDaysYearMonthDaysYearMonthDaysYearMonthDaysYear\
    \ = List(12, 12, 12, 12)\n        val validYearMonthDaysYearMonthDaysYearMonthDaysYearMonthDaysYearMonth\
    \ = List(12, 12, 12, 12)\n        val validYearMonthDaysYearMonthDaysYearMonthDaysYearMonthDaysYearMonthDay\
    \ = List(12, 12, 12, 12)\n        val validYearMonthDaysYearMonthDaysYearMonthDaysYearMonthDaysYearMonthDays\
    \ = List(12, 12, 12, 12)\n        val validYearMonthDaysYearMonthDaysYearMonthDays\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2hakyzhs.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2hakyzhs.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateInMillis = dateArray\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInCentury\
    \ = Array(100,50,20,10,5,4,2,1,0.5, 0.2, 0.1, 0.05)\n        val daysInYear =\
    \ Arrayn\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpod88anev.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpod88anev.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpod88anev.scala:19:5\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateArray = dateFormat.parse(date).getTime\n\
    \        val dateInMillis = dateArray\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,30,29,28,27,26,25)\n   \
    \     val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(30,29,28,27,26,25)\n\
    \        val monthArray3 = Array(1,3,5,7,8,10,12)\n        val dayArray3 = Array(1,3,5,7,8,10,30)\n\
    \        val monthArray4 = Array(4,6,9,11)\n        val dayArray4 = Array(30,29,28,27,26,25)\n\
    \        val monthArray5 = Array(1,3,5,7,8,10,12)\n        val dayArray5 = Array(1,3,5,7,8,10,30)\n\
    \        val monthArray6 = Array(4,6,9,11)\n        val dayArray6 = Array(30,29,28,27,26,25)\n\
    \        val monthArray7 = Array(1,3,5,7,8,10,12)\n        val dayArray7 = Array(1,3,5,7,8,10,30)\n\
    \        val monthArray8 = Array(4,6,9,11)\n        val dayArray8 = Array(30,29,28,27,26,25)\n\
    \        val monthArray9 = Array(1,3,5,7,8,10,12)\n        val dayArray9 = Array(1,3,5,7,8,10,30)\n\
    \        val monthArray10 = Array(4,6,9,11)\n        val dayArray10 = Array(30,29,28,27,26,25)\n\
    \        val monthArray11 = Array(1,3,5,7,8,10,12)\n        val dayArray11 = Array(1,3,5,7,8,10,30)\n\
    \        val monthArray12 = Array(4,6,9,11)\n        val dayArray12 = Array(30,29,28,27,26,25)\n\
    \        val monthArray13 = Array(1,3,5,7,8,10,12)\n        val dayArray13 = Array(1,3,5,7,8,10,30)\n\
    \        val monthArray14 = Array(4,6,9,11)\n        val dayArray14 = Array(30,29,28,27,26,25)\n\
    \        val monthArray15 = Array(1,3,5,7,8,10,12)\n        val dayArray15 = Array(1,3,5,7,8,10,30)\n\
    \        val monthArray16 = Array(4,6,9,11)\n        val dayArray16 = Array(30,29,28,27,26,25)\n\
    \        val monthArray17 = Array(1,3,5,7,8,10,12)\n        val dayArray17 = Array(1,3,5,7,8,10,30)\n\
    \        val monthArray18 = Array(4,6,\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj8zj7k9q.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj8zj7k9q.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj8zj7k9q.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val dateFormat\
    \ = \"MM-dd-yyyy\"\n        val dateFormat2 = dateFormat.replaceAll(\"-\", \"\"\
    )\n        val dateFormat3 = dateFormat2.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat4 = dateFormat3.replaceAll(\"-\", \"\")\n        val dateFormat5 =\
    \ dateFormat4.replaceAll(\"-\", \"\")\n        val dateFormat6 = dateFormat5.replaceAll(\"\
    -\", \"\")\n        val dateFormat7 = dateFormat6.replaceAll(\"-\", \"\")\n  \
    \      val dateFormat8 = dateFormat7.replaceAll(\"-\", \"\")\n        val dateFormat9\
    \ = dateFormat8.replaceAll(\"-\", \"\")\n        val dateFormat10 = dateFormat9.replaceAll(\"\
    -\", \"\")\n        val dateFormat11 = dateFormat10.replaceAll(\"-\", \"\")\n\
    \        val dateFormat12 = dateFormat11.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat13 = dateFormat12.replaceAll(\"-\", \"\")\n        val dateFormat14\
    \ = dateFormat13.replaceAll(\"-\", \"\")\n        val dateFormat15 = dateFormat14.replaceAll(\"\
    -\", \"\")\n        val dateFormat16 = dateFormat15.replaceAll(\"-\", \"\")\n\
    \        val dateFormat17 = dateFormat16.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat18 = dateFormat17.replaceAll(\"-\", \"\")\n        val dateFormat19\
    \ = dateFormat18.replaceAll(\"-\", \"\")\n        val dateFormat20 = dateFormat19.replaceAll(\"\
    -\", \"\")\n        val dateFormat21 = dateFormat20.replaceAll(\"-\", \"\")\n\
    \        val dateFormat22 = dateFormat21.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat23 = dateFormat22.replaceAll(\"-\", \"\")\n        val dateFormat24\
    \ = dateFormat23.replaceAll(\"-\", \"\")\n        val dateFormat25 = dateFormat24.replaceAll(\"\
    -\", \"\")\n        val dateFormat26 = dateFormat25.replaceAll(\"-\", \"\")\n\
    \        val dateFormat27 = dateFormat26.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat28 = dateFormat27.replaceAll(\"-\", \"\")\n        val dateFormat29\
    \ = dateFormat28.replaceAll(\"-\", \"\")\n        val dateFormat30 = dateFormat29.replaceAll(\"\
    -\", \"\")\n        val dateFormat31 = dateFormat30.replaceAll(\"-\", \"\")\n\
    \        val dateFormat32 = dateFormat31.replaceAll(\"-\", \"\")\n        val\
    \ dateFormat33 = dateFormat32.replaceAll(\"-\", \"\")\n        val dateFormat34\
    \ = dateFormat33.replaceAll(\"-\", \"\")\n        val dateFormat35 = dateFormat34.replaceAll(\"\
    -\", \"\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp19jy4tx9.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3)\n            return false\n\
    \        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n\
    \            return false\n        if(days < 1 || days > 31)\n            return\
    \ false\n        if(months == 2 && days < 1 || days > 30)\n            return\
    \ false\n        if(months == 3 && days < 1 || days > 29)\n            return\
    \ false\n        if(months == 4 && days < 1 || days > 28)\n            return\
    \ false\n        if(months == 5 && days < 1 || days > 27)\n            return\
    \ false\n        if(months == 6 && days < 1 || days > 26)\n            return\
    \ false\n        if(months == 7 && days < 1 || days > 25)\n            return\
    \ false\n        if(months == 8 && days < 1 || days > 24)\n            return\
    \ false\n        if(months == 9 && days < 1 || days > 23)\n            return\
    \ false\n        if(months == 10 && days < 1 || days > 22)\n            return\
    \ false\n        if(months == 11 && days < 1 || days > 21)\n            return\
    \ false\n        if(months == 12 && days < 1 || days > 20)\n            return\
    \ false\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        dateFormat.parse(date) != null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua63xiel.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmuhpc87t.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,219\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpge7abh80.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpge7abh80.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonth\
    \ = month >= 1 && month <= 12\n        val validDay = day >= 1 && day <= 31\n\
    \        val validYear = year >= 1 && year <= 9999\n        val validMonthAndDay\
    \ = validMonth && validDay\n        val validYearAndMonth = validYear && validMonthAndDay\n\
    \        validYearAndMonth\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmpb7azxsbc.scala:13)\n\
    \tat Problem$.main(tmpb7azxsbc.scala:30)\n\tat Problem.main(tmpb7azxsbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateToCheck = dateFormat.parse(date)\n\
    \        val daysInMonth = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val monthsInYear = Calendar.getInstance().get(Calendar.MONTH)\n     \
    \   val year = dateToCheck.getYear\n        val month = dateToCheck.getMonth\n\
    \        val day = dateToCheck.getDay\n        val isValid = day > 0 && day <=\
    \ daysInMonth\n        val isNotValid = day > 0 && day <= daysInMonth\n      \
    \  val isNotValidMonth = month > 0 && month <= monthsInYear\n        val isNotValidYear\
    \ = year > 0 && year <= 9999\n        val isNotValidDate = day > 0 && day <= daysInMonth\n\
    \        val isNotValidMonthAndYear = month > 0 && month <= monthsInYear && year\
    \ > 0 && year <= 9999\n        val isNotValidYearAndMonth = year > 0 && year <=\
    \ 9999 && month > 0 && month <= monthsInYear\n        val isNotValidMonthAndDay\
    \ = month > 0 && month <= monthsInYear && day > 0 && day <= daysInMonth\n    \
    \    val isNotValidYearAndDay = year > 0 && year <= 9999 && day > 0 && day <=\
    \ daysInMonth\n        val isNotValidMonthAndDayAndYear = month > 0 && month <=\
    \ monthsInYear && day > 0 && day <= daysInMonth && year > 0 && year <= 9999\n\
    \        val isNotValidYearAndDayAndMonth = year > 0 && year <= 9999 && month\
    \ > 0 && month <= monthsInYear && day > 0 && day <= daysInMonth\n        val isNotValidYearAndDayAndYearAndMonth\
    \ = year > 0 && year <= 9999 && month > 0 && month <= monthsInYear && day > 0\
    \ && day <= daysInMonth && year > 0 && year <= 9999\n        val isNotValidYearAndDayAndYearAndMonth\
    \ = year > 0 && year <= 9999 && month > 0 && month <= monthsInYear && day > 0\
    \ && day <= daysInMonth && year > 0 && year <= 9999\n        val isNotValidYearAndDayAndYearAndMonth\
    \ = year > 0 && year <= 9999 && month > 0 && month <= monthsInYear && day > 0\
    \ && day <= daysInMonth && year > 0 && year <= 9999\n        val isNotValidYearAndDayAndYearAndMonth\
    \ = year > 0 && year <= 9999 && month > 0 && month <= monthsInYear && day > 0\
    \ && day <= daysInMonth && year > 0 && year <= 9999\n        val isNotValidYear\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsjf0wv32.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsjf0wv32.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36misNotValidYearAndDayAndYearAndMonth\e[0m = year > \e[31m0\e[0m && year\
    \ <= \e[31m9999\e[0m && month > \e[31m0\e[0m && month <= monthsInYear && day >\
    \ \e[31m0\e[0m && day <= daysInMonth && year > \e[31m0\e[0m && year <= \e[31m9999\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNotValidYearAndDayAndYearAndMonth is already defined as\
    \ \e[33mvalue\e[0m \e[35misNotValidYearAndDayAndYearAndMonth\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsjf0wv32.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36misNotValidYearAndDayAndYearAndMonth\e[0m = year > \e[31m0\e[0m && year\
    \ <= \e[31m9999\e[0m && month > \e[31m0\e[0m && month <= monthsInYear && day >\
    \ \e[31m0\e[0m && day <= daysInMonth && year > \e[31m0\e[0m && year <= \e[31m9999\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misNotValidYearAndDayAndYearAndMonth is already defined as\
    \ \e[33mvalue\e[0m \e[35misNotValidYearAndDayAndYearAndMonth\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsjf0wv32.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36misNotValidYearAndDayAndYearAndMonth\e[0m = year > \e[31m0\e[0m && year\
    \ <= \e[31m9999\e[0m && month > \e[31m0\e[0m && mon"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val daysInMonth\
    \ = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val isValid = day > 0 && day <= daysInMonth\n        val isValidMonth\
    \ = month > 0 && month <= monthsInMonth\n        val isValidYear = year > 0 &&\
    \ year <= scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR)\n\
    \        val isValidDate = isValidMonth && isValidDay && isValidYear\n       \
    \ isValidDate\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaqkeveo9.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpaqkeveo9.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value Calendar is not a member of util\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaqkeveo9.scala:20:57 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misValidYear\e[0m = year\
    \ > \e[31m0\e[0m && year <= scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value Calendar is not a\
    \ member of util\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaqkeveo9.scala:21:42\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misValidDate\e[0m = isValidMonth && isValidDay && isValidYear\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                          Not found: isValidDay\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n    \
    \    val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        val valid = monthIndex\
    \ != -1 && dayIndex != -1 && yearIndex != -1\n        valid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjv40om8.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36myearIndex\e[0m = yearArray.indexOf(year)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Not found: yearArray\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3)\n            return false\n\
    \        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n\
    \            return false\n        if(days < 1 || days > 31)\n            return\
    \ false\n        if(months == 2 && days > 29)\n            return false\n    \
    \    if(months == 2 && days == 29)\n            return false\n        if(months\
    \ == 2 && days == 30)\n            return false\n        if(months == 3 && days\
    \ > 30)\n            return false\n        if(months == 3 && days == 30)\n   \
    \         return false\n        if(months == 3 && days == 31)\n            return\
    \ false\n        if(months == 4 && days > 30)\n            return false\n    \
    \    if(months == 4 && days == 30)\n            return false\n        if(months\
    \ == 4 && days == 31)\n            return false\n        if(months == 5 && days\
    \ > 30)\n            return false\n        if(months == 5 && days == 30)\n   \
    \         return false\n        if(months == 5 && days == 31)\n            return\
    \ false\n        if(months == 6 && days > 30)\n            return false\n    \
    \    if(months == 6 && days == 30)\n            return false\n        if(months\
    \ == 6 && days == 31)\n            return false\n        if(months == 7 && days\
    \ > 30)\n            return false\n        if(months == 7 && days == 30)\n   \
    \         return false\n        if(months == 7 && days == 31)\n            return\
    \ false\n        if(months == 8 && days > 30)\n            return false\n    \
    \    if(months == 8 && days == 30)\n            return false\n        if(months\
    \ == 8 && days == 31)\n            return false\n        if(months == 9 && days\
    \ > 30)\n            return false\n        if(months == 9 && days == 30)\n   \
    \         return false\n        if(months == 9 && days == 31)\n            return\
    \ false\n        if(months == 10 && days > 30)\n            return false\n   \
    \     if(months == 10 && days == 30)\n            return false\n        if(months\
    \ == 10 && days == 31)\n            return false\n        if(months == 11 && days\
    \ > 30)\n            return false\n        if(months == 11 && days == 30)\n  \
    \          return false\n        if(months == 11 && days == 31)\n            return\
    \ false\n        if(months == 12 && days > 30)\n            return false\n   \
    \     if(months == 12 && days == 30)\n            return false\n        if(months\
    \ == 12 && days == 31)\n            return false\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(1, 3, 5, 7, 8, 10, 12)\n        val dayArray = List(1, 30, 29)\n    \
    \    val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        val validMonth = monthIndex\
    \ >= 0 && monthIndex < 12\n        val validDay = dayIndex >= 0 && dayIndex <\
    \ 30\n        val validYear = yearIndex >= 0 && yearIndex < 100\n        val validDate\
    \ = validMonth && validDay && validYear\n        validDate\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg1wzyh8_.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36myearIndex\e[0m = yearArray.indexOf(year)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Not found: yearArray\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2001,2003,2005,2007,2009,2011,2013,2015,2017,2019,2021,2025,2027,2029,2031,2033,2035,2037,2039,2041,2043,2045,2047,2049,2051,2053,2055,2057,2059,2061,2063,2065,2067,2069,2071,2073,2075,2077,2079,2081,2083,2085,2087,2089,2091,2093,2095,2097,2099,2101,2103,2105,2107,2109,2111,2113,2115,2117,2119,2121,2123,2125,2127,2128)\n\
    \        val monthDaysArray = monthArray.zip(dayArray)\n        val monthYearsArray\
    \ = monthArray.zip(yearArray)\n        val monthDaysYearsArray = monthDaysArray.zip(yearArray)\n\
    \        val monthYearsDaysArray = monthYearsArray.zip(dayArray)\n        val\
    \ monthYearsDaysYearsArray = monthYearsDaysArray.zip(yearArray)\n        val monthYearsDaysYearsArray2\
    \ = monthYearsDaysYearsArray.zip(dayArray)\n        val monthYearsDaysYearsArray3\
    \ = monthYearsDaysYearsArray2.zip(yearArray)\n        val monthYearsDaysYearsArray4\
    \ = monthYearsDaysYearsArray3.zip(dayArray)\n        val monthYearsDaysYearsArray5\
    \ = monthYearsDaysYearsArray4.zip(yearArray)\n        val monthYearsDaysYearsArray6\
    \ = monthYearsDaysYearsArray5.zip(dayArray)\n        val monthYearsDaysYearsArray7\
    \ = monthYearsDaysYearsArray6.zip(yearArray)\n        val monthYearsDaysYearsArray8\
    \ = monthYearsDaysYearsArray7.zip(dayArray)\n        val monthYearsDaysYearsArray9\
    \ = monthYearsDaysYearsArray8.zip(yearArray)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz90nx_2s.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObject = dateFormat.parse(date)\n\
    \        dateObject != null\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc54yj4dg.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,219\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpge7abh80.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpge7abh80.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonth\
    \ = month >= 1 && month <= 12\n        val validDay = day >= 1 && day <= 31\n\
    \        val validYear = year >= 1900 && year <= 2100\n        val validMonthAndDay\
    \ = validMonth && validDay\n        val validMonthAndYear = validMonthAndDay &&\
    \ validYear\n        validMonthAndYear\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.validDate(tmp2mo4csyk.scala:13)\n\
    \tat Problem$.main(tmp2mo4csyk.scala:30)\n\tat Problem.main(tmp2mo4csyk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(1,3,5,7,8,10,12)\n\
    \        val yearArray2 = Array(2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthArray3 = Array(2,4,6,8,10,12)\n        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray3 = Array(2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthArray4 = Array(1,3,5,7,8,10,12)\n        val dayArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray4 = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthArray5 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray5\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val yearArray5 = Array(2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthArray6 = Array(4,6,9,11)\n        val dayArray6 = Array(1,3,5,7,8,10,12)\n\
    \        val yearArray6 = Array(2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        val monthArray7 = Array(2,4,6,8,10,12)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0qcv3j4r.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n\
    \        val yearArray2 = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032)\n\
    \        val monthArray3 = Array(2,4,6,8,10,12)\n        val dayArray3 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n\
    \        val yearArray3 = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032)\n\
    \        val monthArray4 = Array(1,2,3)\n        val dayArray4 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n\
    \        val yearArray4 = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa9dx2liv.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpa9dx2liv.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,219\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpge7abh80.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpge7abh80.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val validMonth\
    \ = month match {\n            case 1 => true\n            case 3 => true\n  \
    \          case 5 => true\n            case 7 => true\n            case 8 => true\n\
    \            case 10 => true\n            case 12 => true\n            case _\
    \ => false\n        }\n        val validDay = day match {\n            case 1\
    \ => true\n            case 3 => true\n            case 5 => true\n          \
    \  case 7 => true\n            case 8 => true\n            case 10 => true\n \
    \           case 12 => true\n            case _ => false\n        }\n        val\
    \ validYear = year match {\n            case _ => true\n        }\n        val\
    \ validDate = validMonth && validDay && validYear\n        validDate\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm09msm9k.scala:43)\n\tat Problem.main(tmpm09msm9k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\")\n        val\
    \ dayArray = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"13\"\
    , \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\")\n        val\
    \ yearArray = List(\"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"\
    07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\",\
    \ \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\")\n        val monthCheck = monthArray.contains(month.toString)\n\
    \        val dayCheck = dayArray.contains(day.toString)\n        val yearCheck\
    \ = yearArray.contains(year.toString)\n        val monthCheck2 = monthArray.contains(month.toString)\n\
    \        val dayCheck2 = dayArray.contains(day.toString)\n        val yearCheck2\
    \ = yearArray.contains(year.toString)\n        val monthCheck3 = monthArray.contains(month.toString)\n\
    \        val dayCheck3 = dayArray.contains(day.toString)\n        val yearCheck3\
    \ = yearArray.contains(year.toString)\n        val monthCheck4 = monthArray.contains(month.toString)\n\
    \        val dayCheck4 = dayArray.contains(day.toString)\n        val yearCheck4\
    \ = yearArray.contains(year.toString)\n        val monthCheck5 = monthArray.contains(month.toString)\n\
    \        val dayCheck5 = dayArray.contains(day.toString)\n        val yearCheck5\
    \ = yearArray.contains(year.toString)\n        val monthCheck6 = monthArray.contains(month.toString)\n\
    \        val dayCheck6 = dayArray.contains(day.toString)\n        val yearCheck6\
    \ = yearArray.contains(year.toString)\n        val monthCheck7 = monthArray.contains(month.toString)\n\
    \        val dayCheck7 = dayArray.contains(day.toString)\n        val yearCheck7\
    \ = yearArray.contains(year.toString)\n        val monthCheck8 = monthArray.contains(month.toString)\n\
    \        val dayCheck8 = dayArray.contains(day.toString)\n        val yearCheck8\
    \ = yearArray.contains(year.toString)\n        val monthCheck9 = monthArray.contains(month.toString)\n\
    \        val dayCheck9 = dayArray.contains(day.toString)\n        val yearCheck9\
    \ = yearArray.contains(year.toString)\n        val monthCheck10 = monthArray.contains(month.toString)\n\
    \        val dayCheck10 = day\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwcb3ur4m.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,219\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3gjcj34e.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3gjcj34e.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val months = dateArray(0).toInt\n        val days\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\")\n        val daysArray\
    \ = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"29\")\n        val\
    \ yearArray = List(\"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"\
    08\",\"09\",\"10\",\"11\",\"12\")\n        val monthArray2 = List(\"04\",\"06\"\
    ,\"09\",\"11\")\n        val daysArray2 = List(\"01\",\"03\",\"05\",\"07\",\"\
    08\",\"10\",\"12\",\"29\")\n        val yearArray2 = List(\"00\",\"01\",\"02\"\
    ,\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\")\n    \
    \    val monthArray3 = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\")\n\
    \        val daysArray3 = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"\
    ,\"29\")\n        val yearArray3 = List(\"00\",\"01\",\"02\",\"03\",\"04\",\"\
    05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\")\n        val monthArray4\
    \ = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"29\")\n        val\
    \ daysArray4 = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"29\")\n\
    \        val yearArray4 = List(\"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\"\
    ,\"07\",\"08\",\"09\",\"10\",\"11\",\"12\")\n        val monthArray5 = List(\"\
    01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"29\")\n        val daysArray5\
    \ = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"29\")\n        val\
    \ yearArray5 = List(\"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"\
    08\",\"09\",\"10\",\"11\",\"12\")\n        val monthArray6 = List(\"01\",\"03\"\
    ,\"05\",\"07\",\"08\",\"10\",\"12\",\"29\")\n        val daysArray6 = List(\"\
    01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"29\")\n        val yearArray6\
    \ = List(\"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\"\
    ,\"10\",\"\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpda_23bsi.scala:33:85 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36myearArray6\e[0m = List(\e\
    [31m\"00\"\e[0m,\e[31m\"01\"\e[0m,\e[31m\"02\"\e[0m,\e[31m\"03\"\e[0m,\e[31m\"\
    04\"\e[0m,\e[31m\"05\"\e[0m,\e[31m\"06\"\e[0m,\e[31m\"07\"\e[0m,\e[31m\"08\"\e\
    [0m,\e[31m\"09\"\e[0m,\e[31m\"10\"\e[0m,\"\n\e[31m\e[31m   |\e[0m            \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0m                                                 unclosed\
    \ string literal\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpda_23bsi.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010193
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020)\n\
    \        if(date.length == 0){\n            return false\n        }\n        if(monthArray.contains(month)\
    \ == false){\n            return false\n        }\n        if(dayArray.contains(day)\
    \ == false){\n            return false\n        }\n        if(yearArray.contains(year)\
    \ == false){\n            return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_5a69e6.scala:34)\n\tat Problem.main(tmpw_5a69e6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthArray\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray = Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        val yearArray = Array(2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfiilp7y0.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfiilp7y0.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3)\n            return false\n\
    \        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(month < 1 || month > 12)\n\
    \            return false\n        if(day < 1 || day > 31)\n            return\
    \ false\n        if(month == 2)\n            if(day > 29)\n                return\
    \ false\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnca6kdyr.scala:35)\n\tat Problem.main(tmpnca6kdyr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        val monthDays\
    \ = monthDays(year, month)\n        val daysInMonth = daysInMonth(year, month)\n\
    \        val daysInYear = daysInYear(year)\n        val daysInYearMonth = daysInYearMonth(year,\
    \ month)\n        val daysInYearMonthDays = daysInYearMonthDays(year, month)\n\
    \        val daysInYearMonthDaysPlusOne = daysInYearMonthDaysPlusOne(year, month)\n\
    \        val daysInYearMonthDaysPlusTwo = daysInYearMonthDaysPlusTwo(year, month)\n\
    \        val daysInYearMonthDaysPlusThree = daysInYearMonthDaysPlusThree(year,\
    \ month)\n        val daysInYearMonthDaysPlusFour = daysInYearMonthDaysPlusFour(year,\
    \ month)\n        val daysInYearMonthDaysPlusFive = daysInYearMonthDaysPlusFive(year,\
    \ month)\n        val daysInYearMonthDaysPlusSix = daysInYearMonthDaysPlusSix(year,\
    \ month)\n        val daysInYearMonthDaysPlusSeven = daysInYearMonthDaysPlusSeven(year,\
    \ month)\n        val daysInYearMonthDaysPlusEight = daysInYearMonthDaysPlusEight(year,\
    \ month)\n        val daysInYearMonthDaysPlusNine = daysInYearMonthDaysPlusNine(year,\
    \ month)\n        val daysInYearMonthDaysPlusTen = daysInYearMonthDaysPlusTen(year,\
    \ month)\n        val daysInYearMonthDaysPlusEleven = daysInYearMonthDaysPlusEleven(year,\
    \ month)\n        val daysInYearMonthDaysPlusTwelve = daysInYearMonthDaysPlusTwelve(year,\
    \ month)\n        val daysInYearMonthDaysPlusThirteen = daysInYearMonthDaysPlusThirteen(year,\
    \ month)\n        val daysInYearMonthDaysPlusFourteen = daysInYearMonthDaysPlusFourteen(year,\
    \ month)\n        val daysInYearMonthDaysPlusFifteen = daysInYearMonthDaysPlusFifteen(year,\
    \ month)\n        val daysInYearMonthDaysPlusSixteen = daysInYearMonthDaysPlusSixteen(year,\
    \ month)\n        val daysInYearMonthDaysPlusSeventeen = daysInYearMonthDay\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqoc_a1ht.scala:16:24 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmonthDays\e[0m = monthDays(year,\
    \ month)\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m\
    \                        Recursive \e[33mvalue\e[0m \e[35mmonthDays\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqoc_a1ht.scala:17:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = daysInMonth(year, month)\n\e[31m\e[31m   |\e[0m   \
    \                       ^\e[0m\n\e[31m   |\e[0m                          Recursive\
    \ \e[33mvalue\e[0m \e[35mdaysInMonth\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpqoc_a1ht.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdaysInYear\e[0m = daysInYear(year)\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mdaysInYear\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqoc_a1ht.scala:19:30\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInYearMonth\e[0m = daysInYearMonth(year, month)\n\e[31m\e[31m   |\e\
    [0m                              ^\e[0m\n\e[31m   |\e[0m                     \
    \         Recursive \e[33mvalue\e[0m \e[35mdaysInYearMonth\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqoc_a1ht.scala:20:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInYearMonthDays\e[0m = daysInYearMonthDays(year, month)\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mdaysInYearMonthDays\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m lon"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateArray\
    \ = date.split(\"-\")\n        if(dateArray.length != 3)\n            return false\n\
    \        val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if(months < 1 || months > 12)\n\
    \            return false\n        if(days < 1 || days > 31)\n            return\
    \ false\n        if(months == 2 && days > 30)\n            return false\n    \
    \    if(months == 2 && days > 29)\n            return false\n        if(months\
    \ == 3 && days > 30)\n            return false\n        if(months == 3 && days\
    \ > 29)\n            return false\n        if(months == 4 && days > 30)\n    \
    \        return false\n        if(months == 4 && days > 29)\n            return\
    \ false\n        if(months == 5 && days > 30)\n            return false\n    \
    \    if(months == 5 && days > 29)\n            return false\n        if(months\
    \ == 6 && days > 30)\n            return false\n        if(months == 6 && days\
    \ > 29)\n            return false\n        if(months == 7 && days > 30)\n    \
    \        return false\n        if(months == 7 && days > 29)\n            return\
    \ false\n        if(months == 8 && days > 30)\n            return false\n    \
    \    if(months == 8 && days > 29)\n            return false\n        if(months\
    \ == 9 && days > 30)\n            return false\n        if(months == 9 && days\
    \ > 29)\n            return false\n        if(months == 10 && days > 30)\n   \
    \         return false\n        if(months == 10 && days > 29)\n            return\
    \ false\n        if(months == 11 && days > 30)\n            return false\n   \
    \     if(months == 11 && days > 29)\n            return false\n        if(months\
    \ == 12 && days > 30)\n            return false\n        if(months == 12 && days\
    \ > 29)\n            return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe3j4yvto.scala:64:8\
    \ ---------------------\e[0m\e[0m\n\e[31m64 |\e[0m        \e[33mif\e[0m(months\
    \ == \e[31m12\e[0m && days > \e[31m29\e[0m)\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Boolean\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m65 |\e[0m            \e[33mreturn\e[0m \e[31mtrue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    def validDate(date : String) : Boolean = {\n        val dateFormat\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed = dateFormat.parse(date)\n\
    \        dateParsed.getTime != 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmuhpc87t.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010154
