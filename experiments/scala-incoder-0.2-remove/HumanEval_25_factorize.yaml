name: HumanEval_25_factorize
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    // Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    // Input number should be\
  \ equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
  \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong,\
  \ 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
completions: ["        val factorization = mutable.ArrayBuffer.empty[Long]\n     \
    \   for(i <- 2 to n by 2){\n            for(j <- 2 to i by 2){\n             \
    \   if(i % j == 0){\n                    factorization += j\n                \
    \    break\n                }\n            }\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMins\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMins\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMax",
  "        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by 2){\n        \
    \    if(n%i == 0){\n                factorization.add(i)\n                for(j\
    \ <- factorization.toList to n by i){\n                    factorizationList +=\
    \ j\n                }\n            }\n        }\n        factorizationList.sortWith(_\
    \ < _)", "        val factorization = mutable.ListBuffer.empty[Long]\n       \
    \ var factor = 2\n        while (factor <= n) {\n            if (n % factor ==\
    \ 0) {\n                factorization += factor\n                while (factor\
    \ <= n && n % factor == 0) {\n                    factor += 1\n              \
    \  }\n            }\n            factor += 1\n        }\n        factorization.reverse",
  "        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        ", "    \
    \    val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor =\
    \ 1\n        while (n > 1) {\n            while (n % factor == 0) {\n        \
    \        factorization += factor\n                n /= factor\n            }\n\
    \            factor += 1\n        }\n        factorization.reverse", "       \
    \ val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor = 1\n\
    \        while (n != 1) {\n            while (n % factor != 0) {\n           \
    \     factorization += factor\n                n /= factor\n            }\n  \
    \          factorization += factor\n            factor += 1\n        }\n     \
    \   factorization.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        var factor = 2\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                factorization += factor\n                n /= factor\n\
    \            } else {\n                factor += 1\n            }\n        }\n\
    \        factorization.toList", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = factorization(n).reverse\n        factorization.foreach(x\
    \ => factors += x)\n        factors", "        val factorization = mutable.ListBuffer[Long]()\n\
    \        var factor = 2\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                factorization += factor\n                n /= factor\n\
    \            } else {\n                factor += 1\n            }\n        }\n\
    \        factorization.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorization", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2){\n            val factors = mutable.ArrayBuffer.empty[Long]\n\
    \            for(j <- 2 to i by 2){\n                if(i % j == 0){\n       \
    \             factors += j\n                }\n            }\n            factorization\
    \ += factors.toList.size\n        }\n        factorization.toList", "        val\
    \ factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountMaxMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMaxMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMin = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMins = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMinMin = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMins = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMaxMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMaxMins\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMin =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMins =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMinMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMinMin = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMinMinMins = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountMaxMaxMinMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMinMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMinMinMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMinMinMins = mutable.ArrayBuffer.empty[", " \
    \       val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor\
    \ = 1\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             factorization += factor\n                factor *= factor\n    \
    \        }\n            factor += 1\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2\
    \ to n by 2){\n            val factors = mutable.ArrayBuffer.empty[Long]\n   \
    \         for(j <- 2 to i by 2){\n                if(i % j == 0){\n          \
    \          factors += j\n                }\n            }\n            factorization\
    \ += factors.toList\n        }\n        factorization.toList", "        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n     \
    \   val isPrimeFactorizationPrimeFactors = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeFactorizationPri",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactors = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorizationFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorizationFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationFactorizationFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationFactorizationFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorizationPrimeFactorizationPrime", "        val\
    \ factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                factors += i\n    \
    \            n /= i\n            }\n            i += 1\n        }\n        factors.toList",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorizations(n)\n\
    \        factorization.foreach { f =>\n            factors += f\n        }\n \
    \       factors.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPri",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\
    \ \n        for (i <- factorization.indices) {\n            val factor = (factorization(i)\
    \ * factors(i)) % n\n            factors += factor\n        }\n        factors.toList",
  "        val factorization = mutable.ListBuffer[Long]()\n        var factor = 2\n\
    \        while(factor <= n) {\n            while(n % factor == 0) {\n        \
    \        factorization += factor\n                n /= factor\n            }\n\
    \            factor += 1\n        }\n        factorization.toList", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        val factorization = factorizations(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors", "       \
    \ val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors =\
    \ mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPri", "   \
    \     val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountList2 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList3 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList6 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountList7 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList8 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList9\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList10 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList11 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList12 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList13 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList16 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList17 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList18 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList19\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList20 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList21 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList22 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList23 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList24\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList25 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList26 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList27 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList28 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList29",
  "        val factorization = mutable.ListBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCountMax = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxs\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCountMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxs = mutable.ListBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMaxMax = mutable.ListBuffer.empty[Long]\n      \
    \  val factorizationCountMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n       \
    \ val factorizationCountMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n      \
    \  val factorizationCountMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer.empty",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationSize\
    \ = n\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimeSize = factorizationSize / 2\n        val factorizationPrimePrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimeSize =\
    \ factorizationPrimeSize / 2\n        val factorizationPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeSize = factorizationPrimePrimeSize /\
    \ 2\n        val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeSize = factorizationPrimePrimePrimeSize\
    \ / 2\n        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeSize = factorizationPrimePrimePrimePrimeSize\
    \ / 2\n        val factorizationPrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeSize = factorizationPrimePrimePrimePrimePrimeSize\
    \ / 2\n        val factorizationPrimePrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimeSize = factorizationPrimePrimePrimePrimePrimePrimeSize\
    \ / 2\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize = factorizationPrimePrimePrimePrimePrimePrimePrimeSize\
    \ / 2\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize / 2\n        val\
    \ factorizationPrimePrimePrimePrimePrime", "        val factorization = mutable.HashSet[Long]()\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        while(n\
    \ > 1) {\n            factorization.add(n)\n            n /= 2\n        }\n  \
    \      factorization.foreach(n => {\n            while(factorization.contains(n))\
    \ {\n                factorizationList += n\n                n /= 2\n        \
    \    }\n        })\n        factorizationList.toList", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        var factorizationIndex = 0\n        var factorizationIndexMax = factorization.length\n\
    \        var factorizationIndexMaxInt = factorizationIndexMax\n        var factorizationIndexMaxLong\
    \ = factorizationIndexMax\n        var factorizationIndexMaxDouble = factorizationIndexMax\n\
    \        var factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n        var\
    \ factorizationIndexMaxFloat = factorizationIndexMax\n        var factorizationIndexMaxInt\
    \ = factorizationIndexMax\n        var factorizationIndexMaxLong = factorizationIndexMax\n\
    \        var factorizationIndexMaxDouble = factorizationIndexMax\n", "       \
    \ val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n\
    \ by 2){\n            val factors = n / i\n            factorization += factors\n\
    \        }\n        factorization.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimes = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsOfPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimeFactorOfPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimeFactorOfPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactorOfPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsOfPrimeFactorOfPri",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).reverse\n\
    \        factorization.foreach(f => factors += f)\n        factors.toList", " \
    \       val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex = 0\n    \
    \    var factorizationCount = 0\n        var factorizationFactor = 0\n       \
    \ var factorizationFactorCount = 0\n        var factorizationFactorIndex = 0\n\
    \        while(n != 1) {\n            factorizationCount += 1\n            factorizationFactor\
    \ += n\n            factorizationFactorCount += 1\n            factorizationIndex\
    \ += 1\n            factorization = factorization :+ factorizationFactor\n   \
    \         factorizations = factorizations :+ factorizationIndex\n            n\
    \ /= factorizationFactor\n        }\n        factorizations.reverse", "      \
    \  val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorsCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationFactorsCountSum = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCountSumOfSquareOfSquareOfSquareOfSquareOfSquareOf",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimeFactorsCount = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationPrimeFactorsCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorsCountSumsSumsSumsSumsSumsSumsSums = mutable.Array",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMin = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMax = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMaxMax",
  "        val factors = mutable.ListBuffer[Long]()\n        for(i <- 2 to n by 2){\n\
    \            val p = i\n            while(n % p == 0){\n                factors\
    \ += p\n                n /= p\n            }\n        }\n        factors.toList",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (i <- factorization.indices) {\n            val f = factorization(i)\n\
    \            factors += f\n        }\n        factors.toList", "        val factorization\
    \ = mutable.HashSet[Long]()\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = factorization.toList\n        val factorizationList\
    \ = factorizationList.sortWith(_.compareTo(_) < 0)\n        val factorizationList\
    \ = factorizationList.filterNot(_ % n == 0)\n        val factorizationList = factorizationList.filterNot(_\
    \ % n == 1)\n        factorizationList.foreach(x => factorization.add(x))\n  \
    \      factorizationList", "        val factorization = mutable.ListBuffer[Long]()\n\
    \        var factor = 1\n        while(factor <= n) {\n            while(n % factor\
    \ == 0) {\n                factorization += factor\n                n /= factor\n\
    \            }\n            factor += 1\n        }\n        factorization.toList",
  "        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        val factorizationListSize\
    \ = factorizationList.size\n        val factorizationListSize = factorizationList.size\n\
    \        val factorizationListSize = factorizationList.size\n        ", "    \
    \    val factorization = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.", "        val\
    \ factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxs = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax", "        val\
    \ factors = mutable.ListBuffer[Long]()\n        val factorization = factorize(n).toList\n\
    \        factorization.foreach(x => factors += x)\n        factors", "       \
    \ val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor = 2\n\
    \        while (factor <= n) {\n            if (n % factor == 0) {\n         \
    \       factorization += factor\n                while (factor <= n && n % factor\
    \ == 0) {\n                    factor += factor\n                }\n         \
    \   }\n            factor += 1\n        }\n        factorization.reverse", " \
    \       val factorization = mutable.ListBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = ", "    \
    \    val factorization = mutable.ListBuffer[Long]()\n        var factor = 2\n\
    \        while (factor <= n) {\n            if (n % factor == 0) {\n         \
    \       factorization += factor\n                while (n % factor == 0) {\n \
    \                   n /= factor\n                    factor += 1\n           \
    \     }\n            }\n            factor += 1\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountList2 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList3 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList6 = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountList7 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList8 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList9\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList10 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList11 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList12 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList13 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList16 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList17 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList18 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList19\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList20 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList21 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList22 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList23 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList24\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList25 = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountList26 = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountList27 = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountList28 = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountList29",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2\
    \ to n by 2){\n            for(j <- 2 to i by 2){\n                if(i % j ==\
    \ 0){\n                    factorization += j\n                }\n           \
    \ }\n        }\n        factorization.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     val factors = factorize(n / i)\n                factorization += i :: factors\n\
    \            }\n        }\n        factorization.toList", "        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.", "        val\
    \ factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrime = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Int]\n      \
    \  val factorizationPrimePrime = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorization", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.List",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfs = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.", " \
    \       val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.List", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrime = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorization", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2){\n            val factors = n / i\n           \
    \ if(factors > 1){\n                factorization += factors\n            }\n\
    \        }\n        factorization.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMin = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMins = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMax =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxs =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMaxMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMinMaxMax",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfFactorizations = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountOfFactorizationsOfFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n     \
    \   val isPrimeFactorizationCount = mutable.ArrayBuffer.empty[Boolean]\n     \
    \   val isPrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeFactorizationCount\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Boolean]\n   \
    \     val isPrimePrimePrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimeFactorizationCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n   \
    \     val isPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Boolean]\n \
    \       val isPrimePrimePrimePrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimeFactorizationCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactorizationCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePri", "        val factorization = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2){\n            val factors = factorization.remove(i).filter(_\
    \ % i == 0)\n            if(factors.isEmpty) factorization += i\n        }\n \
    \       factorization.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        var factor = 1\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factorization += factor\n                n /= factor\n\
    \            }\n            factor += 1\n        }\n        factorization", " \
    \       val factors = mutable.ListBuffer[Long]()\n        val factorization =\
    \ factorization(n)\n        factorization.foreach(f => factors += f)\n       \
    \ factors", "        val factorization = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.", " \
    \       val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor\
    \ = 1\n        while (n > 1) {\n            if (n % factor == 0) {\n         \
    \       factorization += factor\n                n /= factor\n            } else\
    \ {\n                factor += 1\n            }\n        }\n        factorization.toList",
  "        val factorization = mutable.ListBuffer.empty[Long]\n        val primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val factorizations = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes = mutable.ListBuffer.empty[Long]\n   \
    \     val factorizationCounts_primes_primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes_primes_primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes_primes_primes_primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes_primes_primes_primes_primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes_primes_primes_primes_primes_primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = mutable.ListBuffer.empty[Long]", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.Array",
  "        val factorization = mutable.ListBuffer[Long]()\n        var factor = 1\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factorization.append(factor)\n                n /= factor\n            }\n\
    \            factor += 1\n        }\n        factorization.reverse", "       \
    \ val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor = 1\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factorization += factor\n                n /= factor\n            }\n   \
    \         factor += 1\n        }\n        factorization.reverse", "        val\
    \ factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        var factorizationCount = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1\n        var factorization\
    \ = 1\n        var factorization = 1\n        var factorization = 1\n        var\
    \ factorization = 1\n        var factorization = 1", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n by 2) {\n      \
    \      if (n % i == 0) {\n                val factors = factorize(n / i)\n   \
    \             factorization += i * factors.size // Add factor to factorization\n\
    \            }\n        }\n        factorization.toList", "        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.List", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2){\n            val factors = n / i\n           \
    \ if(factors > 1){\n                factorization += i\n                factorize(factors)\n\
    \            }\n        }\n        factorization.toList", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorizations(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors", "       \
    \ val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfs = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfs", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factorization += i\n                n /= i\n            }\n        }\n \
    \       factorization.toList", "        val factorization = mutable.HashSet[Long]()\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factorization.add(i)\n                factorization.add(n / i)\n       \
    \     }\n        }\n        factorization.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorize(n).map(x => factors += x)\n        factorization",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by 2){\n        \
    \    val factors = mutable.ArrayBuffer.empty[Long]\n            for(j <- 2 to\
    \ i by 2){\n                if(i % j == 0){\n                    factors += j\n\
    \                }\n            }\n            factorization += factors.toList\n\
    \            factorizationCount += factors.length\n        }\n        factorization.toList",
  "        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                while (n / i >= i) {\n                    n /= i\n          \
    \      }\n            }\n            i += 1\n        }\n        factors.toList",
  "        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrime = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactorization = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n   \
    \     val primeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPri",
  "        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrime = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n       \
    \ val primeFactorizationPrimeFactorization = mutable.ListBuffer[Long]()\n    \
    \    val primeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = ", "        val factorization = mutable.ListBuffer[Long]()\n        var i\
    \ = 2\n        while (i <= n) {\n            if (n % i == 0) {\n             \
    \   factorization += i\n                n /= i\n            }\n            i +=\
    \ 1\n        }\n        factorization.toList", "        val factorization = mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to n/2){\n            for(j <- 2 to n/i){\n              \
    \  if(n % i == 0 && n / j == i){\n                    factorization += j\n   \
    \             }\n            }\n        }\n        factorization.toList", "  \
    \      val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        factorize(n,factorization)\n\
    \        factorization.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        var factor = 1\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factorization += factor\n                n /= factor\n\
    \            }\n            factor += 1\n        }\n        factorization", " \
    \       val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrime", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2){\n            val factors = factorization.remove(i)\n\
    \            if(factors == 0){\n                factorization += i\n         \
    \   }\n        }\n        factorization.toList", "        val factorization =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        var factorizationIndex = 0\n        var factorizationCount = 0\n    \
    \    var factorizationPrime = 0\n        var factorizationPrimeCount = 0\n   \
    \     var factorizationPrimePrime = 0\n        var factorizationPrimePrimeCount\
    \ = 0\n        var factorizationPrimePrimePrime = 0\n        var factorizationPrimePrimePrimeCount\
    \ = 0\n        var factorizationPrimePrimePrimePrime = 0\n        var factorizationPrimePrimePrimePrimeCount\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrime = 0\n        var factorizationPrimePrimePrimePrimePrimeCount\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrime = 0\n        var factorizationPrimePrimePrimePrimePrimeCount\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrime = 0\n        var factorizationPrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimePrimePrime = 0\n    \
    \    var factorizationPrimePrimePrimePrimePrimePrimePrime = 0\n        var factorizationPrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimePrimePrimeCount = 0\n\
    \        var factorizationPrimePrimePrimePrimePrimePrimePrimePrime = 0\n     \
    \   var factorizationPrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimePrime", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        var i = 2L\n        while (i < n) {\n\
    \            if (n % i == 0) {\n                factors += i\n               \
    \ factorization.append(i)\n                primes += i\n                primeFactorization.append(i)\n\
    \            }\n            i += 1\n        }\n        factorization.reverse.foreach(x\
    \ => factors += x)\n        primeFactorization.reverse.foreach(x => factors +=\
    \ x)\n        factors.reverse.foreach(x => factorization.append(x))\n        primes.reverse.foreach(x\
    \ => primeFactorization.append(x))\n        factorization.toList", "        val\
    \ factorization = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfs = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOf = mutable.ListBuffer[Long]()\n       \
    \ val factorizationCountOfsOfsOfs = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n \
    \       val factorizationCountOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n \
    \       val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfs", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.Array", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorize(n).map(x => factors += x)\n        factorization",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMins\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMaxMax\
    \ = mutable.ArrayBuffer.", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationList = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mut", "        val factorization = mutable.ListBuffer[Long]()\n        val\
    \ factorizations = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.List", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        var factor = 1\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                factorization += factor\n                factor *=\
    \ factor\n            }\n            factor += 1\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor\
    \ = 2\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             factorization += factor\n                n /= factor\n         \
    \   } else {\n                factor += 1\n            }\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationSize\
    \ = n\n        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationPrimeSize = n\n        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimeSize = n\n        val factorizationPrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimeSize = n\n        val factorizationPrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimeSize = n\n     \
    \   val factorizationPrimePrimePrimePrimePrimePrimePrimeSize = n\n        val\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimeSize = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize =\
    \ n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePri",
  "        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts = mutable.ListBuffer[Long]()\n        val factorizationCountMax\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMax = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountMaxMaxs = mutable.ListBuffer[Long]()\n        val factorizationCountMaxMaxMax\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMax = mutable.ListBuffer[Long]()\n   \
    \     val factorizationCountMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n     \
    \   val factorizationCountMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n     \
    \   val factorizationCountMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n    \
    \    val factorizationCountMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n \
    \       val factorizationCountMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        ", "        val factorization = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationList = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex\
    \ = 0\n        var factorizationCount = 0\n        var factorizationFactor = 0\n\
    \        var factorizationFactorCount = 0\n        var factorizationFactorIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactorCountIndex = 0\n        var factorizationFactorCountIndex\
    \ = 0\n        var factorizationFactor", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ArrayBuffer.", " \
    \       val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfss = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountOfss = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsssss = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountOfssssss = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountOfsssssss = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountOfssssssss = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountOfsssssssss = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationCountOfssssssssss = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountOfsssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsssssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsssssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssssss", "        val factorization =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.Array", "        val factors = mutable.ListBuffer.empty[Long]\n  \
    \      for(i <- 2 to n by 2){\n            val p = n/i\n            if(p == 1){\n\
    \                factors += i\n            }\n            else{\n            \
    \    for(j <- 2 to p by 2){\n                    if(p%j == 0){\n             \
    \           factors += j\n                        break\n                    }\n\
    \                }\n            }\n        }\n        factors.toList", "     \
    \   val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationIndexCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationIndex", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorization = factorizations(n)\n        factorization.foreach(f\
    \ => factors += f)\n        factors", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes2 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationIndexes3 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes4\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes5 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes6 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationIndexes7 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes8\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes9 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes10 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationIndexes11 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes12\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes13 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes14 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationIndexes15 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes16\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes17 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes18 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationIndexes19 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes20\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes21 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes22 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationIndexes23 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes24\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes25 = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexes26 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val factorizationIndexes27 = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes28\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexes29", "   \
    \     val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount2 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount3 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount6 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount7 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount8\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount9 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount10 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount11 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount12\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount13 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount14 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount15 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount18 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount19 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount20\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount21 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount22 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount23 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount24\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount25 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount26 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount27 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount28\
    \ = mutable.List", "        val factorization = mutable.HashSet[Long]()\n    \
    \    var factor = 1\n        while (n != 1) {\n            if (n % factor == 0)\
    \ {\n                factorization += factor\n                n /= factor\n  \
    \          } else {\n                factor *= factor\n            }\n       \
    \ }\n        factorization.toList", "        val factorization = mutable.HashSet[Long]()\n\
    \        for (f <- 2 to n by 2) {\n            if (n % f == 0) {\n           \
    \     factorization.add(f)\n                factorization.add(n / f)\n       \
    \     }\n        }\n        factorization.toList.sortBy(-_)", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizationsOfFactorizations",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor\
    \ = 1\n        while (n != 1) {\n            while (n % factor != 0) {\n     \
    \           factorization += factor\n                n /= factor\n           \
    \ }\n            factor += 1\n        }\n        factorization.reverse", "   \
    \     val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts = mutable.ListBuffer[Long]()\n        val factorizationCountMax\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMin = mutable.ListBuffer[Long]()\n        val factorizationCountMins\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountMinMaxMin = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMins\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountMinMaxMinMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxs = mutable.ListBuffer[Long]()\n  \
    \      val factorizationCountMinMaxMinMaxMin = mutable.ListBuffer[Long]()\n  \
    \      val factorizationCountMinMaxMinMaxMins = mutable.ListBuffer[Long]()\n \
    \       val factorizationCountMinMaxMinMaxMinMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxMax = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMaxs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxMax", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n by 2) {\n      \
    \      if (n % i == 0) {\n                val factors = factorize(n / i)\n   \
    \             factorization += i * factors.last\n                factorization\
    \ += factors.reverse.last\n            }\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimeCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorPrimePrimes = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorPrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimes =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimes =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimes =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimeCounts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorPrimePrimePrimeCounts\
    \ = mut", "        val factorization = mutable.ArrayBuffer.empty[Long]\n     \
    \   for(i <- 2 to n by 2){\n            for(j <- 2 to i by 2){\n             \
    \   if(n % i == 0 && i != j){\n                    factorization += i\n      \
    \              n /= i\n                }\n            }\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountPairs = mutable.ArrayBuffer.empty[(Long, Long)]\n\
    \        val factorizationCountPairsSorted = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCount = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSorted = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCount = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mut", "        val factorization = mutable.ArrayBuffer.empty[Long]\n     \
    \   var factor = 1\n        var factorizationIndex = 0\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                factorization +=\
    \ factor\n                factorizationIndex += 1\n                factor *= factorizationIndex\n\
    \            }\n            factor += 1\n        }\n        factorization", " \
    \       val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor\
    \ = 1\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             factorization += factor\n                n /= factor\n         \
    \   } else {\n                factor *= factor\n            }\n        }\n   \
    \     factorization.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val factorization =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCount2\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount3 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount4 = mutable.ListBuffer[Long]()\n        val factorizationCount5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount6 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount7 = mutable.ListBuffer[Long]()\n        val factorizationCount8\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount9 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount10 = mutable.ListBuffer[Long]()\n        val factorizationCount11\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount12 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount13 = mutable.ListBuffer[Long]()\n        val factorizationCount14\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount15 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount16 = mutable.ListBuffer[Long]()\n        val factorizationCount17\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount18 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount19 = mutable.ListBuffer[Long]()\n        val factorizationCount20\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount21 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount22 = mutable.ListBuffer[Long]()\n        val factorizationCount23\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount24 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount25 = mutable.ListBuffer[Long]()\n        val factorizationCount26\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount27 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount28 = mutable.ListBuffer[Long]()\n        val factorizationCount29\
    \ = ", "        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorizationListSize = factorization.size\n\
    \        val factorizationListSize = factorization.size\n        val factorizationListSize\
    \ = factorization.size\n        val factorization", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        var factorizationIndex = 0\n        var factorizationCountIndex = 0\n\
    \        var factorizationCountMax = 0\n        var factorizationCountMaxIndex\
    \ = 0\n        var factorizationCountMin = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var factorizationCountMinIndex\
    \ = 0\n        var factorizationCountMaxIndex = 0\n        var ", "        val\
    \ factorization = mutable.ArrayBuffer.empty[Long]\n        var factor = 1\n  \
    \      var factorizationIndex = 0\n        while (factor <= n) {\n           \
    \ if (n % factor == 0) {\n                factorization += factor\n          \
    \      factorizationIndex += 1\n                factor *= factorizationIndex\n\
    \            }\n            factor += 1\n        }\n        factorization.toList",
  "        val factorization = mutable.ListBuffer[Long]()\n        var factor = 1\n\
    \        while (n != 1) {\n            while (n % factor != 0) {\n           \
    \     factorization += factor\n                n /= factor\n            }\n  \
    \          factor += 1\n        }\n        factorization.reverse", "        val\
    \ factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationSize\
    \ = n\n        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationPrimeSize = n\n        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimeSize = n\n        val factorizationPrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimeSize = n\n        val factorizationPrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimeSize = n\n     \
    \   val factorizationPrimePrimePrimePrimePrimePrimePrimeSize = n\n        val\
    \ factorizationPrimePrimePrimePrimePrimePrimePrimeSize = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimeSize =\
    \ n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeSize\
    \ = n\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePri",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        factorization\
    \ = factorization.+(n)\n        val factorizationList = factorization.toList\n\
    \        val factorizationList = factorizationList.sortWith(_ < _)\n        val\
    \ factorizationList = factorizationList.filter(_ % 2 == 0)\n        val factorizationList\
    \ = factorizationList.filter(_ % 3 == 0)\n        val factorizationList = factorizationList.filter(_\
    \ % 5 == 0)\n        val factorizationList = factorizationList.filter(_ % 7 ==\
    \ 0)\n        val factorizationList = factorizationList.filter(_ % 11 == 0)\n\
    \        val factorizationList = factorizationList.filter(_ % 13 == 0)\n     \
    \   val factorizationList = factorizationList.filter(_ % 17 == 0)\n        val\
    \ factorizationList = factorizationList.filter(_ % 19 == 0)\n        val factorizationList\
    \ = factorizationList.filter(_ % 23 == 0)\n        val factorizationList = factorizationList.filter(_\
    \ % 29 == 0)\n        val factorizationList = factorizationList.filter(_ % 31\
    \ == 0)\n        val factorizationList = factorizationList.filter(_ % 37 == 0)\n\
    \        val factorizationList = factorizationList.filter(_ % 41 == 0)\n     \
    \   val factorizationList = factorizationList.filter(_ % 43 == 0)\n        val\
    \ factorizationList = factorizationList.filter(_ % 47 == 0)\n        val factorizationList\
    \ = factorizationList.filter(_ % 53 == 0)\n        val factorizationList = factorizationList.filter(_\
    \ % 59 == 0)\n        val factorizationList = factorizationList.filter(_ % 61\
    \ == 0)\n        val factorizationList = factorizationList.filter(_ % 67 == 0)\n\
    \        val factorizationList = factorizationList.filter(_ % 71 == 0)\n     \
    \   val factorizationList = factorizationList.filter(_ % 73 == 0)\n        val\
    \ factorizationList = factorizationList.filter(_ % 79 == 0)\n        val factorizationList\
    \ = factorizationList.filter(_ % 83 == 0)\n        val factorizationList = factorizationList.filter(_\
    \ % 89 == 0)\n        val factorizationList = factorizationList.filter(_ % 97\
    \ == 0)\n        val factorizationList = factorizationList.filter(_ % 101 == 0)\n\
    \        val factorizationList = factorizationList.filter(_ % 103 == 0)\n    \
    \    val factorizationList = factorizationList.filter(_ % 107 == 0)\n        val\
    \ factorizationList = factorizationList.filter(_ % 111 == 0)\n        val factorizationList\
    \ = factorizationList.filter(_ % 113 == 0)\n        val factorizationList = factorizationList.filter(_\
    \ % 117 == 0)\n        ", "        val factorization = mutable.HashSet[Long]()\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationListSize = factorization.size\n        val factorizationListIterator\
    \ = factorization.iterator\n        val factorizationListIteratorSize = factorizationListIterator.size\n\
    \        val factorizationListIteratorElement = factorizationListIterator.next()\n\
    \        while (factorizationListIterator.hasNext) {\n            val factorizationListIteratorElement\
    \ = factorizationListIterator.next()\n            if (n % factorizationListIteratorElement\
    \ == 0) {\n                factorization.add(factorizationListIteratorElement)\n\
    \                factorizationListSize += 1\n            }\n        }\n      \
    \  factorization.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factorizationIndex = 0\n        var factorizationCountIndex = 0\n        var\
    \ factorizationPrimeIndex = 0\n        var factorizationPrimeCountIndex = 0\n\
    \        var factorizationPrimePrimeIndex = 0\n        var factorizationPrimePrimeCountIndex\
    \ = 0\n        var factorizationPrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimeCountIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimeCountIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimeCountIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex\
    \ = 0\n        var factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var\
    \ factorizationPrimePrimePrimePrimePrimeIndex = 0\n        var factorizationPrimePrimePrimePrimePri",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val factorization\
    \ = factorizations(n)\n        factorization.foreach(f => factors += f)\n    \
    \    factors", "        val factorization = mutable.HashSet[Long]()\n        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n    \
    \    val isPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes =\
    \ mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization",
  "        val factorization = mutable.HashSet[Long]()\n        for(i <- 2 to n){\n\
    \            while(n % i == 0){\n                factorization.add(i)\n      \
    \          n /= i\n            }\n        }\n        factorization.toList", " \
    \       val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor\
    \ = 2\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             factorization += factor\n                n /= factor\n         \
    \   } else {\n                factor += 1\n            }\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.Array", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts_ = ", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMinMaxMin = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMins = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxMinMaxMin = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountMinMaxMinMaxMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs = mutable.", "      \
    \  val factorization = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to\
    \ n by 2) {\n            if (n % i == 0) {\n                val factors = factorize(n\
    \ / i)\n                factorization += i * factors.size // Add number of times\
    \ each factor appeared in factorization\n                factorization += factors\
    \ // Add factors\n            }\n        }\n        factorization.toList", " \
    \       val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorizationCounter = 0\n  \
    \      var factorizationCounterList = 0\n        var factorizationCounterList2\
    \ = 0\n        var factorizationCounterList3 = 0\n        var factorizationCounterList4\
    \ = 0\n        var factorizationCounterList5 = 0\n        var factorizationCounterList6\
    \ = 0\n        var factorizationCounterList7 = 0\n        var factorizationCounterList8\
    \ = 0\n        var factorizationCounterList9 = 0\n        var factorizationCounterList10\
    \ = 0\n        var factorizationCounterList11 = 0\n        var factorizationCounterList12\
    \ = 0\n        var factorizationCounterList13 = 0\n        var factorizationCounterList14\
    \ = 0\n        var factorizationCounterList15 = 0\n        var factorizationCounterList16\
    \ = 0\n        var factorizationCounterList17 = 0\n        var factorizationCounterList18\
    \ = 0\n        var factorizationCounterList19 = 0\n        var factorizationCounterList20\
    \ = 0\n        var factorizationCounterList21 = 0\n        var factorizationCounterList22\
    \ = 0\n        var factorizationCounterList23 = 0\n        var factorizationCounterList24\
    \ = 0\n        var factorizationCounterList25 = 0\n        var factorizationCounterList26\
    \ = 0\n        var factorizationCounterList27 = 0\n        var factorizationCounterList28\
    \ = 0\n        var factorizationCounterList29 = 0\n        var factorizationCounterList30\
    \ = 0\n        var factorizationCounterList31 = 0\n        var factorizationCounterList32\
    \ = 0\n        var factorizationCounterList33 = 0\n        var factorizationCounterList34\
    \ = 0\n        var factorizationCounterList35 = 0\n        var factorizationCounterList36\
    \ = 0\n        var factorizationCounterList37 = 0\n        var factorizationCounterList38\
    \ = 0\n        var factorizationCounterList39 = 0\n        var factorizationCounterList40\
    \ = 0\n        var factorizationCounterList41 = 0\n        var factorizationCounterList42\
    \ = 0\n        var factorizationCounterList43 = 0\n        var factorizationCounterList44\
    \ = 0\n        var factorizationCounterList45 = 0\n        var factorizationCounterList46\
    \ = 0\n        var factorizationCounterList47 = 0\n        var factorizationCounterList48\
    \ = 0\n        var factorizationCounterList49 = 0\n        var factorizationCounterList50\
    \ = 0\n        var factorizationCounterList51 = 0\n        var factorizationCounterList52\
    \ = 0\n        var factorizationCounterList53 = 0\n        var factorizationCounterList54\
    \ = 0\n        var factorizationCounterList55 = 0\n        var factorizationCounterList56\
    \ = 0\n        var factorizationCounterList57 = 0\n        var factorizationCounterList58\
    \ = 0\n        var factorizationCounterList59 = 0\n        var factorizationCounterList60\
    \ = 0", "        val factorization = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizations = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = ", "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorization", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factorization += i\n                n /= i\n            }\n \
    \           i += 1\n        }\n        factorization.toList", "        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val primeFactors =\
    \ mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[", "        val factorization = mutable.HashSet[Long]()\n\
    \        val factorizationList = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationListSize = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSize",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor\
    \ = 1\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             factorization += factor\n                factor *= factor\n    \
    \        }\n            factor += 1\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrime", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationFactors = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquares = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquares = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSumCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquares = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSumCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationFactorsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumCount\
    \ = mutable.ArrayBuffer.empty[Long]", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        factorize(n,factorization)\n        factorization.toList", "        val\
    \ factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors =\
    \ mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPri", "   \
    \     val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = factorization.toList\n\
    \        val factorizationList = factorizationList.sortWith(_ < _)\n        val\
    \ factorizationList = factorizationList.filter(n => n % _ == 0)\n        val factorizationList\
    \ = factorizationList.map(n => n * factorizationList.count(_ == n))\n        factorizationList.foreach(n\
    \ => factorization.add(n))\n        factorizationList", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationList = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationListSize = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationListSizeSize = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSize",
  "        val factors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = factorization(n) \n        factorization foreach { f =>\n            factors\
    \ += f\n        }\n        factors", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.toList", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationSize = n\n        val primesSize = n\n        val primeFactorizationSize\
    \ = n\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationSize = n\n        val factorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesSize\
    \ = n\n        val factorizationPrimeFactorizationPrimesPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimesPrimesSize = n\n        val\
    \ factorizationPrimeFactorizationPrimesPrimesPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimesPrimesPrimesSize = n\n     \
    \   val factorizationPrimeFactorizationPrimesPrimesPrimesPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesSize = n\n\
    \        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesSize\
    \ = n\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesSize\
    \ = n\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimesSize\
    \ = n\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesSize\
    \ = n\n        val factorizationPrimeFactorizationPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        var factorizationIndex\
    \ = 0\n        var factorizationIndexMax = factorization.length\n        var factorizationIndexMax2\
    \ = factorizationIndexMax\n        var factorizationIndexMax3 = factorizationIndexMax\n\
    \        var factorizationIndexMax4 = factorizationIndexMax\n        var factorizationIndexMax5\
    \ = factorizationIndexMax\n        var factorizationIndexMax6 = factorizationIndexMax\n\
    \        var factorizationIndexMax7 = factorizationIndexMax\n        var factorizationIndexMax8\
    \ = factorizationIndexMax\n        var factorizationIndexMax9 = factorizationIndexMax\n\
    \        var factorizationIndexMax10 = factorizationIndexMax\n        var factorizationIndexMax11\
    \ = factorizationIndexMax\n        var factorizationIndexMax12 = factorizationIndexMax\n\
    \        var factorizationIndexMax13 = factorizationIndexMax\n        var factorizationIndexMax14\
    \ = factorizationIndexMax\n        var factorizationIndexMax15 = factorizationIndexMax\n\
    \        var factorizationIndexMax16 = factorizationIndexMax\n        var factorizationIndexMax17\
    \ = factorizationIndexMax\n        var factorizationIndexMax18 = factorizationIndexMax\n\
    \        var factorizationIndexMax19 = factorizationIndexMax\n        var factorizationIndexMax20\
    \ = factorizationIndexMax\n        var factorizationIndexMax21 = factorizationIndexMax\n\
    \        var factorizationIndexMax22 = factorizationIndexMax\n        var factorizationIndexMax23\
    \ = factorizationIndexMax\n        var factorizationIndexMax24 = factorizationIndexMax\n\
    \        var factorizationIndexMax25 = factorizationIndexMax\n        var factorizationIndexMax26\
    \ = factorizationIndexMax\n        var factorizationIndexMax27 = factorizationIndexMax\n\
    \        var factorizationIndexMax28 = factorizationIndexMax\n        var factorizationIndexMax29\
    \ = factorizationIndexMax\n        var factorizationIndexMax30 = factorizationIndexMax\n\
    \        var factorizationIndexMax31 = factorizationIndexMax\n        var factorizationIndexMax32\
    \ = factorizationIndexMax\n        var factorizationIndexMax33 = factorizationIndexMax\n\
    \        var factorizationIndexMax34 = factorizationIndexMax\n        var factorizationIndexMax35\
    \ = factorizationIndexMax\n        var factorizationIndexMax36 = factorizationIndexMax\n\
    \        var factorizationIndexMax37 = factorizationIndexMax\n        var factorizationIndexMax38\
    \ = factorizationIndexMax\n        var factorizationIndexMax39 = factorizationIndexMax\n\
    \        var factorizationIndexMax40 = factorizationIndexMax\n        var factorizationIndexMax41\
    \ = factorizationIndexMax", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factorizationIndex = 0\n        var factorizationIndexCount = 0\n        var\
    \ factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n) / math.log(2)))\n\
    \        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n) /\
    \ math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMax = math.pow(2, math.ceil(math.log(n)\
    \ / math.log(2)))\n        var factorizationIndexCountMin = math.pow(2, math.floor(math.log(n",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOf = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfss = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationCountOfsss = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfssss = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssss\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfssssss =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfsssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsssssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfsssssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssssssssss = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfssssssssssssssss", "        val factorization\
    \ = mutable.ListBuffer[Long]()\n        var factor = 2\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                factorization +=\
    \ factor\n                while (factor <= n && n % factor == 0) {\n         \
    \           factor += 1\n                }\n            }\n            factor\
    \ += 1\n        }\n        factorization.toList", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorization = factorizationOf(n)\n        factorization.foreach(f\
    \ => factors += f)\n        factors", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountPair = mutable.ArrayBuffer.empty[(Long, Long)]\n\
    \        val factorizationCountPairs = mutable.ArrayBuffer.empty[(Long, Long)]\n\
    \        val factorizationCountPairsSorted = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCount = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSorted = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCount = mutable.ArrayBuffer.empty[(Long,\
    \ Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSorted\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPairsSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCountSortedByCount\
    \ = mutable.ArrayBuffer.empty[(Long, Long)]\n        val factorizationCountPair",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeCounts = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationCounts = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationPrimeCounts = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationPrimePrimes = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationPrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorizationPrimePrimes = mutable.ArrayBuffer.empty[Long]\n     \
    \   val primeFactorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimePrimePrimeCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrime", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrime = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrime", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMins = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMin = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMins = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountMinMax = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMinMaxs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMins\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMin\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMins\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMinMaxMinMaxMaxMax\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMinMaxMin",
  "        val factorization = mutable.HashSet[Long]()\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSize = mutable.ArrayBuffer.empty[Int]\n    \
    \    val factorizationListSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n    \
    \    val factorizationListSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationListSizeSizeSizeSizeSize",
  "        val factorization = mutable.ListBuffer[Long]()\n        var i = 2\n   \
    \     while (i <= n / i) {\n            if (n % i == 0) {\n                factorization\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        if (n > 1) {\n            factorization += n\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by 2){\n        \
    \    val factors = factorizationList.filter(_ % i == 0)\n            factorization\
    \ += i\n            factorizationList += factors.count(_ == i).toLong\n      \
    \  }\n        factorizationList.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrime = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val ", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n    \
    \    val primeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizationPrimeFactorization",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2\
    \ to n by 2){\n            val factors = n / i\n            factorization += factors\n\
    \        }\n        factorization.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorizations(n)\n        factorization.foreach(f\
    \ => factors += f)\n        factors", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        var factor = 1\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                factorization += factor\n                factor *=\
    \ factor\n            }\n            factor += 1\n        }\n        factorization.toList",
  "        val factorization = mutable.ListBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val factorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPri",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorize(n).reverse\n\
    \        factorization.foreach(f => factors += f)\n        factors", "       \
    \ val factorization = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizations = mutable.ArrayBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime", "      \
    \  val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationList\
    \ = mutable.ArrayBuffer.empty[Long]\n        var factorizationCounter = 0\n  \
    \      var factorizationCounterList = 0\n        var factorizationCounterList2\
    \ = 0\n        var factorizationCounterList3 = 0\n        var factorizationCounterList4\
    \ = 0\n        var factorizationCounterList5 = 0\n        var factorizationCounterList6\
    \ = 0\n        var factorizationCounterList7 = 0\n        var factorizationCounterList8\
    \ = 0\n        var factorizationCounterList9 = 0\n        var factorizationCounterList10\
    \ = 0\n        var factorizationCounterList11 = 0\n        var factorizationCounterList12\
    \ = 0\n        var factorizationCounterList13 = 0\n        var factorizationCounterList14\
    \ = 0\n        var factorizationCounterList15 = 0\n        var factorizationCounterList16\
    \ = 0\n        var factorizationCounterList17 = 0\n        var factorizationCounterList18\
    \ = 0\n        var factorizationCounterList19 = 0\n        var factorizationCounterList20\
    \ = 0\n        var factorizationCounterList21 = 0\n        var factorizationCounterList22\
    \ = 0\n        var factorizationCounterList23 = 0\n        var factorizationCounterList24\
    \ = 0\n        var factorizationCounterList25 = 0\n        var factorizationCounterList26\
    \ = 0\n        var factorizationCounterList27 = 0\n        var factorizationCounterList28\
    \ = 0\n        var factorizationCounterList29 = 0\n        var factorizationCounterList30\
    \ = 0\n        var factorizationCounterList31 = 0\n        var factorizationCounterList32\
    \ = 0\n        var factorizationCounterList33 = 0\n        var factorizationCounterList34\
    \ = 0\n        var factorizationCounterList35 = 0\n        var factorizationCounterList36\
    \ = 0\n        var factorizationCounterList37 = 0\n        var factorizationCounterList38\
    \ = 0\n        var factorizationCounterList39 = 0\n        var factorizationCounterList40\
    \ = 0\n        var factorizationCounterList41 = 0\n        var factorizationCounterList42\
    \ = 0\n        var factorizationCounterList43 = 0\n        var factorizationCounterList44\
    \ = 0\n        var factorizationCounterList45 = 0\n        var factorizationCounterList46\
    \ = 0\n        var factorizationCounterList47 = 0\n        var factorizationCounterList48\
    \ = 0\n        var factorizationCounterList49 = 0\n        var factorizationCounterList50\
    \ = 0\n        var factorizationCounterList51 = 0\n        var factorizationCounterList52\
    \ = 0\n        var factorizationCounterList53 = 0\n        var factorizationCounterList54\
    \ = 0\n        var factorizationCounterList55 = 0\n        var factorizationCounterList56\
    \ = 0\n        var factorizationCounterList57 = 0\n        var factorizationCounterList58\
    \ = 0\n        var factorizationCounterList59 = 0\n        var factorizationCounterList60\
    \ = 0", "        val factorization = mutable.ListBuffer[Long]()\n        var factor\
    \ = 2\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             factorization += factor\n                while (factor <= n / factor)\
    \ {\n                    factor += 2\n                }\n            }\n     \
    \       factor += 2\n        }\n        factorization.toList", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimePrime", " \
    \       val factors = mutable.ListBuffer[Long]()\n        for(i <- 2 to n by 2){\n\
    \            val p = n/i\n            if(p == 1){\n                factors +=\
    \ i\n            }\n            else{\n                for(j <- 2 to p by 2){\n\
    \                    if(p%j == 0){\n                        factors += j\n   \
    \                     break\n                    }\n                }\n      \
    \      }\n        }\n        factors.toList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.Array",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationSize = n\n        val primeFactorizationSize = factorizationSize\
    \ / 2\n        val primeFactorizationSize2 = primeFactorizationSize / 2\n    \
    \    val primeFactorizationSize3 = primeFactorizationSize2 / 2\n        val primeFactorizationSize4\
    \ = primeFactorizationSize3 / 2\n        val primeFactorizationSize5 = primeFactorizationSize4\
    \ / 2\n        val primeFactorizationSize6 = primeFactorizationSize5 / 2\n   \
    \     val primeFactorizationSize7 = primeFactorizationSize6 / 2\n        val primeFactorizationSize8\
    \ = primeFactorizationSize7 / 2\n        val primeFactorizationSize9 = primeFactorizationSize8\
    \ / 2\n        val primeFactorizationSize10 = primeFactorizationSize9 / 2\n  \
    \      val primeFactorizationSize11 = primeFactorizationSize10 / 2\n        val\
    \ primeFactorizationSize12 = primeFactorizationSize11 / 2\n        val primeFactorizationSize13\
    \ = primeFactorizationSize12 / 2\n        val primeFactorizationSize14 = primeFactorizationSize13\
    \ / 2\n        val primeFactorizationSize15 = primeFactorizationSize14 / 2\n \
    \       val primeFactorizationSize16 = primeFactorizationSize15 / 2\n        val\
    \ primeFactorizationSize17 = primeFactorizationSize16 / 2\n        val primeFactorizationSize18\
    \ = primeFactorizationSize17 / 2\n        val primeFactorizationSize19 = primeFactorizationSize18\
    \ / 2\n        val primeFactorizationSize20 = primeFactorizationSize19 / 2\n \
    \       val primeFactorizationSize21 = primeFactorizationSize20 / 2\n        val\
    \ primeFactorizationSize22 = primeFactorizationSize21 / 2\n        val primeFactorizationSize23\
    \ = primeFactorizationSize22 / 2\n        val primeFactorizationSize24 = primeFactorizationSize23\
    \ / 2\n        val primeFactorizationSize25 = primeFactorizationSize24 / 2\n \
    \       val primeFactorizationSize26 = primeFactorizationSize25 / 2\n        val\
    \ primeFactorizationSize27 = primeFactorizationSize26 / 2\n        val primeFactorizationSize28\
    \ = primeFactorizationSize27 / 2\n        val primeFactorizationSize29 = primeFactorizationSize28\
    \ / 2\n        val primeFactorizationSize30 = primeFactorizationSize29 / 2\n",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        for (i <-\
    \ 2 to n by 2) {\n            if (n % i == 0) {\n                factorization\
    \ += i\n                n /= i\n            }\n        }\n        if (n != 1)\
    \ {\n            factorization += n\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountMax = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxs = mutable.ArrayBuffer.empty[Long]\n   \
    \     val factorizationCountMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax", "        val\
    \ factorization = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n by\
    \ 2){\n            for(j <- 2 to i by 2){\n                if(i % j == 0){\n \
    \                   factorization += j\n                    break\n          \
    \      }\n            }\n        }\n        factorization.toList", "        val\
    \ factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors", "       \
    \ val factors = mutable.ArrayBuffer.empty[Long]\n        val factorization = factorizations(n)\n\
    \        factorization.foreach { f =>\n            factors += f\n        }\n \
    \       factors", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        factorization.append(2)\n        factorization.append(n)\n        while(factorization.nonEmpty)\
    \ {\n            val current = factorization.last\n            factorization.removeLast()\n\
    \            factorization.append(current / 2)\n            factorization.append(current\
    \ % 2)\n        }\n        factorization.toList", "        val factorization =\
    \ mutable.ArrayBuffer.empty[Long]\n        var factor = 1\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                factorization +=\
    \ factor\n                factor *= factor\n            }\n            factor\
    \ += 1\n        }\n        factorization.toList", "        val factorization =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOf\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfs = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfc = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountOfcs = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcde = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountOfcdef = mutable.ArrayBuffer.empty[Long]\n    \
    \    val factorizationCountOfcdefg = mutable.ArrayBuffer.empty[Long]\n       \
    \ val factorizationCountOfcdefgh = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountOfcdefghi = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghij\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijk\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijkl\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijklm\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijklmn\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijklmns\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijklmno\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijklmnop\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijklmnopq\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijklmnopr\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijklmnoprs\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijklmnops\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountOfcdefghijklmno",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        var factor\
    \ = 1\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             factorization += factor\n                factor *= factor\n    \
    \        }\n            factor += 1\n        }\n        factorization.toList",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        factorization\
    \ = factorization.+(n).filter(_ % _ == 0)\n        val factorizationList = factorization.toList\n\
    \        val factorizationListLength = factorizationList.length\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationListLength = factorizationListLength - 1\n   \
    \     val factorizationListLength = factorizationListLength - 1\n        val factorizationListLength\
    \ = factorizationListLength - 1\n        val factorizationListLength = factorizationListLength\
    \ - 1\n        val factorizationList", "        val factorization = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     val factors = factorize(n / i)\n                factorization += i * factors.count(_\
    \ == i)\n            }\n        }\n        factorization.toList", "        val\
    \ factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isFactorization = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization3 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization4 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization5\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization6 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization7 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization8 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization9\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization10 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization11 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization12 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization15 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization16 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization17\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization18 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization19 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization20 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization21\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization22 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization23 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization24 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorization = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactor",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationPrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimeCount = mutable.ArrayBuffer.empty[Long]\n     \
    \   val factorizationPrimePrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n      \
    \  val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationPrime", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorize(n).reverse\n        factorization.foreach(f\
    \ => {\n            factors += f\n        })\n        factors", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[Long]\n\
    \        var factorizationIndex = 0\n        var factorizationCount = 0\n    \
    \    while(n > 1) {\n            factorizationIndex += 1\n            val factorizationIndex\
    \ = factorizationIndex\n            val factorizationCount = factorizationCount\n\
    \            val factorization = factorization\n            factorization += n\n\
    \            val factorizations = factorizations\n            factorizations +=\
    \ factorization\n            n /= factorization\n        }\n        factorizations.toList",
  "        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factorizations = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.List"]
stop_tokens:
- "\n    }\n"
