name: HumanEval_3_below_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n    // zero balance. Your task is to detect if at any point\
  \ the balance of account fallls below zero, and\n    // at that point function should\
  \ return True. Otherwise it should return False.\n    def belowZero(operations :\
  \ List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
  \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
  \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
  \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
  \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
  \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
  \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
  \ == (true));\n    }\n\n}\n"
completions: ["        val balance = operations.foldLeft(0L){ (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val balance = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val initialBalance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail", "        val balance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        if (balance < 0 && newBalance < 0) {\n            return true\n     \
    \   }\n        if (balance > 0 && newBalance > 0) {\n            return false\n\
    \        }\n        belowZero(operations)", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        val newBalance = operations.head\n        ", "  \
    \      val balance = operations.sum\n        balance < 0", "        val initialBalance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val balance\
    \ = operations.head\n        val operations = operations.tail", "        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val newBalance\
    \ = operations.head\n        val newOperations = operations.tail\n        if (balance\
    \ < 0 && newBalance < 0) {\n            return true\n        } else if (balance\
    \ < 0 && newBalance > 0) {\n            return false\n        } else if (balance\
    \ > 0 && newBalance < 0) {\n            return false\n        } else if (balance\
    \ > 0 && newBalance > 0) {\n            return belowZero(newOperations)\n    \
    \    }", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.head\n        val operations = operations.tail\n\
    \        val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        if (balance < 0 && newBalance < 0) {\n            belowZero(newOperations)\n\
    \        } else if (balance < 0 && newBalance > 0) {\n            belowZero(newOperations)\n\
    \        } else if (balance > 0 && newBalance < 0) {\n            belowZero(newOperations)\n\
    \        } else if (balance > 0 && newBalance > 0) {\n            belowZero(newOperations)\n\
    \        } else {\n            false\n        }", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.head\n        val operations = operations.tail\n\
    \        val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        if (balance < 0 && newBalance < 0) {\n            return true\n     \
    \   }\n        if (balance < 0 && newBalance > 0) {\n            return false\n\
    \        }\n        if (balance > 0 && newBalance < 0) {\n            return false\n\
    \        }\n        if (balance > 0 && newBalance > 0) {\n            return belowZero(newOperations)\n\
    \        }", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.head\n        val operations = operations.tail\n\
    \        val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        if (balance < 0 && newBalance < 0) {\n            return true\n     \
    \   }\n        if (balance > 0 && newBalance > 0) {\n            return false\n\
    \        }\n        if (balance < 0 && newBalance > 0) {\n            return true\n\
    \        }\n        if (balance > 0 && newBalance < 0) {\n            return false\n\
    \        }\n        if (balance == 0 && newBalance == 0) {\n            return\
    \ true\n        }\n        if (balance == 0 && newBalance == 0) {\n          \
    \  return false\n        }\n        if (balance > 0 && newBalance > 0) {\n   \
    \         return false\n        }\n        if (balance < 0 && newBalance < 0)\
    \ {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return ", "        val balance = operations.head\n     \
    \   val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            true\n        } else if (balance < 0 && newBalance > 0)\
    \ {\n            belowZero(newOperations)\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else {\n           \
    \ false\n        }", "        val balance = operations.sum\n        balance <\
    \ 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance <\
    \ 0", "        val balance = operations.sum\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val\
    \ balance = operations.head\n        val operations = operations.tail\n      \
    \  val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        if (balance < 0 && newBalance < 0) {\n            return true\n     \
    \   }\n        if (balance > 0 && newBalance > 0) {\n            return false\n\
    \        }\n        if (balance < 0 && newBalance > 0) {\n            return true\n\
    \        }\n        if (balance > 0 && newBalance < 0) {\n            return false\n\
    \        }\n        belowZero(newOperations)", "        val balance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else if (balance < 0\
    \ && newBalance > 0) {\n            belowZero(newOperations)\n        } else if\
    \ (balance > 0 && newBalance < 0) {\n            belowZero(newOperations)\n  \
    \      } else if (balance > 0 && newBalance > 0) {\n            belowZero(newOperations)\n\
    \        } else {\n            false\n        }", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.head\n        val operations = operations.tail\n\
    \        val newBalance = operations.head\n        if (balance < 0)\n        \
    \    false\n        else\n            belowZero(operations)", "        val balance\
    \ = operations.foldLeft(0L){ (acc, op) => acc + op }\n        balance < 0", " \
    \       val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", " \
    \       val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", " \
    \       val balance = operations.head\n        val operations = operations.tail\n\
    \        val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        if (balance < 0 && newBalance < 0) {\n            return true\n     \
    \   } else if (balance < 0 && newBalance > 0) {\n            return false\n  \
    \      } else if (balance > 0 && newBalance < 0) {\n            return false\n\
    \        } else if (balance > 0 && newBalance > 0) {\n            return belowZero(newOperations)\n\
    \        } else {\n            return belowZero(newOperations)\n        }", " \
    \       val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", " \
    \       val balance = operations.sum\n        balance < 0", "        val initialBalance\
    \ = operations.head\n        val operations = operations.tail\n        val newBalance\
    \ = operations.head\n        val newBalance2 = operations.head\n        val newBalance3\
    \ = operations.head\n        val newBalance4 = operations.head\n        val newBalance5\
    \ = operations.head\n        val newBalance6 = operations.head\n        val newBalance7\
    \ = operations.head\n        val newBalance8 = operations.head\n        val newBalance9\
    \ = operations.head\n        val newBalance10 = operations.head\n        val newBalance11\
    \ = operations.head\n        val newBalance12 = operations.head\n        val newBalance13\
    \ = operations.head\n        val newBalance14 = operations.head\n        val newBalance15\
    \ = operations.head\n        val newBalance16 = operations.head\n        val newBalance17\
    \ = operations.head\n        val newBalance18 = operations.head\n        val newBalance19\
    \ = operations.head\n        val newBalance20 = operations.head\n        val newBalance21\
    \ = operations.head\n        val newBalance22 = operations.head\n        val newBalance23\
    \ = operations.head\n        val newBalance24 = operations.head\n        val newBalance25\
    \ = operations.head\n        val newBalance26 = operations.head\n        val newBalance27\
    \ = operations.head\n        val newBalance28 = operations.head\n        val newBalance29\
    \ = operations.head\n        val newBalance30 = operations.head\n        val newBalance31\
    \ = operations.head\n        val newBalance32 = operations.head\n        val newBalance33\
    \ = operations.head\n        val newBalance34 = operations.head\n        val newBalance35\
    \ = operations.head\n        val newBalance36 = operations.head\n        val newBalance37\
    \ = operations.head\n        val newBalance38 = operations.head\n        val newBalance39\
    \ = operations.head\n        val newBalance40 = operations.head\n        val newBalance41\
    \ = operations.head\n        val newBalance42 = operations.head\n        val newBalance43\
    \ = operations.head\n        val newBalance44 = operations.head\n        val newBalance45\
    \ = operations.head\n        val newBalance46 = operations.head\n        val newBalance47\
    \ = operations.head\n        val newBalance48 = operations.head\n        val newBalance49\
    \ = operations.head\n        val newBalance50 = operations.head\n        val newBalance51\
    \ = operation", "        val balance = operations.reduce((a, b) => a + b)\n  \
    \      balance < 0", "        val balance = operations.sum\n        balance <\
    \ 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance <\
    \ 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance <\
    \ 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance <\
    \ 0", "        val balance = operations.sum\n        balance < 0", "        val\
    \ balance = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val balance = operations.head\n        val operations = operations.tail\n  \
    \      val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        val newBalance2 = operations.head\n        val newOperations2 = operations.tail\n\
    \        val newBalance3 = operations.head\n        val newOperations3 = operations.tail\n\
    \        val newBalance4 = operations.head\n        val newOperations4 = operations.tail\n\
    \        val newBalance5 = operations.head\n        val newOperations5 = operations.tail\n\
    \        val newBalance6 = operations.head\n        val newOperations6 = operations.tail\n\
    \        val newBalance7 = operations.head\n        val newOperations7 = operations.tail\n\
    \        val newBalance8 = operations.head\n        val newOperations8 = operations.tail\n\
    \        val newBalance9 = operations.head\n        val newOperations9 = operations.tail\n\
    \        val newBalance10 = operations.head\n        val newOperations10 = operations.tail\n\
    \        val newBalance11 = operations.head\n        val newOperations11 = operations.tail\n\
    \        val newBalance12 = operations.head\n        val newOperations12 = operations.tail\n\
    \        val newBalance13 = operations.head\n        val newOperations13 = operations.tail\n\
    \        val newBalance14 = operations.head\n        val newOperations14 = operations.tail\n\
    \        val newBalance15 = operations.head\n        val newOperations15 = operations.tail\n\
    \        val newBalance16 = operations.head\n        val newOperations16 = operations.tail\n\
    \        val newBalance17 = operations.head\n        val newOperations17 = operations.tail\n\
    \        val newBalance18 = operations.head\n        val newOperations18 = operations.tail\n\
    \        val newBalance19 = operations.head\n        val newOperations19 = operations.tail\n\
    \        val newBalance20 = operations.head\n        val newOperations20 = operations.tail\n\
    \        val newBalance21 = operations.head\n        val newOperations21 = operations.tail\n\
    \        val newBalance22 = operations.head\n        val newOperations22 = operations.tail\n\
    \        val newBalance23 = operations.head\n        val newOperations23 = operations.tail\n\
    \        val newBalance24 = operations.head\n        val newOperations24 = operations.tail\n\
    \        val newBalance25 = operations.head\n        val newOperations25 = ",
  "        val balance = operations.sum\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.reduce((a, b) => a + b)\n        balance < 0", "        val balance\
    \ = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        if (balance < 0 && newBalance < 0) {\n          \
    \  belowZero(newOperations)\n        } else if (balance < 0 && newBalance > 0)\
    \ {\n            belowZero(newOperations)\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else if (balance > 0\
    \ && newBalance > 0) {\n            belowZero(newOperations)\n        } else {\n\
    \            false\n        }", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val initialBalance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val balance = operations.head\n        val operations\
    \ = operations.tail", "        val balance = operations.foldLeft(0)(_ + _)\n \
    \       balance < 0", "        val balance = operations.sum\n        balance <\
    \ 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance <\
    \ 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance <\
    \ 0", "        val balance = operations.sum\n        balance < 0", "        val\
    \ balance = operations.sum\n        balance < 0", "        val balance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        } else if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ > 0) {\n            return belowZero(newOperations)\n        } else {\n    \
    \        return belowZero(newOperations)\n        }", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.head\n        val operations = operations.tail\n  \
    \      val operation = operations.head\n        val operations = operations.tail\n\
    \        if (operation == 0) false\n        else if (balance < operation) false\n\
    \        else belowZero(operations)", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0", "        val balance = operations.sum\n   \
    \     balance < 0", "        val balance = operations.sum\n        balance < 0",
  "        val balance = operations.foldLeft(0L)(_ + _)\n        balance < 0", " \
    \       val balance = operations.sum\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.reduceLeft((a, b) => a + b)\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val\
    \ balance = operations.head\n        val operations = operations.tail\n      \
    \  val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        val newBalance2 = operations.head\n        val newOperations2 = operations.tail\n\
    \        val newBalance3 = operations.head\n        val newOperations3 = operations.tail\n\
    \        val newBalance4 = operations.head\n        val newOperations4 = operations.tail\n\
    \        val newBalance5 = operations.head\n        val newOperations5 = operations.tail\n\
    \        val newBalance6 = operations.head\n        val newOperations6 = operations.tail\n\
    \        val newBalance7 = operations.head\n        val newOperations7 = operations.tail\n\
    \        val newBalance8 = operations.head\n        val newOperations8 = operations.tail\n\
    \        val newBalance9 = operations.head\n        val newOperations9 = operations.tail\n\
    \        val newBalance10 = operations.head\n        val newOperations10 = operations.tail\n\
    \        val newBalance11 = operations.head\n        val newOperations11 = operations.tail\n\
    \        val newBalance12 = operations.head\n        val newOperations12 = operations.tail\n\
    \        val newBalance13 = operations.head\n        val newOperations13 = operations.tail\n\
    \        val newBalance14 = operations.head\n        val newOperations14 = operations.tail\n\
    \        val newBalance15 = operations.head\n        val newOperations15 = operations.tail\n\
    \        val newBalance16 = operations.head\n        val newOperations16 = operations.tail\n\
    \        val newBalance17 = operations.head\n        val newOperations17 = operations.tail\n\
    \        val newBalance18 = operations.head\n        val newOperations18 = operations.tail\n\
    \        val newBalance19 = operations.head\n        val newOperations19 = operations.tail\n\
    \        val newBalance20 = operations.head\n        val newOperations20 = operations.tail\n\
    \        val newBalance21 = operations.head\n        val newOperations21 = operations.tail\n\
    \        val newBalance22 = operations.head\n        val newOperations22 = operations.tail\n\
    \        val newBalance23 = operations.head\n        val newOperations23 = operations.tail\n\
    \        val newBalance24 = operations.head\n        val newOperations24 = operations.tail\n\
    \        val newBalance25 = operations.head\n        val newOperations25 = ",
  "        val initialBalance = operations.head\n        val operations = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n        val newBalance = operations.tail\n\
    \        val newBalance = operations.head\n", "        val balance = operations.sum\n\
    \        balance < 0", "        val initialBalance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val operations = operations.tail\n        val ", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val newBalance\
    \ = operations.head\n        val newOperations = operations.tail\n        val\
    \ newBalance2 = operations.head\n        val newOperations2 = operations.tail\n\
    \        val newBalance3 = operations.head\n        val newOperations3 = operations.tail\n\
    \        val newBalance4 = operations.head\n        val newOperations4 = operations.tail\n\
    \        val newBalance5 = operations.head\n        val newOperations5 = operations.tail\n\
    \        val newBalance6 = operations.head\n        val newOperations6 = operations.tail\n\
    \        val newBalance7 = operations.head\n        val newOperations7 = operations.tail\n\
    \        val newBalance8 = operations.head\n        val newOperations8 = operations.tail\n\
    \        val newBalance9 = operations.head\n        val newOperations9 = operations.tail\n\
    \        val newBalance10 = operations.head\n        val newOperations10 = operations.tail\n\
    \        val newBalance11 = operations.head\n        val newOperations11 = operations.tail\n\
    \        val newBalance12 = operations.head\n        val newOperations12 = operations.tail\n\
    \        val newBalance13 = operations.head\n        val newOperations13 = operations.tail\n\
    \        val newBalance14 = operations.head\n        val newOperations14 = operations.tail\n\
    \        val newBalance15 = operations.head\n        val newOperations15 = operations.tail\n\
    \        val newBalance16 = operations.head\n        val newOperations16 = operations.tail\n\
    \        val newBalance17 = operations.head\n        val newOperations17 = operations.tail\n\
    \        val newBalance18 = operations.head\n        val newOperations18 = operations.tail\n\
    \        val newBalance19 = operations.head\n        val newOperations19 = operations.tail\n\
    \        val newBalance20 = operations.head\n        val newOperations20 = operations.tail\n\
    \        val newBalance21 = operations.head\n        val newOperations21 = operations.tail\n\
    \        val newBalance22 = operations.head\n        val newOperations22 = operations.tail\n\
    \        val newBalance23 = operations.head\n        val newOperations23 = operations.tail\n\
    \        val newBalance24 = operations.head\n        val newOperations24 = operations.tail\n\
    \        val newBalance25 = operations.head\n        val newOperations25 = ",
  "        val balance = operations.sum\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.reduceLeft((a, b) => a + b)\n        balance < 0", "        val\
    \ balance = operations.head\n        val operations = operations.tail\n      \
    \  val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        val newBalance2 = operations.head\n        val newOperations2 = operations.tail\n\
    \        val newBalance3 = operations.head\n        val newOperations3 = operations.tail\n\
    \        val newBalance4 = operations.head\n        val newOperations4 = operations.tail\n\
    \        val newBalance5 = operations.head\n        val newOperations5 = operations.tail\n\
    \        val newBalance6 = operations.head\n        val newOperations6 = operations.tail\n\
    \        val newBalance7 = operations.head\n        val newOperations7 = operations.tail\n\
    \        val newBalance8 = operations.head\n        val newOperations8 = operations.tail\n\
    \        val newBalance9 = operations.head\n        val newOperations9 = operations.tail\n\
    \        val newBalance10 = operations.head\n        val newOperations10 = operations.tail\n\
    \        val newBalance11 = operations.head\n        val newOperations11 = operations.tail\n\
    \        val newBalance12 = operations.head\n        val newOperations12 = operations.tail\n\
    \        val newBalance13 = operations.head\n        val newOperations13 = operations.tail\n\
    \        val newBalance14 = operations.head\n        val newOperations14 = operations.tail\n\
    \        val newBalance15 = operations.head\n        val newOperations15 = operations.tail\n\
    \        val newBalance16 = operations.head\n        val newOperations16 = operations.tail\n\
    \        val newBalance17 = operations.head\n        val newOperations17 = operations.tail\n\
    \        val newBalance18 = operations.head\n        val newOperations18 = operations.tail\n\
    \        val newBalance19 = operations.head\n        val newOperations19 = operations.tail\n\
    \        val newBalance20 = operations.head\n        val newOperations20 = operations.tail\n\
    \        val newBalance21 = operations.head\n        val newOperations21 = operations.tail\n\
    \        val newBalance22 = operations.head\n        val newOperations22 = operations.tail\n\
    \        val newBalance23 = operations.head\n        val newOperations23 = operations.tail\n\
    \        val newBalance24 = operations.head\n        val newOperations24 = operations.tail\n\
    \        val newBalance25 = operations.head\n        val newOperations25 = ",
  "        val balance = operations.sum\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val newBalance\
    \ = operations.head\n        val newOperations = operations.tail\n        val\
    \ newBalance2 = operations.head\n        val newOperations2 = operations.tail\n\
    \        val newBalance3 = operations.head\n        val newOperations3 = operations.tail\n\
    \        val newBalance4 = operations.head\n        val newOperations4 = operations.tail\n\
    \        val newBalance5 = operations.head\n        val newOperations5 = operations.tail\n\
    \        val newBalance6 = operations.head\n        val newOperations6 = operations.tail\n\
    \        val newBalance7 = operations.head\n        val newOperations7 = operations.tail\n\
    \        val newBalance8 = operations.head\n        val newOperations8 = operations.tail\n\
    \        val newBalance9 = operations.head\n        val newOperations9 = operations.tail\n\
    \        val newBalance10 = operations.head\n        val newOperations10 = operations.tail\n\
    \        val newBalance11 = operations.head\n        val newOperations11 = operations.tail\n\
    \        val newBalance12 = operations.head\n        val newOperations12 = operations.tail\n\
    \        val newBalance13 = operations.head\n        val newOperations13 = operations.tail\n\
    \        val newBalance14 = operations.head\n        val newOperations14 = operations.tail\n\
    \        val newBalance15 = operations.head\n        val newOperations15 = operations.tail\n\
    \        val newBalance16 = operations.head\n        val newOperations16 = operations.tail\n\
    \        val newBalance17 = operations.head\n        val newOperations17 = operations.tail\n\
    \        val newBalance18 = operations.head\n        val newOperations18 = operations.tail\n\
    \        val newBalance19 = operations.head\n        val newOperations19 = operations.tail\n\
    \        val newBalance20 = operations.head\n        val newOperations20 = operations.tail\n\
    \        val newBalance21 = operations.head\n        val newOperations21 = operations.tail\n\
    \        val newBalance22 = operations.head\n        val newOperations22 = operations.tail\n\
    \        val newBalance23 = operations.head\n        val newOperations23 = operations.tail\n\
    \        val newBalance24 = operations.head\n        val newOperations24 = operations.tail\n\
    \        val newBalance25 = operations.head\n        val newOperations25 = ",
  "        val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "  \
    \      val balance = operations.head\n        operations.tail.forall(x => balance\
    \ < x)", "        val balance = operations.foldLeft(0L)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.head\n        val operations = operations.tail\n\
    \        val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        if (balance < 0 && newBalance < 0) {\n            return true\n     \
    \   } else if (balance < 0 && newBalance > 0) {\n            return false\n  \
    \      } else if (balance > 0 && newBalance < 0) {\n            return false\n\
    \        } else if (balance > 0 && newBalance > 0) {\n            return belowZero(newOperations)\n\
    \        } else {\n            return false\n        }", "        val balance\
    \ = operations.sum\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val initialBalance = operations.head\n        val operations = operations.tail\n\
    \        val newBalance = operations.foldLeft(initialBalance)((balance, operation)\
    \ => balance + operation)\n        return newBalance < 0", "        val balance\
    \ = operations.foldLeft(0L){ (acc, op) => acc + op } \n        balance < 0", " \
    \       val balance = operations.sum\n        balance < 0", "        val balance\
    \ = operations.sum\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.head\n       \
    \ val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        } else if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        } else if (balance > 0 && newBalance\
    \ > 0) {\n            return belowZero(newOperations)\n        } else {\n    \
    \        return false\n        }", "        val balance = operations.sum\n   \
    \     balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n   \
    \     balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n   \
    \     balance < 0", "        val balance = operations.reduceLeft((a, b) => a +\
    \ b)\n        balance < 0", "        val balance = operations.foldLeft(0)(_ +\
    \ _)\n        balance < 0", "        val balance = operations.reduceLeft(_ + _)\n\
    \        balance < 0", "        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val newBalance = operations.head\n        val newOperations\
    \ = operations.tail\n        if (balance < 0 && newBalance < 0) {\n          \
    \  return true\n        } else if (balance < 0 && newBalance > 0) {\n        \
    \    return false\n        } else if (balance > 0 && newBalance < 0) {\n     \
    \       return false\n        } else if (balance > 0 && newBalance > 0) {\n  \
    \          return belowZero(newOperations)\n        } else {\n            return\
    \ belowZero(newOperations)\n        }", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val initialBalance = operations.head\n        val balance = initialBalance\n\
    \        val operation = operations.tail\n        val operationBalance = operation.head\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n\
    \        val operationBalanceAfter = operationBalance - operationBalanceAfter\n\
    \        val operationBalanceBefore = operationBalance + operationBalanceBefore\n",
  "        val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "  \
    \      val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "  \
    \      val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "  \
    \      val balance = operations.sum\n        balance < 0", "        val balance\
    \ = operations.reduce((a, b) => a + b)\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0)(_ + _)\n        balance < 0", "        val balance\
    \ = operations.head\n        val operations = operations.tail\n        val newBalance\
    \ = operations.head\n        val newOperations = operations.tail\n        if (balance\
    \ < 0 && newBalance < 0) {\n            belowZero(newOperations)\n        } else\
    \ if (balance < 0 && newBalance > 0) {\n            belowZero(newOperations)\n\
    \        } else if (balance > 0 && newBalance < 0) {\n            belowZero(newOperations)\n\
    \        } else {\n            false\n        }", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n\
    \        balance < 0", "        val balance = operations.head\n        val operations\
    \ = operations.tail\n        val operation = operations.head\n        if (operation\
    \ == 0)\n            false\n        else if (balance < 0)\n            belowZero(operations)\n\
    \        else\n            belowZero(operations)", "        val balance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            true\n        } else if (balance < 0 && newBalance > 0)\
    \ {\n            belowZero(newOperations)\n        } else if (balance > 0 && newBalance\
    \ < 0) {\n            belowZero(newOperations)\n        } else {\n           \
    \ false\n        }", "        val balance = operations.foldLeft(0)(_ + _)\n  \
    \      balance < 0", "        val balance = operations.foldLeft(0)(_ + _)\n  \
    \      balance < 0", "        val balance = operations.sum\n        balance <\
    \ 0", "        val balance = operations.head\n        val operations = operations.tail\n\
    \        val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        if (balance < 0 && newBalance < 0) {\n            true\n        } else\
    \ if (balance < 0 && newBalance > 0) {\n            belowZero(newOperations)\n\
    \        } else if (balance > 0 && newBalance < 0) {\n            belowZero(newOperations)\n\
    \        } else {\n            false\n        }", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val balance = operations.head\n        val operations = operations.tail\n  \
    \      val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        if (balance < 0 && newBalance < 0) {\n            true\n        } else\
    \ if (balance < 0 && newBalance > 0) {\n            belowZero(newOperations)\n\
    \        } else if (balance > 0 && newBalance < 0) {\n            belowZero(newOperations)\n\
    \        } else {\n            false\n        }", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L)((acc, op) => acc + op)\n\
    \        balance < 0", "        val initialBalance = operations.head\n       \
    \ val operations = operations.tail\n        val balance = operations.head\n  \
    \      val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail\n        val balance = operations.head\n\
    \        val operations = operations.tail", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0)(_ + _)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L) { (sum, operation) => sum\
    \ + operation }\n        balance < 0", "        val balance = operations.sum\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L) { (acc,\
    \ op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0)(_\
    \ + _)\n        balance < 0", "        val balance = operations.sum\n        balance\
    \ < 0", "        val balance = operations.sum\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "       \
    \ val balance = operations.head\n        val operations = operations.tail\n  \
    \      val newBalance = operations.head\n        val newOperations = operations.tail\n\
    \        val newBalance2 = operations.head\n        val newOperations2 = operations.tail\n\
    \        val newBalance3 = operations.head\n        val newOperations3 = operations.tail\n\
    \        val newBalance4 = operations.head\n        val newOperations4 = operations.tail\n\
    \        val newBalance5 = operations.head\n        val newOperations5 = operations.tail\n\
    \        val newBalance6 = operations.head\n        val newOperations6 = operations.tail\n\
    \        val newBalance7 = operations.head\n        val newOperations7 = operations.tail\n\
    \        val newBalance8 = operations.head\n        val newOperations8 = operations.tail\n\
    \        val newBalance9 = operations.head\n        val newOperations9 = operations.tail\n\
    \        val newBalance10 = operations.head\n        val newOperations10 = operations.tail\n\
    \        val newBalance11 = operations.head\n        val newOperations11 = operations.tail\n\
    \        val newBalance12 = operations.head\n        val newOperations12 = operations.tail\n\
    \        val newBalance13 = operations.head\n        val newOperations13 = operations.tail\n\
    \        val newBalance14 = operations.head\n        val newOperations14 = operations.tail\n\
    \        val newBalance15 = operations.head\n        val newOperations15 = operations.tail\n\
    \        val newBalance16 = operations.head\n        val newOperations16 = operations.tail\n\
    \        val newBalance17 = operations.head\n        val newOperations17 = operations.tail\n\
    \        val newBalance18 = operations.head\n        val newOperations18 = operations.tail\n\
    \        val newBalance19 = operations.head\n        val newOperations19 = operations.tail\n\
    \        val newBalance20 = operations.head\n        val newOperations20 = operations.tail\n\
    \        val newBalance21 = operations.head\n        val newOperations21 = operations.tail\n\
    \        val newBalance22 = operations.head\n        val newOperations22 = operations.tail\n\
    \        val newBalance23 = operations.head\n        val newOperations23 = operations.tail\n\
    \        val newBalance24 = operations.head\n        val newOperations24 = operations.tail\n\
    \        val newBalance25 = operations.head\n        val newOperations25 = ",
  "        val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "  \
    \      val balance = operations.sum\n        balance < 0", "        val balance\
    \ = operations.reduceLeft((a, b) => a + b)\n        balance < 0", "        val\
    \ balance = operations.sum\n        balance < 0", "        val balance = operations.head\n\
    \        val operations = operations.tail\n        val newBalance = operations.head\n\
    \        val newOperations = operations.tail\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return true\n        }\n        if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return true\n        }\n        if (balance == 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ > 0) {\n            return false\n        }\n        if (balance > 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance < 0 && newBalance\
    \ < 0) {\n            return false\n        }\n        if (balance == 0 && newBalance\
    \ == 0) {\n            return true\n        }\n        if (balance > 0 && newBalance\
    \ == 0) {\n            return false\n        }\n        if (balance ", "     \
    \   val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "     \
    \   val balance = operations.foldLeft(0)(_ + _)\n        balance < 0", "     \
    \   val balance = operations.foldLeft(0L) { (sum, op) => sum + op }\n        balance\
    \ < 0", "        val balance = operations.reduceLeft((a, b) => a + b)\n      \
    \  balance < 0", "        val balance = operations.sum\n        balance < 0",
  "        val balance = operations.foldLeft(0)(_ + _)\n        balance < 0"]
stop_tokens:
- "\n    }\n"
