name: HumanEval_90_next_smallest
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
  \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
  \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n  \
  \  assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(1l));\n\
  \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n  \
  \  assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
  \    }\n\n}\n"
completions: ["        val smallest = lst.min\n        val secondSmallest = lst.filter(_\
    \ < smallest).min\n        secondSmallest match {\n            case Some(x) =>\
    \ Some(x)\n            case None => None\n        }", "        val smallest =\
    \ lst.min\n        val secondSmallest = lst.filter(x => x < smallest).max\n  \
    \      secondSmallest match {\n            case Some(x) => Some(x)\n         \
    \   case None => None\n        }", "        val smallest = lst.min\n        val\
    \ index = lst.indexOf(smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexWhere(_\
    \ == smallest)\n        if (index == -1) {\n            None\n        } else {\n\
    \            Some(lst.apply(index + 1))\n        }", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(x => x < smallest).min\n        if (smallest\
    \ == secondSmallest) None\n        else Some(secondSmallest)", "        val smallest\
    \ = lst.min\n        val secondSmallest = lst.minBy { x => x - smallest }\n  \
    \      if (secondSmallest == smallest) None else Some(secondSmallest)", "    \
    \    val smallest = lst.min\n        val secondSmallest = lst.filter(_ < smallest).min\n\
    \        if (secondSmallest == smallest) None else Some(secondSmallest)", "  \
    \      val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == 0) None\n        else Some(lst.apply(index + 1))", "      \
    \  val smallest = lst.min\n        val index = lst.indexOf(smallest)\n       \
    \ if (index < lst.size - 1) {\n            Some(lst(index + 1))\n        } else\
    \ {\n            None\n        }", "        val smallest = lst.min\n        val\
    \ index = lst.indexWhere(x => x < smallest)\n        if (index < 0) None\n   \
    \     else Some(lst.apply(index + 1))", "        val smallest = lst.min\n    \
    \    val smallest_index = lst.indexOf(smallest)\n        if (smallest_index ==\
    \ 0) None\n        else Some(lst.updated(smallest_index, lst.updated(smallest_index\
    \ + 1, lst.updated(smallest_index + 2, smallest))))", "        val smallest =\
    \ lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if (index\
    \ < lst.size) {\n            Some(lst.apply(index + 1))\n        } else {\n  \
    \          None\n        }", "        val smallest = lst.min\n        val index\
    \ = lst.indexOf(smallest)\n        if (index == 0 || index == lst.size - 1) None\n\
    \        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n \
    \       val smallest_index = lst.indexOf(smallest)\n        if (smallest_index\
    \ == lst.size - 1) {\n            None\n        } else {\n            val next_index\
    \ = smallest_index + 1\n            val next_element = lst(next_index)\n     \
    \       if (next_element < smallest) {\n                Some(next_element)\n \
    \           } else {\n                None\n            }\n        }", "     \
    \   val smallest = lst.min\n        val second = lst.filter(x => x < smallest).max\n\
    \        if (second == smallest) None\n        else Some(second)", "        val\
    \ smallest = lst.min\n        val smallestIndex = lst.indexOf(smallest)\n    \
    \    val secondSmallest = lst.drop(smallestIndex).min\n        if (secondSmallest\
    \ < smallest) {\n            Some(secondSmallest)\n        } else {\n        \
    \    None\n        }", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.minBy { x => x - smallest }\n        secondSmallest != smallest && secondSmallest\
    \ != None", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val secondSmallest = lst.filter(_ < smallest).max\n\
    \        secondSmallest match {\n            case Some(smallest) => Some(smallest)\n\
    \            case None => None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x < smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n\
    \        val smallestIndex = lst.indexOf(smallest)\n        if(smallestIndex <\
    \ lst.size - 1) {\n            Some(lst.apply(smallestIndex + 1))\n        } else\
    \ {\n            None\n        }", "        val smallest = lst.min\n        val\
    \ secondSmallest = lst.minBy(x => x - smallest)\n        if (secondSmallest ==\
    \ smallest) None else Some(secondSmallest)", "        val m = lst.min\n      \
    \  val n = lst.max\n        if (m > n) None\n        else Some(lst.indexOf(m))",
  "        val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val m = lst.min\n     \
    \   val n = lst.max\n        if (m == n) None\n        else Some(lst(lst.length\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val smallest_index = lst.indexOf(smallest)\n\
    \        if (smallest_index == lst.size - 1) {\n            None\n        } else\
    \ {\n            val next_smallest = lst(smallest_index + 1)\n            Some(next_smallest)\n\
    \        }", "        val smallest = lst.min\n        val smallestIndex = lst.indexOf(smallest)\n\
    \        if (smallestIndex == 0) None\n        else Some(lst.apply(smallestIndex\
    \ + 1))", "        val smallest = lst.min\n        val smallest_index = lst.indexOf(smallest)\n\
    \        val second_smallest = lst.take(smallest_index + 1).min\n        if (second_smallest\
    \ == smallest) {\n            None\n        } else {\n            Some(second_smallest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.minBy { x => x - smallest }\n        if (secondSmallest\
    \ == smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val smallest_index = lst.indexOf(smallest)\n        val second_smallest\
    \ = lst.apply(smallest_index + 1)\n        second_smallest match {\n         \
    \   case None => None\n            case _ => Some(second_smallest)\n        }",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == 0) None\n        else Some(lst.apply(index - 1))", "      \
    \  val smallest = lst.min\n        val secondSmallest = lst.minBy { x => x - smallest\
    \ }\n        if (secondSmallest == smallest) None else Some(secondSmallest)",
  "        val smallest = lst.min\n        val secondSmallest = lst.filter(_ < smallest).min\n\
    \        if (secondSmallest == smallest) None else Some(secondSmallest)", "  \
    \      val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            Some(lst.apply(index\
    \ + 1))\n        }", "        val m = lst.min\n        val n = lst.max\n     \
    \   if (m == n) None\n        else Some(lst(lst.length - 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val smallest_index = lst.indexWhere(_ == smallest)\n        val next_smallest\
    \ = lst.updated(smallest_index, smallest)\n        if (next_smallest.nonEmpty)\
    \ Some(next_smallest.get) else None", "        val smallest = lst.min\n      \
    \  val index = lst.indexOf(smallest)\n        if (index == 0) None\n        else\
    \ {\n            val next = lst.apply(index + 1)\n            if (next < smallest)\
    \ Some(next)\n            else nextSmallest(lst)\n        }", "        val smallest\
    \ = lst.min\n        val secondSmallest = lst.filter(x => x < smallest).max\n\
    \        if (secondSmallest == smallest) None else Some(secondSmallest)", "  \
    \      val smallest = lst.min\n        val index = lst.indexWhere(_ == smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ second = lst.apply(index + 1)\n            if (second < smallest) {\n      \
    \          Some(second)\n            } else {\n                None\n        \
    \    }\n        }", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.filter(x => x < smallest).max\n        secondSmallest match {\n      \
    \      case Some(x) => Some(x)\n            case None => None\n        }", " \
    \       val smallest = lst.min\n        val smallestIndex = lst.indexOf(smallest)\n\
    \        if (smallestIndex == lst.size - 1) {\n            None\n        } else\
    \ {\n            val secondSmallest = lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex + 1, lst.updated(smallestIndex\
    \ + 1, l", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val secondSmallest = lst.minBy { x => x\
    \ - smallest }\n        secondSmallest match {\n            case Some(x) => Some(x)\n\
    \            case None => None\n        }", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(_ < smallest).min\n        if (secondSmallest\
    \ < smallest) Some(secondSmallest) else None", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.minBy(_ < smallest)\n        if (secondSmallest\
    \ == smallest) None else secondSmallest", "        val smallest = lst.min\n  \
    \      val secondSmallest = lst.filter(x => x < smallest).max\n        secondSmallest\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }", "        val smallest = lst.min\n        val smallestIndex = lst.indexOf(smallest)\n\
    \        val secondSmallest = lst.drop(smallestIndex).min\n        secondSmallest\
    \ == smallest", "        val smallest = lst.min\n        val secondSmallest =\
    \ lst.filter(_ < smallest).min\n        secondSmallest match {\n            case\
    \ Some(smallest) => Some(secondSmallest)\n            case None => None\n    \
    \    }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index < lst.size) {\n            Some(lst.apply(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val secondSmallest = lst.minBy(x => x)\n        if (smallest\
    \ == secondSmallest) None\n        else Some(secondSmallest)", "        val smallest\
    \ = lst.min\n        val secondSmallest = lst.filter(x => x < smallest).max\n\
    \        secondSmallest", "        val smallest = lst.min\n        val index =\
    \ lst.indexOf(smallest)\n        if(index == 0) None\n        else Some(lst.apply(index\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val secondSmallest = lst.filter(_ < smallest).max\n\
    \        if (secondSmallest < smallest) None else Some(secondSmallest)", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index == 0) None\n        else Some(lst.apply(index - 1))", "       \
    \ val smallest = lst.min\n        val secondSmallest = lst.minBy { x => x - smallest\
    \ }\n        if (secondSmallest == smallest) None else Some(secondSmallest)",
  "        val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.apply(index + 1)\n            if (next < smallest) {\n          \
    \      Some(next)\n            } else {\n                None\n            }\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val secondSmallest = lst.filter(x => x <\
    \ smallest).max\n        if (secondSmallest < smallest) None else Some(secondSmallest)",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if(index == 0) None\n        else Some(lst.apply(index - 1))", "       \
    \ val smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if\
    \ (index == 0) None\n        else Some(lst.apply(index - 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index == 0)\
    \ None\n        else {\n            val next = lst.apply(index + 1)\n        \
    \    if (next < smallest) Some(next)\n            else nextSmallest(lst.drop(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst.apply(index + 1))\n\
    \        } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(x => x < smallest).max\n        if (secondSmallest\
    \ == smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val m = lst.min\n        val\
    \ n = lst.max\n        if(m == n) None\n        else Some(m)", "        val smallest\
    \ = lst.min\n        val second = lst.filter(_ < smallest).max\n        if (second\
    \ == smallest) None else Some(second)", "        if (lst.isEmpty) None\n     \
    \   else {\n            val smallest = lst.head\n            val rest = lst.tail\n\
    \            if (smallest < rest.min) Some(rest.min)\n            else nextSmallest(rest)\n\
    \        }", "        val smallest = lst.min\n        val secondSmallest = lst.filter(x\
    \ => x < smallest).max\n        if (secondSmallest < smallest) None else Some(secondSmallest)",
  "        val smallest = lst.min\n        val secondSmallest = lst.minBy { x => x\
    \ - smallest }\n        if (secondSmallest == smallest) None\n        else Some(secondSmallest)",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == lst.size - 1) None\n        else Some(lst.apply(index + 1))",
  "        val smallest = lst.min\n        val secondSmallest = lst.filter(x => x\
    \ < smallest).min\n        secondSmallest match {\n            case x if x < smallest\
    \ => Some(x)\n            case _ => None\n        }", "        val smallest =\
    \ lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if (index\
    \ < lst.size) {\n            Some(lst.apply(index + 1))\n        } else {\n  \
    \          None\n        }", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.filter(x => x < smallest).max\n        secondSmallest match {\n      \
    \      case Some(x) => Some(x)\n            case None => None\n        }", " \
    \       val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val smallest = lst.min\n    \
    \    val second = lst.filter(x => x < smallest).max\n        Some(second)", " \
    \       val smallest = lst.min\n        val secondSmallest = lst.minBy { x =>\
    \ x - smallest }\n        if (secondSmallest == smallest) None else Some(secondSmallest)",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if(index == 0) None\n        else Some(lst.apply(index - 1))", "       \
    \ val smallest = lst.min\n        val smallest_index = lst.indexOf(smallest)\n\
    \        val second_smallest = lst.take(smallest_index).min\n        val second_smallest_index\
    \ = lst.indexOf(second_smallest)\n        if (second_smallest_index > smallest_index)\
    \ Some(second_smallest) else None", "        val smallest = lst.min\n        val\
    \ index = lst.indexOf(smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val secondSmallest = lst.minBy { x => x\
    \ - smallest }\n        if (smallest == secondSmallest) None\n        else Some(secondSmallest)",
  "        val smallest = lst.min\n        val smallestIndex = lst.indexOf(smallest)\n\
    \        if(smallestIndex < lst.size - 1){\n            val nextSmallest = lst.apply(smallestIndex\
    \ + 1)\n            if(nextSmallest < smallest){\n                Some(nextSmallest)\n\
    \            } else {\n                None\n            }\n        } else {\n\
    \            None\n        }", "        val smallest = lst.min\n        val index\
    \ = lst.indexOf(smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.minBy { x => x - smallest }\n        if (secondSmallest\
    \ == smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0 || index ==\
    \ lst.size - 1) {\n            None\n        } else {\n            val nextSmallest\
    \ = lst(index + 1)\n            Some(nextSmallest)\n        }", "        val smallest\
    \ = lst.min\n        val secondSmallest = lst.filter(x => x < smallest).min\n\
    \        secondSmallest match {\n            case Some(smallest) => Some(secondSmallest)\n\
    \            case None => None\n        }", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(_ < smallest).min\n        secondSmallest\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(_\
    \ == smallest)\n        if (index == lst.size) {\n            None\n        }\
    \ else {\n            Some(lst.apply(index + 1))\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if (index < lst.size\
    \ - 1) {\n            Some(lst(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val secondSmallest = lst.minBy { x => x\
    \ - smallest }\n        if (secondSmallest == smallest) None else Some(secondSmallest)",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == 0) None\n        else Some(lst.apply(index - 1))", "      \
    \  val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val smallest_index = lst.indexOf(smallest)\n        val smallest_value\
    \ = lst(smallest_index)\n        if (smallest_index == lst.size - 1) {\n     \
    \       None\n        } else {\n            val next_smallest = lst(smallest_index\
    \ + 1)\n            if (next_smallest < smallest_value) {\n                Some(next_smallest)\n\
    \            } else {\n                None\n            }\n        }", "    \
    \    val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            Some(lst.apply(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.minBy { x => x - smallest }\n        if (smallest == secondSmallest) None\n\
    \        else Some(secondSmallest)", "        val smallest = lst.min\n       \
    \ val secondSmallest = lst.minBy { x => x - smallest }\n        secondSmallest\
    \ != smallest && secondSmallest != None", "        val smallest = lst.min\n  \
    \      val index = lst.indexOf(smallest)\n        if (index == 0) None\n     \
    \   else Some(lst.apply(index - 1))", "        val smallest = lst.min\n      \
    \  val smallestIndex = lst.indexOf(smallest)\n        if(smallestIndex == lst.size\
    \ - 1) None\n        else Some(lst.apply(smallestIndex + 1))", "        val smallest\
    \ = lst.min\n        val secondSmallest = lst.minBy { x => x - smallest }\n  \
    \      if (smallest == secondSmallest) None\n        else Some(secondSmallest)",
  "        val smallest = lst.min\n        val smallest_index = lst.indexOf(smallest)\n\
    \        if (smallest_index == 0) None\n        else Some(lst.apply(smallest_index\
    \ - 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if(index == -1)\n            None\n        else\n            lst.updated(index,\
    \ smallest)", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index < lst.size) {\n            Some(lst.apply(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(_ == smallest)\n        if (index\
    \ < lst.size) {\n            Some(lst(index + 1))\n        } else {\n        \
    \    None\n        }", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.filter(_ < smallest).min\n        secondSmallest match {\n           \
    \ case Some(smallest) => Some(smallest)\n            case None => None\n     \
    \   }", "        val smallest = lst.min\n        val secondSmallest = lst.filter(x\
    \ => x < smallest).max\n        if (secondSmallest < smallest) None else Some(secondSmallest)",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == -1) {\n            None\n        } else {\n            val\
    \ next = lst.updated(index, lst.updated(index + 1, smallest))\n            Some(next)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(_\
    \ == smallest)\n        if (index == -1) {\n            None\n        } else {\n\
    \            Some(lst.apply(index + 1))\n        }", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.minBy { x => x - smallest }\n        if (secondSmallest\
    \ == smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(x => x < smallest).max\n        if (secondSmallest\
    \ == smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(_ == smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val smallestIndex = lst.indexOf(smallest)\n\
    \        if (smallestIndex == 0) None\n        else Some(lst.apply(smallestIndex\
    \ + 1))", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst.apply(index + 1))\n\
    \        } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index < lst.size - 1)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index == 0) None\n        else Some(lst.apply(index\
    \ + 1))", "        val smallest = lst.min\n        val secondSmallest = lst.minBy\
    \ { x => x - smallest }\n        if (smallest == secondSmallest) None\n      \
    \  else Some(secondSmallest)", "        if (lst.isEmpty) None\n        else {\n\
    \            val smallest = lst.head\n            val rest = lst.tail\n      \
    \      val smallestIndex = lst.indexOf(smallest)\n            val restIndex =\
    \ lst.indexOf(rest.head)\n            if (smallestIndex < restIndex) Some(rest.head)\n\
    \            else nextSmallest(rest)\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val smallest = lst.min\n    \
    \    val secondSmallest = lst.filter(x => x < smallest).max\n        if (secondSmallest\
    \ < smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x < smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val secondSmallest = lst.filter(_\
    \ < smallest).min\n        if (secondSmallest == smallest) None\n        else\
    \ Some(secondSmallest)", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.filter(x => x < smallest).max\n        if (secondSmallest < smallest)\
    \ None else Some(secondSmallest)", "        val smallest = lst.min\n        val\
    \ secondSmallest = lst.minBy(x => x)\n        if (smallest == secondSmallest)\
    \ None\n        else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x < smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(_ < smallest).max\n        secondSmallest\
    \ match {\n            case Some(smallest) => Some(secondSmallest)\n         \
    \   case None => None\n        }", "        val smallest = lst.min\n        val\
    \ index = lst.indexOf(smallest)\n        if (index > 0) {\n            val nextSmallest\
    \ = lst(index + 1)\n            if (nextSmallest < smallest) {\n             \
    \   Some(nextSmallest)\n            } else {\n                None\n         \
    \   }\n        } else {\n            None\n        }", "        val smallest =\
    \ lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if (index\
    \ < lst.size) {\n            Some(lst.apply(index + 1))\n        } else {\n  \
    \          None\n        }", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.minBy { x => x - smallest }\n        if (smallest == secondSmallest) None\n\
    \        else Some(secondSmallest)", "        val smallest = lst.min\n       \
    \ val secondSmallest = lst.filter(x => x < smallest).max\n        if (secondSmallest\
    \ < smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.minBy { x => x - smallest }\n        if (secondSmallest\
    \ == smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(x => x < smallest).max\n        secondSmallest\
    \ match {\n            case Some(x) => Some(x)\n            case None => None\n\
    \        }", "        val smallest = lst.min\n        val secondSmallest = lst.minBy\
    \ { x => x - smallest }\n        if (secondSmallest == smallest) None\n      \
    \  else Some(secondSmallest)", "        val smallest = lst.min\n        val index\
    \ = lst.indexOf(smallest)\n        if (index < lst.size - 1) {\n            Some(lst(index\
    \ + 1))\n        } else {\n            None\n        }", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if\
    \ (index == -1) {\n            None\n        } else {\n            Some(lst.apply(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index == 0 || smallest == lst(index - 1))\n            None\n       \
    \ else\n            Some(lst(index - 1))", "        val smallest = lst.min\n \
    \       val index = lst.indexOf(smallest)\n        if (index < lst.size - 1) {\n\
    \            Some(lst(index + 1))\n        } else {\n            None\n      \
    \  }", "        val smallest = lst.min\n        val secondSmallest = lst.filter(x\
    \ => x < smallest).max\n        secondSmallest match {\n            case Some(smallest)\
    \ => Some(smallest)\n            case None => None\n        }", "        val smallest\
    \ = lst.min\n        val secondSmallest = lst.filter(x => x < smallest).max\n\
    \        secondSmallest match {\n            case Some(x) => Some(x)\n       \
    \     case None => None\n        }", "        val smallest = lst.min\n       \
    \ val second = lst.filter(x => x < smallest).max\n        if (second == smallest)\
    \ None\n        else Some(second)", "        val smallest = lst.min\n        val\
    \ secondSmallest = lst.filter(x => x < smallest).max\n        if (secondSmallest\
    \ < smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(_ < smallest).min\n        if (secondSmallest\
    \ == smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index + 1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val secondSmallest = lst.minBy\
    \ { x => x - smallest }\n        if (secondSmallest == smallest) None else Some(secondSmallest)",
  "        val smallest = lst.min\n        val secondSmallest = lst.minBy { x => x\
    \ - smallest }\n        secondSmallest match {\n            case Some(x) => Some(x)\n\
    \            case None => None\n        }", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(x => x < smallest).min\n        secondSmallest\
    \ match {\n            case x if x < smallest => Some(x)\n            case _ =>\
    \ None\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst.apply(index + 1))\n\
    \        } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ -1) {\n            None\n        } else {\n            val nextSmallest = lst(index\
    \ + 1)\n            Some(nextSmallest)\n        }", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(x => x < smallest).max\n        if (secondSmallest\
    \ == smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.filter(x => x < smallest).max\n        if (secondSmallest\
    \ < smallest) None else Some(secondSmallest)", "        val smallest = lst.min\n\
    \        val secondSmallest = lst.minBy { x => x - smallest }\n        if (smallest\
    \ == secondSmallest) None\n        else Some(secondSmallest)", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if\
    \ (index == 0) None\n        else Some(lst.apply(index + 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if\
    \ (index == 0) None\n        else Some(lst.apply(index - 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if(index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0 || index ==\
    \ lst.size - 1) {\n            None\n        } else {\n            Some(lst.apply(index\
    \ + 1))\n        }", "        if (lst.isEmpty) None\n        else {\n        \
    \    val smallest = lst.head\n            val rest = lst.tail\n            if\
    \ (smallest < rest.min) Some(rest.min)\n            else nextSmallest(rest)\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index == lst.size) {\n            None\n     \
    \   } else {\n            Some(lst.apply(index + 1))\n        }", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            Some(lst.apply(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val secondSmallest = lst.minBy { x => x\
    \ - smallest }\n        if (smallest == secondSmallest) None\n        else Some(secondSmallest)",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == 0) None\n        else Some(lst.apply(index - 1))", "      \
    \  val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            Some(lst.apply(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index ==\
    \ -1) {\n            None\n        } else {\n            Some(lst.apply(index\
    \ + 1))\n        }", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.filter(x => x < smallest).max\n        secondSmallest match {\n      \
    \      case Some(x) => Some(x)\n            case None => None\n        }", " \
    \       val smallest = lst.min\n        val index = lst.indexOf(smallest)\n  \
    \      if (index == 0) None\n        else Some(lst.apply(index + 1))", "     \
    \   val smallest = lst.min\n        val index = lst.indexOf(smallest)\n      \
    \  if (index < lst.size - 1) {\n            Some(lst(index + 1))\n        } else\
    \ {\n            None\n        }", "        val smallest = lst.min\n        val\
    \ smallest_index = lst.indexOf(smallest)\n        if(smallest_index == lst.size\
    \ - 1) None\n        else Some(lst.apply(smallest_index + 1))", "        val smallest\
    \ = lst.min\n        val secondSmallest = lst.filter(_ < smallest).min\n     \
    \   if (secondSmallest == smallest) None else Some(secondSmallest)", "       \
    \ val smallest = lst.min\n        val index = lst.indexOf(smallest)\n        if(index\
    \ == 0) None\n        else Some(lst.apply(index - 1))", "        val smallest\
    \ = lst.min\n        val secondSmallest = lst.filter(x => x < smallest).max\n\
    \        secondSmallest", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.minBy { x => x - smallest }\n        if (smallest == secondSmallest) None\n\
    \        else Some(secondSmallest)", "        val smallest = lst.min\n       \
    \ val index = lst.indexOf(smallest)\n        if (index == 0) None\n        else\
    \ Some(lst.apply(index - 1))", "        val smallest = lst.min\n        val secondSmallest\
    \ = lst.filter(x => x < smallest).max\n        secondSmallest match {\n      \
    \      case Some(x) => Some(x)\n            case None => None\n        }", " \
    \       val smallest = lst.min\n        val secondSmallest = lst.minBy { x =>\
    \ x - smallest }\n        if (smallest == secondSmallest) None\n        else Some(secondSmallest)",
  "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n   \
    \     if (index == 0) None\n        else Some(lst.apply(index - 1))", "      \
    \  val smallest = lst.min\n        val smallest_index = lst.indexOf(smallest)\n\
    \        if (smallest_index == lst.size - 1) None\n        else Some(lst.apply(smallest_index\
    \ + 1))", "        val smallest = lst.min\n        val secondSmallest = lst.filter(x\
    \ => x < smallest).max\n        if (secondSmallest < smallest) None else Some(secondSmallest)",
  "        val smallest = lst.min\n        val secondSmallest = lst.minBy(x => x -\
    \ smallest)\n        secondSmallest match {\n            case Some(x) => Some(x)\n\
    \            case None => None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexOf(smallest)\n        if (index == 0) None\n       \
    \ else {\n            val next = lst.apply(index + 1)\n            if (next <\
    \ smallest) Some(next)\n            else nextSmallest(lst)\n        }", "    \
    \    if (lst.isEmpty) None\n        else {\n            val smallest = lst.head\n\
    \            val rest = lst.tail\n            val smallestIndex = lst.indexOf(smallest)\n\
    \            val restIndex = lst.indexOf(rest.head)\n            if (smallestIndex\
    \ < restIndex) Some(rest.head)\n            else None\n        }", "        val\
    \ smallest = lst.min\n        val second = lst.filter(x => x < smallest).max\n\
    \        Some(second)", "        if (lst.isEmpty) None\n        else {\n     \
    \       val smallest = lst.min\n            val index = lst.indexOf(smallest)\n\
    \            if (index == 0) None\n            else Some(lst.apply(index - 1))\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index < lst.size - 1) {\n            Some(lst(index + 1))\n     \
    \   } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(_ == smallest)\n        if (index == lst.size)\
    \ {\n            None\n        } else {\n            Some(lst(index + 1))\n  \
    \      }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(_ == smallest)\n\
    \        if (index < lst.size) {\n            Some(lst(index + 1))\n        }\
    \ else {\n            None\n        }", "        val smallest = lst.min\n    \
    \    val secondSmallest = lst.filter(x => x < smallest).max\n        secondSmallest\
    \ match {\n            case Some(smallest) => Some(secondSmallest)\n         \
    \   case None => None\n        }", "        val smallest = lst.min\n        val\
    \ secondSmallest = lst.minBy { x => x - smallest }\n        secondSmallest match\
    \ {\n            case Some(x) => Some(x)\n            case None => None\n    \
    \    }", "        val smallest = lst.min\n        val index = lst.indexWhere(x\
    \ => x < smallest)\n        if (index < lst.size) {\n            Some(lst(index\
    \ + 1))\n        } else {\n            None\n        }"]
stop_tokens:
- "\n    }\n"
