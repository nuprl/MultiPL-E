name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    def evenOddCount(num : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        val even = num.toString.filter(_ % 2 == 0).length\n       \
    \ val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "  \
    \      var even = 0\n        var odd = 0\n        var evenCount = 0\n        var\
    \ oddCount = 0\n        for(i <- 0 until num) {\n            val digit = num %\
    \ 10\n            if(digit == 0) {\n                even += 1\n              \
    \  evenCount += 1\n            } else {\n                odd += 1\n          \
    \      oddCount += 1\n            }\n            num /= 10\n        }\n      \
    \  (even, odd, evenCount, oddCount)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evens = num.toString.filter(_ % 2 == 0).length\n        val odds =\
    \ num.toString.filter(_ % 2 != 0).length\n        (evens, odds)", "        val\
    \ even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evenCount = 0\n       \
    \ val oddCount = 0\n        val numString = num.toString\n        for(i <- 0 until\
    \ numString.length) {\n            val digit = numString.charAt(i)\n         \
    \   if(digit == '0') {\n                evenCount += 1\n            } else if(digit\
    \ == '1') {\n                oddCount += 1\n            }\n        }\n       \
    \ (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val evens = num.toString.filter(_.isDigit).filter(x\
    \ => x % 2 == 0).length\n        val odds = num.toString.filter(_.isDigit).filter(x\
    \ => x % 2 != 0).length\n        (evens, odds)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(x => x % 2\
    \ == 0).length\n        val oddCount = num.toString.filter(x => x % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n   \
    \     (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evenCount = num.toString.count(_\
    \ == '0')\n        val oddCount = num.toString.count(_ == '1')\n        Tuple2(evenCount,\
    \ oddCount)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val evens = num.toString.filter(_ % 2 == 0).length\n        val odds = num.toString.filter(_\
    \ % 2 != 0).length\n        (evens, odds)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n      \
    \  (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val evenCount = num.toString.filter(x => x % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(x => x % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val evenCount = 0\n        val oddCount = 0\n        val\
    \ numString = num.toString\n        for(i <- 0 until numString.length) {\n   \
    \         if(i % 2 == 0) {\n                evenCount += 1\n            } else\
    \ {\n                oddCount += 1\n            }\n        }\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evens = num.toString.filter(_ % 2 == 0).length\n        val odds =\
    \ num.toString.filter(_ % 2 != 0).length\n        (evens, odds)", "        var\
    \ even = 0\n        var odd = 0\n        var digits = num.toString.reverse.map(_.toInt)\n\
    \        for(i <- 0 until digits.length){\n            if(digits(i) % 2 == 0){\n\
    \                even += 1\n            }\n            else{\n               \
    \ odd += 1\n            }\n        }\n        return (even, odd)", "        val\
    \ evens = num.toString.filter(_ % 2 == 0).length\n        val odds = num.toString.filter(_\
    \ % 2 == 1).length\n        (evens, odds)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(_.isDigit).filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).filter(x\
    \ => x % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(x => x % 2\
    \ == 0).length\n        val oddCount = num.toString.filter(x => x % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(x =>\
    \ x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evens = num.toString.filter(_\
    \ % 2 == 0).length\n        val odds = num.toString.filter(_ % 2 == 1).length\n\
    \        Tuple2(evens, odds)", "        val even = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n      \
    \  (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 == 1).length\n        (evenCount,\
    \ oddCount)", "        val evenCount = num.toString.filter(x => x % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(x => x % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val evenCount = num.toString.filter(_ %\
    \ 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val evenCount = 0\n        val oddCount\
    \ = 0\n        var numDigits = 0\n        var digit = 0\n        while(num > 0)\
    \ {\n            digit = num % 10\n            num /= 10\n            numDigits\
    \ += 1\n            if(digit % 2 == 0) {\n                evenCount += 1\n   \
    \         } else {\n                oddCount += 1\n            }\n        }\n\
    \        Tuple2(evenCount, oddCount)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evens = num.toString.filter(_ % 2 == 0).length\n\
    \        val odds = num.toString.filter(_ % 2 != 0).length\n        (evens, odds)",
  "        val evens = num.toString.filter(_ % 2 == 0).length\n        val odds =\
    \ num.toString.filter(_ % 2 == 1).length\n        (evens, odds)", "        val\
    \ evens = num.toString.filter(_ % 2 == 0).length\n        val odds = num.toString.filter(_\
    \ % 2 != 0).length\n        (evens, odds)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val evens = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odds = num.toString.filter(x => x % 2 !=\
    \ 0).length\n        (evens, odds)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evenCount = num.toString.filter(x => x % 2 == 0).length\n        val\
    \ oddCount = num.toString.filter(x => x % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        var even = 0\n        var odd = 0\n        var count =\
    \ 0\n        while(num > 0) {\n            val temp = num % 10\n            num\
    \ /= 10\n            if(temp % 2 == 0) {\n                even += 1\n        \
    \    } else {\n                odd += 1\n            }\n            count += 1\n\
    \        }\n        (even, odd, count)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val evenCount = 0\n        val oddCount\
    \ = 0\n        val numString = num.toString\n        val evenChars = numString.filter(_\
    \ % 2 == 0)\n        val oddChars = numString.filter(_ % 2 != 0)\n        evenChars.foreach(x\
    \ => evenCount += x)\n        oddChars.foreach(x => oddCount += x)\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 == 1).length\n        Tuple2(even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        var even = 0\n        var odd\
    \ = 0\n        var count = 0\n        while(num > 0) {\n            val temp =\
    \ num % 10\n            num = num / 10\n            if(temp % 2 == 0) {\n    \
    \            even += 1\n            } else {\n                odd += 1\n     \
    \       }\n            count += 1\n        }\n        (even, odd, count)", " \
    \       val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n      \
    \  (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n      \
    \  (even, odd)", "        var even = 0\n        var odd = 0\n        var count\
    \ = 0\n        for(i <- 0 until num) {\n            val digit = num % 10\n   \
    \         if(digit % 2 == 0) {\n                even += 1\n            } else\
    \ {\n                odd += 1\n            }\n            num /= 10\n        \
    \    count += 1\n        }\n        (even, odd, count)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val evens = num.toString.filter(_ % 2 == 0).length\n       \
    \ val odds = num.toString.filter(_ % 2 != 0).length\n        (evens, odds)", " \
    \       val evenCount = num.toString.filter(x => x % 2 == 0).length\n        val\
    \ oddCount = num.toString.filter(x => x % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evens = num.toString.filter(_ % 2 == 0).length\n\
    \        val odds = num.toString.filter(_ % 2 != 0).length\n        (evens, odds)",
  "        val evenCount = num.toString.count(_ == '0')\n        val oddCount = num.toString.count(_\
    \ == '1')\n        (evenCount, oddCount)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evens = num.toString.filter(_ % 2 == 0).length\n\
    \        val odds = num.toString.filter(_ % 2 != 0).length\n        (evens, odds)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evens = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odds = num.toString.filter(x => x % 2 !=\
    \ 0).length\n        (evens, odds)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        var even = 0\n        var odd = 0\n        for(i\
    \ <- 0 until num) {\n            val digit = num % 10\n            if(digit %\
    \ 2 == 0) {\n                even += 1\n            } else {\n               \
    \ odd += 1\n            }\n            num /= 10\n        }\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        var evenCount = 0\n       \
    \ var oddCount = 0\n        var numStr = \"\" + num\n        var evenStr = \"\"\
    \n        var oddStr = \"\"\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStr\
    \ = \"\"\n        var oddStr = \"\"\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStr = \"\"\n        var oddStr = \"\"\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStr = \"\"\n        var oddStr\
    \ = \"\"\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStr\
    \ = \"\"\n        var oddStr = \"\"\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStr = \"\"\n        var oddStr = \"\"\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStr = \"\"\n        var oddStr\
    \ = \"\"\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStr\
    \ = \"\"\n        var oddStr = \"\"\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStr = \"\"\n        var oddStr = \"\"\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStr = \"\"\n        var oddStr\
    \ = \"\"\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStr\
    \ = \"\"\n        var oddStr = \"\"\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStr = \"\"\n        var oddStr = \"\"\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStr = \"\"\n        var oddStr\
    \ = \"\"\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStr\
    \ = \"\"\n        var oddStr = \"\"\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStr = \"\"\n        var oddStr = \"\"\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStr = \"\"\n        var oddStr\
    \ = \"\"\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStr\
    \ = \"\"\n        var oddStr = \"\"\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStr = \"\"\n        var oddStr = \"\"\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStr = \"\"\n        var oddStr\
    \ = \"\"\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStr\
    \ = \"\"\n        var oddStr = \"\"\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStr = \"\"\n        var oddStr = \"\"\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStr = \"\"\n        var oddStr\
    \ = \"\"\n        var evenStrLen = 0\n        var oddStrLen = 0", "        val\
    \ even = num / 10\n        val odd = num % 10\n        val evenCount = if (even\
    \ % 2 == 0) even else 0\n        val oddCount = if (odd % 2 == 0) odd else 0\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(x =>\
    \ x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = 0\n        val oddCount = 0\n\
    \        val numString = num.toString\n        for(i <- 0 until numString.length)\
    \ {\n            if(numString.charAt(i).toInt % 2 == 0) {\n                evenCount\
    \ += 1\n            } else {\n                oddCount += 1\n            }\n \
    \       }\n        (evenCount, oddCount)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val evens = num.toString.filter(_ %\
    \ 2 == 0).length\n        val odds = num.toString.filter(_ % 2 != 0).length\n\
    \        (evens, odds)", "        val evenCount = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val oddCount = num.toString.filter(_ % 2 == 1).length\n \
    \       (evenCount, oddCount)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n   \
    \     (even, odd)", "        val evenCount = num.toString.filter(x => x % 2 ==\
    \ 0).length\n        val oddCount = num.toString.filter(x => x % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n   \
    \     Tuple2(even, odd)", "        val evenCount = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n \
    \       (evenCount, oddCount)", "        val even = num.toString.filter(x => x\
    \ % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val evenCount = num.toString.filter(x =>\
    \ x % 2 == 0).length\n        val oddCount = num.toString.filter(x => x % 2 !=\
    \ 0).length\n        (evenCount, oddCount)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val evens = num.toString.filter(_ %\
    \ 2 == 0).length\n        val odds = num.toString.filter(_ % 2 == 1).length\n\
    \        Tuple2(evens, odds)", "        val even = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n      \
    \  (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val evenCount = num.toString.filter(x => x % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (evenCount, oddCount)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = 0\n        val oddCount = 0\n\
    \        val numString = num.toString\n        for(i <- 0 until numString.length)\
    \ {\n            val digit = numString.charAt(i)\n            if(digit == '0')\
    \ {\n                evenCount += 1\n            }\n            else if(digit\
    \ == '1') {\n                oddCount += 1\n            }\n        }\n       \
    \ (evenCount, oddCount)", "        val even = num / 10\n        val odd = num\
    \ % 10\n        (even, odd)", "        val even = num.toString.filter(x => x %\
    \ 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_.isDigit).filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(_.isDigit).filter(x => x % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(x => x %\
    \ 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_.isDigit).filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).filter(x\
    \ => x % 2 != 0).length\n        (even, odd)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n   \
    \     Tuple2(even, odd)", "        val evenCount = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n \
    \       (evenCount, oddCount)", "        val evenCount = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val oddCount = num.toString.filter(x => x % 2\
    \ != 0).length\n        (evenCount, oddCount)", "        val evenCount = 0\n \
    \       val oddCount = 0\n        for(i <- 0 until num){\n            if(i % 2\
    \ == 0){\n                evenCount += 1\n            }\n            else{\n \
    \               oddCount += 1\n            }\n        }\n        (evenCount, oddCount)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evens = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odds = num.toString.filter(x => x % 2 !=\
    \ 0).length\n        (evens, odds)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evenCount = num.toString.filter(x => x % 2 == 0).length\n        val\
    \ oddCount = num.toString.filter(x => x % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val even = num.toString.filter(x => x % 2 == 0).length\n        val odd = num.toString.filter(x\
    \ => x % 2 != 0).length\n        Tuple2(even, odd)", "        val evens = num.toString.filter(_\
    \ % 2 == 0).length\n        val odds = num.toString.filter(_ % 2 != 0).length\n\
    \        (evens, odds)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val evenCount = num.toString.filter(_ % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(_ % 2 != 0).length\n        (evenCount, oddCount)", " \
    \       val evenCount = 0\n        val oddCount = 0\n        val digits = num.toString.reverse.grouped(2).reverse\n\
    \        digits.foreach { x => if (x._2 == 0) evenCount += 1 else oddCount +=\
    \ 1 }\n        (evenCount, oddCount)", "        var even = 0\n        var odd\
    \ = 0\n        var numDigits = num.toString.length\n        for(i <- 0 until numDigits)\
    \ {\n            val digit = num.toString.charAt(i)\n            if(digit == '0')\
    \ {\n                even += 1\n            } else {\n                odd += 1\n\
    \            }\n        }\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 == 1).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n   \
    \     (even, odd)", "        val evenCount = num.toString.count(_ == '0')\n  \
    \      val oddCount = num.toString.count(_ == '1')\n        (evenCount, oddCount)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        Tuple2(even, odd)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val evenCount = num.toString.filter(_ % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(_ % 2 != 0).length\n        (evenCount, oddCount)", " \
    \       val even = num / 10\n        val odd = num % 10\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evens = num.toString.filter(_\
    \ % 2 == 0).length\n        val odds = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(evens, odds)", "        val even = num.toString.filter(x => x\
    \ % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 == 1).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 == 1).length\n        Tuple2(even, odd)", "        val even = num / 10\n\
    \        val odd = num % 10\n        val evenCount = if (even % 2 == 0) even else\
    \ 0\n        val oddCount = if (odd % 2 == 0) odd else 0\n        Tuple2(evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evenCount = num.toString.filter(_ % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(_ % 2 != 0).length\n        (evenCount, oddCount)", " \
    \       val even = num / 10\n        val odd = num % 10\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)"]
stop_tokens:
- "\n    }\n"
