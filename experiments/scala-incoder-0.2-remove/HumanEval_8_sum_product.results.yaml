language: scala
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { number =>\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { number =>\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       for (i <- numbers) {\n            sum += i\n            product *= i\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        Tuple2(sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:9:38 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m  |\e[0m                                  ^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   value += is not a member of Long - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n   \
    \     numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpblbk81d6.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                 value += is not a member of Int - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpblbk81d6.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value *= is not a member of Int - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n   \
    \     numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpblbk81d6.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                 value += is not a member of Int - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpblbk81d6.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value *= is not a member of Int - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { number =>\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { number =>\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product\
    \ = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:9:33 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum = sum + n)\n\
    \e[31m\e[31m  |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                             Reassignment to val sum\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:10:37 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product = product\
    \ * n)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Reassignment to val product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       for (i <- numbers) {\n            sum += i\n            product *= i\n\
    \        }\n        Tuple2(sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product\
    \ = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:9:33 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum = sum + n)\n\
    \e[31m\e[31m  |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                             Reassignment to val sum\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:10:37 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product = product\
    \ * n)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Reassignment to val product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product\
    \ = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:9:33 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum = sum + n)\n\
    \e[31m\e[31m  |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                             Reassignment to val sum\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:10:37 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product = product\
    \ * n)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Reassignment to val product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { x => sum += x; product *= x }\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7jcwhzzh.scala:9:35 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach { \e[36mx\e[0m => sum += x; product\
    \ *= x }\n\e[31m\e[31m  |\e[0m                               ^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   value += is not a member of Long - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7jcwhzzh.scala:9:49 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach { \e[36mx\e[0m => sum += x; product\
    \ *= x }\n\e[31m\e[31m  |\e[0m                                         ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { n =>\n            sum += n\n            product *= n\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdo7wp13.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdo7wp13.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:9:38 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m  |\e[0m                                  ^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   value += is not a member of Long - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { n =>\n            sum += n\n            product *= n\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdo7wp13.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdo7wp13.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n  \
    \      val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product\
    \ = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:9:33 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum = sum + n)\n\
    \e[31m\e[31m  |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                             Reassignment to val sum\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:10:37 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product = product\
    \ * n)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Reassignment to val product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        Tuple2(sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n   \
    \     numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpadn80z2r.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                 value += is not a member of Int - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpadn80z2r.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value *= is not a member of Int - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:9:38 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m  |\e[0m                                  ^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   value += is not a member of Long - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { number =>\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { number =>\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product\
    \ = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:9:38 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m  |\e[0m                                  ^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   value += is not a member of Long - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:9:38 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m  |\e[0m                                  ^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   value += is not a member of Long - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n  \
    \      val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n   \
    \     numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpadn80z2r.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                 value += is not a member of Int - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpadn80z2r.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              value *= is not a member of Int - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { x => sum += x; product *= x }\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7jcwhzzh.scala:9:35 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach { \e[36mx\e[0m => sum += x; product\
    \ *= x }\n\e[31m\e[31m  |\e[0m                               ^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   value += is not a member of Long - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7jcwhzzh.scala:9:49 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach { \e[36mx\e[0m => sum += x; product\
    \ *= x }\n\e[31m\e[31m  |\e[0m                                         ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(n => sum += n); product = product * numbers.size\n   \
    \     (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyx0lcb6p.scala:13)\n\tat Problem.main(tmpyx0lcb6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product\
    \ = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3dpwtv9s.scala:9:33 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum = sum + x)\n\
    \e[31m\e[31m  |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                             Reassignment to val sum\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp3dpwtv9s.scala:10:37 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product = product\
    \ * x)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Reassignment to val product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { number =>\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product\
    \ = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:9:33 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum = sum + n)\n\
    \e[31m\e[31m  |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                             Reassignment to val sum\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:10:37 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product = product\
    \ * n)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Reassignment to val product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n  \
    \      val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { number =>\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product\
    \ = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:9:33 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum = sum + n)\n\
    \e[31m\e[31m  |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                             Reassignment to val sum\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:10:37 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product = product\
    \ * n)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Reassignment to val product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n  \
    \      val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { number =>\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { n =>\n            sum += n\n            product *= n\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdo7wp13.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdo7wp13.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n); numbers.foreach(n => product *= n)\n \
    \       (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n); numbers.foreach(\e\
    [36mn\e[0m => product *= n)\n\e[31m\e[31m  |\e[0m                            \
    \ ^^^^^^\e[0m\n\e[31m  |\e[0m                   value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu3o7cfcc.scala:9:69\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e\
    [36mn\e[0m => sum += n); numbers.foreach(\e[36mn\e[0m => product *= n)\n\e[31m\e\
    [31m  |\e[0m                                                             ^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m               value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product\
    \ = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:9:33 ------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum = sum + n)\n\
    \e[31m\e[31m  |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                             Reassignment to val sum\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpgsxwujhm.scala:10:37 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product = product\
    \ * n)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Reassignment to val product\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n   \
    \     numbers.foreach(x => sum = sum + x)\n        numbers.foreach(x => product\
    \ = product * x)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1m0vl_rt.scala:9:35\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e\
    [0m => sum = sum + x)\n\e[31m\e[31m  |\e[0m                                  \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                                   Found:    Long\n\
    \e[31m  |\e[0m                                   Required: Int\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1m0vl_rt.scala:10:39 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product = product\
    \ * x)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    Long\n\e\
    [31m   |\e[0m                                       Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:9:38 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m  |\e[0m                                  ^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   value += is not a member of Long - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { n =>\n            sum += n\n            product *= n\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdo7wp13.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsdo7wp13.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0\n        val product = 1\n   \
    \     numbers.foreach(n => sum = sum + n)\n        numbers.foreach(n => product\
    \ = product * n)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2p8140ad.scala:9:35\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e\
    [0m => sum = sum + n)\n\e[31m\e[31m  |\e[0m                                  \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                                   Found:    Long\n\
    \e[31m  |\e[0m                                   Required: Int\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2p8140ad.scala:10:39 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product = product\
    \ * n)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    Long\n\e\
    [31m   |\e[0m                                       Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(x => sum += x)\n        numbers.foreach(x => product *=\
    \ x)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpiaswitse.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mx\e[0m => product *= x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach { number =>\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += number\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsm74kkdl.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= number\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:9:38 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => sum += number)\n\
    \e[31m\e[31m  |\e[0m                                  ^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   value += is not a member of Long - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnulhq_tq.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mnumber\e[0m => product\
    \ *= number)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value *= is not a member of Long - did you mean\
    \ product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)((sum, number)\
    \ => sum + number)\n        val product = numbers.foldLeft(1L)((product, number)\
    \ => product * number)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => {\n            sum += n\n            product *= n\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            sum += n\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long -\
    \ did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxbrxoxv.scala:11:20\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            product *= n\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean product.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = 0L\n        val product = 1L\n \
    \       numbers.foreach(n => sum += n)\n        numbers.foreach(n => product *=\
    \ n)\n        (sum, product)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:9:33 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        numbers.foreach(\e[36mn\e[0m => sum += n)\n\e\
    [31m\e[31m  |\e[0m                             ^^^^^^\e[0m\n\e[31m  |\e[0m   \
    \                value += is not a member of Long - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmporjdynom.scala:10:37 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        numbers.foreach(\e[36mn\e[0m => product *= n)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m             value *= is not a member of Long - did you mean product.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010084
