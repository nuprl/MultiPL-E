language: scala
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        var factorial2 = 1\n        var factorial3\
    \ = 1\n        var factorial4 = n\n        while (factorial4 > 1) {\n        \
    \    factorial *= factorial4\n            factorial2 *= factorial4\n         \
    \   factorial3 *= factorial4\n            factorial4 -= 1\n        }\n       \
    \ return factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6pf_1c_s.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            factorial *= factorial4\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6pf_1c_s.scala:17:23 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            factorial2 *= factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value *= is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6pf_1c_s.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            factorial3 *=\
    \ factorial4\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value *= is not a member of Int - did you mean Int.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tr_tgrs.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tr_tgrs.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0tr_tgrs.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1besq5ne.scala:57:37 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        factorials += n * factorials(\n\e[31m\e[31m \
    \  |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m        \
    \                             expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1besq5ne.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ch4m_8n.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ch4m_8n.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ch4m_8n.scala:82:8 -------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        factorials += factorial\n        val factorials = factorials.toList\n\
    \        factorials.reverse.foreach(factorial => {\n            factorial *= n\n\
    \            factorials += factorial\n        })\n        factorials.last\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28zbw31u.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = factorials.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp28zbw31u.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        while (n > 1) {\n            factorials += factorial\n        \
    \    factorial *= n\n            n -= 1\n        }\n        factorials.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp208cpi32.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp208cpi32.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp208cpi32.scala:16:14 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorials += factorial\n   \
    \         factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3aux_7ro.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3aux_7ro.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aux_7ro.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ch4m_8n.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ch4m_8n.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ch4m_8n.scala:82:8 -------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4nm5nc.scala:15)\n\tat Problem.main(tmp1j4nm5nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 0 until n){\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp98mkflqy.scala:12:25\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += factorials(n - 1)\n        factorials += factorials(n\
    \ - 2)\n        factorials += factorials(n - 3)\n        factorials += factorials(n\
    \ - 4)\n        factorials += factorials(n - 5)\n        factorials += factorials(n\
    \ - 6)\n        factorials += factorials(n - 7)\n        factorials += factorials(n\
    \ - 8)\n        factorials += factorials(n - 9)\n        factorials += factorials(n\
    \ - 10)\n        factorials += factorials(n - 11)\n        factorials += factorials(n\
    \ - 12)\n        factorials += factorials(n - 13)\n        factorials += factorials(n\
    \ - 14)\n        factorials += factorials(n - 15)\n        factorials += factorials(n\
    \ - 16)\n        factorials += factorials(n - 17)\n        factorials += factorials(n\
    \ - 18)\n        factorials += factorials(n - 19)\n        factorials += factorials(n\
    \ - 20)\n        factorials += factorials(n - 21)\n        factorials += factorials(n\
    \ - 22)\n        factorials += factorials(n - 23)\n        factorials += factorials(n\
    \ - 24)\n        factorials += factorials(n - 25)\n        factorials += factorials(n\
    \ - 26)\n        factorials += factorials(n - 27)\n        factorials += factorials(n\
    \ - 28)\n        factorials += factorials(n - 29)\n        factorials += factorials(n\
    \ - 30)\n        factorials += factorials(n - 31)\n        factorials += factorials(n\
    \ - 32)\n        factorials += factorials(n - 33)\n        factorials += factorials(n\
    \ - 34)\n        factorials += factorials(n - 35)\n        factorials += factorials(n\
    \ - 36)\n        factorials += factorials(n - 37)\n        factorials += factorials(n\
    \ - 38)\n        factorials += factorials(n - 39)\n        factorials += factorials(n\
    \ - 40)\n        factorials += factorials(n - 41)\n        factorials += factorials(n\
    \ - 42)\n        factorials += factorials(n - 43)\n        factorials += factorials(n\
    \ - 44)\n        factorials += factorials(n - 45)\n        factorials += factorials(n\
    \ - 46)\n        factorials += factorials(n - 47)\n        factori\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn91aws0.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn91aws0.scala:60:8 -------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ch4m_8n.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ch4m_8n.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ch4m_8n.scala:82:8 -------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ch4m_8n.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ch4m_8n.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ch4m_8n.scala:82:8 -------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        while (n > 1) {\n            factorial *= n\n            factorials\
    \ += factorial\n            n -= 1\n        }\n        factorials.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk7d3wli.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        while (n > 1) {\n            factorial *= n\n            factorials\
    \ += factorial\n            n -= 1\n        }\n        factorials.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk7d3wli.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorials += factorial\n   \
    \         factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3aux_7ro.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3aux_7ro.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aux_7ro.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4nm5nc.scala:15)\n\tat Problem.main(tmp1j4nm5nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1besq5ne.scala:57:37 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        factorials += n * factorials(\n\e[31m\e[31m \
    \  |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m        \
    \                             expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1besq5ne.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += factorials(n-1)\n        factorials += factorials(n-2)\n\
    \        factorials += factorials(n-3)\n        factorials += factorials(n-4)\n\
    \        factorials += factorials(n-5)\n        factorials += factorials(n-6)\n\
    \        factorials += factorials(n-7)\n        factorials += factorials(n-8)\n\
    \        factorials += factorials(n-9)\n        factorials += factorials(n-10)\n\
    \        factorials += factorials(n-11)\n        factorials += factorials(n-12)\n\
    \        factorials += factorials(n-13)\n        factorials += factorials(n-14)\n\
    \        factorials += factorials(n-15)\n        factorials += factorials(n-16)\n\
    \        factorials += factorials(n-17)\n        factorials += factorials(n-18)\n\
    \        factorials += factorials(n-19)\n        factorials += factorials(n-20)\n\
    \        factorials += factorials(n-21)\n        factorials += factorials(n-22)\n\
    \        factorials += factorials(n-23)\n        factorials += factorials(n-24)\n\
    \        factorials += factorials(n-25)\n        factorials += factorials(n-26)\n\
    \        factorials += factorials(n-27)\n        factorials += factorials(n-28)\n\
    \        factorials += factorials(n-29)\n        factorials += factorials(n-30)\n\
    \        factorials += factorials(n-31)\n        factorials += factorials(n-32)\n\
    \        factorials += factorials(n-33)\n        factorials += factorials(n-34)\n\
    \        factorials += factorials(n-35)\n        factorials += factorials(n-36)\n\
    \        factorials += factorials(n-37)\n        factorials += factorials(n-38)\n\
    \        factorials += factorials(n-39)\n        factorials += factorials(n-40)\n\
    \        factorials += factorials(n-41)\n        factorials += factorials(n-42)\n\
    \        factorials += factorials(n-43)\n        factorials += factorials(n-44)\n\
    \        factorials += factorials(n-45)\n        factorials += factorials(n-46)\n\
    \        factorials += factorials(n-47)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaod92pnf.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejh9vpl.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:17:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        var factorial2 = 1\n        var factorial3\
    \ = 1\n        var factorial4 = 1 \n        var factorial5 = 1 \n        var factorial6\
    \ = 1 \n        var factorial7 = 1 \n        var factorial8 = 1 \n        var\
    \ factorial9 = 1 \n        var factorial10 = 1 \n        var factorial11 = 1 \n\
    \        var factorial12 = 1 \n        var factorial13 = 1 \n        var factorial14\
    \ = 1 \n        var factorial15 = 1 \n        var factorial16 = 1 \n        var\
    \ factorial17 = 1 \n        var factorial18 = 1 \n        var factorial19 = 1\
    \ \n        var factorial20 = 1 \n        var factorial21 = 1 \n        var factorial22\
    \ = 1 \n        var factorial23 = 1 \n        var factorial24 = 1 \n        var\
    \ factorial25 = 1 \n        var factorial26 = 1 \n        var factorial27 = 1\
    \ \n        var factorial28 = 1 \n        var factorial29 = 1 \n        var factorial30\
    \ = 1 \n        var factorial31 = 1 \n        var factorial32 = 1 \n        var\
    \ factorial33 = 1 \n        var factorial34 = 1 \n        var factorial35 = 1\
    \ \n        var factorial36 = 1 \n        var factorial37 = 1 \n        var factorial38\
    \ = 1 \n        var factorial39 = 1 \n        var factorial40 = 1 \n        var\
    \ factorial41 = 1 \n        var factorial42 = 1 \n        var factorial43 = 1\
    \ \n        var factorial44 = 1 \n        var factorial45 = 1 \n        var factorial46\
    \ = 1 \n        var factorial47 = 1 \n        var factorial48 = 1 \n        var\
    \ factorial49 = 1 \n        var factorial50 = 1 \n        var factorial51 = 1\
    \ \n        var factorial52 = 1 \n        var factorial53 = 1 \n        var factorial54\
    \ = 1 \n        var factorial55 = 1 \n        var factorial56 = 1 \n        var\
    \ factorial57 = 1 \n        var factorial58 = 1 \n        var factorial59 = 1\
    \ \n        var factorial60 = 1 \n        var factorial61 = 1 \n        var factorial62\
    \ = 1 \n        var factorial63 = 1 \n        var factorial64 = 1 \n        var\
    \ factorial65 = 1 \n        var factorial66 = 1 \n        var factorial67 = 1\
    \ \n        var factorial68 = 1 \n        var factorial69 = 1 \n        var factorial70\
    \ = 1 \n        var factorial71 = 1 \n        var factorial72 = 1 \n        var\
    \ factorial73 = 1 \n        var factorial74 = 1 \n        var factorial75 = 1\
    \ \n        var factorial76 = 1 \n        var factorial77 = 1 \n        var factorial78\
    \ = 1 \n        var factorial79 = 1 \n        var factorial80 = 1 \n        var\
    \ factorial81 = 1 \n        var factorial82 = 1 \n        var factori\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprwjuicrv.scala:94:4 ----------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprwjuicrv.scala:94:5 ---------------------\e[0m\e[0m\n\e[31m94 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        var factorial2 = 1\n        var factorial3\
    \ = 1\n        var factorial4 = 1 \n        var factorial5 = 1 \n        var factorial6\
    \ = 1 \n        var factorial7 = 1 \n        var factorial8 = 1 \n        var\
    \ factorial9 = 1 \n        var factorial10 = 1 \n        var factorial11 = 1 \n\
    \        var factorial12 = 1 \n        var factorial13 = 1 \n        var factorial14\
    \ = 1 \n        var factorial15 = 1 \n        var factorial16 = 1 \n        var\
    \ factorial17 = 1 \n        var factorial18 = 1 \n        var factorial19 = 1\
    \ \n        var factorial20 = 1 \n        var factorial21 = 1 \n        var factorial22\
    \ = 1 \n        var factorial23 = 1 \n        var factorial24 = 1 \n        var\
    \ factorial25 = 1 \n        var factorial26 = 1 \n        var factorial27 = 1\
    \ \n        var factorial28 = 1 \n        var factorial29 = 1 \n        var factorial30\
    \ = 1 \n        var factorial31 = 1 \n        var factorial32 = 1 \n        var\
    \ factorial33 = 1 \n        var factorial34 = 1 \n        var factorial35 = 1\
    \ \n        var factorial36 = 1 \n        var factorial37 = 1 \n        var factorial38\
    \ = 1 \n        var factorial39 = 1 \n        var factorial40 = 1 \n        var\
    \ factorial41 = 1 \n        var factorial42 = 1 \n        var factorial43 = 1\
    \ \n        var factorial44 = 1 \n        var factorial45 = 1 \n        var factorial46\
    \ = 1 \n        var factorial47 = 1 \n        var factorial48 = 1 \n        var\
    \ factorial49 = 1 \n        var factorial50 = 1 \n        var factorial51 = 1\
    \ \n        var factorial52 = 1 \n        var factorial53 = 1 \n        var factorial54\
    \ = 1 \n        var factorial55 = 1 \n        var factorial56 = 1 \n        var\
    \ factorial57 = 1 \n        var factorial58 = 1 \n        var factorial59 = 1\
    \ \n        var factorial60 = 1 \n        var factorial61 = 1 \n        var factorial62\
    \ = 1 \n        var factorial63 = 1 \n        var factorial64 = 1 \n        var\
    \ factorial65 = 1 \n        var factorial66 = 1 \n        var factorial67 = 1\
    \ \n        var factorial68 = 1 \n        var factorial69 = 1 \n        var factorial70\
    \ = 1 \n        var factorial71 = 1 \n        var factorial72 = 1 \n        var\
    \ factorial73 = 1 \n        var factorial74 = 1 \n        var factorial75 = 1\
    \ \n        var factorial76 = 1 \n        var factorial77 = 1 \n        var factorial78\
    \ = 1 \n        var factorial79 = 1 \n        var factorial80 = 1 \n        var\
    \ factorial81 = 1 \n        var factorial82 = 1 \n        var factori\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprwjuicrv.scala:94:4 ----------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprwjuicrv.scala:94:5 ---------------------\e[0m\e[0m\n\e[31m94 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 0 until n){\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp98mkflqy.scala:12:25\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejh9vpl.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:17:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        while(n > 1) {\n            factorial *= n\n            factorials\
    \ += factorial\n            n -= 1\n        }\n        factorials.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rlyuc1k.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1rlyuc1k.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1rlyuc1k.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuj0p6x5t.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj0p6x5t.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_igzhsw.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd_igzhsw.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_igzhsw.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n){\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp17ou0_g_.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh2k_on8.scala:15)\n\tat Problem.main(tmpyh2k_on8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmebs12iy.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += n\n        factorials += factorials(0) * factorials(1)\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factori\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp22u14et.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp22u14et.scala:48:8 -------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.ArrayBuffer.empty[Long]\n        factorial\
    \ += n\n        factorial += n-1\n        factorial += n-2\n        factorial\
    \ += n-3\n        factorial += n-4\n        factorial += n-5\n        factorial\
    \ += n-6\n        factorial += n-7\n        factorial += n-8\n        factorial\
    \ += n-9\n        factorial += n-10\n        factorial += n-11\n        factorial\
    \ += n-12\n        factorial += n-13\n        factorial += n-14\n        factorial\
    \ += n-15\n        factorial += n-16\n        factorial += n-17\n        factorial\
    \ += n-18\n        factorial += n-19\n        factorial += n-20\n        factorial\
    \ += n-21\n        factorial += n-22\n        factorial += n-23\n        factorial\
    \ += n-24\n        factorial += n-25\n        factorial += n-26\n        factorial\
    \ += n-27\n        factorial += n-28\n        factorial += n-29\n        factorial\
    \ += n-30\n        factorial += n-31\n        factorial += n-32\n        factorial\
    \ += n-33\n        factorial += n-34\n        factorial += n-35\n        factorial\
    \ += n-36\n        factorial += n-37\n        factorial += n-38\n        factorial\
    \ += n-39\n        factorial += n-40\n        factorial += n-41\n        factorial\
    \ += n-42\n        factorial += n-43\n        factorial += n-44\n        factorial\
    \ += n-45\n        factorial += n-46\n        factorial += n-47\n        factorial\
    \ += n-48\n        factorial += n-49\n        factorial += n-50\n        factorial\
    \ += n-51\n        factorial += n-52\n        factorial += n-53\n        factorial\
    \ += n-54\n        factorial += n-55\n        factorial += n-56\n        factorial\
    \ += n-57\n        factorial += n-58\n        factorial += n-59\n        factorial\
    \ += n-60\n        factorial += n-61\n        factorial += n-62\n        factorial\
    \ += n-63\n        factorial += n-64\n        factorial += n-65\n        factorial\
    \ += n-66\n        factorial += n-67\n        factorial += n-68\n        factorial\
    \ += n-69\n        factorial += n-70\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprfmr5l_o.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh2k_on8.scala:15)\n\tat Problem.main(tmpyh2k_on8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ch4m_8n.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ch4m_8n.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ch4m_8n.scala:82:8 -------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var result : Long = 1\n        var i : Long = 1\n        while\
    \ (i <= n) {\n            result *= i\n            i += 1\n        }\n       \
    \ return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppexhkh73.scala:20)\n\tat Problem.main(tmppexhkh73.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tr_tgrs.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tr_tgrs.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0tr_tgrs.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmebs12iy.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var result : Long = 1\n        for(i <- 1 to n) {\n           \
    \ result *= i\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyd_m592b.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ch4m_8n.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ch4m_8n.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ch4m_8n.scala:82:8 -------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * (n-1) * (n-2) * ... * 1\n        factorials.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgq0xqaw8.scala:13:42 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        factorials += n * (n-\e[31m1\e[0m) * (n-\e[31m2\e\
    [0m) * ... * \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                             \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgq0xqaw8.scala:11:25 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh2k_on8.scala:15)\n\tat Problem.main(tmpyh2k_on8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tr_tgrs.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tr_tgrs.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0tr_tgrs.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n     \
    \       factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0s9l4gky.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0s9l4gky.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0s9l4gky.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979528
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh2k_on8.scala:15)\n\tat Problem.main(tmpyh2k_on8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh2k_on8.scala:15)\n\tat Problem.main(tmpyh2k_on8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.Stack[Long]()\n        factorial.push(n)\n\
    \        factorial += n\n        factorial += n-1\n        factorial += n-2\n\
    \        factorial += n-3\n        factorial += n-4\n        factorial += n-5\n\
    \        factorial += n-6\n        factorial += n-7\n        factorial += n-8\n\
    \        factorial += n-9\n        factorial += n-10\n        factorial += n-11\n\
    \        factorial += n-12\n        factorial += n-13\n        factorial += n-14\n\
    \        factorial += n-15\n        factorial += n-16\n        factorial += n-17\n\
    \        factorial += n-18\n        factorial += n-19\n        factorial += n-20\n\
    \        factorial += n-21\n        factorial += n-22\n        factorial += n-23\n\
    \        factorial += n-24\n        factorial += n-25\n        factorial += n-26\n\
    \        factorial += n-27\n        factorial += n-28\n        factorial += n-29\n\
    \        factorial += n-30\n        factorial += n-31\n        factorial += n-32\n\
    \        factorial += n-33\n        factorial += n-34\n        factorial += n-35\n\
    \        factorial += n-36\n        factorial += n-37\n        factorial += n-38\n\
    \        factorial += n-39\n        factorial += n-40\n        factorial += n-41\n\
    \        factorial += n-42\n        factorial += n-43\n        factorial += n-44\n\
    \        factorial += n-45\n        factorial += n-46\n        factorial += n-47\n\
    \        factorial += n-48\n        factorial += n-49\n        factorial += n-50\n\
    \        factorial += n-51\n        factorial += n-52\n        factorial += n-53\n\
    \        factorial += n-54\n        factorial += n-55\n        factorial += n-56\n\
    \        factorial += n-57\n        factorial += n-58\n        factorial += n-59\n\
    \        factorial += n-60\n        factorial += n-61\n        factorial += n-62\n\
    \        factorial += n-63\n        factorial += n-64\n        factorial += n-65\n\
    \        factorial += n-66\n        factorial += n-67\n        factorial += n-68\n\
    \        factorial += n-69\n        factori\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeu99rwve.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeu99rwve.scala:83:8 -------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejh9vpl.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:17:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejh9vpl.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:17:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorials += factorial\n      \
    \      factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp79o_dlht.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79o_dlht.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp79o_dlht.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        while (n > 1) {\n            factorial\
    \ *= n\n            n -= 1\n        }\n        return factorial\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwgg_88ab.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwgg_88ab.scala:14:14\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4nm5nc.scala:15)\n\tat Problem.main(tmp1j4nm5nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.Stack[Long]()\n        factorial += n\n\
    \        factorial += n-1\n        factorial += n-2\n        factorial += n-3\n\
    \        factorial += n-4\n        factorial += n-5\n        factorial += n-6\n\
    \        factorial += n-7\n        factorial += n-8\n        factorial += n-9\n\
    \        factorial += n-10\n        factorial += n-11\n        factorial += n-12\n\
    \        factorial += n-13\n        factorial += n-14\n        factorial += n-15\n\
    \        factorial += n-16\n        factorial += n-17\n        factorial += n-18\n\
    \        factorial += n-19\n        factorial += n-20\n        factorial += n-21\n\
    \        factorial += n-22\n        factorial += n-23\n        factorial += n-24\n\
    \        factorial += n-25\n        factorial += n-26\n        factorial += n-27\n\
    \        factorial += n-28\n        factorial += n-29\n        factorial += n-30\n\
    \        factorial += n-31\n        factorial += n-32\n        factorial += n-33\n\
    \        factorial += n-34\n        factorial += n-35\n        factorial += n-36\n\
    \        factorial += n-37\n        factorial += n-38\n        factorial += n-39\n\
    \        factorial += n-40\n        factorial += n-41\n        factorial += n-42\n\
    \        factorial += n-43\n        factorial += n-44\n        factorial += n-45\n\
    \        factorial += n-46\n        factorial += n-47\n        factorial += n-48\n\
    \        factorial += n-49\n        factorial += n-50\n        factorial += n-51\n\
    \        factorial += n-52\n        factorial += n-53\n        factorial += n-54\n\
    \        factorial += n-55\n        factorial += n-56\n        factorial += n-57\n\
    \        factorial += n-58\n        factorial += n-59\n        factorial += n-60\n\
    \        factorial += n-61\n        factorial += n-62\n        factorial += n-63\n\
    \        factorial += n-64\n        factorial += n-65\n        factorial += n-66\n\
    \        factorial += n-67\n        factorial += n-68\n        factorial += n-69\n\
    \        factorial += n-70\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wf04d26.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorials += factorial\n   \
    \         factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3aux_7ro.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3aux_7ro.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aux_7ro.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ch4m_8n.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ch4m_8n.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ch4m_8n.scala:82:8 -------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorials += factorial\n   \
    \         factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3aux_7ro.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3aux_7ro.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aux_7ro.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.ArrayBuffer.empty[Long]\n        factorial\
    \ += n\n        factorial += factorial(n-1)\n        factorial += factorial(n\
    \ - 2)\n        factorial += factorial(n - 3)\n        factorial += factorial(n\
    \ - 4)\n        factorial += factorial(n - 5)\n        factorial += factorial(n\
    \ - 6)\n        factorial += factorial(n - 7)\n        factorial += factorial(n\
    \ - 8)\n        factorial += factorial(n - 9)\n        factorial += factorial(n\
    \ - 10)\n        factorial += factorial(n - 11)\n        factorial += factorial(n\
    \ - 12)\n        factorial += factorial(n - 13)\n        factorial += factorial(n\
    \ - 14)\n        factorial += factorial(n - 15)\n        factorial += factorial(n\
    \ - 16)\n        factorial += factorial(n - 17)\n        factorial += factorial(n\
    \ - 18)\n        factorial += factorial(n - 19)\n        factorial += factorial(n\
    \ - 20)\n        factorial += factorial(n - 21)\n        factorial += factorial(n\
    \ - 22)\n        factorial += factorial(n - 23)\n        factorial += factorial(n\
    \ - 24)\n        factorial += factorial(n - 25)\n        factorial += factorial(n\
    \ - 26)\n        factorial += factorial(n - 27)\n        factorial += factorial(n\
    \ - 28)\n        factorial += factorial(n - 29)\n        factorial += factorial(n\
    \ - 30)\n        factorial += factorial(n - 31)\n        factorial += factorial(n\
    \ - 32)\n        factorial += factorial(n - 33)\n        factorial += factorial(n\
    \ - 34)\n        factorial += factorial(n - 35)\n        factorial += factorial(n\
    \ - 36)\n        factorial += factorial(n - 37)\n        factorial += factorial(n\
    \ - 38)\n        factorial += factorial(n - 39)\n        factorial += factorial(n\
    \ - 40)\n        factorial += factorial(n - 41)\n        factorial += factorial(n\
    \ - 42)\n        factorial += factorial(n - 43)\n        factorial += factorial(n\
    \ - 44)\n        factorial += factorial(n - 45)\n        factorial += factorial(n\
    \ - 46)\n        factorial += factorial(n - 47)\n        factorial += factorial(n\
    \ - 48)\n        factorial += factorial(n - 49)\n        factorial += factorial(n\
    \ - 50)\n        factorial += factorial(n - 51)\n        factorial += factorial(n\
    \ - 52)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmorrx3r8.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorials += factorial\n   \
    \         factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3aux_7ro.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3aux_7ro.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aux_7ro.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh2k_on8.scala:15)\n\tat Problem.main(tmpyh2k_on8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        while (n > 1) {\n            factorial *= n\n            factorials\
    \ += factorial\n            n -= 1\n        }\n        factorials.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk7d3wli.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n){\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp17ou0_g_.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.Stack[Long]()\n        factorial += n\n\
    \        factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factorial += factorial.pop * factorial.pop\n      \
    \  factorial += factorial.pop * factorial.pop\n        factorial += factorial.pop\
    \ * factorial.pop\n        factori\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn91hlhhs.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpn91hlhhs.scala:54:8 -------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += n\n        factorials += factorials(0) * factorials(1)\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factori\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp22u14et.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp22u14et.scala:48:8 -------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var result : Long = 1\n        for(i <- 0 until n){\n         \
    \   result *= i\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfh0dw04u.scala:12:25\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        while(n > 1) {\n            factorial *= n\n            factorials\
    \ += factorial\n            n -= 1\n        }\n        factorials.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rlyuc1k.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1rlyuc1k.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1rlyuc1k.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tr_tgrs.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tr_tgrs.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0tr_tgrs.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        var factorial2 = 1\n        var factorial3\
    \ = 1\n        var factorial4 = 1 \n        var factorial5 = 1 \n        var factorial6\
    \ = 1 \n        var factorial7 = 1 \n        var factorial8 = 1 \n        var\
    \ factorial9 = 1 \n        var factorial10 = 1 \n        var factorial11 = 1 \n\
    \        var factorial12 = 1 \n        var factorial13 = 1 \n        var factorial14\
    \ = 1 \n        var factorial15 = 1 \n        var factorial16 = 1 \n        var\
    \ factorial17 = 1 \n        var factorial18 = 1 \n        var factorial19 = 1\
    \ \n        var factorial20 = 1 \n        var factorial21 = 1 \n        var factorial22\
    \ = 1 \n        var factorial23 = 1 \n        var factorial24 = 1 \n        var\
    \ factorial25 = 1 \n        var factorial26 = 1 \n        var factorial27 = 1\
    \ \n        var factorial28 = 1 \n        var factorial29 = 1 \n        var factorial30\
    \ = 1 \n        var factorial31 = 1 \n        var factorial32 = 1 \n        var\
    \ factorial33 = 1 \n        var factorial34 = 1 \n        var factorial35 = 1\
    \ \n        var factorial36 = 1 \n        var factorial37 = 1 \n        var factorial38\
    \ = 1 \n        var factorial39 = 1 \n        var factorial40 = 1 \n        var\
    \ factorial41 = 1 \n        var factorial42 = 1 \n        var factorial43 = 1\
    \ \n        var factorial44 = 1 \n        var factorial45 = 1 \n        var factorial46\
    \ = 1 \n        var factorial47 = 1 \n        var factorial48 = 1 \n        var\
    \ factorial49 = 1 \n        var factorial50 = 1 \n        var factorial51 = 1\
    \ \n        var factorial52 = 1 \n        var factorial53 = 1 \n        var factorial54\
    \ = 1 \n        var factorial55 = 1 \n        var factorial56 = 1 \n        var\
    \ factorial57 = 1 \n        var factorial58 = 1 \n        var factorial59 = 1\
    \ \n        var factorial60 = 1 \n        var factorial61 = 1 \n        var factorial62\
    \ = 1 \n        var factorial63 = 1 \n        var factorial64 = 1 \n        var\
    \ factorial65 = 1 \n        var factorial66 = 1 \n        var factorial67 = 1\
    \ \n        var factorial68 = 1 \n        var factorial69 = 1 \n        var factorial70\
    \ = 1 \n        var factorial71 = 1 \n        var factorial72 = 1 \n        var\
    \ factorial73 = 1 \n        var factorial74 = 1 \n        var factorial75 = 1\
    \ \n        var factorial76 = 1 \n        var factorial77 = 1 \n        var factorial78\
    \ = 1 \n        var factorial79 = 1 \n        var factorial80 = 1 \n        var\
    \ factorial81 = 1 \n        var factorial82 = 1 \n        var factori\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprwjuicrv.scala:94:4 ----------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprwjuicrv.scala:94:5 ---------------------\e[0m\e[0m\n\e[31m94 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4nm5nc.scala:15)\n\tat Problem.main(tmp1j4nm5nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n){\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp17ou0_g_.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmebs12iy.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tr_tgrs.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tr_tgrs.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0tr_tgrs.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmebs12iy.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tr_tgrs.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tr_tgrs.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0tr_tgrs.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4nm5nc.scala:15)\n\tat Problem.main(tmp1j4nm5nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * (n - 1)\n        factorials += n * (n - 1) *\
    \ n\n        factorials += n * (n - 1) * n * n\n        factorials += n * (n -\
    \ 1) * n * n * n\n        factorials += n * (n - 1) * n * n * n * n\n        factorials\
    \ += n * (n - 1) * n * n * n * n * n\n        factorials += n * (n - 1) * n *\
    \ n * n * n * n * n\n        factorials += n * (n - 1) * n * n * n * n * n * n\
    \ * n\n        factorials += n * (n - 1) * n * n * n * n * n * n * n * n\n   \
    \     factorials += n * (n - 1) * n * n * n * n * n * n * n * n * n\n        factorials\
    \ += n * (n - 1) * n * n * n * n * n * n * n * n * n * n\n        factorials +=\
    \ n * (n - 1) * n * n * n * n * n * n * n * n * n * n * n\n        factorials\
    \ += n * (n - 1) * n * n * n * n * n * n * n * n * n * n * n * n\n        factorials\
    \ += n * (n - 1) * n * n * n * n * n * n * n * n * n * n * n * n * n\n       \
    \ factorials += n * (n - 1) * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n\n        factorials += n * (n - 1) * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n\n        factorials += n * (n - 1) * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n\n        factorials += n * (n\
    \ - 1) * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n \
    \       factorials += n * (n - 1) * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n\n        factorials += n * (n - 1) * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n\n        factorials +=\
    \ n * (n - 1) * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n\n        factorials += n * (n - 1) * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n\n        factorials += n * (n - 1)\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n  \
    \      factorials += n * (n - 1) * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n\n        factorials += n * (n - 1) * n * n * n\
    \ * n * n * n * \n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe_hnwu3l.scala:37:59 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        factorials += n * (n - \e[31m1\e[0m) * n * n\
    \ * n * n * n * n * \n\e[31m\e[31m   |\e[0m                                  \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \           expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpe_hnwu3l.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejh9vpl.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:17:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh2k_on8.scala:15)\n\tat Problem.main(tmpyh2k_on8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorials += factorial\n      \
    \      factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp79o_dlht.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79o_dlht.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp79o_dlht.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979528
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh2k_on8.scala:15)\n\tat Problem.main(tmpyh2k_on8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmebs12iy.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ch4m_8n.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ch4m_8n.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ch4m_8n.scala:82:8 -------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += n\n        factorials += factorials(0) * factorials(0) - 1\n        factorials\
    \ += factorials(1) * factorials(1) - 2\n        factorials += factorials(2) *\
    \ factorials(2) - 6\n        factorials += factorials(3) * factorials(3) - 24\n\
    \        factorials += factorials(4) * factorials(4) - 120\n        factorials\
    \ += factorials(5) * factorials(5) - 720\n        factorials += factorials(6)\
    \ * factorials(6) - 5040\n        factorials += factorials(7) * factorials(7)\
    \ - 40320\n        factorials += factorials(8) * factorials(8) - 362880\n    \
    \    factorials += factorials(9) * factorials(9) - 3628800\n        factorials\
    \ += factorials(10) * factorials(10) - 39916800\n        factorials += factorials(11)\
    \ * factorials(11) - 479001600\n        factorials += factorials(12) * factorials(12)\
    \ - 6227020800\n        factorials += factorials(13) * factorials(13) - 87178291200\n\
    \        factorials += factorials(14) * factorials(14) - 1307674368000\n     \
    \   factorials += factorials(15) * factorials(15) - 20922789888000\n        factorials\
    \ += factorials(16) * factorials(16) - 355687428096000\n        factorials +=\
    \ factorials(17) * factorials(17) - 6402373705728000\n        factorials += factorials(18)\
    \ * factorials(18) - 121645100408832000\n        factorials += factorials(19)\
    \ * factorials(19) - 2432902008176640000\n        factorials += factorials(20)\
    \ * factorials(20) - 51090942171709440000\n        factorials += factorials(21)\
    \ * factorials(21) - 1124000727777607680000\n        factorials += factorials(22)\
    \ * factorials(22) - 25852016738884976640000\n        factorials += factorials(23)\
    \ * factorials(23) - 620448401733239439360000\n        factorials += factorials(24)\
    \ * factorials(24) - 15511210043330985984000000\n        factorials += factorials(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp65xx8idu.scala:38:33 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        factorials += factorials(\n\e[31m\e[31m   |\e\
    [0m                                 ^\e[0m\n\e[31m   |\e[0m                  \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp65xx8idu.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        while (n > 1) {\n            factorials += factorial\n        \
    \    factorial *= n\n            n -= 1\n        }\n        factorials.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp208cpi32.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp208cpi32.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp208cpi32.scala:16:14 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4nm5nc.scala:15)\n\tat Problem.main(tmp1j4nm5nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejh9vpl.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:17:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        while(n > 1) {\n            factorials += factorial\n         \
    \   factorial *= n\n            n -= 1\n        }\n        factorials.last\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3nh5q485.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3nh5q485.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3nh5q485.scala:16:14 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += n\n        factorials += factorials(0) * factorials(1) * factorials(2) *\
    \ factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0) * factorials(1) * factorials(2)\
    \ * factorials(3)\n        factorials += factorials(0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphxzutf4o.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphxzutf4o.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tr_tgrs.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tr_tgrs.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0tr_tgrs.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmebs12iy.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmebs12iy.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += n\n        factorials += factorials(n-1) * factorials(n-2)\n        factorials\
    \ += factorials(n-3) * factorials(n-4)\n        factorials += factorials(n-5)\
    \ * factorials(n-6)\n        factorials += factorials(n-7) * factorials(n-8)\n\
    \        factorials += factorials(n-9) * factorials(n-10)\n        factorials\
    \ += factorials(n-11) * factorials(n-12)\n        factorials += factorials(n-13)\
    \ * factorials(n-14)\n        factorials += factorials(n-15) * factorials(n-16)\n\
    \        factorials += factorials(n-17) * factorials(n-18)\n        factorials\
    \ += factorials(n-19) * factorials(n-20)\n        factorials += factorials(n-21)\
    \ * factorials(n-22)\n        factorials += factorials(n-23) * factorials(n-24)\n\
    \        factorials += factorials(n-25) * factorials(n-26)\n        factorials\
    \ += factorials(n-27) * factorials(n-28)\n        factorials += factorials(n-29)\
    \ * factorials(n-30)\n        factorials += factorials(n-31) * factorials(n-32)\n\
    \        factorials += factorials(n-33) * factorials(n-34)\n        factorials\
    \ += factorials(n-35) * factorials(n-36)\n        factorials += factorials(n-37)\
    \ * factorials(n-38)\n        factorials += factorials(n-39) * factorials(n-40)\n\
    \        factorials += factorials(n-41) * factorials(n-42)\n        factorials\
    \ += factorials(n-43) * factorials(n-44)\n        factorials += factorials(n-45)\
    \ * factorials(n-46)\n        factorials += factorials(n-47) * factorials(n-48)\n\
    \        factorials += factorials(n-49) * factorials(n-50)\n        factorials\
    \ += factorials(n-51) * factorials(n-50)\n        factorials += factorials(n-52)\
    \ * factorials(n-50)\n        factorials += factorials(n-53) * factorials(n-50)\n\
    \        factorials += factorials(n-54) * factorials(n-50)\n        factorials\
    \ += factorials(n-55) * factorials(n-50)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdxfg43gc.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdxfg43gc.scala:43:8 -------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuj0p6x5t.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuj0p6x5t.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var result : Long = 1\n        for(i <- 1 to n) {\n           \
    \ result *= i\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyd_m592b.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh2k_on8.scala:15)\n\tat Problem.main(tmpyh2k_on8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorials += factorial\n      \
    \      factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp79o_dlht.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79o_dlht.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp79o_dlht.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        while (n > 1) {\n            factorial *= n\n            factorials\
    \ += factorial\n            n -= 1\n        }\n        factorials.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk7d3wli.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        while(n > 1) {\n            factorials += factorial\n         \
    \   factorial *= n\n            n -= 1\n        }\n        factorials.last\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3nh5q485.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3nh5q485.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3nh5q485.scala:16:14 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += n\n        factorials += factorials(0) * factorials(1)\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factori\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp22u14et.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp22u14et.scala:48:8 -------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ch4m_8n.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ch4m_8n.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ch4m_8n.scala:82:8 -------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        while (n > 1) {\n            factorials += factorial\n        \
    \    factorial *= n\n            n -= 1\n        }\n        factorials.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp208cpi32.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp208cpi32.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp208cpi32.scala:16:14 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += factorials(n-1)\n        factorials += factorials(n-2)\n\
    \        factorials += factorials(n-3)\n        factorials += factorials(n-4)\n\
    \        factorials += factorials(n-5)\n        factorials += factorials(n-6)\n\
    \        factorials += factorials(n-7)\n        factorials += factorials(n-8)\n\
    \        factorials += factorials(n-9)\n        factorials += factorials(n-10)\n\
    \        factorials += factorials(n-11)\n        factorials += factorials(n-12)\n\
    \        factorials += factorials(n-13)\n        factorials += factorials(n-14)\n\
    \        factorials += factorials(n-15)\n        factorials += factorials(n-16)\n\
    \        factorials += factorials(n-17)\n        factorials += factorials(n-18)\n\
    \        factorials += factorials(n-19)\n        factorials += factorials(n-20)\n\
    \        factorials += factorials(n-21)\n        factorials += factorials(n-22)\n\
    \        factorials += factorials(n-23)\n        factorials += factorials(n-24)\n\
    \        factorials += factorials(n-25)\n        factorials += factorials(n-26)\n\
    \        factorials += factorials(n-27)\n        factorials += factorials(n-28)\n\
    \        factorials += factorials(n-29)\n        factorials += factorials(n-30)\n\
    \        factorials += factorials(n-31)\n        factorials += factorials(n-32)\n\
    \        factorials += factorials(n-33)\n        factorials += factorials(n-34)\n\
    \        factorials += factorials(n-35)\n        factorials += factorials(n-36)\n\
    \        factorials += factorials(n-37)\n        factorials += factorials(n-38)\n\
    \        factorials += factorials(n-39)\n        factorials += factorials(n-40)\n\
    \        factorials += factorials(n-41)\n        factorials += factorials(n-42)\n\
    \        factorials += factorials(n-43)\n        factorials += factorials(n-44)\n\
    \        factorials += factorials(n-45)\n        factorials += factorials(n-46)\n\
    \        factorials += factorials(n-47)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaod92pnf.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.Stack[Long]()\n        factorial.push(n)\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2wx09tk.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4nm5nc.scala:15)\n\tat Problem.main(tmp1j4nm5nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejh9vpl.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:17:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += factorials(n-1)\n        factorials += factorials(n-2)\n\
    \        factorials += factorials(n-3)\n        factorials += factorials(n-4)\n\
    \        factorials += factorials(n-5)\n        factorials += factorials(n-6)\n\
    \        factorials += factorials(n-7)\n        factorials += factorials(n-8)\n\
    \        factorials += factorials(n-9)\n        factorials += factorials(n-10)\n\
    \        factorials += factorials(n-11)\n        factorials += factorials(n-12)\n\
    \        factorials += factorials(n-13)\n        factorials += factorials(n-14)\n\
    \        factorials += factorials(n-15)\n        factorials += factorials(n-16)\n\
    \        factorials += factorials(n-17)\n        factorials += factorials(n-18)\n\
    \        factorials += factorials(n-19)\n        factorials += factorials(n-20)\n\
    \        factorials += factorials(n-21)\n        factorials += factorials(n-22)\n\
    \        factorials += factorials(n-23)\n        factorials += factorials(n-24)\n\
    \        factorials += factorials(n-25)\n        factorials += factorials(n-26)\n\
    \        factorials += factorials(n-27)\n        factorials += factorials(n-28)\n\
    \        factorials += factorials(n-29)\n        factorials += factorials(n-30)\n\
    \        factorials += factorials(n-31)\n        factorials += factorials(n-32)\n\
    \        factorials += factorials(n-33)\n        factorials += factorials(n-34)\n\
    \        factorials += factorials(n-35)\n        factorials += factorials(n-36)\n\
    \        factorials += factorials(n-37)\n        factorials += factorials(n-38)\n\
    \        factorials += factorials(n-39)\n        factorials += factorials(n-40)\n\
    \        factorials += factorials(n-41)\n        factorials += factorials(n-42)\n\
    \        factorials += factorials(n-43)\n        factorials += factorials(n-44)\n\
    \        factorials += factorials(n-45)\n        factorials += factorials(n-46)\n\
    \        factorials += factorials(n-47)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaod92pnf.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_igzhsw.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd_igzhsw.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_igzhsw.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        while (n > 1) {\n            factorials += factorial\n        \
    \    factorial *= n\n            n -= 1\n        }\n        factorials.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp208cpi32.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp208cpi32.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp208cpi32.scala:16:14 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.Stack[Long]()\n        factorial.push(n)\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2wx09tk.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4nm5nc.scala:15)\n\tat Problem.main(tmp1j4nm5nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4nm5nc.scala:15)\n\tat Problem.main(tmp1j4nm5nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh2k_on8.scala:15)\n\tat Problem.main(tmpyh2k_on8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        while (n > 1) {\n            factorials += factorial\n        \
    \    factorial *= n\n            n -= 1\n        }\n        factorials.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp208cpi32.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp208cpi32.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean factorial.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp208cpi32.scala:16:14 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorials += factorial\n   \
    \         factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3aux_7ro.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3aux_7ro.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aux_7ro.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorials += factorial\n     \
    \       factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0s9l4gky.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0s9l4gky.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0s9l4gky.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejh9vpl.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:17:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial * (n - 1)\n        factorials\
    \ += factorial * (n - 2)\n        factorials += factorial * (n - 3)\n        factorials\
    \ += factorial * (n - 4)\n        factorials += factorial * (n - 5)\n        factorials\
    \ += factorial * (n - 6)\n        factorials += factorial * (n - 7)\n        factorials\
    \ += factorial * (n - 8)\n        factorials += factorial * (n - 9)\n        factorials\
    \ += factorial * (n - 10)\n        factorials += factorial * (n - 11)\n      \
    \  factorials += factorial * (n - 12)\n        factorials += factorial * (n -\
    \ 13)\n        factorials += factorial * (n - 14)\n        factorials += factorial\
    \ * (n - 15)\n        factorials += factorial * (n - 16)\n        factorials +=\
    \ factorial * (n - 17)\n        factorials += factorial * (n - 18)\n        factorials\
    \ += factorial * (n - 19)\n        factorials += factorial * (n - 20)\n      \
    \  factorials += factorial * (n - 21)\n        factorials += factorial * (n -\
    \ 22)\n        factorials += factorial * (n - 23)\n        factorials += factorial\
    \ * (n - 24)\n        factorials += factorial * (n - 25)\n        factorials +=\
    \ factorial * (n - 26)\n        factorials += factorial * (n - 27)\n        factorials\
    \ += factorial * (n - 28)\n        factorials += factorial * (n - 29)\n      \
    \  factorials += factorial * (n - 30)\n        factorials += factorial * (n -\
    \ 31)\n        factorials += factorial * (n - 32)\n        factorials += factorial\
    \ * (n - 33)\n        factorials += factorial * (n - 34)\n        factorials +=\
    \ factorial * (n - 35)\n        factorials += factorial * (n - 36)\n        factorials\
    \ += factorial * (n - 37)\n        factorials += factorial * (n - 38)\n      \
    \  factorials += factorial * (n - 39)\n        factorials += factorial * (n -\
    \ 40)\n        factorials += factorial * (n - 41)\n        factorials += factorial\
    \ * (n - 42)\n        factorials += factorial * (n - 43)\n        factorials +=\
    \ factorial * (n - 44)\n        factorials += factorial * (n - 45)\n        factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjsi77mq.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkjsi77mq.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        while(n > 1) {\n            factorial *= n\n            factorials\
    \ += factorial\n            n -= 1\n        }\n        factorials.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rlyuc1k.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1rlyuc1k.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1rlyuc1k.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        while (n > 1) {\n            factorial *= n\n            factorials\
    \ += factorial\n            n -= 1\n        }\n        factorials.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk7d3wli.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.Stack[Long]()\n        factorial.push(n)\n\
    \        while (factorial.nonEmpty) {\n            val next = factorial.pop()\n\
    \            factorial.push(n * next)\n        }\n        factorial.pop()\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4328qi7s.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4nm5nc.scala:15)\n\tat Problem.main(tmp1j4nm5nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += factorials(n-1)\n        factorials += factorials(n-2)\n\
    \        factorials += factorials(n-3)\n        factorials += factorials(n-4)\n\
    \        factorials += factorials(n-5)\n        factorials += factorials(n-6)\n\
    \        factorials += factorials(n-7)\n        factorials += factorials(n-8)\n\
    \        factorials += factorials(n-9)\n        factorials += factorials(n-10)\n\
    \        factorials += factorials(n-11)\n        factorials += factorials(n-12)\n\
    \        factorials += factorials(n-13)\n        factorials += factorials(n-14)\n\
    \        factorials += factorials(n-15)\n        factorials += factorials(n-16)\n\
    \        factorials += factorials(n-17)\n        factorials += factorials(n-18)\n\
    \        factorials += factorials(n-19)\n        factorials += factorials(n-20)\n\
    \        factorials += factorials(n-21)\n        factorials += factorials(n-22)\n\
    \        factorials += factorials(n-23)\n        factorials += factorials(n-24)\n\
    \        factorials += factorials(n-25)\n        factorials += factorials(n-26)\n\
    \        factorials += factorials(n-27)\n        factorials += factorials(n-28)\n\
    \        factorials += factorials(n-29)\n        factorials += factorials(n-30)\n\
    \        factorials += factorials(n-31)\n        factorials += factorials(n-32)\n\
    \        factorials += factorials(n-33)\n        factorials += factorials(n-34)\n\
    \        factorials += factorials(n-35)\n        factorials += factorials(n-36)\n\
    \        factorials += factorials(n-37)\n        factorials += factorials(n-38)\n\
    \        factorials += factorials(n-39)\n        factorials += factorials(n-40)\n\
    \        factorials += factorials(n-41)\n        factorials += factorials(n-42)\n\
    \        factorials += factorials(n-43)\n        factorials += factorials(n-44)\n\
    \        factorials += factorials(n-45)\n        factorials += factorials(n-46)\n\
    \        factorials += factorials(n-47)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaod92pnf.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += n\n        factorials += factorials(0) * factorials(1) * factorials(2) *\
    \ factorials(3) * factorials(4) * factorials(5) * factorials(6) * factorials(7)\
    \ * factorials(8) * factorials(9) * factorials(10)\n        factorials.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4kygu26.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejh9vpl.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:17:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.ArrayBuffer.empty[Long]\n        factorial\
    \ += n\n        factorial += n-1\n        factorial += n-2\n        factorial\
    \ += n-3\n        factorial += n-4\n        factorial += n-5\n        factorial\
    \ += n-6\n        factorial += n-7\n        factorial += n-8\n        factorial\
    \ += n-9\n        factorial += n-10\n        factorial += n-11\n        factorial\
    \ += n-12\n        factorial += n-13\n        factorial += n-14\n        factorial\
    \ += n-15\n        factorial += n-16\n        factorial += n-17\n        factorial\
    \ += n-18\n        factorial += n-19\n        factorial += n-20\n        factorial\
    \ += n-21\n        factorial += n-22\n        factorial += n-23\n        factorial\
    \ += n-24\n        factorial += n-25\n        factorial += n-26\n        factorial\
    \ += n-27\n        factorial += n-28\n        factorial += n-29\n        factorial\
    \ += n-30\n        factorial += n-31\n        factorial += n-32\n        factorial\
    \ += n-33\n        factorial += n-34\n        factorial += n-35\n        factorial\
    \ += n-36\n        factorial += n-37\n        factorial += n-38\n        factorial\
    \ += n-39\n        factorial += n-40\n        factorial += n-41\n        factorial\
    \ += n-42\n        factorial += n-43\n        factorial += n-44\n        factorial\
    \ += n-45\n        factorial += n-46\n        factorial += n-47\n        factorial\
    \ += n-48\n        factorial += n-49\n        factorial += n-50\n        factorial\
    \ += n-51\n        factorial += n-52\n        factorial += n-53\n        factorial\
    \ += n-54\n        factorial += n-55\n        factorial += n-56\n        factorial\
    \ += n-57\n        factorial += n-58\n        factorial += n-59\n        factorial\
    \ += n-60\n        factorial += n-61\n        factorial += n-62\n        factorial\
    \ += n-63\n        factorial += n-64\n        factorial += n-65\n        factorial\
    \ += n-66\n        factorial += n-67\n        factorial += n-68\n        factorial\
    \ += n-69\n        factorial += n-70\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprfmr5l_o.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        factorials += factorial\n        while(n > 1) {\n            factorial\
    \ *= n\n            factorials += factorial\n            n -= 1\n        }\n \
    \       factorials.last\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpitc0k872.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpitc0k872.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpitc0k872.scala:17:14\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejh9vpl.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbejh9vpl.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfactorial is already\
    \ defined as \e[33mvalue\e[0m \e[35mfactorial\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbejh9vpl.scala:17:12\
    \ --------------------------"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n) {\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tr_tgrs.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tr_tgrs.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0tr_tgrs.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 0 until n) {\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphcop88kb.scala:12:25\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial * (n - 1)\n        factorials\
    \ += factorial * (n - 2)\n        factorials += factorial * (n - 3)\n        factorials\
    \ += factorial * (n - 4)\n        factorials += factorial * (n - 5)\n        factorials\
    \ += factorial * (n - 6)\n        factorials += factorial * (n - 7)\n        factorials\
    \ += factorial * (n - 8)\n        factorials += factorial * (n - 9)\n        factorials\
    \ += factorial * (n - 10)\n        factorials += factorial * (n - 11)\n      \
    \  factorials += factorial * (n - 12)\n        factorials += factorial * (n -\
    \ 13)\n        factorials += factorial * (n - 14)\n        factorials += factorial\
    \ * (n - 15)\n        factorials += factorial * (n - 16)\n        factorials +=\
    \ factorial * (n - 17)\n        factorials += factorial * (n - 18)\n        factorials\
    \ += factorial * (n - 19)\n        factorials += factorial * (n - 20)\n      \
    \  factorials += factorial * (n - 21)\n        factorials += factorial * (n -\
    \ 22)\n        factorials += factorial * (n - 23)\n        factorials += factorial\
    \ * (n - 24)\n        factorials += factorial * (n - 25)\n        factorials +=\
    \ factorial * (n - 26)\n        factorials += factorial * (n - 27)\n        factorials\
    \ += factorial * (n - 28)\n        factorials += factorial * (n - 29)\n      \
    \  factorials += factorial * (n - 30)\n        factorials += factorial * (n -\
    \ 31)\n        factorials += factorial * (n - 32)\n        factorials += factorial\
    \ * (n - 33)\n        factorials += factorial * (n - 34)\n        factorials +=\
    \ factorial * (n - 35)\n        factorials += factorial * (n - 36)\n        factorials\
    \ += factorial * (n - 37)\n        factorials += factorial * (n - 38)\n      \
    \  factorials += factorial * (n - 39)\n        factorials += factorial * (n -\
    \ 40)\n        factorials += factorial * (n - 41)\n        factorials += factorial\
    \ * (n - 42)\n        factorials += factorial * (n - 43)\n        factorials +=\
    \ factorial * (n - 44)\n        factorials += factorial * (n - 45)\n        factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjsi77mq.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkjsi77mq.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.ArrayBuffer.empty[Long]\n        factorial\
    \ += n\n        factorial += n-1\n        factorial += n-2\n        factorial\
    \ += n-3\n        factorial += n-4\n        factorial += n-5\n        factorial\
    \ += n-6\n        factorial += n-7\n        factorial += n-8\n        factorial\
    \ += n-9\n        factorial += n-10\n        factorial += n-11\n        factorial\
    \ += n-12\n        factorial += n-13\n        factorial += n-14\n        factorial\
    \ += n-15\n        factorial += n-16\n        factorial += n-17\n        factorial\
    \ += n-18\n        factorial += n-19\n        factorial += n-20\n        factorial\
    \ += n-21\n        factorial += n-22\n        factorial += n-23\n        factorial\
    \ += n-24\n        factorial += n-25\n        factorial += n-26\n        factorial\
    \ += n-27\n        factorial += n-28\n        factorial += n-29\n        factorial\
    \ += n-30\n        factorial += n-31\n        factorial += n-32\n        factorial\
    \ += n-33\n        factorial += n-34\n        factorial += n-35\n        factorial\
    \ += n-36\n        factorial += n-37\n        factorial += n-38\n        factorial\
    \ += n-39\n        factorial += n-40\n        factorial += n-41\n        factorial\
    \ += n-42\n        factorial += n-43\n        factorial += n-44\n        factorial\
    \ += n-45\n        factorial += n-46\n        factorial += n-47\n        factorial\
    \ += n-48\n        factorial += n-49\n        factorial += n-50\n        factorial\
    \ += n-51\n        factorial += n-52\n        factorial += n-53\n        factorial\
    \ += n-54\n        factorial += n-55\n        factorial += n-56\n        factorial\
    \ += n-57\n        factorial += n-58\n        factorial += n-59\n        factorial\
    \ += n-60\n        factorial += n-61\n        factorial += n-62\n        factorial\
    \ += n-63\n        factorial += n-64\n        factorial += n-65\n        factorial\
    \ += n-66\n        factorial += n-67\n        factorial += n-68\n        factorial\
    \ += n-69\n        factorial += n-70\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprfmr5l_o.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 0 until n) {\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphcop88kb.scala:12:25\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += n\n        factorials += factorials(0) * factorials(1)\n        factorials\
    \ += factorials(0) * factorials(1)\n        factorials += factorials(0) * factorials(1)\n\
    \        factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factorials += factorials(0) * factorials(1)\n     \
    \   factorials += factorials(0) * factorials(1)\n        factorials += factorials(0)\
    \ * factorials(1)\n        factori\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp22u14et.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpp22u14et.scala:48:8 -------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factorials += factorial\n        factorials += factorial\n        factorials\
    \ += factorial\n        factorials += factorial\n        factorials += factorial\n\
    \        factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ch4m_8n.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0ch4m_8n.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ch4m_8n.scala:82:8 -------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m        factori\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factori\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n){\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp17ou0_g_.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorials += factorial\n      \
    \      factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp79o_dlht.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79o_dlht.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp79o_dlht.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        while (n > 1) {\n            factorial *= n\n            factorials\
    \ += factorial\n            n -= 1\n        }\n        factorials.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk7d3wli.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(n-1)\n        factorials += n * factorials(n-1)\n\
    \        factorials += n * factorials(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1besq5ne.scala:57:37 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        factorials += n * factorials(\n\e[31m\e[31m \
    \  |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m        \
    \                             expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1besq5ne.scala:11:25\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorials += factorial\n   \
    \         factorial *= i\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3aux_7ro.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3aux_7ro.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aux_7ro.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 0 until n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnn4grwd4.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnn4grwd4.scala:13:25 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnn4grwd4.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n-1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4nm5nc.scala:15)\n\tat Problem.main(tmp1j4nm5nc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmebs12iy.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        for(i <- 1 to n){\n            factorial *= i\n            factorials\
    \ += factorial\n        }\n        factorials.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvskgdp__.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvskgdp__.scala:13:22 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvskgdp__.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            factorial *=\
    \ i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       value *= is not a member of Int - did you mean factorial.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        val factorial\
    \ = 1\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += factorial\n        factorials += factorial * (n - 1)\n        factorials\
    \ += factorial * (n - 2)\n        factorials += factorial * (n - 3)\n        factorials\
    \ += factorial * (n - 4)\n        factorials += factorial * (n - 5)\n        factorials\
    \ += factorial * (n - 6)\n        factorials += factorial * (n - 7)\n        factorials\
    \ += factorial * (n - 8)\n        factorials += factorial * (n - 9)\n        factorials\
    \ += factorial * (n - 10)\n        factorials += factorial * (n - 11)\n      \
    \  factorials += factorial * (n - 12)\n        factorials += factorial * (n -\
    \ 13)\n        factorials += factorial * (n - 14)\n        factorials += factorial\
    \ * (n - 15)\n        factorials += factorial * (n - 16)\n        factorials +=\
    \ factorial * (n - 17)\n        factorials += factorial * (n - 18)\n        factorials\
    \ += factorial * (n - 19)\n        factorials += factorial * (n - 20)\n      \
    \  factorials += factorial * (n - 21)\n        factorials += factorial * (n -\
    \ 22)\n        factorials += factorial * (n - 23)\n        factorials += factorial\
    \ * (n - 24)\n        factorials += factorial * (n - 25)\n        factorials +=\
    \ factorial * (n - 26)\n        factorials += factorial * (n - 27)\n        factorials\
    \ += factorial * (n - 28)\n        factorials += factorial * (n - 29)\n      \
    \  factorials += factorial * (n - 30)\n        factorials += factorial * (n -\
    \ 31)\n        factorials += factorial * (n - 32)\n        factorials += factorial\
    \ * (n - 33)\n        factorials += factorial * (n - 34)\n        factorials +=\
    \ factorial * (n - 35)\n        factorials += factorial * (n - 36)\n        factorials\
    \ += factorial * (n - 37)\n        factorials += factorial * (n - 38)\n      \
    \  factorials += factorial * (n - 39)\n        factorials += factorial * (n -\
    \ 40)\n        factorials += factorial * (n - 41)\n        factorials += factorial\
    \ * (n - 42)\n        factorials += factorial * (n - 43)\n        factorials +=\
    \ factorial * (n - 44)\n        factorials += factorial * (n - 45)\n        factorial\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjsi77mq.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfactorials is already defined as \e[33mvalue\e[0m \e[35mfactorials\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpkjsi77mq.scala:11:25 ------------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.Stack[Long]()\n        factorial.push(n)\n\
    \        factorial.push(factorial.pop * factorial.pop)\n        factorial.push(factorial.pop\
    \ * factorial.pop * factorial.pop)\n        factorial.push(factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop)\n        factorial.push(factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop)\n        factorial.push(factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop * factorial.pop * factorial.pop)\n\
    \        factorial.push(factorial.pop * factorial.pop * factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop)\n        factorial.push(factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop * factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop)\n        factorial.push(factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop * factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop)\n        factorial.push(factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop * factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop)\n        factorial.push(factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop * factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop * factorial.pop * factorial.pop)\n\
    \        factorial.push(factorial.pop * factorial.pop * factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop * factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop)\n        factorial.push(factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop * factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop * factorial.pop * factorial.pop)\n\
    \        factorial.push(factorial.pop * factorial.pop * factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop * factorial.pop * factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop)\n        factorial.push(factorial.pop\
    \ * factorial.pop * factorial.pop * factorial.pop * factorial.pop * factorial.pop\
    \ * factori\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwlkj2_xp.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwlkj2_xp.scala:11:24\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mfactorial\e[0m = mutable.Stack[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        var factorial\
    \ = 1\n        while (n > 1) {\n            factorial *= n\n            factorials\
    \ += factorial\n            n -= 1\n        }\n        factorials.last\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk7d3wli.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            factorial *= n\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsk7d3wli.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n){\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp17ou0_g_.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n) {\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmebs12iy.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m        \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        var factorial2 = 1\n        var factorial3\
    \ = 1\n        var factorial4 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial5 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial6 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial7 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial8 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial9 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial10 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial11 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial12 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial13 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial14 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial15 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial16 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial17 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial18 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial19 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial20 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial21 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial22 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial23 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial24 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial25 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial26 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial27 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial28 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial29 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial30 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial31 = 1 // We will use this to calculate the factorial\
    \ of n!\n        var factorial32 = 1 // We will use this to calculate the factorial\
    \ of n!\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpprd020_p.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        if (n == 0) 1\n        else n * specialFactorial(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh2k_on8.scala:15)\n\tat Problem.main(tmpyh2k_on8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        var factorial2 = 1\n        var factorial3\
    \ = 1\n        var factorial4 = 1 \n        var factorial5 = 1 \n        var factorial6\
    \ = 1 \n        var factorial7 = 1 \n        var factorial8 = 1 \n        var\
    \ factorial9 = 1 \n        var factorial10 = 1 \n        var factorial11 = 1 \n\
    \        var factorial12 = 1 \n        var factorial13 = 1 \n        var factorial14\
    \ = 1 \n        var factorial15 = 1 \n        var factorial16 = 1 \n        var\
    \ factorial17 = 1 \n        var factorial18 = 1 \n        var factorial19 = 1\
    \ \n        var factorial20 = 1 \n        var factorial21 = 1 \n        var factorial22\
    \ = 1 \n        var factorial23 = 1 \n        var factorial24 = 1 \n        var\
    \ factorial25 = 1 \n        var factorial26 = 1 \n        var factorial27 = 1\
    \ \n        var factorial28 = 1 \n        var factorial29 = 1 \n        var factorial30\
    \ = 1 \n        var factorial31 = 1 \n        var factorial32 = 1 \n        var\
    \ factorial33 = 1 \n        var factorial34 = 1 \n        var factorial35 = 1\
    \ \n        var factorial36 = 1 \n        var factorial37 = 1 \n        var factorial38\
    \ = 1 \n        var factorial39 = 1 \n        var factorial40 = 1 \n        var\
    \ factorial41 = 1 \n        var factorial42 = 1 \n        var factorial43 = 1\
    \ \n        var factorial44 = 1 \n        var factorial45 = 1 \n        var factorial46\
    \ = 1 \n        var factorial47 = 1 \n        var factorial48 = 1 \n        var\
    \ factorial49 = 1 \n        var factorial50 = 1 \n        var factorial51 = 1\
    \ \n        var factorial52 = 1 \n        var factorial53 = 1 \n        var factorial54\
    \ = 1 \n        var factorial55 = 1 \n        var factorial56 = 1 \n        var\
    \ factorial57 = 1 \n        var factorial58 = 1 \n        var factorial59 = 1\
    \ \n        var factorial60 = 1 \n        var factorial61 = 1 \n        var factorial62\
    \ = 1 \n        var factorial63 = 1 \n        var factorial64 = 1 \n        var\
    \ factorial65 = 1 \n        var factorial66 = 1 \n        var factorial67 = 1\
    \ \n        var factorial68 = 1 \n        var factorial69 = 1 \n        var factorial70\
    \ = 1 \n        var factorial71 = 1 \n        var factorial72 = 1 \n        var\
    \ factorial73 = 1 \n        var factorial74 = 1 \n        var factorial75 = 1\
    \ \n        var factorial76 = 1 \n        var factorial77 = 1 \n        var factorial78\
    \ = 1 \n        var factorial79 = 1 \n        var factorial80 = 1 \n        var\
    \ factorial81 = 1 \n        var factorial82 = 1 \n        var factori\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprwjuicrv.scala:94:4 ----------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprwjuicrv.scala:94:5 ---------------------\e[0m\e[0m\n\e[31m94 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        for(i <- 1 to n){\n            factorial\
    \ *= i\n        }\n        return factorial\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp17ou0_g_.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m \
    \  |\e[0m                      Found:    (n : Long)\n\e[31m   |\e[0m         \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorials = mutable.ArrayBuffer.empty[Long]\n        factorials\
    \ += 1\n        factorials += n * factorials(n - 1)\n        factorials += n *\
    \ factorials(n - 2)\n        factorials += n * factorials(n - 3)\n        factorials\
    \ += n * factorials(n - 4)\n        factorials += n * factorials(n - 5)\n    \
    \    factorials += n * factorials(n - 6)\n        factorials += n * factorials(n\
    \ - 7)\n        factorials += n * factorials(n - 8)\n        factorials += n *\
    \ factorials(n - 9)\n        factorials += n * factorials(n - 10)\n        factorials\
    \ += n * factorials(n - 11)\n        factorials += n * factorials(n - 12)\n  \
    \      factorials += n * factorials(n - 13)\n        factorials += n * factorials(n\
    \ - 14)\n        factorials += n * factorials(n - 15)\n        factorials += n\
    \ * factorials(n - 16)\n        factorials += n * factorials(n - 17)\n       \
    \ factorials += n * factorials(n - 18)\n        factorials += n * factorials(n\
    \ - 19)\n        factorials += n * factorials(n - 20)\n        factorials += n\
    \ * factorials(n - 21)\n        factorials += n * factorials(n - 22)\n       \
    \ factorials += n * factorials(n - 23)\n        factorials += n * factorials(n\
    \ - 24)\n        factorials += n * factorials(n - 25)\n        factorials += n\
    \ * factorials(n - 26)\n        factorials += n * factorials(n - 27)\n       \
    \ factorials += n * factorials(n - 28)\n        factorials += n * factorials(n\
    \ - 29)\n        factorials += n * factorials(n - 30)\n        factorials += n\
    \ * factorials(n - 31)\n        factorials += n * factorials(n - 32)\n       \
    \ factorials += n * factorials(n - 33)\n        factorials += n * factorials(n\
    \ - 34)\n        factorials += n * factorials(n - 35)\n        factorials += n\
    \ * factorials(n - 36)\n        factorials += n * factorials(n - 37)\n       \
    \ factorials += n * factorials(n - 38)\n        factorials += n * factorials(n\
    \ - 39)\n        factorials += n * factorials(n - 40)\n        factorials += n\
    \ * factorials(n - 41)\n        factorials += n * factorials(n - 42)\n       \
    \ factorials += n * factorials(n - 43)\n        factorial\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorials\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpi8pf2c9y.scala:56:8 -------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        factorial\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        val factorial = mutable.Stack[Long]()\n        factorial.push(n)\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n        factorial.push(factorial.pop() * factorial.pop())\n\
    \        factorial.push(factorial.pop() * factorial.pop())\n        factorial.push(factorial.pop()\
    \ * factorial.pop())\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2wx09tk.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mfactorial\e[0m = mutable.Stack[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // The function will receive an integer as input and should return the special\n\
    \    // factorial of this integer.\n    def specialFactorial(n : Long) : Long\
    \ = {\n        var factorial = 1\n        var factorial2 = 1\n        var factorial3\
    \ = 1\n        var factorial4 = 1 \n        var factorial5 = 1 \n        var factorial6\
    \ = 1 \n        var factorial7 = 1 \n        var factorial8 = 1 \n        var\
    \ factorial9 = 1 \n        var factorial10 = 1 \n        var factorial11 = 1 \n\
    \        var factorial12 = 1 \n        var factorial13 = 1 \n        var factorial14\
    \ = 1 \n        var factorial15 = 1 \n        var factorial16 = 1 \n        var\
    \ factorial17 = 1 \n        var factorial18 = 1 \n        var factorial19 = 1\
    \ \n        var factorial20 = 1 \n        var factorial21 = 1 \n        var factorial22\
    \ = 1 \n        var factorial23 = 1 \n        var factorial24 = 1 \n        var\
    \ factorial25 = 1 \n        var factorial26 = 1 \n        var factorial27 = 1\
    \ \n        var factorial28 = 1 \n        var factorial29 = 1 \n        var factorial30\
    \ = 1 \n        var factorial31 = 1 \n        var factorial32 = 1 \n        var\
    \ factorial33 = 1 \n        var factorial34 = 1 \n        var factorial35 = 1\
    \ \n        var factorial36 = 1 \n        var factorial37 = 1 \n        var factorial38\
    \ = 1 \n        var factorial39 = 1 \n        var factorial40 = 1 \n        var\
    \ factorial41 = 1 \n        var factorial42 = 1 \n        var factorial43 = 1\
    \ \n        var factorial44 = 1 \n        var factorial45 = 1 \n        var factorial46\
    \ = 1 \n        var factorial47 = 1 \n        var factorial48 = 1 \n        var\
    \ factorial49 = 1 \n        var factorial50 = 1 \n        var factorial51 = 1\
    \ \n        var factorial52 = 1 \n        var factorial53 = 1 \n        var factorial54\
    \ = 1 \n        var factorial55 = 1 \n        var factorial56 = 1 \n        var\
    \ factorial57 = 1 \n        var factorial58 = 1 \n        var factorial59 = 1\
    \ \n        var factorial60 = 1 \n        var factorial61 = 1 \n        var factorial62\
    \ = 1 \n        var factorial63 = 1 \n        var factorial64 = 1 \n        var\
    \ factorial65 = 1 \n        var factorial66 = 1 \n        var factorial67 = 1\
    \ \n        var factorial68 = 1 \n        var factorial69 = 1 \n        var factorial70\
    \ = 1 \n        var factorial71 = 1 \n        var factorial72 = 1 \n        var\
    \ factorial73 = 1 \n        var factorial74 = 1 \n        var factorial75 = 1\
    \ \n        var factorial76 = 1 \n        var factorial77 = 1 \n        var factorial78\
    \ = 1 \n        var factorial79 = 1 \n        var factorial80 = 1 \n        var\
    \ factorial81 = 1 \n        var factorial82 = 1 \n        var factori\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprwjuicrv.scala:94:4 ----------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprwjuicrv.scala:94:5 ---------------------\e[0m\e[0m\n\e[31m94 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979520
