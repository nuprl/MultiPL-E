name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    def\
  \ isBored(S : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        val boredoms = mutable.HashSet[String]()\n        val sentences\
    \ = S.split(\"[.?!]\")\n        for (sentence <- sentences) {\n            if\
    \ (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val words = S.split(\"\\\\W+\")\n        for(word <- words) {\n     \
    \       if(word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        }\n        boredoms.toList.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size + 1", "        val boredoms =\
    \ mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n\
    \        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.HashSet[String]()\n    \
    \    val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) boredoms += sentence\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) boredoms += sentence\n        }\n      \
    \  boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach(sentence => {\n            if\
    \ (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n     \
    \       }\n        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        for (sentence\
    \ <- sentences) {\n            if (sentence.startsWith(\"i\")) {\n           \
    \     boredoms += sentence\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.HashSet[String]()\n    \
    \    val words = S.split(\"\\\\.\")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) boredoms += sentence\n\
    \        }\n        boredoms.length", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            val boredomStart = sentence.indexOf(\"I\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredomWords.foreach(word => boredoms += word)\n        })\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences) {\n\
    \            val boredom = (sentence startsWith \"I\")\n            if (boredom)\
    \ boredoms += sentence\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            if (sentence.startsWith(\"\
    i\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence =>\
    \ {\n            val boredoms = sentence.startsWith(\"I\") match {\n         \
    \       case true => boredoms += sentence\n                case false => boredoms\
    \ += \"I\"\n            }\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    i\")) boredoms += sentence\n        })\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            val boredom = \"I\" in sentence\n\
    \            if (boredom) boredoms += sentence\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            val boredomWord = word.substring(0,1)\n\
    \            if(boredomWord.equals(\"I\")) {\n                boredoms += word\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.ListBuffer[String]()\n        val words = S.split(\" \")\n\
    \        for (word <- words) {\n            if (word.startsWith(\"I\")) {\n  \
    \              boredoms += word\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\s+\")\n        for(word <- words) {\n            val boredomWord = word.startsWith(\"\
    I\")\n            if(boredomWord) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"I\")\n            if\
    \ (boredomStart != -1) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) boredoms += sentence\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"I\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms.add(sentence)\n \
    \           }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) boredoms += sentence\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\W+\")\n        for(word <- words) {\n     \
    \       if(word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach { sentence\
    \ =>\n            val boredomStart = sentence.indexOf(\"I\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        S.split(\"[.?!]\").foreach(s => if (s.startsWith(\"I\")) boredoms +=\
    \ s)\n        boredoms.count(_ == \"I\")", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                boredoms +=\
    \ sentence\n            }\n        }\n        boredoms.count(_ == \"I\")", " \
    \       val boredoms = mutable.ListBuffer[String]()\n        val words = S.split(\"\
    \ \")\n        for (word <- words) {\n            if (word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ boredoms += sentence\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\"\\\\.\")\n      \
    \  for(word <- words) {\n            if(word.startsWith(\"I\")) {\n          \
    \      boredoms += word\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\s+\")\n        for (word <- words) {\n    \
    \        if (word.startsWith(\"I\")) {\n                boredoms += word\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                boredoms +=\
    \ sentence\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.Set[String]()\n        val words = S.split(\" \")\n        for(word\
    \ <- words) {\n            if(word.startsWith(\"I\")) {\n                boredoms\
    \ += word\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            if (sentence.startsWith(\"\
    i\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) boredoms += sentence\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            if\
    \ (sentence.startsWith(\"i\")) boredoms += sentence\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\s+\")\n        for(word <- words) {\n     \
    \       if(word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart >= 0) {\n                boredoms += sentence\n    \
    \        }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\s+\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"\
    )) {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.count", " \
    \       val boredoms = mutable.ListBuffer[String]()\n        val words = S.split(\"\
    \\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ boredoms += sentence\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.ListBuffer[String]()\n        val words = S.split(\"\\\\s+\")\n  \
    \      for(word <- words) {\n            if(word.startsWith(\"I\")) {\n      \
    \          boredoms += word\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.Set[String]()\n        val words = S.split(\"\\\
    \\s+\")\n        for(w <- words) {\n            if(w.startsWith(\"I\")) {\n  \
    \              boredoms += w\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach { sentence =>\n            val boredom = \"\
    I\".equals(sentence.substring(0, 1))\n            if (boredom) boredoms += sentence\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomIndex = sentence.indexOf(\"i\")\n    \
    \        if (boredomIndex > 0) {\n                boredoms += sentence\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"\\\\.\")\n        sentences.foreach(sentence\
    \ => {\n            val boredoms = sentence.split(\"\\\\?\").length\n        \
    \    boredoms += \"?\"\n            boredoms += \"!\"\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredom = \"I\" in sentence\n            if (boredom)\
    \ boredoms += sentence\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val words = S.split(\"\\\\.\")\n      \
    \  for(word <- words) {\n            if(word.startsWith(\"I\")) {\n          \
    \      boredoms += word\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) boredoms += sentence\n        }\n      \
    \  boredoms.size", "        val boredoms = mutable.Set[String]()\n        val\
    \ words = S.split(\"\\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"\
    I\")) {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomIndex = sentence.indexOf(\"i\")\n    \
    \        if (boredomIndex > 0) {\n                boredoms += sentence\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.Set[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            if\
    \ (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                boredoms +=\
    \ sentence\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            val boredomStart = sentence.indexOf(\"\
    i\")\n            if (boredomStart != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach(sentence => {\n            if\
    \ (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n     \
    \       }\n        })\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                boredoms +=\
    \ sentence\n            }\n        }\n        boredoms.count(_ == \"I\")", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.trim).toList\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"I\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\"\\\\s+\")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val boredomStart\
    \ = sentence.indexOf(\"I\")\n            if (boredomStart != -1) {\n         \
    \       boredoms += sentence\n            }\n        })\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\s+\")\n        for(word <- words) {\n     \
    \       if(word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"i\").map(_.toLowerCase)\n\
    \            boredomWords.foreach(word => {\n                if (boredoms.contains(word))\
    \ {\n                    boredoms += word\n                }\n            })\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\.\")\n        words.foreach(w => if (w.startsWith(\"I\")) boredoms += w)\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"I\")\n            if\
    \ (boredomStart != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            if\
    \ (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"I\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.HashSet[String]()\n    \
    \    val words = S.split(\"\\\\s+\")\n        words.foreach(w => if (w.startsWith(\"\
    I\")) boredoms += w)\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val words = S.split(\"\\\\s+\")\n        for(word <- words) {\n     \
    \       if(word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        }\n        boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach { sentence\
    \ =>\n            val boredomStart = sentence.indexOf(\"I\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.Set[String]()\n      \
    \  val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomIndex = sentence.indexOf(\"i\")\n            if (boredomIndex\
    \ >= 0) {\n                boredoms += sentence\n            }\n        }\n  \
    \      boredoms.size", "        val boredoms = mutable.HashSet[String]()\n   \
    \     val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart != -1) {\n                boredoms.add(sentence.substring(0,boredomStart))\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\s+\")\n        for(word <- words) {\n     \
    \       if(word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.Set[String]()\n        val words = S.split(\"\\\
    \\s+\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    ).map(_.toLowerCase)\n        sentences.foreach { sentence =>\n            if\
    \ (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart >= 0) {\n                boredoms += sentence\n    \
    \        }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"i\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val words = S.split(\" \")\n \
    \       for(word <- words) {\n            if(word.startsWith(\"I\")) {\n     \
    \           boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredom = \"I\" in sentence\n            if (boredom) boredoms += sentence\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredom = \"I\".equals(sentence(0))\n       \
    \     boredoms += sentence if boredom\n        }\n        boredoms.size", "  \
    \      val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) boredoms += sentence\n\
    \        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach { sentence =>\n            val boredom = sentence.startsWith(\"\
    I\")\n            if (boredom) boredoms += sentence\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.count", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val boredomStart\
    \ = sentence.indexOf(\"I\")\n            if (boredomStart != -1) {\n         \
    \       boredoms += sentence\n            }\n        })\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val words = S.split(\"\\\\\
    .\")\n        words.foreach(w => if (w.startsWith(\"I\")) boredoms += w)\n   \
    \     boredoms.size", "        val boredoms = mutable.Set[String]()\n        val\
    \ sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"I\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     val boredomStart = sentence.indexOf(\"i\")\n            if (boredomStart\
    \ != -1) {\n                boredoms += sentence\n            }\n        }\n \
    \       boredoms.size", "        val boredoms = mutable.HashSet[String]()\n  \
    \      val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val boredomWords = sentence.split(\"I\")\n            boredomWords.foreach(boredomWord\
    \ => {\n                boredoms += boredomWord\n            })\n        })\n\
    \        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n \
    \       val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n \
    \       val words = S.split(\"\\\\W+\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\s+\")\n        for(word <- words) {\n     \
    \       if(word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\s+\")\n        for(word <- words) {\n     \
    \       if(word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val boredom = sentence.startsWith(\"\
    I\")\n            if (boredom) boredoms += sentence\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        })\n   \
    \     boredoms.size", "        val boredoms = mutable.Set[String]()\n        val\
    \ sentences = S.split(\"\\\\.|\\\\?|\\\\!\")\n        for (sentence <- sentences)\
    \ {\n            if (sentence.startsWith(\"I\")) {\n                boredoms +=\
    \ sentence\n            }\n        }\n        boredoms.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\")\n  \
    \      sentences.foreach(sentence => {\n            val boredomWords = sentence.split(\"\
    I\")\n            boredomWords.foreach(boredomWord => {\n                boredoms.add(boredomWord)\n\
    \            })\n        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"I\")\n            val\
    \ boredomEnd = sentence.indexOf(\"I\", boredomStart + 1)\n            if (boredomStart\
    \ != -1 && boredomEnd != -1) {\n                boredoms += sentence\n       \
    \     }\n        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"I\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val words = S.split(\"\\\\s+\")\n        for(word <- words) {\n     \
    \       if(word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        }\n        boredoms.toList.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"I\")\n            if\
    \ (boredomStart != -1) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.ListBuffer[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.toList.size", "        val boredoms\
    \ = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n\
    \        sentences.foreach { sentence =>\n            if (sentence.startsWith(\"\
    i\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.HashSet[String]()\n     \
    \   val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\s+\")\n        for(w <- words) {\n            if(w.startsWith(\"I\")) {\n\
    \                boredoms += w\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val words = S.split(\"\\\\s+\")\n        for(word <- words) {\n     \
    \       if(word.startsWith(\"I\")) {\n                boredoms += word\n     \
    \       }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms += sentence\n   \
    \         }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val words = S.split(\" \")\n        for(word <- words) {\n          \
    \  if(word.startsWith(\"I\")) {\n                boredoms += word\n          \
    \  }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach { sentence\
    \ =>\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        }\n        boredoms.size", "        val\
    \ boredoms = mutable.Set[String]()\n        val words = S.split(\"\\\\s+\")\n\
    \        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n    \
    \            boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence\
    \ => {\n            val boredomStart = sentence.indexOf(\"i\")\n            if\
    \ (boredomStart != -1) {\n                boredoms += sentence\n            }\n\
    \        })\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.trim).toList\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"I\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.count", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach(sentence => {\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        })\n        boredoms.size", "        val boredoms = mutable.ListBuffer[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.toList.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            val boredomStart = sentence.indexOf(\"i\")\n    \
    \        if (boredomStart != -1) {\n                boredoms.add(sentence.substring(boredomStart))\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            val words = sentence.split(\"\\\\s+\")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\s+\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"\
    )) {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \ \")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val words = S.split(\"\\\\\
    s+\")\n        for(word <- words) {\n            if(word.startsWith(\"I\")) {\n\
    \                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.Set[String]()\n        val sentences = S.split(\"\
    [.?!]\")\n        sentences.foreach(sentence => {\n            val boredoms =\
    \ sentence.startsWith(\"I\")\n            boredoms += sentence\n        })\n \
    \       boredoms.size", "        val boredoms = mutable.Set[String]()\n      \
    \  val sentences = S.split(\"[.?!]\").map(_.toLowerCase)\n        sentences.foreach\
    \ { sentence =>\n            if (sentence.startsWith(\"i\")) {\n             \
    \   boredoms += sentence\n            }\n        }\n        boredoms.size", " \
    \       val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size", "        val boredoms = mutable.Set[String]()\n\
    \        val words = S.split(\"\\\\.\")\n        for(word <- words) {\n      \
    \      if(word.startsWith(\"I\")) {\n                boredoms += word\n      \
    \      }\n        }\n        boredoms.size", "        val boredoms = mutable.HashSet[String]()\n\
    \        val sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence\
    \ => {\n            if (sentence.startsWith(\"I\")) {\n                boredoms\
    \ += sentence\n            }\n        })\n        boredoms.size", "        val\
    \ boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"[.?!]\"\
    )\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += sentence\n            }\n        }\n    \
    \    boredoms.size", "        val boredoms = mutable.Set[String]()\n        val\
    \ sentences = S.split(\"[.?!]\")\n        sentences.foreach(sentence => {\n  \
    \          val words = sentence.split(\"\\\\s+\")\n            words.foreach(word\
    \ => {\n                if (word.startsWith(\"I\")) {\n                    boredoms\
    \ += word\n                }\n            })\n        })\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val words = S.split(\"\
    \\\\.\")\n        for(word <- words) {\n            if(word.startsWith(\"I\"))\
    \ {\n                boredoms += word\n            }\n        }\n        boredoms.size",
  "        val boredoms = mutable.HashSet[String]()\n        val sentences = S.split(\"\
    [.?!]\").map(_.toLowerCase)\n        sentences.foreach { sentence =>\n       \
    \     if (sentence.startsWith(\"i\")) {\n                boredoms += sentence\n\
    \            }\n        }\n        boredoms.size"]
stop_tokens:
- "\n    }\n"
